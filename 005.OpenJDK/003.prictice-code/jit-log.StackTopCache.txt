<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='55833' time_ms='1744129440533'>
<vm_version>
<name>
OpenJDK 64-Bit Server VM
</name>
<release>
25.71-b00-debug
</release>
<info>
OpenJDK 64-Bit Server VM (25.71-b00-debug) for linux-amd64 JRE (1.8.0-internal-root_2025_04_08_07_49-b00), built on Apr  8 2025 07:53:08 by &quot;root&quot; with gcc 4.7.4
</info>
</vm_version>
<vm_arguments>
<args>
-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+PrintAssembly -XX:+LogCompilation -XX:LogFile=jit0408.log 
</args>
<command>
StackTopCache
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.name=Java Virtual Machine Specification
java.vm.version=25.71-b00-debug
java.vm.name=OpenJDK 64-Bit Server VM
java.vm.info=mixed mode, sharing
java.ext.dirs=/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/ext:/usr/java/packages/lib/ext
java.endorsed.dirs=/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/endorsed
sun.boot.library.path=/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64
java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
java.home=/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk
java.class.path=.
sun.boot.class.path=/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/resources.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/rt.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/sunrsasign.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/jsse.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/jce.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/charsets.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/jfr.jar:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes
java.vm.specification.vendor=Oracle Corporation
java.vm.specification.version=1.8
java.vm.vendor=Oracle Corporation
sun.java.command=StackTopCache
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<writer thread='140737327351552'/>
[Opened /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/jce.jar]
[Path /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Object from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.Serializable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Comparable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.CharSequence from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.String from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.AnnotatedElement from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.GenericDeclaration from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Type from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Cloneable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.System from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Throwable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Error from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ThreadDeath from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Exception from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.RuntimeException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.SecurityManager from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.ProtectionDomain from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.AccessControlContext from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.SecureClassLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ReflectiveOperationException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassNotFoundException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.LinkageError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.NoClassDefFoundError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassCastException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ArrayStoreException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.VirtualMachineError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.OutOfMemoryError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StackOverflowError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.IllegalMonitorStateException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.Reference from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.SoftReference from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.WeakReference from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.FinalReference from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.PhantomReference from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Cleaner from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.Finalizer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.ReferenceQueue from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Runnable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Thread from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Thread$UncaughtExceptionHandler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ThreadGroup from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Map from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Dictionary from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Hashtable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Properties from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.AccessibleObject from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Member from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Field from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Parameter from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Executable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Method from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Constructor from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.MagicAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.MethodAccessor from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.MethodAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.ConstructorAccessor from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.ConstructorAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.DelegatingClassLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.ConstantPool from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.FieldAccessor from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.FieldAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.UnsafeFieldAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.UnsafeStaticFieldAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.annotation.Annotation from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.CallerSensitive from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandle from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.DirectMethodHandle from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MemberName from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandleNatives from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.LambdaForm from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodType from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.BootstrapMethodError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.CallSite from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.ConstantCallSite from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MutableCallSite from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.VolatileCallSite from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Appendable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.AbstractStringBuilder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StringBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StringBuilder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Unsafe from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.AutoCloseable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.Closeable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.InputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.ByteArrayInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.File from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URLClassLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URL from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.jar.Manifest from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Launcher from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Launcher$AppClassLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Launcher$ExtClassLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.CodeSource from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StackTraceElement from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.Buffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Boolean from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Character from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Number from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Float from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Double from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Byte from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Short from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Integer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Long from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.NullPointerException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ArithmeticException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.ObjectStreamField from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Comparator from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.String$CaseInsensitiveComparator from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.Guard from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.Permission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.BasicPermission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.RuntimePermission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.AccessController from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.ReflectPermission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.PrivilegedAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.ReflectionFactory$GetReflectionFactoryAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.cert.Certificate from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Iterable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.List from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.RandomAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.AbstractCollection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.AbstractList from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Vector from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Stack from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.ReflectionFactory from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.Reference$Lock from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.Reference$ReferenceHandler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.InterruptedException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.ArrayList from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Set from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.AbstractSet from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$EmptySet from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$EmptyList from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.AbstractMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$EmptyMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$UnmodifiableCollection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$UnmodifiableList from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$UnmodifiableRandomAccessList from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.ReferenceQueue$Null from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.ReferenceQueue$Lock from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaLangRefAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.Reference$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.SharedSecrets from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.IncompatibleClassChangeError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.NoSuchMethodError from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.Reflection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.HashMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Map$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.HashMap$Node from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.VM from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Hashtable$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Math from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ref.Finalizer$FinalizerThread from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.Charset from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.spi.CharsetProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.FastCharsetProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.StandardCharsets from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.PreHashedMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.StandardCharsets$Aliases from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.StandardCharsets$Classes from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.StandardCharsets$Cache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ThreadLocal from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.atomic.AtomicInteger from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class$3 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class$ReflectionData from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class$Atomic from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.generics.repository.AbstractRepository from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.generics.repository.GenericDeclRepository from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.generics.repository.ClassRepository from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class$AnnotationData from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.annotation.AnnotationType from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.WeakHashMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassValue$ClassValueMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.Modifier from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.LangReflectAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.reflect.ReflectAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Arrays from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.HistoricallyNamedCharset from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.Unicode from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.UTF_8 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.ReflectionFactory$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.NativeConstructorAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.DelegatingConstructorAccessorImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StringCoding from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ThreadLocal$ThreadLocalMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ThreadLocal$ThreadLocalMap$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded jdk.internal.misc.TerminatingThreadLocal from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StringCoding$StringDecoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.ArrayDecoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CharsetDecoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.UTF_8$Decoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CodingErrorAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Hashtable$EntrySet from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$SynchronizedCollection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$SynchronizedSet from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Objects from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Enumeration from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Iterator from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Hashtable$Enumerator from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Runtime from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded jdk.internal.util.StaticProperty from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Version from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FileInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FileDescriptor from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaIOFileDescriptorAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FileDescriptor$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.Flushable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.OutputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FileOutputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FilterInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.BufferedInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.atomic.AtomicReferenceFieldUpdater from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.PrivilegedExceptionAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.reflect.misc.ReflectUtil from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FilterOutputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.PrintStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.BufferedOutputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.Writer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.OutputStreamWriter from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.StreamEncoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.security.action.GetPropertyAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.ArrayEncoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CharsetEncoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.UTF_8$Encoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.ByteBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.HeapByteBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.Bits from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.ByteOrder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.atomic.AtomicLong from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaNioAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.Bits$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.BufferedWriter from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.DefaultFileSystem from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FileSystem from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.UnixFileSystem from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.ExpiringCache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.LinkedHashMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.ExpiringCache$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Enum from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.File$PathStatus from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.file.Watchable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.file.Path from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.StringCoding$StringEncoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassLoader$3 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.ExpiringCache$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.LinkedHashMap$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassLoader$NativeLibrary from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Terminator from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.SignalHandler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Terminator$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Signal from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.NativeSignalHandler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Integer$IntegerCache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.OSEnvironment from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaLangAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.System$2 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.IllegalArgumentException from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Compiler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Compiler$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URLStreamHandlerFactory from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Launcher$Factory from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.security.util.Debug from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassLoader$ParallelLoaders from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.WeakHashMap$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Collections$SetFromMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.WeakHashMap$KeySet from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaNetAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URLClassLoader$7 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Launcher$ExtClassLoader$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.StringTokenizer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.MetaIndex from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.www.ParseUtil from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.BitSet from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Locale from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.locale.LocaleObjectCache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Locale$Cache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.locks.Lock from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.locks.ReentrantLock from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$Segment from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$Node from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$CounterCell from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$CollectionView from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$KeySetView from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$ValuesView from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.concurrent.ConcurrentHashMap$EntrySetView from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.locale.BaseLocale from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.locale.BaseLocale$Cache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.locale.BaseLocale$Key from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.locale.LocaleObjectCache$CacheEntry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Locale$LocaleKey from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.util.locale.LocaleUtils from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.CharacterData from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.CharacterDataLatin1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.Parts from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URLStreamHandler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.www.protocol.file.Handler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.util.IPAddressUtil from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.HashMap$TreeNode from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaSecurityAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.ProtectionDomain$JavaSecurityAccessImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaSecurityProtectionDomainAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.ProtectionDomain$2 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.ProtectionDomain$Key from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.Principal from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.URLClassPath from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.www.protocol.jar.Handler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Launcher$AppClassLoader$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.SystemClassLoaderAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded jdk.jfr.internal.EventWriter from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736956679936'/>
<thread_logfile thread='140736956679936' filename='/tmp/hs_c140736956679936_pid55833.log'/>
<writer thread='140737327351552'/>
[Loaded java.lang.invoke.MethodHandleImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandleImpl$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.function.Function from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandleImpl$2 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandleImpl$3 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassValue from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandleImpl$4 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassValue$Entry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736955627264'/>
<thread_logfile thread='140736955627264' filename='/tmp/hs_c140736955627264_pid55833.log'/>
<writer thread='140737327351552'/>
[Loaded java.lang.ClassValue$Identity from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.ClassValue$Version from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MemberName$Factory from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.invoke.MethodHandleStatics from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
<thread_logfile thread='140736954574592' filename='/tmp/hs_c140736954574592_pid55833.log'/>
<writer thread='140737327351552'/>
[Loaded java.lang.invoke.MethodHandleStatics$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='1' method='java/lang/String hashCode ()I' bytes='55' count='326' backedge_count='4096' iicount='326' level='3' stamp='116.994' comment='tiered' hot_count='326'/>
<blob name='MethodHandlesAdapterBlob' size='182000'>
<sect index='1' size='182000' free='177714'/>
</blob>
<writer thread='140736954574592'/>
Loaded disassembler from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/lib/amd64/hsdis-amd64.so
Decoding compiled method 0x00007fffe122b7d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe122b980 Code size: 0x000003b8
[Disassembling for mach=&apos;amd64&apos;]
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B7 [0, 0]

  0x00007fffe122b980: mov     0x8(%rsi),%r10d
  0x00007fffe122b984: shl     $0x3,%r10
  0x00007fffe122b988: cmp     %rax,%r10
  0x00007fffe122b98b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe122b991: nop
  0x00007fffe122b992: nop
  0x00007fffe122b993: nop
  0x00007fffe122b994: nop
  0x00007fffe122b995: nop
  0x00007fffe122b996: nop
  0x00007fffe122b997: nop
  0x00007fffe122b998: nop
  0x00007fffe122b999: nop
  0x00007fffe122b99a: nop
  0x00007fffe122b99b: nop
  0x00007fffe122b99c: nop
  0x00007fffe122b99d: nop
  0x00007fffe122b99e: nop
  0x00007fffe122b99f: nop
[Verified Entry Point]
  0x00007fffe122b9a0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe122b9a7: push    %rbp
  0x00007fffe122b9a8: sub     $0x30,%rsp
  0x00007fffe122b9ac: movabs  $0x7ffff4ccf710,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122b9b6: mov     0x104(%rax),%edi
  0x00007fffe122b9bc: add     $0x8,%edi
  0x00007fffe122b9bf: mov     %edi,0x104(%rax)
  0x00007fffe122b9c5: movabs  $0x7ffff4aa8278,%rax  ;   {metadata({method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122b9cf: and     $0x1ff8,%edi
  0x00007fffe122b9d5: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0065e40]
  0x00007fffe122b9d8: je      0x7fffe122bb99    ;*aload_0
                                                ; - java.lang.String::hashCode@0 (line 1465)

  ;;  block B8 [0, 0]

  ;;  block B0 [0, 6]

  0x00007fffe122b9de: mov     0x10(%rsi),%eax   ;*getfield hash
                                                ; - java.lang.String::hashCode@1 (line 1465)

  0x00007fffe122b9e1: cmp     $0x0,%eax
  0x00007fffe122b9e4: movabs  $0x7ffff4ccf710,%rdi  ;   {metadata(method data for {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122b9ee: movabs  $0x130,%rbx
  0x00007fffe122b9f8: jne     0x7fffe122ba08
  0x00007fffe122b9fe: movabs  $0x140,%rbx
  0x00007fffe122ba08: mov     (%rdi,%rbx),%rdx
  0x00007fffe122ba0c: lea     0x1(%rdx),%rdx
  0x00007fffe122ba10: mov     %rdx,(%rdi,%rbx)
  ;;   46 branch [NE] [B2] 
  0x00007fffe122ba14: jne     0x7fffe122bb8d    ;*ifne
                                                ; - java.lang.String::hashCode@6 (line 1466)

  ;;  block B1 [9, 14]

  0x00007fffe122ba1a: mov     0xc(%rsi),%edi
  0x00007fffe122ba1d: push    %r10
  0x00007fffe122ba1f: cmp     0x16b2e1ba(%rip),%r12  ;   {external_word}
  0x00007fffe122ba26: je      0x7fffe122baa3
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe122ba2c: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122ba31: sub     $0x80,%rsp
  0x00007fffe122ba38: mov     %rax,0x78(%rsp)
  0x00007fffe122ba3d: mov     %rcx,0x70(%rsp)
  0x00007fffe122ba42: mov     %rdx,0x68(%rsp)
  0x00007fffe122ba47: mov     %rbx,0x60(%rsp)
  0x00007fffe122ba4c: mov     %rbp,0x50(%rsp)
  0x00007fffe122ba51: mov     %rsi,0x48(%rsp)
  0x00007fffe122ba56: mov     %rdi,0x40(%rsp)
  0x00007fffe122ba5b: mov     %r8,0x38(%rsp)
  0x00007fffe122ba60: mov     %r9,0x30(%rsp)
  0x00007fffe122ba65: mov     %r10,0x28(%rsp)
  0x00007fffe122ba6a: mov     %r11,0x20(%rsp)
  0x00007fffe122ba6f: mov     %r12,0x18(%rsp)
  0x00007fffe122ba74: mov     %r13,0x10(%rsp)
  0x00007fffe122ba79: mov     %r14,0x8(%rsp)
  0x00007fffe122ba7e: mov     %r15,(%rsp)
  0x00007fffe122ba82: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe122ba8c: movabs  $0x7fffe122ba2c,%rsi  ;   {internal_word}
  0x00007fffe122ba96: mov     %rsp,%rdx
  0x00007fffe122ba99: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122ba9d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122baa2: hlt
  0x00007fffe122baa3: pop     %r10              ;*getfield value
                                                ; - java.lang.String::hashCode@10 (line 1466)

  0x00007fffe122baa5: mov     0xc(%rdi),%ebx    ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1466)
                                                ; implicit exception: dispatches to 0x00007fffe122bbb0
  0x00007fffe122baa8: cmp     $0x0,%ebx
  0x00007fffe122baab: movabs  $0x7ffff4ccf710,%rdx  ;   {metadata(method data for {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122bab5: movabs  $0x150,%rcx
  0x00007fffe122babf: jle     0x7fffe122bacf
  0x00007fffe122bac5: movabs  $0x160,%rcx
  0x00007fffe122bacf: mov     (%rdx,%rcx),%r8
  0x00007fffe122bad3: lea     0x1(%r8),%r8
  0x00007fffe122bad7: mov     %r8,(%rdx,%rcx)
  ;;   74 branch [LE] [B2] 
  0x00007fffe122badb: jle     0x7fffe122bb8d    ;*ifle
                                                ; - java.lang.String::hashCode@14 (line 1466)

  ;;  block B3 [17, 24]

  0x00007fffe122bae1: mov     $0x0,%edx
  ;;   90 branch [AL] [B4] 
  0x00007fffe122bae6: jmpq    0x7fffe122bb52    ;*iload_3
                                                ; - java.lang.String::hashCode@24 (line 1469)

  0x00007fffe122baeb: nop
  0x00007fffe122baec: nop
  0x00007fffe122baed: nop
  0x00007fffe122baee: nop
  0x00007fffe122baef: nop
  ;;  block B5 [33, 45]

  0x00007fffe122baf0: movsxd  %edx,%rcx
  0x00007fffe122baf3: movzwl  0x10(%rdi,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::hashCode@39 (line 1470)

  0x00007fffe122baf8: mov     %rax,%r8
  0x00007fffe122bafb: shl     $0x5,%eax
  0x00007fffe122bafe: sub     %r8d,%eax
  0x00007fffe122bb01: add     %ecx,%eax
  0x00007fffe122bb03: incl    %edx
  0x00007fffe122bb05: movabs  $0x7ffff4ccf710,%rcx  ;   {metadata(method data for {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122bb0f: mov     0x108(%rcx),%r8d
  0x00007fffe122bb16: add     $0x8,%r8d
  0x00007fffe122bb1a: mov     %r8d,0x108(%rcx)
  0x00007fffe122bb21: movabs  $0x7ffff4aa8278,%rcx  ;   {metadata({method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122bb2b: and     $0xfff8,%r8d
  0x00007fffe122bb32: cmp     $0x0,%r8d
  ;;  146 branch [EQ] [CounterOverflowStub: 0x00007fffb002d010]
  0x00007fffe122bb36: je      0x7fffe122bc2c    ; OopMap{rdi=Oop rsi=Oop off=444}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1469)

  0x00007fffe122bb3c: test    %eax,0x16dcf5be(%rip)  ;   {poll}
  0x00007fffe122bb42: movabs  $0x7ffff4ccf710,%rcx  ;   {metadata(method data for {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122bb4c: incl    0x190(%rcx)       ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1469)

  ;;  block B4 [24, 30]

  0x00007fffe122bb52: cmp     %ebx,%edx
  0x00007fffe122bb54: movabs  $0x7ffff4ccf710,%rcx  ;   {metadata(method data for {method} {0x00007ffff4aa8278} &apos;hashCode&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122bb5e: movabs  $0x170,%r8
  0x00007fffe122bb68: jnl     0x7fffe122bb78
  0x00007fffe122bb6e: movabs  $0x180,%r8
  0x00007fffe122bb78: mov     (%rcx,%r8),%r9
  0x00007fffe122bb7c: lea     0x1(%r9),%r9
  0x00007fffe122bb80: mov     %r9,(%rcx,%r8)
  ;;  106 branch [LT] [B5] 
  0x00007fffe122bb84: jl      0x7fffe122baf0    ;*if_icmpge
                                                ; - java.lang.String::hashCode@30 (line 1469)

  ;;  block B6 [48, 53]

  0x00007fffe122bb8a: mov     %eax,0x10(%rsi)   ;*putfield hash
                                                ; - java.lang.String::hashCode@50 (line 1472)

  ;;  block B2 [53, 54]

  0x00007fffe122bb8d: add     $0x30,%rsp
  0x00007fffe122bb91: pop     %rbp
  0x00007fffe122bb92: test    %eax,0x16dcf568(%rip)  ;   {poll_return}
  0x00007fffe122bb98: retq
  ;; CounterOverflowStub slow case
  0x00007fffe122bb99: mov     %rax,0x8(%rsp)
  0x00007fffe122bb9e: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe122bba6: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=555}
                                                ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1465)
                                                ;   {runtime_call}
  0x00007fffe122bbab: jmpq    0x7fffe122b9de
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122bbb0: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdi=Oop off=565}
                                                ;*arraylength
                                                ; - java.lang.String::hashCode@13 (line 1466)
                                                ;   {runtime_call}
  0x00007fffe122bbb5: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122bbba: sub     $0x80,%rsp
  0x00007fffe122bbc1: mov     %rax,0x78(%rsp)
  0x00007fffe122bbc6: mov     %rcx,0x70(%rsp)
  0x00007fffe122bbcb: mov     %rdx,0x68(%rsp)
  0x00007fffe122bbd0: mov     %rbx,0x60(%rsp)
  0x00007fffe122bbd5: mov     %rbp,0x50(%rsp)
  0x00007fffe122bbda: mov     %rsi,0x48(%rsp)
  0x00007fffe122bbdf: mov     %rdi,0x40(%rsp)
  0x00007fffe122bbe4: mov     %r8,0x38(%rsp)
  0x00007fffe122bbe9: mov     %r9,0x30(%rsp)
  0x00007fffe122bbee: mov     %r10,0x28(%rsp)
  0x00007fffe122bbf3: mov     %r11,0x20(%rsp)
  0x00007fffe122bbf8: mov     %r12,0x18(%rsp)
  0x00007fffe122bbfd: mov     %r13,0x10(%rsp)
  0x00007fffe122bc02: mov     %r14,0x8(%rsp)
  0x00007fffe122bc07: mov     %r15,(%rsp)
  0x00007fffe122bc0b: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122bc15: movabs  $0x7fffe122bbb5,%rsi  ;   {internal_word}
  0x00007fffe122bc1f: mov     %rsp,%rdx
  0x00007fffe122bc22: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122bc26: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122bc2b: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe122bc2c: mov     %rcx,0x8(%rsp)
  0x00007fffe122bc31: movq    $0x2d,(%rsp)
  0x00007fffe122bc39: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop rsi=Oop off=702}
                                                ;*goto
                                                ; - java.lang.String::hashCode@45 (line 1469)
                                                ;   {runtime_call}
  0x00007fffe122bc3e: jmpq    0x7fffe122bb3c
  0x00007fffe122bc43: nop
  0x00007fffe122bc44: nop
  ;; Unwind handler
  0x00007fffe122bc45: mov     0x348(%r15),%rax
  0x00007fffe122bc4c: movabs  $0x0,%r10
  0x00007fffe122bc56: mov     %r10,0x348(%r15)
  0x00007fffe122bc5d: movabs  $0x0,%r10
  0x00007fffe122bc67: mov     %r10,0x350(%r15)
  0x00007fffe122bc6e: add     $0x30,%rsp
  0x00007fffe122bc72: pop     %rbp
  0x00007fffe122bc73: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe122bc78: hlt
  0x00007fffe122bc79: hlt
  0x00007fffe122bc7a: hlt
  0x00007fffe122bc7b: hlt
  0x00007fffe122bc7c: hlt
  0x00007fffe122bc7d: hlt
  0x00007fffe122bc7e: hlt
  0x00007fffe122bc7f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe122bc80: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe122bc8a: movabs  $0xdead,%rcx
  0x00007fffe122bc94: movabs  $0xdead,%rsi
  0x00007fffe122bc9e: movabs  $0xdead,%rdi
  0x00007fffe122bca8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe122bcad: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122bcb2: sub     $0x80,%rsp
  0x00007fffe122bcb9: mov     %rax,0x78(%rsp)
  0x00007fffe122bcbe: mov     %rcx,0x70(%rsp)
  0x00007fffe122bcc3: mov     %rdx,0x68(%rsp)
  0x00007fffe122bcc8: mov     %rbx,0x60(%rsp)
  0x00007fffe122bccd: mov     %rbp,0x50(%rsp)
  0x00007fffe122bcd2: mov     %rsi,0x48(%rsp)
  0x00007fffe122bcd7: mov     %rdi,0x40(%rsp)
  0x00007fffe122bcdc: mov     %r8,0x38(%rsp)
  0x00007fffe122bce1: mov     %r9,0x30(%rsp)
  0x00007fffe122bce6: mov     %r10,0x28(%rsp)
  0x00007fffe122bceb: mov     %r11,0x20(%rsp)
  0x00007fffe122bcf0: mov     %r12,0x18(%rsp)
  0x00007fffe122bcf5: mov     %r13,0x10(%rsp)
  0x00007fffe122bcfa: mov     %r14,0x8(%rsp)
  0x00007fffe122bcff: mov     %r15,(%rsp)
  0x00007fffe122bd03: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122bd0d: movabs  $0x7fffe122bcad,%rsi  ;   {internal_word}
  0x00007fffe122bd17: mov     %rsp,%rdx
  0x00007fffe122bd1a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122bd1e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122bd23: hlt
[Deopt Handler Code]
  0x00007fffe122bd24: movabs  $0x7fffe122bd24,%r10  ;   {section_word}
  0x00007fffe122bd2e: push    %r10
  0x00007fffe122bd30: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe122bd35: hlt
  0x00007fffe122bd36: hlt
  0x00007fffe122bd37: hlt
<nmethod compile_id='1' compiler='C1' level='3' entry='0x00007fffe122b980' size='1808' address='0x00007fffe122b7d0' relocation_offset='304' insts_offset='432' stub_offset='1200' scopes_data_offset='1392' scopes_pcs_offset='1512' dependencies_offset='1784' nul_chk_table_offset='1792' method='java/lang/String hashCode ()I' bytes='55' count='329' backedge_count='4215' iicount='329' stamp='117.245'/>
<writer thread='140737327351552'/>
<task_queued compile_id='2' method='java/lang/String equals (Ljava/lang/Object;)Z' bytes='81' count='226' backedge_count='1024' iicount='226' level='3' stamp='117.245' comment='tiered' hot_count='226'/>
[Loaded sun.launcher.LauncherHelper from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URLClassLoader$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.util.URLUtil from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.URLClassPath$3 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.URLClassPath$Loader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.URLClassPath$JarLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe122c590:
Code:
Argument 0 is unknown.RIP: 0x7fffe122c7c0 Code size: 0x00000958
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/Object&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B11 [0, 0]

  0x00007fffe122c7c0: mov     0x8(%rsi),%r10d
  0x00007fffe122c7c4: shl     $0x3,%r10
  0x00007fffe122c7c8: cmp     %rax,%r10
  0x00007fffe122c7cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe122c7d1: nop
  0x00007fffe122c7d2: nop
  0x00007fffe122c7d3: nop
  0x00007fffe122c7d4: nop
  0x00007fffe122c7d5: nop
  0x00007fffe122c7d6: nop
  0x00007fffe122c7d7: nop
  0x00007fffe122c7d8: nop
  0x00007fffe122c7d9: nop
  0x00007fffe122c7da: nop
  0x00007fffe122c7db: nop
  0x00007fffe122c7dc: nop
  0x00007fffe122c7dd: nop
  0x00007fffe122c7de: nop
  0x00007fffe122c7df: nop
[Verified Entry Point]
  0x00007fffe122c7e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe122c7e7: push    %rbp
  0x00007fffe122c7e8: sub     $0x30,%rsp
  0x00007fffe122c7ec: movabs  $0x7ffff4cd14b8,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c7f6: mov     0x104(%rax),%edi
  0x00007fffe122c7fc: add     $0x8,%edi
  0x00007fffe122c7ff: mov     %edi,0x104(%rax)
  0x00007fffe122c805: movabs  $0x7ffff4aa7488,%rax  ;   {metadata({method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c80f: and     $0x1ff8,%edi
  0x00007fffe122c815: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb0061560]
  0x00007fffe122c818: je      0x7fffe122ccee    ;*aload_0
                                                ; - java.lang.String::equals@0 (line 976)

  ;;  block B12 [0, 0]

  ;;  block B0 [0, 2]

  0x00007fffe122c81e: cmp     %rdx,%rsi
  0x00007fffe122c821: movabs  $0x7ffff4cd14b8,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c82b: movabs  $0x130,%rdi
  0x00007fffe122c835: jne     0x7fffe122c845
  0x00007fffe122c83b: movabs  $0x140,%rdi
  0x00007fffe122c845: mov     (%rax,%rdi),%rbx
  0x00007fffe122c849: lea     0x1(%rbx),%rbx
  0x00007fffe122c84d: mov     %rbx,(%rax,%rdi)
  ;;   46 branch [EQ] [B1] 
  0x00007fffe122c851: je      0x7fffe122ccdd    ;*if_acmpne
                                                ; - java.lang.String::equals@2 (line 976)

  ;;  block B2 [7, 11]

  0x00007fffe122c857: cmp     $0x0,%rdx
  0x00007fffe122c85b: jne     0x7fffe122c876
  0x00007fffe122c85d: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c867: orl     $0x100,0x148(%rbx)
  0x00007fffe122c871: jmpq    0x7fffe122c936
  0x00007fffe122c876: movabs  $0x100001798,%rcx  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe122c880: mov     0x8(%rdx),%edi
  0x00007fffe122c883: shl     $0x3,%rdi
  0x00007fffe122c887: cmp     %rdi,%rcx
  0x00007fffe122c88a: jne     0x7fffe122c91a
  0x00007fffe122c890: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c89a: mov     0x8(%rdx),%ecx
  0x00007fffe122c89d: shl     $0x3,%rcx
  0x00007fffe122c8a1: cmp     0x158(%rbx),%rcx
  0x00007fffe122c8a8: jne     0x7fffe122c8b7
  0x00007fffe122c8aa: addq    $0x1,0x160(%rbx)
  0x00007fffe122c8b2: jmpq    0x7fffe122c93b
  0x00007fffe122c8b7: cmp     0x168(%rbx),%rcx
  0x00007fffe122c8be: jne     0x7fffe122c8cd
  0x00007fffe122c8c0: addq    $0x1,0x170(%rbx)
  0x00007fffe122c8c8: jmpq    0x7fffe122c93b
  0x00007fffe122c8cd: cmpq    $0x0,0x158(%rbx)
  0x00007fffe122c8d8: jne     0x7fffe122c8f1
  0x00007fffe122c8da: mov     %rcx,0x158(%rbx)
  0x00007fffe122c8e1: movq    $0x1,0x160(%rbx)
  0x00007fffe122c8ec: jmpq    0x7fffe122c93b
  0x00007fffe122c8f1: cmpq    $0x0,0x168(%rbx)
  0x00007fffe122c8fc: jne     0x7fffe122c915
  0x00007fffe122c8fe: mov     %rcx,0x168(%rbx)
  0x00007fffe122c905: movq    $0x1,0x170(%rbx)
  0x00007fffe122c910: jmpq    0x7fffe122c93b
  0x00007fffe122c915: jmpq    0x7fffe122c93b
  0x00007fffe122c91a: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c924: subq    $0x1,0x150(%rbx)
  0x00007fffe122c92c: jmpq    0x7fffe122c936
  0x00007fffe122c931: jmpq    0x7fffe122c93b
  0x00007fffe122c936: xor     %rax,%rax
  0x00007fffe122c939: jmp     0x7fffe122c945
  0x00007fffe122c93b: movabs  $0x1,%rax         ;*instanceof
                                                ; - java.lang.String::equals@8 (line 979)

  0x00007fffe122c945: cmp     $0x0,%eax
  0x00007fffe122c948: movabs  $0x7ffff4cd14b8,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c952: movabs  $0x180,%rdi
  0x00007fffe122c95c: je      0x7fffe122c96c
  0x00007fffe122c962: movabs  $0x190,%rdi
  0x00007fffe122c96c: mov     (%rax,%rdi),%rbx
  0x00007fffe122c970: lea     0x1(%rbx),%rbx
  0x00007fffe122c974: mov     %rbx,(%rax,%rdi)
  ;;   66 branch [EQ] [B4] 
  0x00007fffe122c978: je      0x7fffe122cccc    ;*ifeq
                                                ; - java.lang.String::equals@11 (line 979)

  ;;  block B3 [14, 31]

  0x00007fffe122c97e: cmp     $0x0,%rdx
  0x00007fffe122c982: jne     0x7fffe122c99d
  0x00007fffe122c984: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c98e: orl     $0x100,0x198(%rbx)
  0x00007fffe122c998: jmpq    0x7fffe122ca5d
  0x00007fffe122c99d: movabs  $0x100001798,%rax  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe122c9a7: mov     0x8(%rdx),%edi
  0x00007fffe122c9aa: shl     $0x3,%rdi
  0x00007fffe122c9ae: cmp     %rdi,%rax
  0x00007fffe122c9b1: jne     0x7fffe122ca41
  0x00007fffe122c9b7: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122c9c1: mov     0x8(%rdx),%eax
  0x00007fffe122c9c4: shl     $0x3,%rax
  0x00007fffe122c9c8: cmp     0x1a8(%rbx),%rax
  0x00007fffe122c9cf: jne     0x7fffe122c9de
  0x00007fffe122c9d1: addq    $0x1,0x1b0(%rbx)
  0x00007fffe122c9d9: jmpq    0x7fffe122ca5d
  0x00007fffe122c9de: cmp     0x1b8(%rbx),%rax
  0x00007fffe122c9e5: jne     0x7fffe122c9f4
  0x00007fffe122c9e7: addq    $0x1,0x1c0(%rbx)
  0x00007fffe122c9ef: jmpq    0x7fffe122ca5d
  0x00007fffe122c9f4: cmpq    $0x0,0x1a8(%rbx)
  0x00007fffe122c9ff: jne     0x7fffe122ca18
  0x00007fffe122ca01: mov     %rax,0x1a8(%rbx)
  0x00007fffe122ca08: movq    $0x1,0x1b0(%rbx)
  0x00007fffe122ca13: jmpq    0x7fffe122ca5d
  0x00007fffe122ca18: cmpq    $0x0,0x1b8(%rbx)
  0x00007fffe122ca23: jne     0x7fffe122ca3c
  0x00007fffe122ca25: mov     %rax,0x1b8(%rbx)
  0x00007fffe122ca2c: movq    $0x1,0x1c0(%rbx)
  0x00007fffe122ca37: jmpq    0x7fffe122ca5d
  0x00007fffe122ca3c: jmpq    0x7fffe122ca5d
  0x00007fffe122ca41: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122ca4b: subq    $0x1,0x1a0(%rbx)
  0x00007fffe122ca53: jmpq    0x7fffe122cd05
  0x00007fffe122ca58: jmpq    0x7fffe122ca5d
  0x00007fffe122ca5d: mov     %rdx,%rax         ;*checkcast
                                                ; - java.lang.String::equals@15 (line 980)

  0x00007fffe122ca60: mov     0xc(%rsi),%esi
  0x00007fffe122ca63: push    %r10
  0x00007fffe122ca65: cmp     0x16b2d174(%rip),%r12  ;   {external_word}
  0x00007fffe122ca6c: je      0x7fffe122cae9
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe122ca72: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122ca77: sub     $0x80,%rsp
  0x00007fffe122ca7e: mov     %rax,0x78(%rsp)
  0x00007fffe122ca83: mov     %rcx,0x70(%rsp)
  0x00007fffe122ca88: mov     %rdx,0x68(%rsp)
  0x00007fffe122ca8d: mov     %rbx,0x60(%rsp)
  0x00007fffe122ca92: mov     %rbp,0x50(%rsp)
  0x00007fffe122ca97: mov     %rsi,0x48(%rsp)
  0x00007fffe122ca9c: mov     %rdi,0x40(%rsp)
  0x00007fffe122caa1: mov     %r8,0x38(%rsp)
  0x00007fffe122caa6: mov     %r9,0x30(%rsp)
  0x00007fffe122caab: mov     %r10,0x28(%rsp)
  0x00007fffe122cab0: mov     %r11,0x20(%rsp)
  0x00007fffe122cab5: mov     %r12,0x18(%rsp)
  0x00007fffe122caba: mov     %r13,0x10(%rsp)
  0x00007fffe122cabf: mov     %r14,0x8(%rsp)
  0x00007fffe122cac4: mov     %r15,(%rsp)
  0x00007fffe122cac8: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe122cad2: movabs  $0x7fffe122ca72,%rsi  ;   {internal_word}
  0x00007fffe122cadc: mov     %rsp,%rdx
  0x00007fffe122cadf: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cae3: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122cae8: hlt
  0x00007fffe122cae9: pop     %r10              ;*getfield value
                                                ; - java.lang.String::equals@20 (line 981)

  0x00007fffe122caeb: mov     0xc(%rsi),%edi    ;*arraylength
                                                ; - java.lang.String::equals@23 (line 981)
                                                ; implicit exception: dispatches to 0x00007fffe122cd85
  0x00007fffe122caee: mov     0xc(%rax),%eax    ; implicit exception: dispatches to 0x00007fffe122ce01
  0x00007fffe122caf1: push    %r10
  0x00007fffe122caf3: cmp     0x16b2d0e6(%rip),%r12  ;   {external_word}
  0x00007fffe122cafa: je      0x7fffe122cb77
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe122cb00: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122cb05: sub     $0x80,%rsp
  0x00007fffe122cb0c: mov     %rax,0x78(%rsp)
  0x00007fffe122cb11: mov     %rcx,0x70(%rsp)
  0x00007fffe122cb16: mov     %rdx,0x68(%rsp)
  0x00007fffe122cb1b: mov     %rbx,0x60(%rsp)
  0x00007fffe122cb20: mov     %rbp,0x50(%rsp)
  0x00007fffe122cb25: mov     %rsi,0x48(%rsp)
  0x00007fffe122cb2a: mov     %rdi,0x40(%rsp)
  0x00007fffe122cb2f: mov     %r8,0x38(%rsp)
  0x00007fffe122cb34: mov     %r9,0x30(%rsp)
  0x00007fffe122cb39: mov     %r10,0x28(%rsp)
  0x00007fffe122cb3e: mov     %r11,0x20(%rsp)
  0x00007fffe122cb43: mov     %r12,0x18(%rsp)
  0x00007fffe122cb48: mov     %r13,0x10(%rsp)
  0x00007fffe122cb4d: mov     %r14,0x8(%rsp)
  0x00007fffe122cb52: mov     %r15,(%rsp)
  0x00007fffe122cb56: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe122cb60: movabs  $0x7fffe122cb00,%rsi  ;   {internal_word}
  0x00007fffe122cb6a: mov     %rsp,%rdx
  0x00007fffe122cb6d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cb71: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122cb76: hlt
  0x00007fffe122cb77: pop     %r10              ;*getfield value
                                                ; - java.lang.String::equals@27 (line 982)

  0x00007fffe122cb79: mov     0xc(%rax),%ebx    ;*arraylength
                                                ; - java.lang.String::equals@30 (line 982)
                                                ; implicit exception: dispatches to 0x00007fffe122ce7d
  0x00007fffe122cb7c: cmp     %ebx,%edi
  0x00007fffe122cb7e: movabs  $0x7ffff4cd14b8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122cb88: movabs  $0x1d0,%rdx
  0x00007fffe122cb92: jne     0x7fffe122cba2
  0x00007fffe122cb98: movabs  $0x1e0,%rdx
  0x00007fffe122cba2: mov     (%rbx,%rdx),%rcx
  0x00007fffe122cba6: lea     0x1(%rcx),%rcx
  0x00007fffe122cbaa: mov     %rcx,(%rbx,%rdx)
  ;;   98 branch [NE] [B4] 
  0x00007fffe122cbae: jne     0x7fffe122cccc    ;*if_icmpne
                                                ; - java.lang.String::equals@31 (line 982)

  ;;  block B5 [34, 49]

  0x00007fffe122cbb4: mov     $0x0,%ebx
  ;;  112 branch [AL] [B6] 
  0x00007fffe122cbb9: jmpq    0x7fffe122cc67    ;*iload_3
                                                ; - java.lang.String::equals@49 (line 986)

  0x00007fffe122cbbe: nop
  0x00007fffe122cbbf: nop
  ;;  block B7 [56, 66]

  0x00007fffe122cbc0: movsxd  %ebx,%rdi
  0x00007fffe122cbc3: cmp     0xc(%rsi),%ebx
  ;;  142 branch [AE] [RangeCheckStub: 0x00007fffb0065540] [bci:60]
  0x00007fffe122cbc6: jnb     0x7fffe122cef9
  0x00007fffe122cbcc: movzwl  0x10(%rsi,%rdi,2),%edi  ;*caload
                                                ; - java.lang.String::equals@60 (line 987)

  0x00007fffe122cbd1: movsxd  %ebx,%rcx
  0x00007fffe122cbd4: cmp     0xc(%rax),%ebx
  ;;  150 branch [AE] [RangeCheckStub: 0x00007fffb0065880] [bci:65]
  0x00007fffe122cbd7: jnb     0x7fffe122cf79
  0x00007fffe122cbdd: movzwl  0x10(%rax,%rcx,2),%ecx  ;*caload
                                                ; - java.lang.String::equals@65 (line 987)

  0x00007fffe122cbe2: cmp     %ecx,%edi
  0x00007fffe122cbe4: movabs  $0x7ffff4cd14b8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122cbee: movabs  $0x210,%rcx
  0x00007fffe122cbf8: je      0x7fffe122cc08
  0x00007fffe122cbfe: movabs  $0x220,%rcx
  0x00007fffe122cc08: mov     (%rdi,%rcx),%r8
  0x00007fffe122cc0c: lea     0x1(%r8),%r8
  0x00007fffe122cc10: mov     %r8,(%rdi,%rcx)
  ;;  166 branch [NE] [B9] 
  0x00007fffe122cc14: jne     0x7fffe122ccaa    ;*if_icmpeq
                                                ; - java.lang.String::equals@66 (line 987)

  ;;  block B10 [71, 74]

  0x00007fffe122cc1a: incl    %ebx
  0x00007fffe122cc1c: movabs  $0x7ffff4cd14b8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122cc26: mov     0x108(%rdi),%ecx
  0x00007fffe122cc2c: add     $0x8,%ecx
  0x00007fffe122cc2f: mov     %ecx,0x108(%rdi)
  0x00007fffe122cc35: movabs  $0x7ffff4aa7488,%rdi  ;   {metadata({method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122cc3f: and     $0xfff8,%ecx
  0x00007fffe122cc45: cmp     $0x0,%ecx
  ;;  190 branch [EQ] [CounterOverflowStub: 0x00007fffb0066730]
  0x00007fffe122cc48: je      0x7fffe122cff9    ; OopMap{rax=Oop rsi=Oop off=1166}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 989)

  0x00007fffe122cc4e: test    %eax,0x16dce4ac(%rip)  ;   {poll}
  0x00007fffe122cc54: movabs  $0x7ffff4cd14b8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122cc5e: incl    0x230(%rdi)
  0x00007fffe122cc64: mov     %rdx,%rdi         ;*goto
                                                ; - java.lang.String::equals@74 (line 989)

  ;;  block B6 [49, 53]

  0x00007fffe122cc67: mov     %rdi,%rdx
  0x00007fffe122cc6a: decl    %edx
  0x00007fffe122cc6c: cmp     $0x0,%edi
  0x00007fffe122cc6f: movabs  $0x7ffff4cd14b8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4aa7488} &apos;equals&apos; &apos;(Ljava/lang/Object;)Z&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122cc79: movabs  $0x1f0,%rcx
  0x00007fffe122cc83: je      0x7fffe122cc93
  0x00007fffe122cc89: movabs  $0x200,%rcx
  0x00007fffe122cc93: mov     (%rdi,%rcx),%r8
  0x00007fffe122cc97: lea     0x1(%r8),%r8
  0x00007fffe122cc9b: mov     %r8,(%rdi,%rcx)
  ;;  132 branch [EQ] [B8] 
  0x00007fffe122cc9f: je      0x7fffe122ccbb
  ;;  134 branch [AL] [B7] 
  0x00007fffe122cca5: jmpq    0x7fffe122cbc0    ;*ifeq
                                                ; - java.lang.String::equals@53 (line 986)

  ;;  block B9 [69, 70]

  0x00007fffe122ccaa: mov     $0x0,%eax
  0x00007fffe122ccaf: add     $0x30,%rsp
  0x00007fffe122ccb3: pop     %rbp
  0x00007fffe122ccb4: test    %eax,0x16dce446(%rip)  ;   {poll_return}
  0x00007fffe122ccba: retq                      ;*ireturn
                                                ; - java.lang.String::equals@70 (line 988)

  ;;  block B8 [77, 78]

  0x00007fffe122ccbb: mov     $0x1,%eax
  0x00007fffe122ccc0: add     $0x30,%rsp
  0x00007fffe122ccc4: pop     %rbp
  0x00007fffe122ccc5: test    %eax,0x16dce435(%rip)  ;   {poll_return}
  0x00007fffe122cccb: retq                      ;*ireturn
                                                ; - java.lang.String::equals@78 (line 991)

  ;;  block B4 [79, 80]

  0x00007fffe122cccc: mov     $0x0,%eax
  0x00007fffe122ccd1: add     $0x30,%rsp
  0x00007fffe122ccd5: pop     %rbp
  0x00007fffe122ccd6: test    %eax,0x16dce424(%rip)  ;   {poll_return}
  0x00007fffe122ccdc: retq                      ;*ireturn
                                                ; - java.lang.String::equals@80 (line 994)

  ;;  block B1 [5, 6]

  0x00007fffe122ccdd: mov     $0x1,%eax
  0x00007fffe122cce2: add     $0x30,%rsp
  0x00007fffe122cce6: pop     %rbp
  0x00007fffe122cce7: test    %eax,0x16dce413(%rip)  ;   {poll_return}
  0x00007fffe122cced: retq
  ;; CounterOverflowStub slow case
  0x00007fffe122ccee: mov     %rax,0x8(%rsp)
  0x00007fffe122ccf3: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe122ccfb: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop off=1344}
                                                ;*synchronization entry
                                                ; - java.lang.String::equals@-1 (line 976)
                                                ;   {runtime_call}
  0x00007fffe122cd00: jmpq    0x7fffe122c81e
  ;; SimpleExceptionStub slow case
  0x00007fffe122cd05: mov     %rdx,(%rsp)
  0x00007fffe122cd09: callq   0x7fffe11fa4e0    ; OopMap{rsi=Oop off=1358}
                                                ;*checkcast
                                                ; - java.lang.String::equals@15 (line 980)
                                                ;   {runtime_call}
  0x00007fffe122cd0e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122cd13: sub     $0x80,%rsp
  0x00007fffe122cd1a: mov     %rax,0x78(%rsp)
  0x00007fffe122cd1f: mov     %rcx,0x70(%rsp)
  0x00007fffe122cd24: mov     %rdx,0x68(%rsp)
  0x00007fffe122cd29: mov     %rbx,0x60(%rsp)
  0x00007fffe122cd2e: mov     %rbp,0x50(%rsp)
  0x00007fffe122cd33: mov     %rsi,0x48(%rsp)
  0x00007fffe122cd38: mov     %rdi,0x40(%rsp)
  0x00007fffe122cd3d: mov     %r8,0x38(%rsp)
  0x00007fffe122cd42: mov     %r9,0x30(%rsp)
  0x00007fffe122cd47: mov     %r10,0x28(%rsp)
  0x00007fffe122cd4c: mov     %r11,0x20(%rsp)
  0x00007fffe122cd51: mov     %r12,0x18(%rsp)
  0x00007fffe122cd56: mov     %r13,0x10(%rsp)
  0x00007fffe122cd5b: mov     %r14,0x8(%rsp)
  0x00007fffe122cd60: mov     %r15,(%rsp)
  0x00007fffe122cd64: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122cd6e: movabs  $0x7fffe122cd0e,%rsi  ;   {internal_word}
  0x00007fffe122cd78: mov     %rsp,%rdx
  0x00007fffe122cd7b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cd7f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122cd84: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122cd85: callq   0x7fffe11670a0    ; OopMap{rax=Oop rsi=Oop off=1482}
                                                ;*arraylength
                                                ; - java.lang.String::equals@23 (line 981)
                                                ;   {runtime_call}
  0x00007fffe122cd8a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122cd8f: sub     $0x80,%rsp
  0x00007fffe122cd96: mov     %rax,0x78(%rsp)
  0x00007fffe122cd9b: mov     %rcx,0x70(%rsp)
  0x00007fffe122cda0: mov     %rdx,0x68(%rsp)
  0x00007fffe122cda5: mov     %rbx,0x60(%rsp)
  0x00007fffe122cdaa: mov     %rbp,0x50(%rsp)
  0x00007fffe122cdaf: mov     %rsi,0x48(%rsp)
  0x00007fffe122cdb4: mov     %rdi,0x40(%rsp)
  0x00007fffe122cdb9: mov     %r8,0x38(%rsp)
  0x00007fffe122cdbe: mov     %r9,0x30(%rsp)
  0x00007fffe122cdc3: mov     %r10,0x28(%rsp)
  0x00007fffe122cdc8: mov     %r11,0x20(%rsp)
  0x00007fffe122cdcd: mov     %r12,0x18(%rsp)
  0x00007fffe122cdd2: mov     %r13,0x10(%rsp)
  0x00007fffe122cdd7: mov     %r14,0x8(%rsp)
  0x00007fffe122cddc: mov     %r15,(%rsp)
  0x00007fffe122cde0: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122cdea: movabs  $0x7fffe122cd8a,%rsi  ;   {internal_word}
  0x00007fffe122cdf4: mov     %rsp,%rdx
  0x00007fffe122cdf7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cdfb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122ce00: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122ce01: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=1606}
                                                ;*getfield value
                                                ; - java.lang.String::equals@27 (line 982)
                                                ;   {runtime_call}
  0x00007fffe122ce06: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122ce0b: sub     $0x80,%rsp
  0x00007fffe122ce12: mov     %rax,0x78(%rsp)
  0x00007fffe122ce17: mov     %rcx,0x70(%rsp)
  0x00007fffe122ce1c: mov     %rdx,0x68(%rsp)
  0x00007fffe122ce21: mov     %rbx,0x60(%rsp)
  0x00007fffe122ce26: mov     %rbp,0x50(%rsp)
  0x00007fffe122ce2b: mov     %rsi,0x48(%rsp)
  0x00007fffe122ce30: mov     %rdi,0x40(%rsp)
  0x00007fffe122ce35: mov     %r8,0x38(%rsp)
  0x00007fffe122ce3a: mov     %r9,0x30(%rsp)
  0x00007fffe122ce3f: mov     %r10,0x28(%rsp)
  0x00007fffe122ce44: mov     %r11,0x20(%rsp)
  0x00007fffe122ce49: mov     %r12,0x18(%rsp)
  0x00007fffe122ce4e: mov     %r13,0x10(%rsp)
  0x00007fffe122ce53: mov     %r14,0x8(%rsp)
  0x00007fffe122ce58: mov     %r15,(%rsp)
  0x00007fffe122ce5c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122ce66: movabs  $0x7fffe122ce06,%rsi  ;   {internal_word}
  0x00007fffe122ce70: mov     %rsp,%rdx
  0x00007fffe122ce73: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122ce77: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122ce7c: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122ce7d: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rax=Oop off=1730}
                                                ;*arraylength
                                                ; - java.lang.String::equals@30 (line 982)
                                                ;   {runtime_call}
  0x00007fffe122ce82: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122ce87: sub     $0x80,%rsp
  0x00007fffe122ce8e: mov     %rax,0x78(%rsp)
  0x00007fffe122ce93: mov     %rcx,0x70(%rsp)
  0x00007fffe122ce98: mov     %rdx,0x68(%rsp)
  0x00007fffe122ce9d: mov     %rbx,0x60(%rsp)
  0x00007fffe122cea2: mov     %rbp,0x50(%rsp)
  0x00007fffe122cea7: mov     %rsi,0x48(%rsp)
  0x00007fffe122ceac: mov     %rdi,0x40(%rsp)
  0x00007fffe122ceb1: mov     %r8,0x38(%rsp)
  0x00007fffe122ceb6: mov     %r9,0x30(%rsp)
  0x00007fffe122cebb: mov     %r10,0x28(%rsp)
  0x00007fffe122cec0: mov     %r11,0x20(%rsp)
  0x00007fffe122cec5: mov     %r12,0x18(%rsp)
  0x00007fffe122ceca: mov     %r13,0x10(%rsp)
  0x00007fffe122cecf: mov     %r14,0x8(%rsp)
  0x00007fffe122ced4: mov     %r15,(%rsp)
  0x00007fffe122ced8: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122cee2: movabs  $0x7fffe122ce82,%rsi  ;   {internal_word}
  0x00007fffe122ceec: mov     %rsp,%rdx
  0x00007fffe122ceef: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cef3: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122cef8: hlt
  ;; RangeCheckStub slow case
  0x00007fffe122cef9: mov     %rbx,(%rsp)
  0x00007fffe122cefd: callq   0x7fffe1168720    ; OopMap{rax=Oop rsi=Oop off=1858}
                                                ;*caload
                                                ; - java.lang.String::equals@60 (line 987)
                                                ;   {runtime_call}
  0x00007fffe122cf02: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122cf07: sub     $0x80,%rsp
  0x00007fffe122cf0e: mov     %rax,0x78(%rsp)
  0x00007fffe122cf13: mov     %rcx,0x70(%rsp)
  0x00007fffe122cf18: mov     %rdx,0x68(%rsp)
  0x00007fffe122cf1d: mov     %rbx,0x60(%rsp)
  0x00007fffe122cf22: mov     %rbp,0x50(%rsp)
  0x00007fffe122cf27: mov     %rsi,0x48(%rsp)
  0x00007fffe122cf2c: mov     %rdi,0x40(%rsp)
  0x00007fffe122cf31: mov     %r8,0x38(%rsp)
  0x00007fffe122cf36: mov     %r9,0x30(%rsp)
  0x00007fffe122cf3b: mov     %r10,0x28(%rsp)
  0x00007fffe122cf40: mov     %r11,0x20(%rsp)
  0x00007fffe122cf45: mov     %r12,0x18(%rsp)
  0x00007fffe122cf4a: mov     %r13,0x10(%rsp)
  0x00007fffe122cf4f: mov     %r14,0x8(%rsp)
  0x00007fffe122cf54: mov     %r15,(%rsp)
  0x00007fffe122cf58: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122cf62: movabs  $0x7fffe122cf02,%rsi  ;   {internal_word}
  0x00007fffe122cf6c: mov     %rsp,%rdx
  0x00007fffe122cf6f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cf73: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122cf78: hlt
  ;; RangeCheckStub slow case
  0x00007fffe122cf79: mov     %rbx,(%rsp)
  0x00007fffe122cf7d: callq   0x7fffe1168720    ; OopMap{rax=Oop rsi=Oop off=1986}
                                                ;*caload
                                                ; - java.lang.String::equals@65 (line 987)
                                                ;   {runtime_call}
  0x00007fffe122cf82: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122cf87: sub     $0x80,%rsp
  0x00007fffe122cf8e: mov     %rax,0x78(%rsp)
  0x00007fffe122cf93: mov     %rcx,0x70(%rsp)
  0x00007fffe122cf98: mov     %rdx,0x68(%rsp)
  0x00007fffe122cf9d: mov     %rbx,0x60(%rsp)
  0x00007fffe122cfa2: mov     %rbp,0x50(%rsp)
  0x00007fffe122cfa7: mov     %rsi,0x48(%rsp)
  0x00007fffe122cfac: mov     %rdi,0x40(%rsp)
  0x00007fffe122cfb1: mov     %r8,0x38(%rsp)
  0x00007fffe122cfb6: mov     %r9,0x30(%rsp)
  0x00007fffe122cfbb: mov     %r10,0x28(%rsp)
  0x00007fffe122cfc0: mov     %r11,0x20(%rsp)
  0x00007fffe122cfc5: mov     %r12,0x18(%rsp)
  0x00007fffe122cfca: mov     %r13,0x10(%rsp)
  0x00007fffe122cfcf: mov     %r14,0x8(%rsp)
  0x00007fffe122cfd4: mov     %r15,(%rsp)
  0x00007fffe122cfd8: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122cfe2: movabs  $0x7fffe122cf82,%rsi  ;   {internal_word}
  0x00007fffe122cfec: mov     %rsp,%rdx
  0x00007fffe122cfef: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122cff3: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122cff8: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe122cff9: mov     %rdi,0x8(%rsp)
  0x00007fffe122cffe: movq    $0x4a,(%rsp)
  0x00007fffe122d006: callq   0x7fffe11fe5a0    ; OopMap{rax=Oop rsi=Oop off=2123}
                                                ;*goto
                                                ; - java.lang.String::equals@74 (line 989)
                                                ;   {runtime_call}
  0x00007fffe122d00b: jmpq    0x7fffe122cc4e
  0x00007fffe122d010: nop
  0x00007fffe122d011: nop
  ;; Unwind handler
  0x00007fffe122d012: mov     0x348(%r15),%rax
  0x00007fffe122d019: movabs  $0x0,%r10
  0x00007fffe122d023: mov     %r10,0x348(%r15)
  0x00007fffe122d02a: movabs  $0x0,%r10
  0x00007fffe122d034: mov     %r10,0x350(%r15)
  0x00007fffe122d03b: add     $0x30,%rsp
  0x00007fffe122d03f: pop     %rbp
  0x00007fffe122d040: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe122d045: hlt
  0x00007fffe122d046: hlt
  0x00007fffe122d047: hlt
  0x00007fffe122d048: hlt
  0x00007fffe122d049: hlt
  0x00007fffe122d04a: hlt
  0x00007fffe122d04b: hlt
  0x00007fffe122d04c: hlt
  0x00007fffe122d04d: hlt
  0x00007fffe122d04e: hlt
  0x00007fffe122d04f: hlt
  0x00007fffe122d050: hlt
  0x00007fffe122d051: hlt
  0x00007fffe122d052: hlt
  0x00007fffe122d053: hlt
  0x00007fffe122d054: hlt
  0x00007fffe122d055: hlt
  0x00007fffe122d056: hlt
  0x00007fffe122d057: hlt
  0x00007fffe122d058: hlt
  0x00007fffe122d059: hlt
  0x00007fffe122d05a: hlt
  0x00007fffe122d05b: hlt
  0x00007fffe122d05c: hlt
  0x00007fffe122d05d: hlt
  0x00007fffe122d05e: hlt
  0x00007fffe122d05f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe122d060: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe122d06a: movabs  $0xdead,%rcx
  0x00007fffe122d074: movabs  $0xdead,%rsi
  0x00007fffe122d07e: movabs  $0xdead,%rdi
  0x00007fffe122d088: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe122d08d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122d092: sub     $0x80,%rsp
  0x00007fffe122d099: mov     %rax,0x78(%rsp)
  0x00007fffe122d09e: mov     %rcx,0x70(%rsp)
  0x00007fffe122d0a3: mov     %rdx,0x68(%rsp)
  0x00007fffe122d0a8: mov     %rbx,0x60(%rsp)
  0x00007fffe122d0ad: mov     %rbp,0x50(%rsp)
  0x00007fffe122d0b2: mov     %rsi,0x48(%rsp)
  0x00007fffe122d0b7: mov     %rdi,0x40(%rsp)
  0x00007fffe122d0bc: mov     %r8,0x38(%rsp)
  0x00007fffe122d0c1: mov     %r9,0x30(%rsp)
  0x00007fffe122d0c6: mov     %r10,0x28(%rsp)
  0x00007fffe122d0cb: mov     %r11,0x20(%rsp)
  0x00007fffe122d0d0: mov     %r12,0x18(%rsp)
  0x00007fffe122d0d5: mov     %r13,0x10(%rsp)
  0x00007fffe122d0da: mov     %r14,0x8(%rsp)
  0x00007fffe122d0df: mov     %r15,(%rsp)
  0x00007fffe122d0e3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122d0ed: movabs  $0x7fffe122d08d,%rsi  ;   {internal_word}
  0x00007fffe122d0f7: mov     %rsp,%rdx
  0x00007fffe122d0fa: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122d0fe: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122d103: hlt
[Deopt Handler Code]
  0x00007fffe122d104: movabs  $0x7fffe122d104,%r10  ;   {section_word}
  0x00007fffe122d10e: push    %r10
  0x00007fffe122d110: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe122d115: hlt
  0x00007fffe122d116: hlt
  0x00007fffe122d117: hlt
<writer thread='140737327351552'/>
[Loaded java.util.zip.ZipConstants from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
<nmethod compile_id='2' compiler='C1' level='3' entry='0x00007fffe122c7c0' size='3696' address='0x00007fffe122c590' relocation_offset='304' insts_offset='560' stub_offset='2768' scopes_data_offset='2960' scopes_pcs_offset='3176' dependencies_offset='3656' nul_chk_table_offset='3664' method='java/lang/String equals (Ljava/lang/Object;)Z' bytes='81' count='258' backedge_count='1280' iicount='258' stamp='117.275'/>
<writer thread='140737327351552'/>
[Loaded java.util.zip.ZipFile from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaUtilZipFileAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.ZipFile$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
Decoding compiled method 0x00007fffe122da50:
Code:
Argument 0 is unknown.RIP: 0x7fffe122dbe0 Code size: 0x00000290
[Entry Point]
  # {method} {0x00007ffff4ac0ce0} &apos;arraycopy&apos; &apos;(Ljava/lang/Object;ILjava/lang/Object;II)V&apos; in &apos;java/lang/System&apos;
  # parm0:    rsi:rsi   = &apos;java/lang/Object&apos;
  # parm1:    rdx       = int
  # parm2:    rcx:rcx   = &apos;java/lang/Object&apos;
  # parm3:    r8        = int
  # parm4:    r9        = int
  #           [sp+0x60]  (sp of caller)
  0x00007fffe122dbe0: mov     0x8(%rsi),%r10d
  0x00007fffe122dbe4: shl     $0x3,%r10
  0x00007fffe122dbe8: cmp     %r10,%rax
  0x00007fffe122dbeb: je      0x7fffe122dbf8
  0x00007fffe122dbf1: jmpq    0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe122dbf6: nop
  0x00007fffe122dbf7: nop
[Verified Entry Point]
  0x00007fffe122dbf8: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe122dbff: push    %rbp
  0x00007fffe122dc00: mov     %rsp,%rbp
  0x00007fffe122dc03: sub     $0x50,%rsp
  0x00007fffe122dc07: mov     %rsp,%rax
  0x00007fffe122dc0a: and     $0xfffffffffffffff0,%rax
  0x00007fffe122dc0e: cmp     %rsp,%rax
  0x00007fffe122dc11: je      0x7fffe122dc8e
  0x00007fffe122dc17: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122dc1c: sub     $0x80,%rsp
  0x00007fffe122dc23: mov     %rax,0x78(%rsp)
  0x00007fffe122dc28: mov     %rcx,0x70(%rsp)
  0x00007fffe122dc2d: mov     %rdx,0x68(%rsp)
  0x00007fffe122dc32: mov     %rbx,0x60(%rsp)
  0x00007fffe122dc37: mov     %rbp,0x50(%rsp)
  0x00007fffe122dc3c: mov     %rsi,0x48(%rsp)
  0x00007fffe122dc41: mov     %rdi,0x40(%rsp)
  0x00007fffe122dc46: mov     %r8,0x38(%rsp)
  0x00007fffe122dc4b: mov     %r9,0x30(%rsp)
  0x00007fffe122dc50: mov     %r10,0x28(%rsp)
  0x00007fffe122dc55: mov     %r11,0x20(%rsp)
  0x00007fffe122dc5a: mov     %r12,0x18(%rsp)
  0x00007fffe122dc5f: mov     %r13,0x10(%rsp)
  0x00007fffe122dc64: mov     %r14,0x8(%rsp)
  0x00007fffe122dc69: mov     %r15,(%rsp)
  0x00007fffe122dc6d: movabs  $0x7ffff78fbe19,%rdi  ;   {external_word}
  0x00007fffe122dc77: movabs  $0x7fffe122dc17,%rsi  ;   {internal_word}
  0x00007fffe122dc81: mov     %rsp,%rdx
  0x00007fffe122dc84: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122dc88: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122dc8d: hlt
  ;; move 4 -&gt; 6
  0x00007fffe122dc8e: mov     %r9,(%rsp)
  ;; move 3 -&gt; 5
  0x00007fffe122dc92: mov     %r8,%r9
  ;; move 2 -&gt; 4
  0x00007fffe122dc95: mov     %rcx,0x18(%rsp)
  0x00007fffe122dc9a: cmp     $0x0,%rcx
  0x00007fffe122dc9e: lea     0x18(%rsp),%r8
  0x00007fffe122dca3: cmove   0x18(%rsp),%r8
  ;; move 1 -&gt; 3
  0x00007fffe122dca9: mov     %rdx,%rcx
  ;; move 0 -&gt; 2
  0x00007fffe122dcac: mov     %rsi,0x8(%rsp)
  0x00007fffe122dcb1: cmp     $0x0,%rsi
  0x00007fffe122dcb5: lea     0x8(%rsp),%rdx
  0x00007fffe122dcba: cmove   0x8(%rsp),%rdx
  0x00007fffe122dcc0: movabs  $0xd7380c78,%r14  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x00007fffe122dcca: mov     %r14,0x38(%rsp)
  0x00007fffe122dccf: lea     0x38(%rsp),%r14
  0x00007fffe122dcd4: mov     %r14,%rsi         ; OopMap{[24]=Oop [8]=Oop [56]=Oop off=247}
  0x00007fffe122dcd7: movabs  $0x7fffe122dcd7,%r10  ;   {section_word}
  0x00007fffe122dce1: mov     %r10,0x280(%r15)
  0x00007fffe122dce8: mov     %rsp,0x278(%r15)
  0x00007fffe122dcef: cmpb    $0x0,0x16af6334(%rip)  ;   {external_word}
  0x00007fffe122dcf6: je      0x7fffe122dd3a
  0x00007fffe122dcfc: push    %rsi
  0x00007fffe122dcfd: push    %rdx
  0x00007fffe122dcfe: push    %rcx
  0x00007fffe122dcff: push    %r8
  0x00007fffe122dd01: push    %r9
  0x00007fffe122dd03: movabs  $0x7ffff4ac0ce0,%rsi  ;   {metadata({method} {0x00007ffff4ac0ce0} &apos;arraycopy&apos; &apos;(Ljava/lang/Object;ILjava/lang/Object;II)V&apos; in &apos;java/lang/System&apos;)}
  0x00007fffe122dd0d: mov     %r15,%rdi
  0x00007fffe122dd10: test    $0xf,%esp
  0x00007fffe122dd16: je      0x7fffe122dd2e
  0x00007fffe122dd1c: sub     $0x8,%rsp
  0x00007fffe122dd20: callq   0x7ffff7441d02    ;   {runtime_call}
  0x00007fffe122dd25: add     $0x8,%rsp
  0x00007fffe122dd29: jmpq    0x7fffe122dd33
  0x00007fffe122dd2e: callq   0x7ffff7441d02    ;   {runtime_call}
  0x00007fffe122dd33: pop     %r9
  0x00007fffe122dd35: pop     %r8
  0x00007fffe122dd37: pop     %rcx
  0x00007fffe122dd38: pop     %rdx
  0x00007fffe122dd39: pop     %rsi
  0x00007fffe122dd3a: lea     0x298(%r15),%rdi
  0x00007fffe122dd41: movl    $0x4,0x310(%r15)
  0x00007fffe122dd4c: callq   0x7ffff712ba29    ;   {runtime_call}
  0x00007fffe122dd51: vzeroupper
  0x00007fffe122dd54: movl    $0x5,0x310(%r15)
  0x00007fffe122dd5f: mov     %r15d,%ecx
  0x00007fffe122dd62: shr     $0x4,%ecx
  0x00007fffe122dd65: and     $0xffc,%ecx
  0x00007fffe122dd6b: movabs  $0x7ffff7f93000,%r10  ;   {external_word}
  0x00007fffe122dd75: mov     %ecx,(%r10,%rcx)
  0x00007fffe122dd79: cmpl    $0x0,0x16b0ad7d(%rip)  ;   {external_word}
  0x00007fffe122dd83: jne     0x7fffe122dd97
  0x00007fffe122dd89: cmpl    $0x0,0x30(%r15)
  0x00007fffe122dd91: je      0x7fffe122ddb0
  0x00007fffe122dd97: mov     %r15,%rdi
  0x00007fffe122dd9a: mov     %rsp,%r12
  0x00007fffe122dd9d: sub     $0x0,%rsp
  0x00007fffe122dda1: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122dda5: callq   0x7ffff74f306e    ;   {runtime_call}
  0x00007fffe122ddaa: mov     %r12,%rsp
  0x00007fffe122ddad: xor     %r12,%r12
  0x00007fffe122ddb0: movl    $0x8,0x310(%r15)
  0x00007fffe122ddbb: cmpl    $0x1,0x33c(%r15)
  0x00007fffe122ddc6: je      0x7fffe122de4e
  0x00007fffe122ddcc: cmpb    $0x0,0x16af6257(%rip)  ;   {external_word}
  0x00007fffe122ddd3: je      0x7fffe122de09
  0x00007fffe122ddd9: movabs  $0x7ffff4ac0ce0,%rsi  ;   {metadata({method} {0x00007ffff4ac0ce0} &apos;arraycopy&apos; &apos;(Ljava/lang/Object;ILjava/lang/Object;II)V&apos; in &apos;java/lang/System&apos;)}
  0x00007fffe122dde3: mov     %r15,%rdi
  0x00007fffe122dde6: test    $0xf,%esp
  0x00007fffe122ddec: je      0x7fffe122de04
  0x00007fffe122ddf2: sub     $0x8,%rsp
  0x00007fffe122ddf6: callq   0x7ffff7441e8e    ;   {runtime_call}
  0x00007fffe122ddfb: add     $0x8,%rsp
  0x00007fffe122ddff: jmpq    0x7fffe122de09
  0x00007fffe122de04: callq   0x7ffff7441e8e    ;   {runtime_call}
  0x00007fffe122de09: movabs  $0x0,%r10
  0x00007fffe122de13: mov     %r10,0x278(%r15)
  0x00007fffe122de1a: movabs  $0x0,%r10
  0x00007fffe122de24: mov     %r10,0x280(%r15)
  0x00007fffe122de2b: mov     0x38(%r15),%rcx
  0x00007fffe122de2f: movl    $0x0,0x108(%rcx)
  0x00007fffe122de39: leave
  0x00007fffe122de3a: cmpq    $0x0,0x8(%r15)
  0x00007fffe122de42: jne     0x7fffe122de49
  0x00007fffe122de48: retq
  0x00007fffe122de49: jmpq    0x7fffe1000420    ;   {runtime_call}
  0x00007fffe122de4e: mov     %rsp,%r12
  0x00007fffe122de51: sub     $0x0,%rsp
  0x00007fffe122de55: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122de59: callq   0x7ffff74461ce    ;   {runtime_call}
  0x00007fffe122de5e: mov     %r12,%rsp
  0x00007fffe122de61: xor     %r12,%r12
  0x00007fffe122de64: jmpq    0x7fffe122ddcc
  0x00007fffe122de69: hlt
  0x00007fffe122de6a: hlt
  0x00007fffe122de6b: hlt
  0x00007fffe122de6c: hlt
  0x00007fffe122de6d: hlt
  0x00007fffe122de6e: hlt
  0x00007fffe122de6f: hlt
<nmethod compile_id='3' compile_kind='c2n' level='0' entry='0x00007fffe122dbe0' size='1056' address='0x00007fffe122da50' relocation_offset='304' consts_offset='1056' insts_offset='400' method='java/lang/System arraycopy (Ljava/lang/Object;ILjava/lang/Object;II)V' bytes='0' count='256' iicount='256' stamp='117.293'/>
<task_queued compile_id='4' method='java/lang/String charAt (I)C' bytes='29' count='1408' iicount='1408' level='3' stamp='117.294' comment='tiered' hot_count='1408'/>
[Loaded sun.misc.URLClassPath$JarLoader$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.FileURLMapper from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.jar.JarFile from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.JavaUtilJarAccess from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.jar.JavaUtilJarAccessImpl from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe122de90:
Code:
Argument 0 is unknown.RIP: 0x7fffe122e040 Code size: 0x00000390
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa6980} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B4 [0, 0]

  0x00007fffe122e040: mov     0x8(%rsi),%r10d
  0x00007fffe122e044: shl     $0x3,%r10
  0x00007fffe122e048: cmp     %rax,%r10
  0x00007fffe122e04b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe122e051: nop
  0x00007fffe122e052: nop
  0x00007fffe122e053: nop
  0x00007fffe122e054: nop
  0x00007fffe122e055: nop
  0x00007fffe122e056: nop
  0x00007fffe122e057: nop
  0x00007fffe122e058: nop
  0x00007fffe122e059: nop
  0x00007fffe122e05a: nop
  0x00007fffe122e05b: nop
  0x00007fffe122e05c: nop
  0x00007fffe122e05d: nop
  0x00007fffe122e05e: nop
  0x00007fffe122e05f: nop
[Verified Entry Point]
  0x00007fffe122e060: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe122e067: push    %rbp
  0x00007fffe122e068: sub     $0x30,%rsp
  0x00007fffe122e06c: mov     %rdx,%rdi
  0x00007fffe122e06f: movabs  $0x7ffff4c6cae0,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa6980} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e079: mov     0x104(%rax),%edx
  0x00007fffe122e07f: add     $0x8,%edx
  0x00007fffe122e082: mov     %edx,0x104(%rax)
  0x00007fffe122e088: movabs  $0x7ffff4aa6980,%rax  ;   {metadata({method} {0x00007ffff4aa6980} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e092: and     $0x1ff8,%edx
  0x00007fffe122e098: cmp     $0x0,%edx
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007ffff0172750]
  0x00007fffe122e09b: je      0x7fffe122e1fe    ;*iload_1
                                                ; - java.lang.String::charAt@0 (line 656)

  ;;  block B5 [0, 0]

  ;;  block B0 [0, 1]

  0x00007fffe122e0a1: cmp     $0x0,%edi
  0x00007fffe122e0a4: movabs  $0x7ffff4c6cae0,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa6980} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e0ae: movabs  $0x130,%rdx
  0x00007fffe122e0b8: jl      0x7fffe122e0c8
  0x00007fffe122e0be: movabs  $0x140,%rdx
  0x00007fffe122e0c8: mov     (%rax,%rdx),%rbx
  0x00007fffe122e0cc: lea     0x1(%rbx),%rbx
  0x00007fffe122e0d0: mov     %rbx,(%rax,%rdx)
  ;;   46 branch [LT] [B2] 
  0x00007fffe122e0d4: jl      0x7fffe122e1ba    ;*iflt
                                                ; - java.lang.String::charAt@1 (line 656)

  ;;  block B1 [4, 10]

  0x00007fffe122e0da: mov     0xc(%rsi),%eax
  0x00007fffe122e0dd: push    %r10
  0x00007fffe122e0df: cmp     0x16b2bafa(%rip),%r12  ;   {external_word}
  0x00007fffe122e0e6: je      0x7fffe122e163
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe122e0ec: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122e0f1: sub     $0x80,%rsp
  0x00007fffe122e0f8: mov     %rax,0x78(%rsp)
  0x00007fffe122e0fd: mov     %rcx,0x70(%rsp)
  0x00007fffe122e102: mov     %rdx,0x68(%rsp)
  0x00007fffe122e107: mov     %rbx,0x60(%rsp)
  0x00007fffe122e10c: mov     %rbp,0x50(%rsp)
  0x00007fffe122e111: mov     %rsi,0x48(%rsp)
  0x00007fffe122e116: mov     %rdi,0x40(%rsp)
  0x00007fffe122e11b: mov     %r8,0x38(%rsp)
  0x00007fffe122e120: mov     %r9,0x30(%rsp)
  0x00007fffe122e125: mov     %r10,0x28(%rsp)
  0x00007fffe122e12a: mov     %r11,0x20(%rsp)
  0x00007fffe122e12f: mov     %r12,0x18(%rsp)
  0x00007fffe122e134: mov     %r13,0x10(%rsp)
  0x00007fffe122e139: mov     %r14,0x8(%rsp)
  0x00007fffe122e13e: mov     %r15,(%rsp)
  0x00007fffe122e142: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe122e14c: movabs  $0x7fffe122e0ec,%rsi  ;   {internal_word}
  0x00007fffe122e156: mov     %rsp,%rdx
  0x00007fffe122e159: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122e15d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122e162: hlt
  0x00007fffe122e163: pop     %r10              ;*getfield value
                                                ; - java.lang.String::charAt@6 (line 656)

  0x00007fffe122e165: mov     0xc(%rax),%edx    ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 656)
                                                ; implicit exception: dispatches to 0x00007fffe122e215
  0x00007fffe122e168: cmp     %edx,%edi
  0x00007fffe122e16a: movabs  $0x7ffff4c6cae0,%rdx  ;   {metadata(method data for {method} {0x00007ffff4aa6980} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e174: movabs  $0x150,%rsi
  0x00007fffe122e17e: jl      0x7fffe122e18e
  0x00007fffe122e184: movabs  $0x160,%rsi
  0x00007fffe122e18e: mov     (%rdx,%rsi),%rbx
  0x00007fffe122e192: lea     0x1(%rbx),%rbx
  0x00007fffe122e196: mov     %rbx,(%rdx,%rsi)
  ;;   72 branch [GE] [B2] 
  0x00007fffe122e19a: jnl     0x7fffe122e1ba    ;*if_icmplt
                                                ; - java.lang.String::charAt@10 (line 656)

  ;;  block B3 [22, 28]

  0x00007fffe122e1a0: movsxd  %edi,%rdi
  0x00007fffe122e1a3: movzwl  0x10(%rax,%rdi,2),%eax  ;*caload
                                                ; - java.lang.String::charAt@27 (line 659)

  0x00007fffe122e1a8: and     $0xffff,%eax
  0x00007fffe122e1ae: add     $0x30,%rsp
  0x00007fffe122e1b2: pop     %rbp
  0x00007fffe122e1b3: test    %eax,0x16dccf47(%rip)  ;   {poll_return}
  0x00007fffe122e1b9: retq                      ;*ireturn
                                                ; - java.lang.String::charAt@28 (line 659)

  ;;  block B2 [13, 21]

  ;;   96 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:13]
  0x00007fffe122e1ba: nop
  0x00007fffe122e1bb: nop
  0x00007fffe122e1bc: nop
  0x00007fffe122e1bd: nop
  0x00007fffe122e1be: nop
  0x00007fffe122e1bf: nop
  0x00007fffe122e1c0: jmpq    0x7fffe122e2a0    ;   {no_reloc}
  0x00007fffe122e1c5: add     %al,(%rax)
  0x00007fffe122e1c7: add     %al,(%rax)
  0x00007fffe122e1c9: add     %ch,%cl
  0x00007fffe122e1cb: fildl   (%rax)
  0x00007fffe122e1cd: add     %al,(%rax)        ;*new  ; - java.lang.String::charAt@13 (line 657)

  0x00007fffe122e1cf: mov     %rax,%rdx
  0x00007fffe122e1d2: movabs  $0x7ffff4c6cae0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aa6980} &apos;charAt&apos; &apos;(I)C&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e1dc: addq    $0x1,0x170(%rsi)
  0x00007fffe122e1e4: mov     %rdi,%rdx
  0x00007fffe122e1e7: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.lang.String::charAt@18 (line 657)

  0x00007fffe122e1ea: mov     %rax,0x20(%rsp)
  0x00007fffe122e1ef: callq   0x7fffe1105e80    ; OopMap{[32]=Oop off=436}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.lang.String::charAt@18 (line 657)
                                                ;   {optimized virtual_call}
  0x00007fffe122e1f4: mov     0x20(%rsp),%rax
  0x00007fffe122e1f9: jmpq    0x7fffe122e2e2
  ;; CounterOverflowStub slow case
  0x00007fffe122e1fe: mov     %rax,0x8(%rsp)
  0x00007fffe122e203: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe122e20b: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=464}
                                                ;*synchronization entry
                                                ; - java.lang.String::charAt@-1 (line 656)
                                                ;   {runtime_call}
  0x00007fffe122e210: jmpq    0x7fffe122e0a1
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122e215: callq   0x7fffe11670a0    ; OopMap{rax=Oop off=474}
                                                ;*arraylength
                                                ; - java.lang.String::charAt@9 (line 656)
                                                ;   {runtime_call}
  0x00007fffe122e21a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122e21f: sub     $0x80,%rsp
  0x00007fffe122e226: mov     %rax,0x78(%rsp)
  0x00007fffe122e22b: mov     %rcx,0x70(%rsp)
  0x00007fffe122e230: mov     %rdx,0x68(%rsp)
  0x00007fffe122e235: mov     %rbx,0x60(%rsp)
  0x00007fffe122e23a: mov     %rbp,0x50(%rsp)
  0x00007fffe122e23f: mov     %rsi,0x48(%rsp)
  0x00007fffe122e244: mov     %rdi,0x40(%rsp)
  0x00007fffe122e249: mov     %r8,0x38(%rsp)
  0x00007fffe122e24e: mov     %r9,0x30(%rsp)
  0x00007fffe122e253: mov     %r10,0x28(%rsp)
  0x00007fffe122e258: mov     %r11,0x20(%rsp)
  0x00007fffe122e25d: mov     %r12,0x18(%rsp)
  0x00007fffe122e262: mov     %r13,0x10(%rsp)
  0x00007fffe122e267: mov     %r14,0x8(%rsp)
  0x00007fffe122e26c: mov     %r15,(%rsp)
  0x00007fffe122e270: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122e27a: movabs  $0x7fffe122e21a,%rsi  ;   {internal_word}
  0x00007fffe122e284: mov     %rsp,%rdx
  0x00007fffe122e287: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122e28b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122e290: hlt
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe122e291: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe122e29b: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe122e2a0: callq   0x7fffe11fc960    ; OopMap{off=613}
                                                ;*new  ; - java.lang.String::charAt@13 (line 657)
                                                ;   {runtime_call}
  0x00007fffe122e2a5: jmpq    0x7fffe122e1c0
  ;; NewInstanceStub slow case
  0x00007fffe122e2aa: mov     %rdx,%rdx
  0x00007fffe122e2ad: callq   0x7fffe11668a0    ; OopMap{off=626}
                                                ;*new  ; - java.lang.String::charAt@13 (line 657)
                                                ;   {runtime_call}
  0x00007fffe122e2b2: jmpq    0x7fffe122e1cf
  0x00007fffe122e2b7: nop
  0x00007fffe122e2b8: nop
  ;; Unwind handler
  0x00007fffe122e2b9: mov     0x348(%r15),%rax
  0x00007fffe122e2c0: movabs  $0x0,%r10
  0x00007fffe122e2ca: mov     %r10,0x348(%r15)
  0x00007fffe122e2d1: movabs  $0x0,%r10
  0x00007fffe122e2db: mov     %r10,0x350(%r15)
  0x00007fffe122e2e2: add     $0x30,%rsp
  0x00007fffe122e2e6: pop     %rbp
  0x00007fffe122e2e7: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe122e2ec: hlt
  0x00007fffe122e2ed: hlt
  0x00007fffe122e2ee: hlt
  0x00007fffe122e2ef: hlt
  0x00007fffe122e2f0: hlt
  0x00007fffe122e2f1: hlt
  0x00007fffe122e2f2: hlt
  0x00007fffe122e2f3: hlt
  0x00007fffe122e2f4: hlt
  0x00007fffe122e2f5: hlt
  0x00007fffe122e2f6: hlt
  0x00007fffe122e2f7: hlt
  0x00007fffe122e2f8: hlt
  0x00007fffe122e2f9: hlt
  0x00007fffe122e2fa: hlt
  0x00007fffe122e2fb: hlt
  0x00007fffe122e2fc: hlt
  0x00007fffe122e2fd: hlt
  0x00007fffe122e2fe: hlt
  0x00007fffe122e2ff: hlt
[Stub Code]
  0x00007fffe122e300: nop                       ;   {no_reloc}
  0x00007fffe122e301: nop
  0x00007fffe122e302: nop
  0x00007fffe122e303: nop
  0x00007fffe122e304: nop
  0x00007fffe122e305: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe122e30f: jmpq    0x7fffe122e30f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe122e314: movabs  $0xdead,%rbx
  0x00007fffe122e31e: movabs  $0xdead,%rcx
  0x00007fffe122e328: movabs  $0xdead,%rsi
  0x00007fffe122e332: movabs  $0xdead,%rdi
  0x00007fffe122e33c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe122e341: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122e346: sub     $0x80,%rsp
  0x00007fffe122e34d: mov     %rax,0x78(%rsp)
  0x00007fffe122e352: mov     %rcx,0x70(%rsp)
  0x00007fffe122e357: mov     %rdx,0x68(%rsp)
  0x00007fffe122e35c: mov     %rbx,0x60(%rsp)
  0x00007fffe122e361: mov     %rbp,0x50(%rsp)
  0x00007fffe122e366: mov     %rsi,0x48(%rsp)
  0x00007fffe122e36b: mov     %rdi,0x40(%rsp)
  0x00007fffe122e370: mov     %r8,0x38(%rsp)
  0x00007fffe122e375: mov     %r9,0x30(%rsp)
  0x00007fffe122e37a: mov     %r10,0x28(%rsp)
  0x00007fffe122e37f: mov     %r11,0x20(%rsp)
  0x00007fffe122e384: mov     %r12,0x18(%rsp)
  0x00007fffe122e389: mov     %r13,0x10(%rsp)
  0x00007fffe122e38e: mov     %r14,0x8(%rsp)
  0x00007fffe122e393: mov     %r15,(%rsp)
  0x00007fffe122e397: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122e3a1: movabs  $0x7fffe122e341,%rsi  ;   {internal_word}
  0x00007fffe122e3ab: mov     %rsp,%rdx
  0x00007fffe122e3ae: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122e3b2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122e3b7: hlt
[Deopt Handler Code]
  0x00007fffe122e3b8: movabs  $0x7fffe122e3b8,%r10  ;   {section_word}
  0x00007fffe122e3c2: push    %r10
  0x00007fffe122e3c4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe122e3c9: hlt
  0x00007fffe122e3ca: hlt
  0x00007fffe122e3cb: hlt
  0x00007fffe122e3cc: hlt
  0x00007fffe122e3cd: hlt
  0x00007fffe122e3ce: hlt
  0x00007fffe122e3cf: hlt
<nmethod compile_id='4' compiler='C1' level='3' entry='0x00007fffe122e040' size='1736' address='0x00007fffe122de90' relocation_offset='304' insts_offset='432' stub_offset='1136' scopes_data_offset='1352' scopes_pcs_offset='1456' dependencies_offset='1712' nul_chk_table_offset='1720' method='java/lang/String charAt (I)C' bytes='29' count='1729' iicount='1729' stamp='117.310'/>
<writer thread='140737327351552'/>
[Loaded java.nio.charset.StandardCharsets from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.US_ASCII from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.ISO_8859_1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='5' method='java/lang/String length ()I' bytes='6' count='256' iicount='256' level='3' stamp='117.312' comment='tiered' hot_count='256'/>
[Loaded sun.nio.cs.UTF_16BE from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.UTF_16LE from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.cs.UTF_16 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe122e590:
Code:
Argument 0 is unknown.RIP: 0x7fffe122e720 Code size: 0x00000278
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa67e8} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe122e720: mov     0x8(%rsi),%r10d
  0x00007fffe122e724: shl     $0x3,%r10
  0x00007fffe122e728: cmp     %rax,%r10
  0x00007fffe122e72b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe122e731: nop
  0x00007fffe122e732: nop
  0x00007fffe122e733: nop
  0x00007fffe122e734: nop
  0x00007fffe122e735: nop
  0x00007fffe122e736: nop
  0x00007fffe122e737: nop
  0x00007fffe122e738: nop
  0x00007fffe122e739: nop
  0x00007fffe122e73a: nop
  0x00007fffe122e73b: nop
  0x00007fffe122e73c: nop
  0x00007fffe122e73d: nop
  0x00007fffe122e73e: nop
  0x00007fffe122e73f: nop
[Verified Entry Point]
  0x00007fffe122e740: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe122e747: push    %rbp
  0x00007fffe122e748: sub     $0x30,%rsp
  0x00007fffe122e74c: movabs  $0x7ffff4cef200,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa67e8} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e756: mov     0x104(%rax),%edi
  0x00007fffe122e75c: add     $0x8,%edi
  0x00007fffe122e75f: mov     %edi,0x104(%rax)
  0x00007fffe122e765: movabs  $0x7ffff4aa67e8,%rax  ;   {metadata({method} {0x00007ffff4aa67e8} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122e76f: and     $0x1ff8,%edi
  0x00007fffe122e775: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb003b100]
  0x00007fffe122e778: je      0x7fffe122e818    ;*aload_0
                                                ; - java.lang.String::length@0 (line 622)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 5]

  0x00007fffe122e77e: mov     0xc(%rsi),%eax
  0x00007fffe122e781: push    %r10
  0x00007fffe122e783: cmp     0x16b2b456(%rip),%r12  ;   {external_word}
  0x00007fffe122e78a: je      0x7fffe122e807
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe122e790: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122e795: sub     $0x80,%rsp
  0x00007fffe122e79c: mov     %rax,0x78(%rsp)
  0x00007fffe122e7a1: mov     %rcx,0x70(%rsp)
  0x00007fffe122e7a6: mov     %rdx,0x68(%rsp)
  0x00007fffe122e7ab: mov     %rbx,0x60(%rsp)
  0x00007fffe122e7b0: mov     %rbp,0x50(%rsp)
  0x00007fffe122e7b5: mov     %rsi,0x48(%rsp)
  0x00007fffe122e7ba: mov     %rdi,0x40(%rsp)
  0x00007fffe122e7bf: mov     %r8,0x38(%rsp)
  0x00007fffe122e7c4: mov     %r9,0x30(%rsp)
  0x00007fffe122e7c9: mov     %r10,0x28(%rsp)
  0x00007fffe122e7ce: mov     %r11,0x20(%rsp)
  0x00007fffe122e7d3: mov     %r12,0x18(%rsp)
  0x00007fffe122e7d8: mov     %r13,0x10(%rsp)
  0x00007fffe122e7dd: mov     %r14,0x8(%rsp)
  0x00007fffe122e7e2: mov     %r15,(%rsp)
  0x00007fffe122e7e6: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe122e7f0: movabs  $0x7fffe122e790,%rsi  ;   {internal_word}
  0x00007fffe122e7fa: mov     %rsp,%rdx
  0x00007fffe122e7fd: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122e801: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122e806: hlt
  0x00007fffe122e807: pop     %r10              ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)

  0x00007fffe122e809: mov     0xc(%rax),%eax    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; implicit exception: dispatches to 0x00007fffe122e82f
  0x00007fffe122e80c: add     $0x30,%rsp
  0x00007fffe122e810: pop     %rbp
  0x00007fffe122e811: test    %eax,0x16dcc8e9(%rip)  ;   {poll_return}
  0x00007fffe122e817: retq
  ;; CounterOverflowStub slow case
  0x00007fffe122e818: mov     %rax,0x8(%rsp)
  0x00007fffe122e81d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe122e825: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=266}
                                                ;*synchronization entry
                                                ; - java.lang.String::length@-1 (line 622)
                                                ;   {runtime_call}
  0x00007fffe122e82a: jmpq    0x7fffe122e77e
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122e82f: callq   0x7fffe11670a0    ; OopMap{off=276}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ;   {runtime_call}
  0x00007fffe122e834: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122e839: sub     $0x80,%rsp
  0x00007fffe122e840: mov     %rax,0x78(%rsp)
  0x00007fffe122e845: mov     %rcx,0x70(%rsp)
  0x00007fffe122e84a: mov     %rdx,0x68(%rsp)
  0x00007fffe122e84f: mov     %rbx,0x60(%rsp)
  0x00007fffe122e854: mov     %rbp,0x50(%rsp)
  0x00007fffe122e859: mov     %rsi,0x48(%rsp)
  0x00007fffe122e85e: mov     %rdi,0x40(%rsp)
  0x00007fffe122e863: mov     %r8,0x38(%rsp)
  0x00007fffe122e868: mov     %r9,0x30(%rsp)
  0x00007fffe122e86d: mov     %r10,0x28(%rsp)
  0x00007fffe122e872: mov     %r11,0x20(%rsp)
  0x00007fffe122e877: mov     %r12,0x18(%rsp)
  0x00007fffe122e87c: mov     %r13,0x10(%rsp)
  0x00007fffe122e881: mov     %r14,0x8(%rsp)
  0x00007fffe122e886: mov     %r15,(%rsp)
  0x00007fffe122e88a: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122e894: movabs  $0x7fffe122e834,%rsi  ;   {internal_word}
  0x00007fffe122e89e: mov     %rsp,%rdx
  0x00007fffe122e8a1: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122e8a5: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122e8aa: hlt
  0x00007fffe122e8ab: nop
  0x00007fffe122e8ac: nop
  ;; Unwind handler
  0x00007fffe122e8ad: mov     0x348(%r15),%rax
  0x00007fffe122e8b4: movabs  $0x0,%r10
  0x00007fffe122e8be: mov     %r10,0x348(%r15)
  0x00007fffe122e8c5: movabs  $0x0,%r10
  0x00007fffe122e8cf: mov     %r10,0x350(%r15)
  0x00007fffe122e8d6: add     $0x30,%rsp
  0x00007fffe122e8da: pop     %rbp
  0x00007fffe122e8db: jmpq    0x7fffe1168fe0    ;   {runtime_call}
[Exception Handler]
[Stub Code]
  0x00007fffe122e8e0: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe122e8ea: movabs  $0xdead,%rcx
  0x00007fffe122e8f4: movabs  $0xdead,%rsi
  0x00007fffe122e8fe: movabs  $0xdead,%rdi
  0x00007fffe122e908: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe122e90d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122e912: sub     $0x80,%rsp
  0x00007fffe122e919: mov     %rax,0x78(%rsp)
  0x00007fffe122e91e: mov     %rcx,0x70(%rsp)
  0x00007fffe122e923: mov     %rdx,0x68(%rsp)
  0x00007fffe122e928: mov     %rbx,0x60(%rsp)
  0x00007fffe122e92d: mov     %rbp,0x50(%rsp)
  0x00007fffe122e932: mov     %rsi,0x48(%rsp)
  0x00007fffe122e937: mov     %rdi,0x40(%rsp)
  0x00007fffe122e93c: mov     %r8,0x38(%rsp)
  0x00007fffe122e941: mov     %r9,0x30(%rsp)
  0x00007fffe122e946: mov     %r10,0x28(%rsp)
  0x00007fffe122e94b: mov     %r11,0x20(%rsp)
  0x00007fffe122e950: mov     %r12,0x18(%rsp)
  0x00007fffe122e955: mov     %r13,0x10(%rsp)
  0x00007fffe122e95a: mov     %r14,0x8(%rsp)
  0x00007fffe122e95f: mov     %r15,(%rsp)
  0x00007fffe122e963: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122e96d: movabs  $0x7fffe122e90d,%rsi  ;   {internal_word}
  0x00007fffe122e977: mov     %rsp,%rdx
  0x00007fffe122e97a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122e97e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122e983: hlt
[Deopt Handler Code]
  0x00007fffe122e984: movabs  $0x7fffe122e984,%r10  ;   {section_word}
  0x00007fffe122e98e: push    %r10
  0x00007fffe122e990: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe122e995: hlt
  0x00007fffe122e996: hlt
  0x00007fffe122e997: hlt
<nmethod compile_id='5' compiler='C1' level='3' entry='0x00007fffe122e720' size='1216' address='0x00007fffe122e590' relocation_offset='304' insts_offset='400' stub_offset='848' scopes_data_offset='1040' scopes_pcs_offset='1080' dependencies_offset='1192' nul_chk_table_offset='1200' method='java/lang/String length ()I' bytes='6' count='279' iicount='279' stamp='117.321'/>
<writer thread='140737327351552'/>
[Loaded java.util.Queue from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.Deque from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.ArrayDeque from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.ZipCoder from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='6' method='java/lang/String indexOf (II)I' bytes='70' count='148' backedge_count='3072' iicount='148' level='3' stamp='117.325' comment='tiered' hot_count='148'/>
[Loaded sun.misc.PerfCounter from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Perf$GetPerfAction from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.Perf from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.PerfCounter$CoreCounters from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.ch.DirectBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.MappedByteBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.DirectByteBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe122fad0:
Code:
Argument 0 is unknown.RIP: 0x7fffe122fca0 Code size: 0x00000510
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B12 [0, 0]

  0x00007fffe122fca0: mov     0x8(%rsi),%r10d
  0x00007fffe122fca4: shl     $0x3,%r10
  0x00007fffe122fca8: cmp     %rax,%r10
  0x00007fffe122fcab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe122fcb1: nop
  0x00007fffe122fcb2: nop
  0x00007fffe122fcb3: nop
  0x00007fffe122fcb4: nop
  0x00007fffe122fcb5: nop
  0x00007fffe122fcb6: nop
  0x00007fffe122fcb7: nop
  0x00007fffe122fcb8: nop
  0x00007fffe122fcb9: nop
  0x00007fffe122fcba: nop
  0x00007fffe122fcbb: nop
  0x00007fffe122fcbc: nop
  0x00007fffe122fcbd: nop
  0x00007fffe122fcbe: nop
  0x00007fffe122fcbf: nop
[Verified Entry Point]
  0x00007fffe122fcc0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe122fcc7: push    %rbp
  0x00007fffe122fcc8: sub     $0x30,%rsp
  0x00007fffe122fccc: movabs  $0x7ffff4cf86c0,%rax  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fcd6: mov     0x104(%rax),%edi
  0x00007fffe122fcdc: add     $0x8,%edi
  0x00007fffe122fcdf: mov     %edi,0x104(%rax)
  0x00007fffe122fce5: movabs  $0x7ffff4aa8478,%rax  ;   {metadata({method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fcef: and     $0x1ff8,%edi
  0x00007fffe122fcf5: cmp     $0x0,%edi
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffb003b4b0]
  0x00007fffe122fcf8: je      0x7fffe122ff81    ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1545)

  ;;  block B13 [0, 0]

  ;;  block B0 [0, 7]

  0x00007fffe122fcfe: mov     0xc(%rsi),%eax
  0x00007fffe122fd01: push    %r10
  0x00007fffe122fd03: cmp     0x16b29ed6(%rip),%r12  ;   {external_word}
  0x00007fffe122fd0a: je      0x7fffe122fd87
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe122fd10: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122fd15: sub     $0x80,%rsp
  0x00007fffe122fd1c: mov     %rax,0x78(%rsp)
  0x00007fffe122fd21: mov     %rcx,0x70(%rsp)
  0x00007fffe122fd26: mov     %rdx,0x68(%rsp)
  0x00007fffe122fd2b: mov     %rbx,0x60(%rsp)
  0x00007fffe122fd30: mov     %rbp,0x50(%rsp)
  0x00007fffe122fd35: mov     %rsi,0x48(%rsp)
  0x00007fffe122fd3a: mov     %rdi,0x40(%rsp)
  0x00007fffe122fd3f: mov     %r8,0x38(%rsp)
  0x00007fffe122fd44: mov     %r9,0x30(%rsp)
  0x00007fffe122fd49: mov     %r10,0x28(%rsp)
  0x00007fffe122fd4e: mov     %r11,0x20(%rsp)
  0x00007fffe122fd53: mov     %r12,0x18(%rsp)
  0x00007fffe122fd58: mov     %r13,0x10(%rsp)
  0x00007fffe122fd5d: mov     %r14,0x8(%rsp)
  0x00007fffe122fd62: mov     %r15,(%rsp)
  0x00007fffe122fd66: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe122fd70: movabs  $0x7fffe122fd10,%rsi  ;   {internal_word}
  0x00007fffe122fd7a: mov     %rsp,%rdx
  0x00007fffe122fd7d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe122fd81: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe122fd86: hlt
  0x00007fffe122fd87: pop     %r10              ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1545)

  0x00007fffe122fd89: mov     0xc(%rax),%edi    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; implicit exception: dispatches to 0x00007fffe122ff98
  0x00007fffe122fd8c: cmp     $0x0,%ecx
  0x00007fffe122fd8f: movabs  $0x7ffff4cf86c0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fd99: movabs  $0x130,%r8
  0x00007fffe122fda3: jnl     0x7fffe122fdb3
  0x00007fffe122fda9: movabs  $0x140,%r8
  0x00007fffe122fdb3: mov     (%rbx,%r8),%r9
  0x00007fffe122fdb7: lea     0x1(%r9),%r9
  0x00007fffe122fdbb: mov     %r9,(%rbx,%r8)
  ;;   52 branch [GE] [B2] 
  0x00007fffe122fdbf: jnl     0x7fffe122fddf    ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1546)

  ;;  block B1 [10, 12]

  0x00007fffe122fdc5: movabs  $0x7ffff4cf86c0,%rcx  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fdcf: incl    0x150(%rcx)
  0x00007fffe122fdd5: mov     $0x0,%ecx
  ;;   64 branch [AL] [B3] 
  0x00007fffe122fdda: jmpq    0x7fffe122fe17    ;*goto
                                                ; - java.lang.String::indexOf@12 (line 1547)

  ;;  block B2 [15, 17]

  0x00007fffe122fddf: cmp     %edi,%ecx
  0x00007fffe122fde1: movabs  $0x7ffff4cf86c0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fdeb: movabs  $0x168,%r8
  0x00007fffe122fdf5: jl      0x7fffe122fe05
  0x00007fffe122fdfb: movabs  $0x178,%r8
  0x00007fffe122fe05: mov     (%rbx,%r8),%r9
  0x00007fffe122fe09: lea     0x1(%r9),%r9
  0x00007fffe122fe0d: mov     %r9,(%rbx,%r8)
  ;;   80 branch [GE] [B4] 
  0x00007fffe122fe11: jnl     0x7fffe122ff70    ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1548)

  ;;  block B3 [22, 25]

  0x00007fffe122fe17: cmp     $0x10000,%edx
  0x00007fffe122fe1d: movabs  $0x7ffff4cf86c0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fe27: movabs  $0x188,%r8
  0x00007fffe122fe31: jnl     0x7fffe122fe41
  0x00007fffe122fe37: movabs  $0x198,%r8
  0x00007fffe122fe41: mov     (%rbx,%r8),%r9
  0x00007fffe122fe45: lea     0x1(%r9),%r9
  0x00007fffe122fe49: mov     %r9,(%rbx,%r8)
  ;;  104 branch [GE] [B6] 
  0x00007fffe122fe4d: jnl     0x7fffe122ff48
  ;;  106 branch [AL] [B7] 
  0x00007fffe122fe53: jmpq    0x7fffe122feeb    ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)

  ;;  block B8 [43, 49]

  0x00007fffe122fe58: movsxd  %ecx,%rsi
  0x00007fffe122fe5b: cmp     0xc(%rax),%ecx
  ;;  138 branch [AE] [RangeCheckStub: 0x00007fffb003f630] [bci:47]
  0x00007fffe122fe5e: jnb     0x7fffe1230014
  0x00007fffe122fe64: movzwl  0x10(%rax,%rsi,2),%esi  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1558)

  0x00007fffe122fe69: cmp     %edx,%esi
  0x00007fffe122fe6b: movabs  $0x7ffff4cf86c0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fe75: movabs  $0x1c8,%rbx
  0x00007fffe122fe7f: jne     0x7fffe122fe8f
  0x00007fffe122fe85: movabs  $0x1d8,%rbx
  0x00007fffe122fe8f: mov     (%rsi,%rbx),%r8
  0x00007fffe122fe93: lea     0x1(%r8),%r8
  0x00007fffe122fe97: mov     %r8,(%rsi,%rbx)
  ;;  154 branch [EQ] [B10] 
  0x00007fffe122fe9b: je      0x7fffe122ff28    ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1558)

  ;;  block B11 [55, 58]

  0x00007fffe122fea1: incl    %ecx
  0x00007fffe122fea3: movabs  $0x7ffff4cf86c0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fead: mov     0x108(%rsi),%ebx
  0x00007fffe122feb3: add     $0x8,%ebx
  0x00007fffe122feb6: mov     %ebx,0x108(%rsi)
  0x00007fffe122febc: movabs  $0x7ffff4aa8478,%rsi  ;   {metadata({method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fec6: and     $0xfff8,%ebx
  0x00007fffe122fecc: cmp     $0x0,%ebx
  ;;  178 branch [EQ] [CounterOverflowStub: 0x00007fffb00403e0]
  0x00007fffe122fecf: je      0x7fffe1230094    ; OopMap{rax=Oop off=565}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1557)

  0x00007fffe122fed5: test    %eax,0x16dcb225(%rip)  ;   {poll}
  0x00007fffe122fedb: movabs  $0x7ffff4cf86c0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fee5: incl    0x1e8(%rsi)       ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1557)

  ;;  block B7 [37, 40]

  0x00007fffe122feeb: cmp     %edi,%ecx
  0x00007fffe122feed: movabs  $0x7ffff4cf86c0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122fef7: movabs  $0x1a8,%rbx
  0x00007fffe122ff01: jnl     0x7fffe122ff11
  0x00007fffe122ff07: movabs  $0x1b8,%rbx
  0x00007fffe122ff11: mov     (%rsi,%rbx),%r8
  0x00007fffe122ff15: lea     0x1(%r8),%r8
  0x00007fffe122ff19: mov     %r8,(%rsi,%rbx)
  ;;  128 branch [GE] [B9] 
  0x00007fffe122ff1d: jnl     0x7fffe122ff37
  ;;  130 branch [AL] [B8] 
  0x00007fffe122ff23: jmpq    0x7fffe122fe58    ;*if_icmpge
                                                ; - java.lang.String::indexOf@40 (line 1557)

  ;;  block B10 [52, 54]

  0x00007fffe122ff28: mov     %rcx,%rax
  0x00007fffe122ff2b: add     $0x30,%rsp
  0x00007fffe122ff2f: pop     %rbp
  0x00007fffe122ff30: test    %eax,0x16dcb1ca(%rip)  ;   {poll_return}
  0x00007fffe122ff36: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@54 (line 1559)

  ;;  block B9 [61, 62]

  0x00007fffe122ff37: mov     $0xffffffff,%eax
  0x00007fffe122ff3c: add     $0x30,%rsp
  0x00007fffe122ff40: pop     %rbp
  0x00007fffe122ff41: test    %eax,0x16dcb1b9(%rip)  ;   {poll_return}
  0x00007fffe122ff47: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@62 (line 1562)

  ;;  block B6 [63, 69]

  0x00007fffe122ff48: mov     %rsi,%rdi
  0x00007fffe122ff4b: movabs  $0x7ffff4cf86c0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe122ff55: addq    $0x1,0x200(%rbx)
  0x00007fffe122ff5d: nop
  0x00007fffe122ff5e: nop
  0x00007fffe122ff5f: callq   0x7fffe1105e80    ; OopMap{off=708}
                                                ;*invokespecial indexOfSupplementary
                                                ; - java.lang.String::indexOf@66 (line 1564)
                                                ;   {optimized virtual_call}
  0x00007fffe122ff64: add     $0x30,%rsp
  0x00007fffe122ff68: pop     %rbp
  0x00007fffe122ff69: test    %eax,0x16dcb191(%rip)  ;   {poll_return}
  0x00007fffe122ff6f: retq                      ;*ireturn
                                                ; - java.lang.String::indexOf@69 (line 1564)

  ;;  block B4 [20, 21]

  0x00007fffe122ff70: mov     $0xffffffff,%eax
  0x00007fffe122ff75: add     $0x30,%rsp
  0x00007fffe122ff79: pop     %rbp
  0x00007fffe122ff7a: test    %eax,0x16dcb180(%rip)  ;   {poll_return}
  0x00007fffe122ff80: retq
  ;; CounterOverflowStub slow case
  0x00007fffe122ff81: mov     %rax,0x8(%rsp)
  0x00007fffe122ff86: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe122ff8e: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=755}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1545)
                                                ;   {runtime_call}
  0x00007fffe122ff93: jmpq    0x7fffe122fcfe
  ;; ImplicitNullCheckStub slow case
  0x00007fffe122ff98: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rax=Oop off=765}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ;   {runtime_call}
  0x00007fffe122ff9d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe122ffa2: sub     $0x80,%rsp
  0x00007fffe122ffa9: mov     %rax,0x78(%rsp)
  0x00007fffe122ffae: mov     %rcx,0x70(%rsp)
  0x00007fffe122ffb3: mov     %rdx,0x68(%rsp)
  0x00007fffe122ffb8: mov     %rbx,0x60(%rsp)
  0x00007fffe122ffbd: mov     %rbp,0x50(%rsp)
  0x00007fffe122ffc2: mov     %rsi,0x48(%rsp)
  0x00007fffe122ffc7: mov     %rdi,0x40(%rsp)
  0x00007fffe122ffcc: mov     %r8,0x38(%rsp)
  0x00007fffe122ffd1: mov     %r9,0x30(%rsp)
  0x00007fffe122ffd6: mov     %r10,0x28(%rsp)
  0x00007fffe122ffdb: mov     %r11,0x20(%rsp)
  0x00007fffe122ffe0: mov     %r12,0x18(%rsp)
  0x00007fffe122ffe5: mov     %r13,0x10(%rsp)
  0x00007fffe122ffea: mov     %r14,0x8(%rsp)
  0x00007fffe122ffef: mov     %r15,(%rsp)
  0x00007fffe122fff3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe122fffd: movabs  $0x7fffe122ff9d,%rsi  ;   {internal_word}
  0x00007fffe1230007: mov     %rsp,%rdx
  0x00007fffe123000a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123000e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1230013: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1230014: mov     %rcx,(%rsp)
  0x00007fffe1230018: callq   0x7fffe1168720    ; OopMap{rax=Oop off=893}
                                                ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1558)
                                                ;   {runtime_call}
  0x00007fffe123001d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1230022: sub     $0x80,%rsp
  0x00007fffe1230029: mov     %rax,0x78(%rsp)
  0x00007fffe123002e: mov     %rcx,0x70(%rsp)
  0x00007fffe1230033: mov     %rdx,0x68(%rsp)
  0x00007fffe1230038: mov     %rbx,0x60(%rsp)
  0x00007fffe123003d: mov     %rbp,0x50(%rsp)
  0x00007fffe1230042: mov     %rsi,0x48(%rsp)
  0x00007fffe1230047: mov     %rdi,0x40(%rsp)
  0x00007fffe123004c: mov     %r8,0x38(%rsp)
  0x00007fffe1230051: mov     %r9,0x30(%rsp)
  0x00007fffe1230056: mov     %r10,0x28(%rsp)
  0x00007fffe123005b: mov     %r11,0x20(%rsp)
  0x00007fffe1230060: mov     %r12,0x18(%rsp)
  0x00007fffe1230065: mov     %r13,0x10(%rsp)
  0x00007fffe123006a: mov     %r14,0x8(%rsp)
  0x00007fffe123006f: mov     %r15,(%rsp)
  0x00007fffe1230073: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123007d: movabs  $0x7fffe123001d,%rsi  ;   {internal_word}
  0x00007fffe1230087: mov     %rsp,%rdx
  0x00007fffe123008a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123008e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1230093: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe1230094: mov     %rsi,0x8(%rsp)
  0x00007fffe1230099: movq    $0x3a,(%rsp)
  0x00007fffe12300a1: callq   0x7fffe11fe5a0    ; OopMap{rax=Oop off=1030}
                                                ;*goto
                                                ; - java.lang.String::indexOf@58 (line 1557)
                                                ;   {runtime_call}
  0x00007fffe12300a6: jmpq    0x7fffe122fed5
  0x00007fffe12300ab: nop
  0x00007fffe12300ac: nop
  ;; Unwind handler
  0x00007fffe12300ad: mov     0x348(%r15),%rax
  0x00007fffe12300b4: movabs  $0x0,%r10
  0x00007fffe12300be: mov     %r10,0x348(%r15)
  0x00007fffe12300c5: movabs  $0x0,%r10
  0x00007fffe12300cf: mov     %r10,0x350(%r15)
  0x00007fffe12300d6: add     $0x30,%rsp
  0x00007fffe12300da: pop     %rbp
  0x00007fffe12300db: jmpq    0x7fffe1168fe0    ;   {runtime_call}
[Stub Code]
  0x00007fffe12300e0: nop                       ;   {no_reloc}
  0x00007fffe12300e1: nop
  0x00007fffe12300e2: nop
  0x00007fffe12300e3: nop
  0x00007fffe12300e4: nop
  0x00007fffe12300e5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12300ef: jmpq    0x7fffe12300ef    ;   {runtime_call}
[Exception Handler]
  0x00007fffe12300f4: movabs  $0xdead,%rbx
  0x00007fffe12300fe: movabs  $0xdead,%rcx
  0x00007fffe1230108: movabs  $0xdead,%rsi
  0x00007fffe1230112: movabs  $0xdead,%rdi
  0x00007fffe123011c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1230121: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1230126: sub     $0x80,%rsp
  0x00007fffe123012d: mov     %rax,0x78(%rsp)
  0x00007fffe1230132: mov     %rcx,0x70(%rsp)
  0x00007fffe1230137: mov     %rdx,0x68(%rsp)
  0x00007fffe123013c: mov     %rbx,0x60(%rsp)
  0x00007fffe1230141: mov     %rbp,0x50(%rsp)
  0x00007fffe1230146: mov     %rsi,0x48(%rsp)
  0x00007fffe123014b: mov     %rdi,0x40(%rsp)
  0x00007fffe1230150: mov     %r8,0x38(%rsp)
  0x00007fffe1230155: mov     %r9,0x30(%rsp)
  0x00007fffe123015a: mov     %r10,0x28(%rsp)
  0x00007fffe123015f: mov     %r11,0x20(%rsp)
  0x00007fffe1230164: mov     %r12,0x18(%rsp)
  0x00007fffe1230169: mov     %r13,0x10(%rsp)
  0x00007fffe123016e: mov     %r14,0x8(%rsp)
  0x00007fffe1230173: mov     %r15,(%rsp)
  0x00007fffe1230177: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1230181: movabs  $0x7fffe1230121,%rsi  ;   {internal_word}
  0x00007fffe123018b: mov     %rsp,%rdx
  0x00007fffe123018e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1230192: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1230197: hlt
[Deopt Handler Code]
  0x00007fffe1230198: movabs  $0x7fffe1230198,%r10  ;   {section_word}
  0x00007fffe12301a2: push    %r10
  0x00007fffe12301a4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12301a9: hlt
  0x00007fffe12301aa: hlt
  0x00007fffe12301ab: hlt
  0x00007fffe12301ac: hlt
  0x00007fffe12301ad: hlt
  0x00007fffe12301ae: hlt
  0x00007fffe12301af: hlt
<nmethod compile_id='6' compiler='C1' level='3' entry='0x00007fffe122fca0' size='2304' address='0x00007fffe122fad0' relocation_offset='304' insts_offset='464' stub_offset='1552' scopes_data_offset='1768' scopes_pcs_offset='1928' dependencies_offset='2280' nul_chk_table_offset='2288' method='java/lang/String indexOf (II)I' bytes='70' count='148' backedge_count='3078' iicount='148' stamp='117.347'/>
<writer thread='140737327351552'/>
[Loaded java.nio.LongBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.DirectLongBufferU from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='7' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='1280' iicount='1280' level='3' stamp='117.350' comment='tiered' hot_count='1280'/>
[Loaded sun.misc.JarIndex from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1230dd0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1230f40 Code size: 0x00000178
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa24e8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1230f40: mov     0x8(%rsi),%r10d
  0x00007fffe1230f44: shl     $0x3,%r10
  0x00007fffe1230f48: cmp     %rax,%r10
  0x00007fffe1230f4b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1230f51: nop
  0x00007fffe1230f52: nop
  0x00007fffe1230f53: nop
  0x00007fffe1230f54: nop
  0x00007fffe1230f55: nop
  0x00007fffe1230f56: nop
  0x00007fffe1230f57: nop
  0x00007fffe1230f58: nop
  0x00007fffe1230f59: nop
  0x00007fffe1230f5a: nop
  0x00007fffe1230f5b: nop
  0x00007fffe1230f5c: nop
  0x00007fffe1230f5d: nop
  0x00007fffe1230f5e: nop
  0x00007fffe1230f5f: nop
[Verified Entry Point]
  0x00007fffe1230f60: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1230f67: push    %rbp
  0x00007fffe1230f68: sub     $0x30,%rsp
  0x00007fffe1230f6c: movabs  $0x7ffff4c5c6b8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4aa24e8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x00007fffe1230f76: mov     0x104(%rdi),%ebx
  0x00007fffe1230f7c: add     $0x8,%ebx
  0x00007fffe1230f7f: mov     %ebx,0x104(%rdi)
  0x00007fffe1230f85: movabs  $0x7ffff4aa24e8,%rdi  ;   {metadata({method} {0x00007ffff4aa24e8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;)}
  0x00007fffe1230f8f: and     $0x1ff8,%ebx
  0x00007fffe1230f95: cmp     $0x0,%ebx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0032f20]
  0x00007fffe1230f98: je      0x7fffe1230fb7
  ;;  block B2 [0, 0]

  ;;  block B0 [0, 0]

  0x00007fffe1230f9e: mov     %rsi,%rdi         ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)

  0x00007fffe1230fa1: mov     %rsi,0x20(%rsp)
  0x00007fffe1230fa6: callq   0x7fffe1166ca0    ; OopMap{[32]=Oop off=107}
                                                ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)
                                                ;   {runtime_call}
  0x00007fffe1230fab: add     $0x30,%rsp
  0x00007fffe1230faf: pop     %rbp
  0x00007fffe1230fb0: test    %eax,0x16dca14a(%rip)  ;   {poll_return}
  0x00007fffe1230fb6: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1230fb7: mov     %rdi,0x8(%rsp)
  0x00007fffe1230fbc: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1230fc4: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=137}
                                                ;*synchronization entry
                                                ; - java.lang.Object::&lt;init&gt;@-1 (line 37)
                                                ;   {runtime_call}
  0x00007fffe1230fc9: jmp     0x7fffe1230f9e
  0x00007fffe1230fcb: nop
  0x00007fffe1230fcc: nop
  ;; Unwind handler
  0x00007fffe1230fcd: mov     0x348(%r15),%rax
  0x00007fffe1230fd4: movabs  $0x0,%r10
  0x00007fffe1230fde: mov     %r10,0x348(%r15)
  0x00007fffe1230fe5: movabs  $0x0,%r10
  0x00007fffe1230fef: mov     %r10,0x350(%r15)
  0x00007fffe1230ff6: add     $0x30,%rsp
  0x00007fffe1230ffa: pop     %rbp
  0x00007fffe1230ffb: jmpq    0x7fffe1168fe0    ;   {runtime_call}
[Exception Handler]
[Stub Code]
  0x00007fffe1231000: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe123100a: movabs  $0xdead,%rcx
  0x00007fffe1231014: movabs  $0xdead,%rsi
  0x00007fffe123101e: movabs  $0xdead,%rdi
  0x00007fffe1231028: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe123102d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1231032: sub     $0x80,%rsp
  0x00007fffe1231039: mov     %rax,0x78(%rsp)
  0x00007fffe123103e: mov     %rcx,0x70(%rsp)
  0x00007fffe1231043: mov     %rdx,0x68(%rsp)
  0x00007fffe1231048: mov     %rbx,0x60(%rsp)
  0x00007fffe123104d: mov     %rbp,0x50(%rsp)
  0x00007fffe1231052: mov     %rsi,0x48(%rsp)
  0x00007fffe1231057: mov     %rdi,0x40(%rsp)
  0x00007fffe123105c: mov     %r8,0x38(%rsp)
  0x00007fffe1231061: mov     %r9,0x30(%rsp)
  0x00007fffe1231066: mov     %r10,0x28(%rsp)
  0x00007fffe123106b: mov     %r11,0x20(%rsp)
  0x00007fffe1231070: mov     %r12,0x18(%rsp)
  0x00007fffe1231075: mov     %r13,0x10(%rsp)
  0x00007fffe123107a: mov     %r14,0x8(%rsp)
  0x00007fffe123107f: mov     %r15,(%rsp)
  0x00007fffe1231083: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123108d: movabs  $0x7fffe123102d,%rsi  ;   {internal_word}
  0x00007fffe1231097: mov     %rsp,%rdx
  0x00007fffe123109a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123109e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12310a3: hlt
[Deopt Handler Code]
  0x00007fffe12310a4: movabs  $0x7fffe12310a4,%r10  ;   {section_word}
  0x00007fffe12310ae: push    %r10
  0x00007fffe12310b0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12310b5: hlt
  0x00007fffe12310b6: hlt
  0x00007fffe12310b7: hlt
<nmethod compile_id='7' compiler='C1' level='3' entry='0x00007fffe1230f40' size='872' address='0x00007fffe1230dd0' relocation_offset='304' insts_offset='368' stub_offset='560' scopes_data_offset='752' scopes_pcs_offset='784' dependencies_offset='864' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='1288' iicount='1288' stamp='117.361'/>
<writer thread='140737327351552'/>
[Loaded sun.misc.ExtensionDependency from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.ZipEntry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.jar.JarEntry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.jar.JarFile$JarFileEntry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.ZipFile$ZipFileInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.Inflater from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.ZStreamRef from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.InflaterInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.util.zip.ZipFile$ZipFileInflaterInputStream from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.IOUtils from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='8' method='java/lang/Math min (II)I' bytes='11' count='384' iicount='384' level='3' stamp='117.373' comment='tiered' hot_count='384'/>
[Loaded sun.misc.URLClassPath$FileLoader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe12317d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1231940 Code size: 0x000001b8
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B4 [0, 0]

  0x00007fffe1231940: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1231947: push    %rbp
  0x00007fffe1231948: sub     $0x30,%rsp
  0x00007fffe123194c: movabs  $0x7ffff4d19e38,%rax  ;   {metadata(method data for {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe1231956: mov     0x104(%rax),%edi
  0x00007fffe123195c: add     $0x8,%edi
  0x00007fffe123195f: mov     %edi,0x104(%rax)
  0x00007fffe1231965: movabs  $0x7ffff4bc5c20,%rax  ;   {metadata({method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe123196f: and     $0x1ff8,%edi
  0x00007fffe1231975: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007ffff01702b0]
  0x00007fffe1231978: je      0x7fffe12319dd    ;*iload_0
                                                ; - java.lang.Math::min@0 (line 1336)

  ;;  block B5 [0, 0]

  ;;  block B0 [0, 2]

  0x00007fffe123197e: cmp     %edx,%esi
  0x00007fffe1231980: movabs  $0x7ffff4d19e38,%rax  ;   {metadata(method data for {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe123198a: movabs  $0x130,%rdi
  0x00007fffe1231994: jnle    0x7fffe12319a4
  0x00007fffe123199a: movabs  $0x140,%rdi
  0x00007fffe12319a4: mov     (%rax,%rdi),%rbx
  0x00007fffe12319a8: lea     0x1(%rbx),%rbx
  0x00007fffe12319ac: mov     %rbx,(%rax,%rdi)
  ;;   46 branch [GT] [B2] 
  0x00007fffe12319b0: jnle    0x7fffe12319cb    ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)

  ;;  block B1 [5, 6]

  0x00007fffe12319b6: movabs  $0x7ffff4d19e38,%rax  ;   {metadata(method data for {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe12319c0: incl    0x150(%rax)
  ;;   58 branch [AL] [B3] 
  0x00007fffe12319c6: jmpq    0x7fffe12319ce    ;*goto
                                                ; - java.lang.Math::min@6 (line 1336)

  ;;  block B2 [9, 10]

  0x00007fffe12319cb: mov     %rdx,%rsi         ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)

  ;;  block B3 [10, 10]

  0x00007fffe12319ce: mov     %rsi,%rax
  0x00007fffe12319d1: add     $0x30,%rsp
  0x00007fffe12319d5: pop     %rbp
  0x00007fffe12319d6: test    %eax,0x16dc9724(%rip)  ;   {poll_return}
  0x00007fffe12319dc: retq
  ;; CounterOverflowStub slow case
  0x00007fffe12319dd: mov     %rax,0x8(%rsp)
  0x00007fffe12319e2: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12319ea: callq   0x7fffe11fe5a0    ; OopMap{off=175}
                                                ;*synchronization entry
                                                ; - java.lang.Math::min@-1 (line 1336)
                                                ;   {runtime_call}
  0x00007fffe12319ef: jmp     0x7fffe123197e
  0x00007fffe12319f1: nop
  0x00007fffe12319f2: nop
  ;; Unwind handler
  0x00007fffe12319f3: mov     0x348(%r15),%rax
  0x00007fffe12319fa: movabs  $0x0,%r10
  0x00007fffe1231a04: mov     %r10,0x348(%r15)
  0x00007fffe1231a0b: movabs  $0x0,%r10
  0x00007fffe1231a15: mov     %r10,0x350(%r15)
  0x00007fffe1231a1c: add     $0x30,%rsp
  0x00007fffe1231a20: pop     %rbp
  0x00007fffe1231a21: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1231a26: hlt
  0x00007fffe1231a27: hlt
  0x00007fffe1231a28: hlt
  0x00007fffe1231a29: hlt
  0x00007fffe1231a2a: hlt
  0x00007fffe1231a2b: hlt
  0x00007fffe1231a2c: hlt
  0x00007fffe1231a2d: hlt
  0x00007fffe1231a2e: hlt
  0x00007fffe1231a2f: hlt
  0x00007fffe1231a30: hlt
  0x00007fffe1231a31: hlt
  0x00007fffe1231a32: hlt
  0x00007fffe1231a33: hlt
  0x00007fffe1231a34: hlt
  0x00007fffe1231a35: hlt
  0x00007fffe1231a36: hlt
  0x00007fffe1231a37: hlt
  0x00007fffe1231a38: hlt
  0x00007fffe1231a39: hlt
  0x00007fffe1231a3a: hlt
  0x00007fffe1231a3b: hlt
  0x00007fffe1231a3c: hlt
  0x00007fffe1231a3d: hlt
  0x00007fffe1231a3e: hlt
  0x00007fffe1231a3f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1231a40: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe1231a4a: movabs  $0xdead,%rcx
  0x00007fffe1231a54: movabs  $0xdead,%rsi
  0x00007fffe1231a5e: movabs  $0xdead,%rdi
  0x00007fffe1231a68: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1231a6d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1231a72: sub     $0x80,%rsp
  0x00007fffe1231a79: mov     %rax,0x78(%rsp)
  0x00007fffe1231a7e: mov     %rcx,0x70(%rsp)
  0x00007fffe1231a83: mov     %rdx,0x68(%rsp)
  0x00007fffe1231a88: mov     %rbx,0x60(%rsp)
  0x00007fffe1231a8d: mov     %rbp,0x50(%rsp)
  0x00007fffe1231a92: mov     %rsi,0x48(%rsp)
  0x00007fffe1231a97: mov     %rdi,0x40(%rsp)
  0x00007fffe1231a9c: mov     %r8,0x38(%rsp)
  0x00007fffe1231aa1: mov     %r9,0x30(%rsp)
  0x00007fffe1231aa6: mov     %r10,0x28(%rsp)
  0x00007fffe1231aab: mov     %r11,0x20(%rsp)
  0x00007fffe1231ab0: mov     %r12,0x18(%rsp)
  0x00007fffe1231ab5: mov     %r13,0x10(%rsp)
  0x00007fffe1231aba: mov     %r14,0x8(%rsp)
  0x00007fffe1231abf: mov     %r15,(%rsp)
  0x00007fffe1231ac3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1231acd: movabs  $0x7fffe1231a6d,%rsi  ;   {internal_word}
  0x00007fffe1231ad7: mov     %rsp,%rdx
  0x00007fffe1231ada: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1231ade: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1231ae3: hlt
[Deopt Handler Code]
  0x00007fffe1231ae4: movabs  $0x7fffe1231ae4,%r10  ;   {section_word}
  0x00007fffe1231aee: push    %r10
  0x00007fffe1231af0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1231af5: hlt
  0x00007fffe1231af6: hlt
  0x00007fffe1231af7: hlt
<nmethod compile_id='8' compiler='C1' level='3' entry='0x00007fffe1231940' size='976' address='0x00007fffe12317d0' relocation_offset='304' insts_offset='368' stub_offset='624' scopes_data_offset='816' scopes_pcs_offset='856' dependencies_offset='968' method='java/lang/Math min (II)I' bytes='11' count='434' iicount='434' stamp='117.386'/>
<writer thread='140737327351552'/>
[Loaded sun.misc.Resource from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.misc.URLClassPath$FileLoader$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.ByteBuffered from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FileInputStream$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.PermissionCollection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.Permissions from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URLConnection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.www.URLConnection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.www.protocol.file.FileURLConnection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.net.www.MessageHeader from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FilePermission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.DefaultFileSystemProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.file.spi.FileSystemProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.AbstractFileSystemProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixFileSystemProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.LinuxFileSystemProvider from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.file.FileSystem from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixFileSystem from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.LinuxFileSystem from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.AbstractPath from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixPath from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.Util from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixNativeDispatcher from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixNativeDispatcher$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.file.attribute.BasicFileAttributes from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.file.attribute.PosixFileAttributes from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixFileAttributes from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixFileStoreAttributes from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded sun.nio.fs.UnixMountEntry from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Readable from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.CharBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.HeapCharBuffer from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CoderResult from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CoderResult$Cache from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CoderResult$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.nio.charset.CoderResult$2 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URI from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.net.URI$Parser from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FilePermission$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.io.FilePermissionCollection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='9' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='1536' iicount='1536' level='1' stamp='117.610' comment='tiered' hot_count='1536'/>
[Loaded java.security.AllPermission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.UnresolvedPermission from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.security.BasicPermissionCollection from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1234c10:
Code:
Argument 0 is unknown.RIP: 0x7fffe1234d80 Code size: 0x00000138
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa24e8} &apos;&lt;init&gt;&apos; &apos;()V&apos; in &apos;java/lang/Object&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1234d80: mov     0x8(%rsi),%r10d
  0x00007fffe1234d84: shl     $0x3,%r10
  0x00007fffe1234d88: cmp     %rax,%r10
  0x00007fffe1234d8b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1234d91: nop
  0x00007fffe1234d92: nop
  0x00007fffe1234d93: nop
  0x00007fffe1234d94: nop
  0x00007fffe1234d95: nop
  0x00007fffe1234d96: nop
  0x00007fffe1234d97: nop
  0x00007fffe1234d98: nop
  0x00007fffe1234d99: nop
  0x00007fffe1234d9a: nop
  0x00007fffe1234d9b: nop
  0x00007fffe1234d9c: nop
  0x00007fffe1234d9d: nop
  0x00007fffe1234d9e: nop
  0x00007fffe1234d9f: nop
[Verified Entry Point]
  0x00007fffe1234da0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1234da7: push    %rbp
  0x00007fffe1234da8: sub     $0x30,%rsp
  ;;  block B0 [0, 0]

  0x00007fffe1234dac: mov     %rsi,%rdi         ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)

  0x00007fffe1234daf: mov     %rsi,0x20(%rsp)
  0x00007fffe1234db4: callq   0x7fffe1166ca0    ; OopMap{[32]=Oop off=57}
                                                ;*return
                                                ; - java.lang.Object::&lt;init&gt;@0 (line 37)
                                                ;   {runtime_call}
  0x00007fffe1234db9: add     $0x30,%rsp
  0x00007fffe1234dbd: pop     %rbp
  0x00007fffe1234dbe: test    %eax,0x16dc633c(%rip)  ;   {poll_return}
  0x00007fffe1234dc4: retq
  0x00007fffe1234dc5: nop
  0x00007fffe1234dc6: nop
  ;; Unwind handler
  0x00007fffe1234dc7: mov     0x348(%r15),%rax
  0x00007fffe1234dce: movabs  $0x0,%r10
  0x00007fffe1234dd8: mov     %r10,0x348(%r15)
  0x00007fffe1234ddf: movabs  $0x0,%r10
  0x00007fffe1234de9: mov     %r10,0x350(%r15)
  0x00007fffe1234df0: add     $0x30,%rsp
  0x00007fffe1234df4: pop     %rbp
  0x00007fffe1234df5: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1234dfa: hlt
  0x00007fffe1234dfb: hlt
  0x00007fffe1234dfc: hlt
  0x00007fffe1234dfd: hlt
  0x00007fffe1234dfe: hlt
  0x00007fffe1234dff: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1234e00: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe1234e0a: movabs  $0xdead,%rcx
  0x00007fffe1234e14: movabs  $0xdead,%rsi
  0x00007fffe1234e1e: movabs  $0xdead,%rdi
  0x00007fffe1234e28: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1234e2d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1234e32: sub     $0x80,%rsp
  0x00007fffe1234e39: mov     %rax,0x78(%rsp)
  0x00007fffe1234e3e: mov     %rcx,0x70(%rsp)
  0x00007fffe1234e43: mov     %rdx,0x68(%rsp)
  0x00007fffe1234e48: mov     %rbx,0x60(%rsp)
  0x00007fffe1234e4d: mov     %rbp,0x50(%rsp)
  0x00007fffe1234e52: mov     %rsi,0x48(%rsp)
  0x00007fffe1234e57: mov     %rdi,0x40(%rsp)
  0x00007fffe1234e5c: mov     %r8,0x38(%rsp)
  0x00007fffe1234e61: mov     %r9,0x30(%rsp)
  0x00007fffe1234e66: mov     %r10,0x28(%rsp)
  0x00007fffe1234e6b: mov     %r11,0x20(%rsp)
  0x00007fffe1234e70: mov     %r12,0x18(%rsp)
  0x00007fffe1234e75: mov     %r13,0x10(%rsp)
  0x00007fffe1234e7a: mov     %r14,0x8(%rsp)
  0x00007fffe1234e7f: mov     %r15,(%rsp)
  0x00007fffe1234e83: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1234e8d: movabs  $0x7fffe1234e2d,%rsi  ;   {internal_word}
  0x00007fffe1234e97: mov     %rsp,%rdx
  0x00007fffe1234e9a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1234e9e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1234ea3: hlt
[Deopt Handler Code]
  0x00007fffe1234ea4: movabs  $0x7fffe1234ea4,%r10  ;   {section_word}
  0x00007fffe1234eae: push    %r10
  0x00007fffe1234eb0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1234eb5: hlt
  0x00007fffe1234eb6: hlt
  0x00007fffe1234eb7: hlt
<nmethod compile_id='9' compiler='C1' level='1' entry='0x00007fffe1234d80' size='784' address='0x00007fffe1234c10' relocation_offset='304' insts_offset='368' stub_offset='496' scopes_data_offset='688' scopes_pcs_offset='712' dependencies_offset='776' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='1568' iicount='1568' stamp='117.619'/>
<make_not_entrant thread='140736954574592' compile_id='7' compiler='C1' level='3' stamp='117.619'/>
<writer thread='140737327351552'/>
[Loaded StackTopCache from file:/home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/003.prictice-code/]
[Loaded sun.launcher.LauncherHelper$FXHelper from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Class$MethodArray from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Void from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
<task_queued compile_id='10' method='java/nio/Buffer position ()I' bytes='5' count='128' iicount='128' level='1' stamp='117.624' comment='tiered' hot_count='128'/>
<task_queued compile_id='11' method='java/nio/Buffer limit ()I' bytes='5' count='128' iicount='128' level='1' stamp='117.624' comment='tiered' hot_count='128'/>
<task_queued compile_id='12' method='java/nio/ByteBuffer arrayOffset ()I' bytes='35' count='256' iicount='256' level='3' stamp='117.624' comment='tiered' hot_count='256'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1234f50:
Code:
Argument 0 is unknown.RIP: 0x7fffe12350c0 Code size: 0x00000138
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56140} &apos;position&apos; &apos;()I&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe12350c0: mov     0x8(%rsi),%r10d
  0x00007fffe12350c4: shl     $0x3,%r10
  0x00007fffe12350c8: cmp     %rax,%r10
  0x00007fffe12350cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12350d1: nop
  0x00007fffe12350d2: nop
  0x00007fffe12350d3: nop
  0x00007fffe12350d4: nop
  0x00007fffe12350d5: nop
  0x00007fffe12350d6: nop
  0x00007fffe12350d7: nop
  0x00007fffe12350d8: nop
  0x00007fffe12350d9: nop
  0x00007fffe12350da: nop
  0x00007fffe12350db: nop
  0x00007fffe12350dc: nop
  0x00007fffe12350dd: nop
  0x00007fffe12350de: nop
  0x00007fffe12350df: nop
[Verified Entry Point]
  0x00007fffe12350e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12350e7: push    %rbp
  0x00007fffe12350e8: sub     $0x30,%rsp        ;*aload_0
                                                ; - java.nio.Buffer::position@0 (line 226)

  ;;  block B0 [0, 4]

  0x00007fffe12350ec: mov     0x18(%rsi),%eax   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)

  0x00007fffe12350ef: add     $0x30,%rsp
  0x00007fffe12350f3: pop     %rbp
  0x00007fffe12350f4: test    %eax,0x16dc6006(%rip)  ;   {poll_return}
  0x00007fffe12350fa: retq
  0x00007fffe12350fb: nop
  0x00007fffe12350fc: nop
  ;; Unwind handler
  0x00007fffe12350fd: mov     0x348(%r15),%rax
  0x00007fffe1235104: movabs  $0x0,%r10
  0x00007fffe123510e: mov     %r10,0x348(%r15)
  0x00007fffe1235115: movabs  $0x0,%r10
  0x00007fffe123511f: mov     %r10,0x350(%r15)
  0x00007fffe1235126: add     $0x30,%rsp
  0x00007fffe123512a: pop     %rbp
  0x00007fffe123512b: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1235130: hlt
  0x00007fffe1235131: hlt
  0x00007fffe1235132: hlt
  0x00007fffe1235133: hlt
  0x00007fffe1235134: hlt
  0x00007fffe1235135: hlt
  0x00007fffe1235136: hlt
  0x00007fffe1235137: hlt
  0x00007fffe1235138: hlt
  0x00007fffe1235139: hlt
  0x00007fffe123513a: hlt
  0x00007fffe123513b: hlt
  0x00007fffe123513c: hlt
  0x00007fffe123513d: hlt
  0x00007fffe123513e: hlt
  0x00007fffe123513f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1235140: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe123514a: movabs  $0xdead,%rcx
  0x00007fffe1235154: movabs  $0xdead,%rsi
  0x00007fffe123515e: movabs  $0xdead,%rdi
  0x00007fffe1235168: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe123516d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1235172: sub     $0x80,%rsp
  0x00007fffe1235179: mov     %rax,0x78(%rsp)
  0x00007fffe123517e: mov     %rcx,0x70(%rsp)
  0x00007fffe1235183: mov     %rdx,0x68(%rsp)
  0x00007fffe1235188: mov     %rbx,0x60(%rsp)
  0x00007fffe123518d: mov     %rbp,0x50(%rsp)
  0x00007fffe1235192: mov     %rsi,0x48(%rsp)
  0x00007fffe1235197: mov     %rdi,0x40(%rsp)
  0x00007fffe123519c: mov     %r8,0x38(%rsp)
  0x00007fffe12351a1: mov     %r9,0x30(%rsp)
  0x00007fffe12351a6: mov     %r10,0x28(%rsp)
  0x00007fffe12351ab: mov     %r11,0x20(%rsp)
  0x00007fffe12351b0: mov     %r12,0x18(%rsp)
  0x00007fffe12351b5: mov     %r13,0x10(%rsp)
  0x00007fffe12351ba: mov     %r14,0x8(%rsp)
  0x00007fffe12351bf: mov     %r15,(%rsp)
  0x00007fffe12351c3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12351cd: movabs  $0x7fffe123516d,%rsi  ;   {internal_word}
  0x00007fffe12351d7: mov     %rsp,%rdx
  0x00007fffe12351da: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12351de: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12351e3: hlt
[Deopt Handler Code]
  0x00007fffe12351e4: movabs  $0x7fffe12351e4,%r10  ;   {section_word}
  0x00007fffe12351ee: push    %r10
  0x00007fffe12351f0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12351f5: hlt
  0x00007fffe12351f6: hlt
  0x00007fffe12351f7: hlt
<nmethod compile_id='10' compiler='C1' level='1' entry='0x00007fffe12350c0' size='776' address='0x00007fffe1234f50' relocation_offset='304' insts_offset='368' stub_offset='496' scopes_data_offset='688' scopes_pcs_offset='704' dependencies_offset='768' method='java/nio/Buffer position ()I' bytes='5' count='491' iicount='491' stamp='117.633'/>
<writer thread='140737327351552'/>
<task_queued compile_id='13' method='java/nio/Buffer position (I)Ljava/nio/Buffer;' bytes='40' count='384' iicount='384' level='3' stamp='117.633' comment='tiered' hot_count='384'/>
<task_queued compile_id='14' method='java/nio/CharBuffer arrayOffset ()I' bytes='35' count='384' iicount='384' level='3' stamp='117.633' comment='tiered' hot_count='384'/>
<task_queued compile_id='15' method='sun/nio/cs/StreamEncoder isOpen ()Z' bytes='5' count='128' iicount='128' level='1' stamp='117.633' comment='tiered' hot_count='128'/>
<task_queued compile_id='16' method='java/nio/charset/CoderResult isUnderflow ()Z' bytes='13' count='384' iicount='384' level='3' stamp='117.634' comment='tiered' hot_count='384'/>
<task_queued compile_id='17' method='java/nio/ByteBuffer array ()[B' bytes='35' count='512' iicount='512' level='3' stamp='117.636' comment='tiered' hot_count='512'/>
<task_queued compile_id='18' method='java/io/BufferedWriter ensureOpen ()V' bytes='18' count='512' iicount='512' level='3' stamp='117.636' comment='tiered' hot_count='512'/>
<task_queued compile_id='19' method='java/io/PrintStream ensureOpen ()V' bytes='18' count='512' iicount='512' level='3' stamp='117.636' comment='tiered' hot_count='512'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1235290:
Code:
Argument 0 is unknown.RIP: 0x7fffe1235440 Code size: 0x00000380
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x50]  (sp of caller)
  ;;  block B5 [0, 0]

  0x00007fffe1235440: mov     0x8(%rsi),%r10d
  0x00007fffe1235444: shl     $0x3,%r10
  0x00007fffe1235448: cmp     %rax,%r10
  0x00007fffe123544b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1235451: nop
  0x00007fffe1235452: nop
  0x00007fffe1235453: nop
  0x00007fffe1235454: nop
  0x00007fffe1235455: nop
  0x00007fffe1235456: nop
  0x00007fffe1235457: nop
  0x00007fffe1235458: nop
  0x00007fffe1235459: nop
  0x00007fffe123545a: nop
  0x00007fffe123545b: nop
  0x00007fffe123545c: nop
  0x00007fffe123545d: nop
  0x00007fffe123545e: nop
  0x00007fffe123545f: nop
[Verified Entry Point]
  0x00007fffe1235460: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1235467: push    %rbp
  0x00007fffe1235468: sub     $0x40,%rsp
  0x00007fffe123546c: movabs  $0x7ffff4d71338,%rax  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe1235476: mov     0x104(%rax),%edx
  0x00007fffe123547c: add     $0x8,%edx
  0x00007fffe123547f: mov     %edx,0x104(%rax)
  0x00007fffe1235485: movabs  $0x7ffff4c34298,%rax  ;   {metadata({method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123548f: and     $0x1ff8,%edx
  0x00007fffe1235495: cmp     $0x0,%edx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007ffff017b9f0]
  0x00007fffe1235498: je      0x7fffe123562e    ;*aload_0
                                                ; - java.nio.ByteBuffer::arrayOffset@0 (line 1029)

  ;;  block B6 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe123549e: mov     0x2c(%rsi),%eax
  0x00007fffe12354a1: push    %r10
  0x00007fffe12354a3: cmp     0x16b24736(%rip),%r12  ;   {external_word}
  0x00007fffe12354aa: je      0x7fffe1235527
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12354b0: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12354b5: sub     $0x80,%rsp
  0x00007fffe12354bc: mov     %rax,0x78(%rsp)
  0x00007fffe12354c1: mov     %rcx,0x70(%rsp)
  0x00007fffe12354c6: mov     %rdx,0x68(%rsp)
  0x00007fffe12354cb: mov     %rbx,0x60(%rsp)
  0x00007fffe12354d0: mov     %rbp,0x50(%rsp)
  0x00007fffe12354d5: mov     %rsi,0x48(%rsp)
  0x00007fffe12354da: mov     %rdi,0x40(%rsp)
  0x00007fffe12354df: mov     %r8,0x38(%rsp)
  0x00007fffe12354e4: mov     %r9,0x30(%rsp)
  0x00007fffe12354e9: mov     %r10,0x28(%rsp)
  0x00007fffe12354ee: mov     %r11,0x20(%rsp)
  0x00007fffe12354f3: mov     %r12,0x18(%rsp)
  0x00007fffe12354f8: mov     %r13,0x10(%rsp)
  0x00007fffe12354fd: mov     %r14,0x8(%rsp)
  0x00007fffe1235502: mov     %r15,(%rsp)
  0x00007fffe1235506: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1235510: movabs  $0x7fffe12354b0,%rsi  ;   {internal_word}
  0x00007fffe123551a: mov     %rsp,%rdx
  0x00007fffe123551d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1235521: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1235526: hlt
  0x00007fffe1235527: pop     %r10              ;*getfield hb
                                                ; - java.nio.ByteBuffer::arrayOffset@1 (line 1029)

  0x00007fffe1235529: cmp     $0x0,%rax
  0x00007fffe123552d: movabs  $0x7ffff4d71338,%rax  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe1235537: movabs  $0x130,%rdx
  0x00007fffe1235541: jne     0x7fffe1235551
  0x00007fffe1235547: movabs  $0x140,%rdx
  0x00007fffe1235551: mov     (%rax,%rdx),%rdi
  0x00007fffe1235555: lea     0x1(%rdi),%rdi
  0x00007fffe1235559: mov     %rdi,(%rax,%rdx)
  ;;   46 branch [EQ] [B1] 
  0x00007fffe123555d: je      0x7fffe12355ee    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)

  ;;  block B2 [15, 19]

  0x00007fffe1235563: movsbl  0x28(%rsi),%eax   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::arrayOffset@16 (line 1031)

  0x00007fffe1235567: cmp     $0x0,%eax
  0x00007fffe123556a: movabs  $0x7ffff4d71338,%rax  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe1235574: movabs  $0x160,%rdx
  0x00007fffe123557e: je      0x7fffe123558e
  0x00007fffe1235584: movabs  $0x170,%rdx
  0x00007fffe123558e: mov     (%rax,%rdx),%rdi
  0x00007fffe1235592: lea     0x1(%rdi),%rdi
  0x00007fffe1235596: mov     %rdi,(%rax,%rdx)
  ;;   66 branch [NE] [B3] 
  0x00007fffe123559a: jne     0x7fffe12355af    ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)

  ;;  block B4 [30, 34]

  0x00007fffe12355a0: mov     0x24(%rsi),%eax   ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)

  0x00007fffe12355a3: add     $0x40,%rsp
  0x00007fffe12355a7: pop     %rbp
  0x00007fffe12355a8: test    %eax,0x16dc5b52(%rip)  ;   {poll_return}
  0x00007fffe12355ae: retq                      ;*ireturn
                                                ; - java.nio.ByteBuffer::arrayOffset@34 (line 1033)

  ;;  block B3 [22, 29]

  ;;   80 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:22]
  0x00007fffe12355af: nop
  0x00007fffe12355b0: jmpq    0x7fffe1235654    ;   {no_reloc}
  0x00007fffe12355b5: add     %al,(%rax)
  0x00007fffe12355b7: add     %al,(%rax)
  0x00007fffe12355b9: add     %ch,%cl
  0x00007fffe12355bb: lahf
  0x00007fffe12355bc: add     %al,(%rax)
  0x00007fffe12355be: add     %cl,0xffffffffffffff8b(%rax)
                                                ;*new  ; - java.nio.ByteBuffer::arrayOffset@22 (line 1032)

  0x00007fffe12355c1: Fatal error: Disassembling failed with error code: 15<nmethod compile_id='12' compiler='C1' level='3' entry='0x00007fffe1235440' size='1800' address='0x00007fffe1235290' relocation_offset='304' insts_offset='432' stub_offset='1104' scopes_data_offset='1336' scopes_pcs_offset='1456' dependencies_offset='1792' method='java/nio/ByteBuffer arrayOffset ()I' bytes='35' count='1717' iicount='1717' stamp='117.645'/>
<writer thread='140737327351552'/>
<task_queued compile_id='20' method='java/io/BufferedOutputStream flush ()V' bytes='12' count='640' iicount='640' level='3' stamp='117.646' comment='tiered' hot_count='640'/>
<task_queued compile_id='21' method='java/io/BufferedOutputStream flushBuffer ()V' bytes='29' count='640' iicount='640' level='3' stamp='117.646' comment='tiered' hot_count='640'/>
<task_queued compile_id='22' method='java/io/OutputStream flush ()V' bytes='1' count='640' iicount='640' level='3' stamp='117.646' comment='tiered' hot_count='640'/>
<task_queued compile_id='23' method='java/lang/String getChars (II[CI)V' bytes='62' count='640' iicount='640' level='3' stamp='117.648' comment='tiered' hot_count='640'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe12359d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1235b60 Code size: 0x000002f0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/Buffer&apos;
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B6 [0, 0]

  0x00007fffe1235b60: mov     0x8(%rsi),%r10d
  0x00007fffe1235b64: shl     $0x3,%r10
  0x00007fffe1235b68: cmp     %rax,%r10
  0x00007fffe1235b6b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1235b71: nop
  0x00007fffe1235b72: nop
  0x00007fffe1235b73: nop
  0x00007fffe1235b74: nop
  0x00007fffe1235b75: nop
  0x00007fffe1235b76: nop
  0x00007fffe1235b77: nop
  0x00007fffe1235b78: nop
  0x00007fffe1235b79: nop
  0x00007fffe1235b7a: nop
  0x00007fffe1235b7b: nop
  0x00007fffe1235b7c: nop
  0x00007fffe1235b7d: nop
  0x00007fffe1235b7e: nop
  0x00007fffe1235b7f: nop
[Verified Entry Point]
  0x00007fffe1235b80: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1235b87: push    %rbp
  0x00007fffe1235b88: sub     $0x30,%rsp
  0x00007fffe1235b8c: movabs  $0x7ffff4d714e0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1235b96: mov     0x104(%rax),%edi
  0x00007fffe1235b9c: add     $0x8,%edi
  0x00007fffe1235b9f: mov     %edi,0x104(%rax)
  0x00007fffe1235ba5: movabs  $0x7ffff4b56228,%rax  ;   {metadata({method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1235baf: and     $0x1ff8,%edi
  0x00007fffe1235bb5: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb0040010]
  0x00007fffe1235bb8: je      0x7fffe1235cfe    ;*iload_1
                                                ; - java.nio.Buffer::position@0 (line 243)

  ;;  block B7 [0, 0]

  ;;  block B0 [0, 5]

  0x00007fffe1235bbe: mov     0x1c(%rsi),%eax   ;*getfield limit
                                                ; - java.nio.Buffer::position@2 (line 243)

  0x00007fffe1235bc1: cmp     %eax,%edx
  0x00007fffe1235bc3: movabs  $0x7ffff4d714e0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1235bcd: movabs  $0x130,%rdi
  0x00007fffe1235bd7: jnle    0x7fffe1235be7
  0x00007fffe1235bdd: movabs  $0x140,%rdi
  0x00007fffe1235be7: mov     (%rax,%rdi),%rcx
  0x00007fffe1235beb: lea     0x1(%rcx),%rcx
  0x00007fffe1235bef: mov     %rcx,(%rax,%rdi)
  ;;   48 branch [GT] [B2] 
  0x00007fffe1235bf3: jnle    0x7fffe1235c86    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)

  ;;  block B1 [8, 9]

  0x00007fffe1235bf9: cmp     $0x0,%edx
  0x00007fffe1235bfc: movabs  $0x7ffff4d714e0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1235c06: movabs  $0x150,%rdi
  0x00007fffe1235c10: jnl     0x7fffe1235c20
  0x00007fffe1235c16: movabs  $0x160,%rdi
  0x00007fffe1235c20: mov     (%rax,%rdi),%rcx
  0x00007fffe1235c24: lea     0x1(%rcx),%rcx
  0x00007fffe1235c28: mov     %rcx,(%rax,%rdi)
  ;;   70 branch [LT] [B2] 
  0x00007fffe1235c2c: jl      0x7fffe1235c86    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)

  ;;  block B3 [20, 25]

  0x00007fffe1235c32: mov     0xc(%rsi),%eax    ;*getfield mark
                                                ; - java.nio.Buffer::position@21 (line 245)

  0x00007fffe1235c35: cmp     %edx,%eax
  0x00007fffe1235c37: movabs  $0x7ffff4d714e0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1235c41: movabs  $0x180,%rdi
  0x00007fffe1235c4b: jle     0x7fffe1235c5b
  0x00007fffe1235c51: movabs  $0x190,%rdi
  0x00007fffe1235c5b: mov     (%rax,%rdi),%rcx
  0x00007fffe1235c5f: lea     0x1(%rcx),%rcx
  0x00007fffe1235c63: mov     %rcx,(%rax,%rdi)
  ;;   94 branch [LE] [B5] 
  0x00007fffe1235c67: jle     0x7fffe1235c74    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)

  ;;  block B4 [28, 33]

  0x00007fffe1235c6d: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::position@30 (line 245)

  ;;  block B5 [33, 39]

  0x00007fffe1235c74: mov     %edx,0x18(%rsi)   ;*putfield position
                                                ; - java.nio.Buffer::position@35 (line 246)

  0x00007fffe1235c77: mov     %rsi,%rax
  0x00007fffe1235c7a: add     $0x30,%rsp
  0x00007fffe1235c7e: pop     %rbp
  0x00007fffe1235c7f: test    %eax,0x16dc547b(%rip)  ;   {poll_return}
  0x00007fffe1235c85: retq                      ;*areturn
                                                ; - java.nio.Buffer::position@39 (line 247)

  ;;  block B2 [12, 19]

  ;;  118 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:12]
  0x00007fffe1235c86: nop
  0x00007fffe1235c87: nop
  0x00007fffe1235c88: jmpq    0x7fffe1235d24    ;   {no_reloc}
  0x00007fffe1235c8d: add     %al,(%rax)
  0x00007fffe1235c8f: add     %al,(%rax)
  0x00007fffe1235c91: add     %cl,0xffffffffffffff8b(%rcx)
  0x00007fffe1235c94: jo      0x7fffe1235cdf
  0x00007fffe1235c97: lea     0x20(%rax),%edi
  0x00007fffe1235c9a: cmp     0x80(%r15),%rdi
  0x00007fffe1235ca1: jnbe    0x7fffe1235d2e
  0x00007fffe1235ca7: mov     %rdi,0x70(%r15)
  0x00007fffe1235cab: mov     0xb0(%rdx),%rcx
  0x00007fffe1235cb2: mov     %rcx,(%rax)
  0x00007fffe1235cb5: mov     %rdx,%rcx
  0x00007fffe1235cb8: shr     $0x3,%rcx
  0x00007fffe1235cbc: mov     %ecx,0x8(%rax)
  0x00007fffe1235cbf: xor     %rcx,%rcx
  0x00007fffe1235cc2: mov     %ecx,0xc(%rax)
  0x00007fffe1235cc5: xor     %rcx,%rcx
  0x00007fffe1235cc8: mov     %rcx,0x10(%rax)
  0x00007fffe1235ccc: mov     %rcx,0x18(%rax)   ;*new  ; - java.nio.Buffer::position@12 (line 244)

  0x00007fffe1235cd0: mov     %rax,%rsi
  0x00007fffe1235cd3: movabs  $0x7ffff4d714e0,%rdi  ;   {metadata(method data for {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1235cdd: addq    $0x1,0x170(%rdi)
  0x00007fffe1235ce5: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::position@16 (line 244)

  0x00007fffe1235ce8: mov     %rax,0x20(%rsp)
  0x00007fffe1235ced: nop
  0x00007fffe1235cee: nop
  0x00007fffe1235cef: callq   0x7fffe1105e80    ; OopMap{[32]=Oop off=404}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::position@16 (line 244)
                                                ;   {optimized virtual_call}
  0x00007fffe1235cf4: mov     0x20(%rsp),%rax
  0x00007fffe1235cf9: jmpq    0x7fffe1235d63
  ;; CounterOverflowStub slow case
  0x00007fffe1235cfe: mov     %rax,0x8(%rsp)
  0x00007fffe1235d03: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1235d0b: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=432}
                                                ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)
                                                ;   {runtime_call}
  0x00007fffe1235d10: jmpq    0x7fffe1235bbe
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1235d15: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1235d1f: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1235d24: callq   0x7fffe11fc960    ; OopMap{off=457}
                                                ;*new  ; - java.nio.Buffer::position@12 (line 244)
                                                ;   {runtime_call}
  0x00007fffe1235d29: jmpq    0x7fffe1235c88
  ;; NewInstanceStub slow case
  0x00007fffe1235d2e: mov     %rdx,%rdx
  0x00007fffe1235d31: callq   0x7fffe116ad80    ; OopMap{off=470}
                                                ;*new  ; - java.nio.Buffer::position@12 (line 244)
                                                ;   {runtime_call}
  0x00007fffe1235d36: jmp     0x7fffe1235cd0
  0x00007fffe1235d38: nop
  0x00007fffe1235d39: nop
  ;; Unwind handler
  0x00007fffe1235d3a: mov     0x348(%r15),%rax
  0x00007fffe1235d41: movabs  $0x0,%r10
  0x00007fffe1235d4b: mov     %r10,0x348(%r15)
  0x00007fffe1235d52: movabs  $0x0,%r10
  0x00007fffe1235d5c: mov     %r10,0x350(%r15)
  0x00007fffe1235d63: add     $0x30,%rsp
  0x00007fffe1235d67: pop     %rbp
  0x00007fffe1235d68: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1235d6d: hlt
  0x00007fffe1235d6e: hlt
  0x00007fffe1235d6f: hlt
  0x00007fffe1235d70: hlt
  0x00007fffe1235d71: hlt
  0x00007fffe1235d72: hlt
  0x00007fffe1235d73: hlt
  0x00007fffe1235d74: hlt
  0x00007fffe1235d75: hlt
  0x00007fffe1235d76: hlt
  0x00007fffe1235d77: hlt
  0x00007fffe1235d78: hlt
  0x00007fffe1235d79: hlt
  0x00007fffe1235d7a: hlt
  0x00007fffe1235d7b: hlt
  0x00007fffe1235d7c: hlt
  0x00007fffe1235d7d: hlt
  0x00007fffe1235d7e: hlt
  0x00007fffe1235d7f: hlt
[Stub Code]
  0x00007fffe1235d80: nop                       ;   {no_reloc}
  0x00007fffe1235d81: nop
  0x00007fffe1235d82: nop
  0x00007fffe1235d83: nop
  0x00007fffe1235d84: nop
  0x00007fffe1235d85: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1235d8f: jmpq    0x7fffe1235d8f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1235d94: movabs  $0xdead,%rbx
  0x00007fffe1235d9e: movabs  $0xdead,%rcx
  0x00007fffe1235da8: movabs  $0xdead,%rsi
  0x00007fffe1235db2: movabs  $0xdead,%rdi
  0x00007fffe1235dbc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1235dc1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1235dc6: sub     $0x80,%rsp
  0x00007fffe1235dcd: mov     %rax,0x78(%rsp)
  0x00007fffe1235dd2: mov     %rcx,0x70(%rsp)
  0x00007fffe1235dd7: mov     %rdx,0x68(%rsp)
  0x00007fffe1235ddc: mov     %rbx,0x60(%rsp)
  0x00007fffe1235de1: mov     %rbp,0x50(%rsp)
  0x00007fffe1235de6: mov     %rsi,0x48(%rsp)
  0x00007fffe1235deb: mov     %rdi,0x40(%rsp)
  0x00007fffe1235df0: mov     %r8,0x38(%rsp)
  0x00007fffe1235df5: mov     %r9,0x30(%rsp)
  0x00007fffe1235dfa: mov     %r10,0x28(%rsp)
  0x00007fffe1235dff: mov     %r11,0x20(%rsp)
  0x00007fffe1235e04: mov     %r12,0x18(%rsp)
  0x00007fffe1235e09: mov     %r13,0x10(%rsp)
  0x00007fffe1235e0e: mov     %r14,0x8(%rsp)
  0x00007fffe1235e13: mov     %r15,(%rsp)
  0x00007fffe1235e17: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1235e21: movabs  $0x7fffe1235dc1,%rsi  ;   {internal_word}
  0x00007fffe1235e2b: mov     %rsp,%rdx
  0x00007fffe1235e2e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1235e32: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1235e37: hlt
[Deopt Handler Code]
  0x00007fffe1235e38: movabs  $0x7fffe1235e38,%r10  ;   {section_word}
  0x00007fffe1235e42: push    %r10
  0x00007fffe1235e44: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1235e49: hlt
  0x00007fffe1235e4a: hlt
  0x00007fffe1235e4b: hlt
  0x00007fffe1235e4c: hlt
  0x00007fffe1235e4d: hlt
  0x00007fffe1235e4e: hlt
  0x00007fffe1235e4f: hlt
<nmethod compile_id='13' compiler='C1' level='3' entry='0x00007fffe1235b60' size='1544' address='0x00007fffe12359d0' relocation_offset='304' insts_offset='400' stub_offset='944' scopes_data_offset='1160' scopes_pcs_offset='1264' dependencies_offset='1536' method='java/nio/Buffer position (I)Ljava/nio/Buffer;' bytes='40' count='2267' iicount='2267' stamp='117.660'/>
<writer thread='140737327351552'/>
<task_queued compile_id='24' method='java/nio/Buffer &lt;init&gt; (IIII)V' bytes='121' count='768' iicount='768' level='3' stamp='117.660' comment='tiered' hot_count='768'/>
<task_queued compile_id='25' method='java/nio/Buffer limit (I)Ljava/nio/Buffer;' bytes='53' count='768' iicount='768' level='3' stamp='117.660' comment='tiered' hot_count='768'/>
<task_queued compile_id='26' method='java/nio/CharBuffer wrap ([CII)Ljava/nio/CharBuffer;' bytes='20' count='768' iicount='768' level='3' stamp='117.661' comment='tiered' hot_count='768'/>
<task_queued compile_id='27' method='java/nio/HeapCharBuffer &lt;init&gt; ([CII)V' bytes='14' count='768' iicount='768' level='3' stamp='117.661' comment='tiered' hot_count='768'/>
<task_queued compile_id='28' method='java/nio/CharBuffer &lt;init&gt; (IIII[CI)V' bytes='22' count='768' iicount='768' level='3' stamp='117.661' comment='tiered' hot_count='768'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1236010:
Code:
Argument 0 is unknown.RIP: 0x7fffe1236180 Code size: 0x00000138
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b562d8} &apos;limit&apos; &apos;()I&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1236180: mov     0x8(%rsi),%r10d
  0x00007fffe1236184: shl     $0x3,%r10
  0x00007fffe1236188: cmp     %rax,%r10
  0x00007fffe123618b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1236191: nop
  0x00007fffe1236192: nop
  0x00007fffe1236193: nop
  0x00007fffe1236194: nop
  0x00007fffe1236195: nop
  0x00007fffe1236196: nop
  0x00007fffe1236197: nop
  0x00007fffe1236198: nop
  0x00007fffe1236199: nop
  0x00007fffe123619a: nop
  0x00007fffe123619b: nop
  0x00007fffe123619c: nop
  0x00007fffe123619d: nop
  0x00007fffe123619e: nop
  0x00007fffe123619f: nop
[Verified Entry Point]
  0x00007fffe12361a0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12361a7: push    %rbp
  0x00007fffe12361a8: sub     $0x30,%rsp        ;*aload_0
                                                ; - java.nio.Buffer::limit@0 (line 256)

  ;;  block B0 [0, 4]

  0x00007fffe12361ac: mov     0x1c(%rsi),%eax   ;*getfield limit
                                                ; - java.nio.Buffer::limit@1 (line 256)

  0x00007fffe12361af: add     $0x30,%rsp
  0x00007fffe12361b3: pop     %rbp
  0x00007fffe12361b4: test    %eax,0x16dc4f46(%rip)  ;   {poll_return}
  0x00007fffe12361ba: retq
  0x00007fffe12361bb: nop
  0x00007fffe12361bc: nop
  ;; Unwind handler
  0x00007fffe12361bd: mov     0x348(%r15),%rax
  0x00007fffe12361c4: movabs  $0x0,%r10
  0x00007fffe12361ce: mov     %r10,0x348(%r15)
  0x00007fffe12361d5: movabs  $0x0,%r10
  0x00007fffe12361df: mov     %r10,0x350(%r15)
  0x00007fffe12361e6: add     $0x30,%rsp
  0x00007fffe12361ea: pop     %rbp
  0x00007fffe12361eb: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe12361f0: hlt
  0x00007fffe12361f1: hlt
  0x00007fffe12361f2: hlt
  0x00007fffe12361f3: hlt
  0x00007fffe12361f4: hlt
  0x00007fffe12361f5: hlt
  0x00007fffe12361f6: hlt
  0x00007fffe12361f7: hlt
  0x00007fffe12361f8: hlt
  0x00007fffe12361f9: hlt
  0x00007fffe12361fa: hlt
  0x00007fffe12361fb: hlt
  0x00007fffe12361fc: hlt
  0x00007fffe12361fd: hlt
  0x00007fffe12361fe: hlt
  0x00007fffe12361ff: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1236200: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe123620a: movabs  $0xdead,%rcx
  0x00007fffe1236214: movabs  $0xdead,%rsi
  0x00007fffe123621e: movabs  $0xdead,%rdi
  0x00007fffe1236228: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe123622d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1236232: sub     $0x80,%rsp
  0x00007fffe1236239: mov     %rax,0x78(%rsp)
  0x00007fffe123623e: mov     %rcx,0x70(%rsp)
  0x00007fffe1236243: mov     %rdx,0x68(%rsp)
  0x00007fffe1236248: mov     %rbx,0x60(%rsp)
  0x00007fffe123624d: mov     %rbp,0x50(%rsp)
  0x00007fffe1236252: mov     %rsi,0x48(%rsp)
  0x00007fffe1236257: mov     %rdi,0x40(%rsp)
  0x00007fffe123625c: mov     %r8,0x38(%rsp)
  0x00007fffe1236261: mov     %r9,0x30(%rsp)
  0x00007fffe1236266: mov     %r10,0x28(%rsp)
  0x00007fffe123626b: mov     %r11,0x20(%rsp)
  0x00007fffe1236270: mov     %r12,0x18(%rsp)
  0x00007fffe1236275: mov     %r13,0x10(%rsp)
  0x00007fffe123627a: mov     %r14,0x8(%rsp)
  0x00007fffe123627f: mov     %r15,(%rsp)
  0x00007fffe1236283: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123628d: movabs  $0x7fffe123622d,%rsi  ;   {internal_word}
  0x00007fffe1236297: mov     %rsp,%rdx
  0x00007fffe123629a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123629e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12362a3: hlt
[Deopt Handler Code]
  0x00007fffe12362a4: movabs  $0x7fffe12362a4,%r10  ;   {section_word}
  0x00007fffe12362ae: push    %r10
  0x00007fffe12362b0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12362b5: hlt
  0x00007fffe12362b6: hlt
  0x00007fffe12362b7: hlt
<nmethod compile_id='11' compiler='C1' level='1' entry='0x00007fffe1236180' size='776' address='0x00007fffe1236010' relocation_offset='304' insts_offset='368' stub_offset='496' scopes_data_offset='688' scopes_pcs_offset='704' dependencies_offset='768' method='java/nio/Buffer limit ()I' bytes='5' count='2388' iicount='2388' stamp='117.668'/>
<writer thread='140737327351552'/>
<task_queued compile_id='29' method='java/lang/String length ()I' bytes='6' count='1281' iicount='1281' level='1' stamp='117.668' comment='tiered' hot_count='1281'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1236350:
Code:
Argument 0 is unknown.RIP: 0x7fffe12364e0 Code size: 0x00000238
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa67e8} &apos;length&apos; &apos;()I&apos; in &apos;java/lang/String&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe12364e0: mov     0x8(%rsi),%r10d
  0x00007fffe12364e4: shl     $0x3,%r10
  0x00007fffe12364e8: cmp     %rax,%r10
  0x00007fffe12364eb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12364f1: nop
  0x00007fffe12364f2: nop
  0x00007fffe12364f3: nop
  0x00007fffe12364f4: nop
  0x00007fffe12364f5: nop
  0x00007fffe12364f6: nop
  0x00007fffe12364f7: nop
  0x00007fffe12364f8: nop
  0x00007fffe12364f9: nop
  0x00007fffe12364fa: nop
  0x00007fffe12364fb: nop
  0x00007fffe12364fc: nop
  0x00007fffe12364fd: nop
  0x00007fffe12364fe: nop
  0x00007fffe12364ff: nop
[Verified Entry Point]
  0x00007fffe1236500: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1236507: push    %rbp
  0x00007fffe1236508: sub     $0x30,%rsp        ;*aload_0
                                                ; - java.lang.String::length@0 (line 622)

  ;;  block B0 [0, 5]

  0x00007fffe123650c: mov     0xc(%rsi),%eax
  0x00007fffe123650f: push    %r10
  0x00007fffe1236511: cmp     0x16b236c8(%rip),%r12  ;   {external_word}
  0x00007fffe1236518: je      0x7fffe1236595
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123651e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1236523: sub     $0x80,%rsp
  0x00007fffe123652a: mov     %rax,0x78(%rsp)
  0x00007fffe123652f: mov     %rcx,0x70(%rsp)
  0x00007fffe1236534: mov     %rdx,0x68(%rsp)
  0x00007fffe1236539: mov     %rbx,0x60(%rsp)
  0x00007fffe123653e: mov     %rbp,0x50(%rsp)
  0x00007fffe1236543: mov     %rsi,0x48(%rsp)
  0x00007fffe1236548: mov     %rdi,0x40(%rsp)
  0x00007fffe123654d: mov     %r8,0x38(%rsp)
  0x00007fffe1236552: mov     %r9,0x30(%rsp)
  0x00007fffe1236557: mov     %r10,0x28(%rsp)
  0x00007fffe123655c: mov     %r11,0x20(%rsp)
  0x00007fffe1236561: mov     %r12,0x18(%rsp)
  0x00007fffe1236566: mov     %r13,0x10(%rsp)
  0x00007fffe123656b: mov     %r14,0x8(%rsp)
  0x00007fffe1236570: mov     %r15,(%rsp)
  0x00007fffe1236574: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123657e: movabs  $0x7fffe123651e,%rsi  ;   {internal_word}
  0x00007fffe1236588: mov     %rsp,%rdx
  0x00007fffe123658b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123658f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1236594: hlt
  0x00007fffe1236595: pop     %r10              ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)

  0x00007fffe1236597: mov     0xc(%rax),%eax    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; implicit exception: dispatches to 0x00007fffe12365a6
  0x00007fffe123659a: add     $0x30,%rsp
  0x00007fffe123659e: pop     %rbp
  0x00007fffe123659f: test    %eax,0x16dc4b5b(%rip)  ;   {poll_return}
  0x00007fffe12365a5: retq
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12365a6: callq   0x7fffe11670a0    ; OopMap{off=203}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ;   {runtime_call}
  0x00007fffe12365ab: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12365b0: sub     $0x80,%rsp
  0x00007fffe12365b7: mov     %rax,0x78(%rsp)
  0x00007fffe12365bc: mov     %rcx,0x70(%rsp)
  0x00007fffe12365c1: mov     %rdx,0x68(%rsp)
  0x00007fffe12365c6: mov     %rbx,0x60(%rsp)
  0x00007fffe12365cb: mov     %rbp,0x50(%rsp)
  0x00007fffe12365d0: mov     %rsi,0x48(%rsp)
  0x00007fffe12365d5: mov     %rdi,0x40(%rsp)
  0x00007fffe12365da: mov     %r8,0x38(%rsp)
  0x00007fffe12365df: mov     %r9,0x30(%rsp)
  0x00007fffe12365e4: mov     %r10,0x28(%rsp)
  0x00007fffe12365e9: mov     %r11,0x20(%rsp)
  0x00007fffe12365ee: mov     %r12,0x18(%rsp)
  0x00007fffe12365f3: mov     %r13,0x10(%rsp)
  0x00007fffe12365f8: mov     %r14,0x8(%rsp)
  0x00007fffe12365fd: mov     %r15,(%rsp)
  0x00007fffe1236601: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123660b: movabs  $0x7fffe12365ab,%rsi  ;   {internal_word}
  0x00007fffe1236615: mov     %rsp,%rdx
  0x00007fffe1236618: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123661c: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1236621: hlt
  0x00007fffe1236622: nop
  0x00007fffe1236623: nop
  ;; Unwind handler
  0x00007fffe1236624: mov     0x348(%r15),%rax
  0x00007fffe123662b: movabs  $0x0,%r10
  0x00007fffe1236635: mov     %r10,0x348(%r15)
  0x00007fffe123663c: movabs  $0x0,%r10
  0x00007fffe1236646: mov     %r10,0x350(%r15)
  0x00007fffe123664d: add     $0x30,%rsp
  0x00007fffe1236651: pop     %rbp
  0x00007fffe1236652: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1236657: hlt
  0x00007fffe1236658: hlt
  0x00007fffe1236659: hlt
  0x00007fffe123665a: hlt
  0x00007fffe123665b: hlt
  0x00007fffe123665c: hlt
  0x00007fffe123665d: hlt
  0x00007fffe123665e: hlt
  0x00007fffe123665f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1236660: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe123666a: movabs  $0xdead,%rcx
  0x00007fffe1236674: movabs  $0xdead,%rsi
  0x00007fffe123667e: movabs  $0xdead,%rdi
  0x00007fffe1236688: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe123668d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1236692: sub     $0x80,%rsp
  0x00007fffe1236699: mov     %rax,0x78(%rsp)
  0x00007fffe123669e: mov     %rcx,0x70(%rsp)
  0x00007fffe12366a3: mov     %rdx,0x68(%rsp)
  0x00007fffe12366a8: mov     %rbx,0x60(%rsp)
  0x00007fffe12366ad: mov     %rbp,0x50(%rsp)
  0x00007fffe12366b2: mov     %rsi,0x48(%rsp)
  0x00007fffe12366b7: mov     %rdi,0x40(%rsp)
  0x00007fffe12366bc: mov     %r8,0x38(%rsp)
  0x00007fffe12366c1: mov     %r9,0x30(%rsp)
  0x00007fffe12366c6: mov     %r10,0x28(%rsp)
  0x00007fffe12366cb: mov     %r11,0x20(%rsp)
  0x00007fffe12366d0: mov     %r12,0x18(%rsp)
  0x00007fffe12366d5: mov     %r13,0x10(%rsp)
  0x00007fffe12366da: mov     %r14,0x8(%rsp)
  0x00007fffe12366df: mov     %r15,(%rsp)
  0x00007fffe12366e3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12366ed: movabs  $0x7fffe123668d,%rsi  ;   {internal_word}
  0x00007fffe12366f7: mov     %rsp,%rdx
  0x00007fffe12366fa: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12366fe: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1236703: hlt
[Deopt Handler Code]
  0x00007fffe1236704: movabs  $0x7fffe1236704,%r10  ;   {section_word}
  0x00007fffe123670e: push    %r10
  0x00007fffe1236710: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1236715: hlt
  0x00007fffe1236716: hlt
  0x00007fffe1236717: hlt
<nmethod compile_id='29' compiler='C1' level='1' entry='0x00007fffe12364e0' size='1128' address='0x00007fffe1236350' relocation_offset='304' insts_offset='400' stub_offset='784' scopes_data_offset='976' scopes_pcs_offset='1008' dependencies_offset='1104' nul_chk_table_offset='1112' method='java/lang/String length ()I' bytes='6' count='1381' iicount='1381' stamp='117.677'/>
<make_not_entrant thread='140736954574592' compile_id='5' compiler='C1' level='3' stamp='117.677'/>
<writer thread='140737327351552'/>
<task_queued compile_id='30' method='java/nio/Buffer hasRemaining ()Z' bytes='17' count='896' iicount='896' level='3' stamp='117.678' comment='tiered' hot_count='896'/>
<task_queued compile_id='31' method='java/nio/charset/CharsetEncoder encode (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;' bytes='285' count='896' iicount='896' level='3' stamp='117.678' comment='tiered' hot_count='896'/>
<task_queued compile_id='32' method='sun/nio/cs/UTF_8$Encoder encodeLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='28' count='896' iicount='896' level='3' stamp='117.678' comment='tiered' hot_count='896'/>
<task_queued compile_id='33' method='java/io/Writer write (Ljava/lang/String;)V' bytes='11' count='896' iicount='896' level='3' stamp='117.678' comment='tiered' hot_count='896'/>
<task_queued compile_id='34' method='java/nio/CharBuffer hasArray ()Z' bytes='20' count='1024' iicount='1024' level='3' stamp='117.681' comment='tiered' hot_count='1024'/>
<task_queued compile_id='35' method='java/nio/ByteBuffer hasArray ()Z' bytes='20' count='1024' iicount='1024' level='3' stamp='117.681' comment='tiered' hot_count='1024'/>
<task_queued compile_id='36' method='sun/nio/cs/UTF_8$Encoder encodeArrayLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='489' count='1024' backedge_count='1396' iicount='1024' level='3' stamp='117.681' comment='tiered' hot_count='1024'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe12367d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1236980 Code size: 0x00000380
[Entry Point]
[Constants]
  # {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;
  #           [sp+0x50]  (sp of caller)
  ;;  block B5 [0, 0]

  0x00007fffe1236980: mov     0x8(%rsi),%r10d
  0x00007fffe1236984: shl     $0x3,%r10
  0x00007fffe1236988: cmp     %rax,%r10
  0x00007fffe123698b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1236991: nop
  0x00007fffe1236992: nop
  0x00007fffe1236993: nop
  0x00007fffe1236994: nop
  0x00007fffe1236995: nop
  0x00007fffe1236996: nop
  0x00007fffe1236997: nop
  0x00007fffe1236998: nop
  0x00007fffe1236999: nop
  0x00007fffe123699a: nop
  0x00007fffe123699b: nop
  0x00007fffe123699c: nop
  0x00007fffe123699d: nop
  0x00007fffe123699e: nop
  0x00007fffe123699f: nop
[Verified Entry Point]
  0x00007fffe12369a0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12369a7: push    %rbp
  0x00007fffe12369a8: sub     $0x40,%rsp
  0x00007fffe12369ac: movabs  $0x7ffff4d716a0,%rax  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe12369b6: mov     0x104(%rax),%edx
  0x00007fffe12369bc: add     $0x8,%edx
  0x00007fffe12369bf: mov     %edx,0x104(%rax)
  0x00007fffe12369c5: movabs  $0x7ffff4d52580,%rax  ;   {metadata({method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe12369cf: and     $0x1ff8,%edx
  0x00007fffe12369d5: cmp     $0x0,%edx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb003e710]
  0x00007fffe12369d8: je      0x7fffe1236b6e    ;*aload_0
                                                ; - java.nio.CharBuffer::arrayOffset@0 (line 1029)

  ;;  block B6 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe12369de: mov     0x2c(%rsi),%eax
  0x00007fffe12369e1: push    %r10
  0x00007fffe12369e3: cmp     0x16b231f6(%rip),%r12  ;   {external_word}
  0x00007fffe12369ea: je      0x7fffe1236a67
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12369f0: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12369f5: sub     $0x80,%rsp
  0x00007fffe12369fc: mov     %rax,0x78(%rsp)
  0x00007fffe1236a01: mov     %rcx,0x70(%rsp)
  0x00007fffe1236a06: mov     %rdx,0x68(%rsp)
  0x00007fffe1236a0b: mov     %rbx,0x60(%rsp)
  0x00007fffe1236a10: mov     %rbp,0x50(%rsp)
  0x00007fffe1236a15: mov     %rsi,0x48(%rsp)
  0x00007fffe1236a1a: mov     %rdi,0x40(%rsp)
  0x00007fffe1236a1f: mov     %r8,0x38(%rsp)
  0x00007fffe1236a24: mov     %r9,0x30(%rsp)
  0x00007fffe1236a29: mov     %r10,0x28(%rsp)
  0x00007fffe1236a2e: mov     %r11,0x20(%rsp)
  0x00007fffe1236a33: mov     %r12,0x18(%rsp)
  0x00007fffe1236a38: mov     %r13,0x10(%rsp)
  0x00007fffe1236a3d: mov     %r14,0x8(%rsp)
  0x00007fffe1236a42: mov     %r15,(%rsp)
  0x00007fffe1236a46: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1236a50: movabs  $0x7fffe12369f0,%rsi  ;   {internal_word}
  0x00007fffe1236a5a: mov     %rsp,%rdx
  0x00007fffe1236a5d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1236a61: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1236a66: hlt
  0x00007fffe1236a67: pop     %r10              ;*getfield hb
                                                ; - java.nio.CharBuffer::arrayOffset@1 (line 1029)

  0x00007fffe1236a69: cmp     $0x0,%rax
  0x00007fffe1236a6d: movabs  $0x7ffff4d716a0,%rax  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe1236a77: movabs  $0x130,%rdx
  0x00007fffe1236a81: jne     0x7fffe1236a91
  0x00007fffe1236a87: movabs  $0x140,%rdx
  0x00007fffe1236a91: mov     (%rax,%rdx),%rdi
  0x00007fffe1236a95: lea     0x1(%rdi),%rdi
  0x00007fffe1236a99: mov     %rdi,(%rax,%rdx)
  ;;   46 branch [EQ] [B1] 
  0x00007fffe1236a9d: je      0x7fffe1236b2e    ;*ifnonnull
                                                ; - java.nio.CharBuffer::arrayOffset@4 (line 1029)

  ;;  block B2 [15, 19]

  0x00007fffe1236aa3: movsbl  0x28(%rsi),%eax   ;*getfield isReadOnly
                                                ; - java.nio.CharBuffer::arrayOffset@16 (line 1031)

  0x00007fffe1236aa7: cmp     $0x0,%eax
  0x00007fffe1236aaa: movabs  $0x7ffff4d716a0,%rax  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe1236ab4: movabs  $0x160,%rdx
  0x00007fffe1236abe: je      0x7fffe1236ace
  0x00007fffe1236ac4: movabs  $0x170,%rdx
  0x00007fffe1236ace: mov     (%rax,%rdx),%rdi
  0x00007fffe1236ad2: lea     0x1(%rdi),%rdi
  0x00007fffe1236ad6: mov     %rdi,(%rax,%rdx)
  ;;   66 branch [NE] [B3] 
  0x00007fffe1236ada: jne     0x7fffe1236aef    ;*ifeq
                                                ; - java.nio.CharBuffer::arrayOffset@19 (line 1031)

  ;;  block B4 [30, 34]

  0x00007fffe1236ae0: mov     0x24(%rsi),%eax   ;*getfield offset
                                                ; - java.nio.CharBuffer::arrayOffset@31 (line 1033)

  0x00007fffe1236ae3: add     $0x40,%rsp
  0x00007fffe1236ae7: pop     %rbp
  0x00007fffe1236ae8: test    %eax,0x16dc4612(%rip)  ;   {poll_return}
  0x00007fffe1236aee: retq                      ;*ireturn
                                                ; - java.nio.CharBuffer::arrayOffset@34 (line 1033)

  ;;  block B3 [22, 29]

  ;;   80 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:22]
  0x00007fffe1236aef: nop
  0x00007fffe1236af0: jmpq    0x7fffe1236b94    ;   {no_reloc}
  0x00007fffe1236af5: add     %al,(%rax)
  0x00007fffe1236af7: add     %al,(%rax)
  0x00007fffe1236af9: add     %ch,%cl
  0x00007fffe1236afb: lahf
  0x00007fffe1236afc: add     %al,(%rax)
  0x00007fffe1236afe: add     %cl,0xffffffffffffff8b(%rax)
                                                ;*new  ; - java.nio.CharBuffer::arrayOffset@22 (line 1032)

  0x00007fffe1236b01: Fatal error: Disassembling failed with error code: 15<nmethod compile_id='14' compiler='C1' level='3' entry='0x00007fffe1236980' size='1800' address='0x00007fffe12367d0' relocation_offset='304' insts_offset='432' stub_offset='1104' scopes_data_offset='1336' scopes_pcs_offset='1456' dependencies_offset='1792' method='java/nio/CharBuffer arrayOffset ()I' bytes='35' count='3453' iicount='3453' stamp='117.689'/>
<writer thread='140737327351552'/>
<task_queued compile_id='37' method='java/nio/CharBuffer array ()[C' bytes='35' count='1152' iicount='1152' level='3' stamp='117.689' comment='tiered' hot_count='1152'/>
<task_queued compile_id='38' method='sun/nio/cs/UTF_8 access$200 (Ljava/nio/Buffer;ILjava/nio/Buffer;I)V' bytes='8' count='1152' iicount='1152' level='3' stamp='117.689' comment='tiered' hot_count='1152'/>
<task_queued compile_id='39' method='sun/nio/cs/UTF_8 updatePositions (Ljava/nio/Buffer;ILjava/nio/Buffer;I)V' bytes='23' count='1152' iicount='1152' level='3' stamp='117.689' comment='tiered' hot_count='1152'/>
<task_queued compile_id='40' method='java/nio/charset/CoderResult isOverflow ()Z' bytes='14' count='1152' iicount='1152' level='3' stamp='117.689' comment='tiered' hot_count='1152'/>
<task_queued compile_id='41' method='java/io/BufferedWriter write (Ljava/lang/String;II)V' bytes='117' count='1280' backedge_count='1279' iicount='1280' level='3' stamp='117.692' comment='tiered' hot_count='1280'/>
<task_queued compile_id='42' method='java/io/BufferedWriter min (II)I' bytes='9' count='1280' iicount='1280' level='3' stamp='117.692' comment='tiered' hot_count='1280'/>
<task_queued compile_id='43' method='java/io/BufferedWriter flushBuffer ()V' bytes='53' count='1280' iicount='1280' level='3' stamp='117.692' comment='tiered' hot_count='1280'/>
<task_queued compile_id='44' method='java/nio/ByteBuffer arrayOffset ()I' bytes='35' count='5625' iicount='5625' stamp='117.695' comment='tiered' hot_count='5625'/>
<task_queued compile_id='45' method='java/io/OutputStreamWriter write ([CII)V' bytes='11' count='1408' iicount='1408' level='3' stamp='117.695' comment='tiered' hot_count='1408'/>
<task_queued compile_id='46' method='sun/nio/cs/StreamEncoder write ([CII)V' bytes='78' count='1408' iicount='1408' level='3' stamp='117.695' comment='tiered' hot_count='1408'/>
<task_queued compile_id='47' method='sun/nio/cs/StreamEncoder ensureOpen ()V' bytes='18' count='1408' iicount='1408' level='3' stamp='117.695' comment='tiered' hot_count='1408'/>
<task_queued compile_id='48' method='sun/nio/cs/StreamEncoder implWrite ([CII)V' bytes='156' count='1408' iicount='1408' level='3' stamp='117.695' comment='tiered' hot_count='1408'/>
<task_queued compile_id='49' method='java/nio/Buffer remaining ()I' bytes='20' count='1536' iicount='1536' level='3' stamp='117.697' comment='tiered' hot_count='1536'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1239b90:
Code:
Argument 0 is unknown.RIP: 0x7fffe1239ce0 Code size: 0x00000098
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x30]  (sp of caller)
  ;; N47: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1239ce0: mov     0x8(%rsi),%r10d
  0x00007fffe1239ce4: shl     $0x3,%r10
  0x00007fffe1239ce8: cmp     %r10,%rax
  0x00007fffe1239ceb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1239cf1: nop
  0x00007fffe1239cf2: nop
  0x00007fffe1239cf3: nop
  0x00007fffe1239cf4: nop
  0x00007fffe1239cf5: nop
  0x00007fffe1239cf6: nop
  0x00007fffe1239cf7: nop
  0x00007fffe1239cf8: nop
  0x00007fffe1239cf9: nop
  0x00007fffe1239cfa: nop
  0x00007fffe1239cfb: nop
  0x00007fffe1239cfc: nop
  0x00007fffe1239cfd: nop
  0x00007fffe1239cfe: nop
  0x00007fffe1239cff: nop
[Verified Entry Point]
  ;; B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1239d00: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1239d07: push    %rbp
  0x00007fffe1239d08: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.nio.ByteBuffer::arrayOffset@-1 (line 1029)

  0x00007fffe1239d0c: mov     0x2c(%rsi),%r11d  ;*getfield hb
                                                ; - java.nio.ByteBuffer::arrayOffset@1 (line 1029)

  0x00007fffe1239d10: test    %r11d,%r11d
  0x00007fffe1239d13: je      0x7fffe1239d2c    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)

  ;; B2: #	B5 B3 &lt;- B1  Freq: 1

  0x00007fffe1239d15: movzbl  0x28(%rsi),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::arrayOffset@16 (line 1031)

  0x00007fffe1239d19: test    %ebp,%ebp
  0x00007fffe1239d1b: jne     0x7fffe1239d45    ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)

  ;; B3: #	N47 &lt;- B2  Freq: 0.999999

  0x00007fffe1239d1d: mov     0x24(%rsi),%eax   ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)

  0x00007fffe1239d20: add     $0x20,%rsp
  0x00007fffe1239d24: pop     %rbp
  0x00007fffe1239d25: test    %eax,0x16dc12d5(%rip)  ;   {poll_return}
  0x00007fffe1239d2b: retq
  ;; B4: #	N47 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe1239d2c: mov     %rsi,%rbp
  0x00007fffe1239d2f: mov     %r11d,(%rsp)
  0x00007fffe1239d33: mov     $0xffffff65,%esi
  0x00007fffe1239d38: nop
  0x00007fffe1239d39: nop
  0x00007fffe1239d3a: nop
  0x00007fffe1239d3b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop off=96}
                                                ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)
                                                ;   {runtime_call}
  0x00007fffe1239d40: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)
                                                ;   {runtime_call}
  ;; B5: #	N47 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe1239d45: mov     %rsi,(%rsp)
  0x00007fffe1239d49: mov     $0xffffff65,%esi
  0x00007fffe1239d4e: nop
  0x00007fffe1239d4f: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=116}
                                                ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)
                                                ;   {runtime_call}
  0x00007fffe1239d54: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)
                                                ;   {runtime_call}
  0x00007fffe1239d59: hlt
  0x00007fffe1239d5a: hlt
  0x00007fffe1239d5b: hlt
  0x00007fffe1239d5c: hlt
  0x00007fffe1239d5d: hlt
  0x00007fffe1239d5e: hlt
  0x00007fffe1239d5f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1239d60: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1239d65: callq   0x7fffe1239d6a
  0x00007fffe1239d6a: subq    $0x5,(%rsp)
  0x00007fffe1239d6f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1239d74: hlt
  0x00007fffe1239d75: hlt
  0x00007fffe1239d76: hlt
  0x00007fffe1239d77: hlt
<nmethod compile_id='44' compiler='C2' level='4' entry='0x00007fffe1239ce0' size='760' address='0x00007fffe1239b90' relocation_offset='304' insts_offset='336' stub_offset='464' scopes_data_offset='496' scopes_pcs_offset='560' dependencies_offset='752' method='java/nio/ByteBuffer arrayOffset ()I' bytes='35' count='6152' iicount='6152' stamp='117.707'/>
<make_not_entrant thread='140736956679936' compile_id='12' compiler='C1' level='3' stamp='117.707'/>
<writer thread='140737327351552'/>
<task_queued compile_id='50' method='java/io/OutputStreamWriter flushBuffer ()V' bytes='8' count='1536' iicount='1536' level='3' stamp='117.708' comment='tiered' hot_count='1536'/>
<task_queued compile_id='51' method='sun/nio/cs/StreamEncoder flushBuffer ()V' bytes='42' count='1536' iicount='1536' level='3' stamp='117.708' comment='tiered' hot_count='1536'/>
<task_queued compile_id='52' method='sun/nio/cs/StreamEncoder implFlushBuffer ()V' bytes='15' count='1664' iicount='1664' level='3' stamp='117.710' comment='tiered' hot_count='1664'/>
<task_queued compile_id='53' method='sun/nio/cs/StreamEncoder writeBytes ()V' bytes='132' count='1664' iicount='1664' level='3' stamp='117.710' comment='tiered' hot_count='1664'/>
<task_queued compile_id='54' method='java/nio/Buffer flip ()Ljava/nio/Buffer;' bytes='20' count='1664' iicount='1664' level='3' stamp='117.710' comment='tiered' hot_count='1664'/>
<task_queued compile_id='55' method='java/io/PrintStream write ([BII)V' bytes='69' count='1792' iicount='1792' level='3' stamp='117.713' comment='tiered' hot_count='1792'/>
<task_queued compile_id='56' method='java/io/BufferedOutputStream write ([BII)V' bytes='67' count='1792' iicount='1792' level='3' stamp='117.713' comment='tiered' hot_count='1792'/>
<task_queued compile_id='57' method='java/io/FileOutputStream write ([BII)V' bytes='12' count='1792' iicount='1792' level='3' stamp='117.713' comment='tiered' hot_count='1792'/>
<task_queued compile_id='58' method='java/nio/Buffer position (I)Ljava/nio/Buffer;' bytes='40' count='5632' iicount='5632' stamp='117.714' comment='tiered' hot_count='5632'/>
<task_queued compile_id='59' method='java/nio/CharBuffer arrayOffset ()I' bytes='35' count='5632' iicount='5632' stamp='117.714' comment='tiered' hot_count='5632'/>
<writer thread='140736955627264'/>
Warning:  TraceDependencies results may be inflated by VerifyDependencies
Decoding compiled method 0x00007fffe1239ed0:
Code:
Argument 0 is unknown.RIP: 0x7fffe123a020 Code size: 0x00000098
[Entry Point]
[Constants]
  # {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;
  #           [sp+0x30]  (sp of caller)
  ;; N47: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123a020: mov     0x8(%rsi),%r10d
  0x00007fffe123a024: shl     $0x3,%r10
  0x00007fffe123a028: cmp     %r10,%rax
  0x00007fffe123a02b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123a031: nop
  0x00007fffe123a032: nop
  0x00007fffe123a033: nop
  0x00007fffe123a034: nop
  0x00007fffe123a035: nop
  0x00007fffe123a036: nop
  0x00007fffe123a037: nop
  0x00007fffe123a038: nop
  0x00007fffe123a039: nop
  0x00007fffe123a03a: nop
  0x00007fffe123a03b: nop
  0x00007fffe123a03c: nop
  0x00007fffe123a03d: nop
  0x00007fffe123a03e: nop
  0x00007fffe123a03f: nop
[Verified Entry Point]
  ;; B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123a040: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123a047: push    %rbp
  0x00007fffe123a048: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.nio.CharBuffer::arrayOffset@-1 (line 1029)

  0x00007fffe123a04c: mov     0x2c(%rsi),%r11d  ;*getfield hb
                                                ; - java.nio.CharBuffer::arrayOffset@1 (line 1029)

  0x00007fffe123a050: test    %r11d,%r11d
  0x00007fffe123a053: je      0x7fffe123a06c    ;*ifnonnull
                                                ; - java.nio.CharBuffer::arrayOffset@4 (line 1029)

  ;; B2: #	B5 B3 &lt;- B1  Freq: 1

  0x00007fffe123a055: movzbl  0x28(%rsi),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.CharBuffer::arrayOffset@16 (line 1031)

  0x00007fffe123a059: test    %ebp,%ebp
  0x00007fffe123a05b: jne     0x7fffe123a085    ;*ifeq
                                                ; - java.nio.CharBuffer::arrayOffset@19 (line 1031)

  ;; B3: #	N47 &lt;- B2  Freq: 0.999999

  0x00007fffe123a05d: mov     0x24(%rsi),%eax   ;*getfield offset
                                                ; - java.nio.CharBuffer::arrayOffset@31 (line 1033)

  0x00007fffe123a060: add     $0x20,%rsp
  0x00007fffe123a064: pop     %rbp
  0x00007fffe123a065: test    %eax,0x16dc0f95(%rip)  ;   {poll_return}
  0x00007fffe123a06b: retq
  ;; B4: #	N47 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe123a06c: mov     %rsi,%rbp
  0x00007fffe123a06f: mov     %r11d,(%rsp)
  0x00007fffe123a073: mov     $0xffffff65,%esi
  0x00007fffe123a078: nop
  0x00007fffe123a079: nop
  0x00007fffe123a07a: nop
  0x00007fffe123a07b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop off=96}
                                                ;*ifnonnull
                                                ; - java.nio.CharBuffer::arrayOffset@4 (line 1029)
                                                ;   {runtime_call}
  0x00007fffe123a080: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.CharBuffer::arrayOffset@4 (line 1029)
                                                ;   {runtime_call}
  ;; B5: #	N47 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe123a085: mov     %rsi,(%rsp)
  0x00007fffe123a089: mov     $0xffffff65,%esi
  0x00007fffe123a08e: nop
  0x00007fffe123a08f: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=116}
                                                ;*ifeq
                                                ; - java.nio.CharBuffer::arrayOffset@19 (line 1031)
                                                ;   {runtime_call}
  0x00007fffe123a094: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.CharBuffer::arrayOffset@19 (line 1031)
                                                ;   {runtime_call}
  0x00007fffe123a099: hlt
  0x00007fffe123a09a: hlt
  0x00007fffe123a09b: hlt
  0x00007fffe123a09c: hlt
  0x00007fffe123a09d: hlt
  0x00007fffe123a09e: hlt
  0x00007fffe123a09f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe123a0a0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe123a0a5: callq   0x7fffe123a0aa
  0x00007fffe123a0aa: subq    $0x5,(%rsp)
  0x00007fffe123a0af: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123a0b4: hlt
  0x00007fffe123a0b5: hlt
  0x00007fffe123a0b6: hlt
  0x00007fffe123a0b7: hlt
<nmethod compile_id='59' compiler='C2' level='4' entry='0x00007fffe123a020' size='776' address='0x00007fffe1239ed0' relocation_offset='304' insts_offset='336' stub_offset='464' scopes_data_offset='512' scopes_pcs_offset='576' dependencies_offset='768' method='java/nio/CharBuffer arrayOffset ()I' bytes='35' count='5769' iicount='5769' stamp='117.729'/>
<make_not_entrant thread='140736955627264' compile_id='14' compiler='C1' level='3' stamp='117.729'/>
<writer thread='140737327351552'/>
Decoding compiled method 0x00007fffe1238250:
Code:
Argument 0 is unknown.RIP: 0x7fffe12383e0 Code size: 0x00000268
[Entry Point]
  # {method} {0x00007ffff4c183f0} &apos;writeBytes&apos; &apos;([BIIZ)V&apos; in &apos;java/io/FileOutputStream&apos;
  # this:     rsi:rsi   = &apos;java/io/FileOutputStream&apos;
  # parm0:    rdx:rdx   = &apos;[B&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  # parm3:    r9        = boolean
  #           [sp+0x50]  (sp of caller)
  0x00007fffe12383e0: mov     0x8(%rsi),%r10d
  0x00007fffe12383e4: shl     $0x3,%r10
  0x00007fffe12383e8: cmp     %r10,%rax
  0x00007fffe12383eb: je      0x7fffe12383f8
  0x00007fffe12383f1: jmpq    0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12383f6: nop
  0x00007fffe12383f7: nop
[Verified Entry Point]
  0x00007fffe12383f8: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12383ff: push    %rbp
  0x00007fffe1238400: mov     %rsp,%rbp
  0x00007fffe1238403: sub     $0x40,%rsp
  0x00007fffe1238407: mov     %rsp,%rax
  0x00007fffe123840a: and     $0xfffffffffffffff0,%rax
  0x00007fffe123840e: cmp     %rsp,%rax
  0x00007fffe1238411: je      0x7fffe123848e
  0x00007fffe1238417: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123841c: sub     $0x80,%rsp
  0x00007fffe1238423: mov     %rax,0x78(%rsp)
  0x00007fffe1238428: mov     %rcx,0x70(%rsp)
  0x00007fffe123842d: mov     %rdx,0x68(%rsp)
  0x00007fffe1238432: mov     %rbx,0x60(%rsp)
  0x00007fffe1238437: mov     %rbp,0x50(%rsp)
  0x00007fffe123843c: mov     %rsi,0x48(%rsp)
  0x00007fffe1238441: mov     %rdi,0x40(%rsp)
  0x00007fffe1238446: mov     %r8,0x38(%rsp)
  0x00007fffe123844b: mov     %r9,0x30(%rsp)
  0x00007fffe1238450: mov     %r10,0x28(%rsp)
  0x00007fffe1238455: mov     %r11,0x20(%rsp)
  0x00007fffe123845a: mov     %r12,0x18(%rsp)
  0x00007fffe123845f: mov     %r13,0x10(%rsp)
  0x00007fffe1238464: mov     %r14,0x8(%rsp)
  0x00007fffe1238469: mov     %r15,(%rsp)
  0x00007fffe123846d: movabs  $0x7ffff78fbe19,%rdi  ;   {external_word}
  0x00007fffe1238477: movabs  $0x7fffe1238417,%rsi  ;   {internal_word}
  0x00007fffe1238481: mov     %rsp,%rdx
  0x00007fffe1238484: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1238488: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123848d: hlt
  ;; move 4 -&gt; 5
  ;; move 3 -&gt; 4
  ;; move 2 -&gt; 3
  ;; move 1 -&gt; 2
  0x00007fffe123848e: mov     %rdx,0x8(%rsp)
  0x00007fffe1238493: cmp     $0x0,%rdx
  0x00007fffe1238497: lea     0x8(%rsp),%rdx
  0x00007fffe123849c: cmove   0x8(%rsp),%rdx
  ;; move 0 -&gt; 1
  0x00007fffe12384a2: mov     %rsi,(%rsp)
  0x00007fffe12384a6: cmp     $0x0,%rsi
  0x00007fffe12384aa: lea     (%rsp),%rsi
  0x00007fffe12384ae: cmove   (%rsp),%rsi       ; OopMap{[8]=Oop [0]=Oop off=211}
  0x00007fffe12384b3: movabs  $0x7fffe12384b3,%r10  ;   {section_word}
  0x00007fffe12384bd: mov     %r10,0x280(%r15)
  0x00007fffe12384c4: mov     %rsp,0x278(%r15)
  0x00007fffe12384cb: cmpb    $0x0,0x16aebb58(%rip)  ;   {external_word}
  0x00007fffe12384d2: je      0x7fffe1238516
  0x00007fffe12384d8: push    %rsi
  0x00007fffe12384d9: push    %rdx
  0x00007fffe12384da: push    %rcx
  0x00007fffe12384db: push    %r8
  0x00007fffe12384dd: push    %r9
  0x00007fffe12384df: movabs  $0x7ffff4c183f0,%rsi  ;   {metadata({method} {0x00007ffff4c183f0} &apos;writeBytes&apos; &apos;([BIIZ)V&apos; in &apos;java/io/FileOutputStream&apos;)}
  0x00007fffe12384e9: mov     %r15,%rdi
  0x00007fffe12384ec: test    $0xf,%esp
  0x00007fffe12384f2: je      0x7fffe123850a
  0x00007fffe12384f8: sub     $0x8,%rsp
  0x00007fffe12384fc: callq   0x7ffff7441d02    ;   {runtime_call}
  0x00007fffe1238501: add     $0x8,%rsp
  0x00007fffe1238505: jmpq    0x7fffe123850f
  0x00007fffe123850a: callq   0x7ffff7441d02    ;   {runtime_call}
  0x00007fffe123850f: pop     %r9
  0x00007fffe1238511: pop     %r8
  0x00007fffe1238513: pop     %rcx
  0x00007fffe1238514: pop     %rdx
  0x00007fffe1238515: pop     %rsi
  0x00007fffe1238516: lea     0x298(%r15),%rdi
  0x00007fffe123851d: movl    $0x4,0x310(%r15)
  0x00007fffe1238528: callq   0x7ffff6544444    ;   {runtime_call}
  0x00007fffe123852d: vzeroupper
  0x00007fffe1238530: movl    $0x5,0x310(%r15)
  0x00007fffe123853b: mov     %r15d,%ecx
  0x00007fffe123853e: shr     $0x4,%ecx
  0x00007fffe1238541: and     $0xffc,%ecx
  0x00007fffe1238547: movabs  $0x7ffff7f93000,%r10  ;   {external_word}
  0x00007fffe1238551: mov     %ecx,(%r10,%rcx)
  0x00007fffe1238555: cmpl    $0x0,0x16b005a1(%rip)  ;   {external_word}
  0x00007fffe123855f: jne     0x7fffe1238573
  0x00007fffe1238565: cmpl    $0x0,0x30(%r15)
  0x00007fffe123856d: je      0x7fffe123858c
  0x00007fffe1238573: mov     %r15,%rdi
  0x00007fffe1238576: mov     %rsp,%r12
  0x00007fffe1238579: sub     $0x0,%rsp
  0x00007fffe123857d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1238581: callq   0x7ffff74f306e    ;   {runtime_call}
  0x00007fffe1238586: mov     %r12,%rsp
  0x00007fffe1238589: xor     %r12,%r12
  0x00007fffe123858c: movl    $0x8,0x310(%r15)
  0x00007fffe1238597: cmpl    $0x1,0x33c(%r15)
  0x00007fffe12385a2: je      0x7fffe123862a
  0x00007fffe12385a8: cmpb    $0x0,0x16aeba7b(%rip)  ;   {external_word}
  0x00007fffe12385af: je      0x7fffe12385e5
  0x00007fffe12385b5: movabs  $0x7ffff4c183f0,%rsi  ;   {metadata({method} {0x00007ffff4c183f0} &apos;writeBytes&apos; &apos;([BIIZ)V&apos; in &apos;java/io/FileOutputStream&apos;)}
  0x00007fffe12385bf: mov     %r15,%rdi
  0x00007fffe12385c2: test    $0xf,%esp
  0x00007fffe12385c8: je      0x7fffe12385e0
  0x00007fffe12385ce: sub     $0x8,%rsp
  0x00007fffe12385d2: callq   0x7ffff7441e8e    ;   {runtime_call}
  0x00007fffe12385d7: add     $0x8,%rsp
  0x00007fffe12385db: jmpq    0x7fffe12385e5
  0x00007fffe12385e0: callq   0x7ffff7441e8e    ;   {runtime_call}
  0x00007fffe12385e5: movabs  $0x0,%r10
  0x00007fffe12385ef: mov     %r10,0x278(%r15)
  0x00007fffe12385f6: movabs  $0x0,%r10
  0x00007fffe1238600: mov     %r10,0x280(%r15)
  0x00007fffe1238607: mov     0x38(%r15),%rcx
  0x00007fffe123860b: movl    $0x0,0x108(%rcx)
  0x00007fffe1238615: leave
  0x00007fffe1238616: cmpq    $0x0,0x8(%r15)
  0x00007fffe123861e: jne     0x7fffe1238625
  0x00007fffe1238624: retq
  0x00007fffe1238625: jmpq    0x7fffe1000420    ;   {runtime_call}
  0x00007fffe123862a: mov     %rsp,%r12
  0x00007fffe123862d: sub     $0x0,%rsp
  0x00007fffe1238631: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1238635: callq   0x7ffff74461ce    ;   {runtime_call}
  0x00007fffe123863a: mov     %r12,%rsp
  0x00007fffe123863d: xor     %r12,%r12
  0x00007fffe1238640: jmpq    0x7fffe12385a8
  0x00007fffe1238645: hlt
  0x00007fffe1238646: hlt
  0x00007fffe1238647: hlt
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1237e90:
Code:
Argument 0 is unknown.RIP: 0x7fffe1237fe0 Code size: 0x000000d8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56228} &apos;position&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/Buffer&apos;
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  ;; N69: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1237fe0: mov     0x8(%rsi),%r10d
  0x00007fffe1237fe4: shl     $0x3,%r10
  0x00007fffe1237fe8: cmp     %r10,%rax
  0x00007fffe1237feb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1237ff1: nop
  0x00007fffe1237ff2: nop
  0x00007fffe1237ff3: nop
  0x00007fffe1237ff4: nop
  0x00007fffe1237ff5: nop
  0x00007fffe1237ff6: nop
  0x00007fffe1237ff7: nop
  0x00007fffe1237ff8: nop
  0x00007fffe1237ff9: nop
  0x00007fffe1237ffa: nop
  0x00007fffe1237ffb: nop
  0x00007fffe1237ffc: nop
  0x00007fffe1237ffd: nop
  0x00007fffe1237ffe: nop
  0x00007fffe1237fff: nop
[Verified Entry Point]
  ;; B1: #	B5 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1238000: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1238007: push    %rbp
  0x00007fffe1238008: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)

  0x00007fffe123800c: mov     %rsi,%r10
  0x00007fffe123800f: mov     0x1c(%rsi),%r11d  ;*getfield limit
                                                ; - java.nio.Buffer::position@2 (line 243)

  0x00007fffe1238013: cmp     %r11d,%edx
  0x00007fffe1238016: jnle    0x7fffe1238035    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)

  ;; B2: #	B6 B3 &lt;- B1  Freq: 1

  0x00007fffe1238018: test    %edx,%edx
  0x00007fffe123801a: jl      0x7fffe1238051    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)

  ;; B3: #	B7 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe123801c: mov     0xc(%rsi),%ebp    ;*getfield mark
                                                ; - java.nio.Buffer::position@21 (line 245)

  0x00007fffe123801f: cmp     %edx,%ebp
  0x00007fffe1238021: jnle    0x7fffe1238069    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)

  ;; B4: #	N69 &lt;- B3  Freq: 0.999999

  0x00007fffe1238023: mov     %edx,0x18(%rsi)   ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)

  0x00007fffe1238026: mov     %rsi,%rax
  0x00007fffe1238029: add     $0x20,%rsp
  0x00007fffe123802d: pop     %rbp
  0x00007fffe123802e: test    %eax,0x16dc2fcc(%rip)  ;   {poll_return}
  0x00007fffe1238034: retq
  ;; B5: #	N69 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe1238035: mov     $0xffffff65,%esi
  0x00007fffe123803a: mov     %r10,%rbp
  0x00007fffe123803d: mov     %edx,0x4(%rsp)
  0x00007fffe1238041: mov     %r11d,0x8(%rsp)
  0x00007fffe1238046: nop
  0x00007fffe1238047: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=108}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ;   {runtime_call}
  0x00007fffe123804c: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ;   {runtime_call}
  ;; B6: #	N69 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe1238051: mov     $0xffffff65,%esi
  0x00007fffe1238056: mov     %r10,%rbp
  0x00007fffe1238059: mov     %edx,0x4(%rsp)
  0x00007fffe123805d: nop
  0x00007fffe123805e: nop
  0x00007fffe123805f: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=132}
                                                ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ;   {runtime_call}
  0x00007fffe1238064: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ;   {runtime_call}
  ;; B7: #	N69 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe1238069: mov     $0xffffff65,%esi
  0x00007fffe123806e: mov     %r10,(%rsp)
  0x00007fffe1238072: mov     %edx,0xc(%rsp)
  0x00007fffe1238076: nop
  0x00007fffe1238077: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=156}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ;   {runtime_call}
  0x00007fffe123807c: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ;   {runtime_call}
  0x00007fffe1238081: hlt
  0x00007fffe1238082: hlt
  0x00007fffe1238083: hlt
  0x00007fffe1238084: hlt
  0x00007fffe1238085: hlt
  0x00007fffe1238086: hlt
  0x00007fffe1238087: hlt
  0x00007fffe1238088: hlt
  0x00007fffe1238089: hlt
  0x00007fffe123808a: hlt
  0x00007fffe123808b: hlt
  0x00007fffe123808c: hlt
  0x00007fffe123808d: hlt
  0x00007fffe123808e: hlt
  0x00007fffe123808f: hlt
  0x00007fffe1238090: hlt
  0x00007fffe1238091: hlt
  0x00007fffe1238092: hlt
  0x00007fffe1238093: hlt
  0x00007fffe1238094: hlt
  0x00007fffe1238095: hlt
  0x00007fffe1238096: hlt
  0x00007fffe1238097: hlt
  0x00007fffe1238098: hlt
  0x00007fffe1238099: hlt
  0x00007fffe123809a: hlt
  0x00007fffe123809b: hlt
  0x00007fffe123809c: hlt
  0x00007fffe123809d: hlt
  0x00007fffe123809e: hlt
  0x00007fffe123809f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe12380a0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe12380a5: callq   0x7fffe12380aa
  0x00007fffe12380aa: subq    $0x5,(%rsp)
  0x00007fffe12380af: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12380b4: hlt
  0x00007fffe12380b5: hlt
  0x00007fffe12380b6: hlt
  0x00007fffe12380b7: hlt
<nmethod compile_id='58' compiler='C2' level='4' entry='0x00007fffe1237fe0' size='888' address='0x00007fffe1237e90' relocation_offset='304' insts_offset='336' stub_offset='528' scopes_data_offset='560' scopes_pcs_offset='640' dependencies_offset='880' method='java/nio/Buffer position (I)Ljava/nio/Buffer;' bytes='40' count='5786' iicount='5786' stamp='117.750'/>
<writer thread='140737327351552'/>
<nmethod compile_id='60' compile_kind='c2n' level='0' entry='0x00007fffe12383e0' size='1016' address='0x00007fffe1238250' relocation_offset='304' consts_offset='1016' insts_offset='400' method='java/io/FileOutputStream writeBytes ([BIIZ)V' bytes='0' count='1920' iicount='1920' stamp='117.750'/>
<writer thread='140736956679936'/>
<make_not_entrant thread='140736956679936' compile_id='13' compiler='C1' level='3' stamp='117.750'/>
<writer thread='140737327351552'/>
<task_queued compile_id='61' method='java/nio/Buffer clear ()Ljava/nio/Buffer;' bytes='20' count='1920' iicount='1920' level='3' stamp='117.751' comment='tiered' hot_count='1920'/>
<task_queued compile_id='62' method='java/lang/String indexOf (I)I' bytes='7' count='1920' iicount='1920' level='3' stamp='117.789' comment='tiered' hot_count='1920'/>
<task_queued compile_id='63' method='java/lang/String &lt;init&gt; ([CZ)V' bytes='10' count='1920' iicount='1920' level='3' stamp='117.799' comment='tiered' hot_count='1920'/>
<task_queued compile_id='64' method='java/io/PrintStream println (I)V' bytes='24' count='2048' iicount='2048' level='3' stamp='117.804' comment='tiered' hot_count='2048'/>
<task_queued compile_id='65' method='java/io/PrintStream print (I)V' bytes='9' count='2048' iicount='2048' level='3' stamp='117.804' comment='tiered' hot_count='2048'/>
<task_queued compile_id='66' method='java/lang/String valueOf (I)Ljava/lang/String;' bytes='5' count='2048' iicount='2048' level='3' stamp='117.804' comment='tiered' hot_count='2048'/>
<task_queued compile_id='67' method='java/lang/Integer toString (I)Ljava/lang/String;' bytes='48' count='2048' iicount='2048' level='3' stamp='117.804' comment='tiered' hot_count='2048'/>
<task_queued compile_id='68' method='java/lang/Integer stringSize (I)I' bytes='21' count='2176' backedge_count='1087' iicount='2176' level='3' stamp='117.810' comment='tiered' hot_count='2176'/>
<task_queued compile_id='69' method='java/lang/Integer getChars (II[C)V' bytes='131' count='2176' backedge_count='1087' iicount='2176' level='3' stamp='117.810' comment='tiered' hot_count='2176'/>
<task_queued compile_id='70' method='java/io/PrintStream write (Ljava/lang/String;)V' bytes='83' count='2176' iicount='2176' level='3' stamp='117.810' comment='tiered' hot_count='2176'/>
<task_queued compile_id='71' method='java/io/PrintStream newLine ()V' bytes='73' count='2304' iicount='2304' level='3' stamp='117.815' comment='tiered' hot_count='2304'/>
<task_queued compile_id='72' method='java/io/BufferedWriter newLine ()V' bytes='9' count='2304' iicount='2304' level='3' stamp='117.815' comment='tiered' hot_count='2304'/>
<task_queued compile_id='73' method='java/lang/Math min (II)I' bytes='11' count='5508' iicount='5508' stamp='117.830' comment='tiered' hot_count='5508'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1237c50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1237da0 Code size: 0x00000058
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
  ;; N1: #	B1 &lt;- B3  Freq: 1

  ;; B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1237da0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1237da7: push    %rbp
  0x00007fffe1237da8: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - java.lang.Math::min@-1 (line 1336)

  0x00007fffe1237dac: cmp     %edx,%esi
  0x00007fffe1237dae: jnle    0x7fffe1237dbe    ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)

  ;; B2: #	B3 &lt;- B1  Freq: 0.99002

  0x00007fffe1237db0: mov     %esi,%eax         ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)

  ;; B3: #	N1 &lt;- B4 B2  Freq: 1

  0x00007fffe1237db2: add     $0x10,%rsp
  0x00007fffe1237db6: pop     %rbp
  0x00007fffe1237db7: test    %eax,0x16dc3243(%rip)  ;   {poll_return}
  0x00007fffe1237dbd: retq
  ;; B4: #	B3 &lt;- B1  Freq: 0.00998002

  0x00007fffe1237dbe: mov     %edx,%eax
  0x00007fffe1237dc0: jmp     0x7fffe1237db2
  0x00007fffe1237dc2: hlt
  0x00007fffe1237dc3: hlt
  0x00007fffe1237dc4: hlt
  0x00007fffe1237dc5: hlt
  0x00007fffe1237dc6: hlt
  0x00007fffe1237dc7: hlt
  0x00007fffe1237dc8: hlt
  0x00007fffe1237dc9: hlt
  0x00007fffe1237dca: hlt
  0x00007fffe1237dcb: hlt
  0x00007fffe1237dcc: hlt
  0x00007fffe1237dcd: hlt
  0x00007fffe1237dce: hlt
  0x00007fffe1237dcf: hlt
  0x00007fffe1237dd0: hlt
  0x00007fffe1237dd1: hlt
  0x00007fffe1237dd2: hlt
  0x00007fffe1237dd3: hlt
  0x00007fffe1237dd4: hlt
  0x00007fffe1237dd5: hlt
  0x00007fffe1237dd6: hlt
  0x00007fffe1237dd7: hlt
  0x00007fffe1237dd8: hlt
  0x00007fffe1237dd9: hlt
  0x00007fffe1237dda: hlt
  0x00007fffe1237ddb: hlt
  0x00007fffe1237ddc: hlt
  0x00007fffe1237ddd: hlt
  0x00007fffe1237dde: hlt
  0x00007fffe1237ddf: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1237de0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1237de5: callq   0x7fffe1237dea
  0x00007fffe1237dea: subq    $0x5,(%rsp)
  0x00007fffe1237def: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1237df4: hlt
  0x00007fffe1237df5: hlt
  0x00007fffe1237df6: hlt
  0x00007fffe1237df7: hlt
<nmethod compile_id='73' compiler='C2' level='4' entry='0x00007fffe1237da0' size='544' address='0x00007fffe1237c50' relocation_offset='304' insts_offset='336' stub_offset='400' scopes_data_offset='432' scopes_pcs_offset='456' dependencies_offset='536' method='java/lang/Math min (II)I' bytes='11' count='5723' iicount='5723' stamp='117.838'/>
<make_not_entrant thread='140736956679936' compile_id='8' compiler='C1' level='3' stamp='117.838'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe123ced0:
Code:
Argument 0 is unknown.RIP: 0x7fffe123d6c0 Code size: 0x00004650
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;
  # this:     rsi:rsi   = &apos;sun/nio/cs/UTF_8$Encoder&apos;
  # parm0:    rdx:rdx   = &apos;java/nio/CharBuffer&apos;
  # parm1:    rcx:rcx   = &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x170]  (sp of caller)
  ;;  block B113 [0, 0]

  0x00007fffe123d6c0: mov     0x8(%rsi),%r10d
  0x00007fffe123d6c4: shl     $0x3,%r10
  0x00007fffe123d6c8: cmp     %rax,%r10
  0x00007fffe123d6cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123d6d1: nop
  0x00007fffe123d6d2: nop
  0x00007fffe123d6d3: nop
  0x00007fffe123d6d4: nop
  0x00007fffe123d6d5: nop
  0x00007fffe123d6d6: nop
  0x00007fffe123d6d7: nop
  0x00007fffe123d6d8: nop
  0x00007fffe123d6d9: nop
  0x00007fffe123d6da: nop
  0x00007fffe123d6db: nop
  0x00007fffe123d6dc: nop
  0x00007fffe123d6dd: nop
  0x00007fffe123d6de: nop
  0x00007fffe123d6df: nop
[Verified Entry Point]
  0x00007fffe123d6e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123d6e7: push    %rbp
  0x00007fffe123d6e8: sub     $0x160,%rsp
  0x00007fffe123d6ef: mov     %rsi,0xa0(%rsp)
  0x00007fffe123d6f7: mov     %rdx,0xa8(%rsp)
  0x00007fffe123d6ff: mov     %rcx,0xe0(%rsp)
  0x00007fffe123d707: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123d711: mov     0x104(%rax),%edi
  0x00007fffe123d717: add     $0x8,%edi
  0x00007fffe123d71a: mov     %edi,0x104(%rax)
  0x00007fffe123d720: movabs  $0x7ffff4c2e258,%rax  ;   {metadata({method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123d72a: and     $0x1ff8,%edi
  0x00007fffe123d730: cmp     $0x0,%edi
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffa805e6c0]
  0x00007fffe123d733: je      0x7fffe1240611    ;*aload_1
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@0 (line 585)

  ;;  block B114 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe123d739: cmp     (%rdx),%rax       ;*invokevirtual array
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ; implicit exception: dispatches to 0x00007fffe1240628
  0x00007fffe123d73c: mov     %rdx,%rax
  0x00007fffe123d73f: movabs  $0x7ffff4d73f80,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123d749: mov     0x8(%rax),%eax
  0x00007fffe123d74c: shl     $0x3,%rax
  0x00007fffe123d750: cmp     0x138(%rdi),%rax
  0x00007fffe123d757: jne     0x7fffe123d766
  0x00007fffe123d759: addq    $0x1,0x140(%rdi)
  0x00007fffe123d761: jmpq    0x7fffe123d7cc
  0x00007fffe123d766: cmp     0x148(%rdi),%rax
  0x00007fffe123d76d: jne     0x7fffe123d77c
  0x00007fffe123d76f: addq    $0x1,0x150(%rdi)
  0x00007fffe123d777: jmpq    0x7fffe123d7cc
  0x00007fffe123d77c: cmpq    $0x0,0x138(%rdi)
  0x00007fffe123d787: jne     0x7fffe123d7a0
  0x00007fffe123d789: mov     %rax,0x138(%rdi)
  0x00007fffe123d790: movq    $0x1,0x140(%rdi)
  0x00007fffe123d79b: jmpq    0x7fffe123d7cc
  0x00007fffe123d7a0: cmpq    $0x0,0x148(%rdi)
  0x00007fffe123d7ab: jne     0x7fffe123d7c4
  0x00007fffe123d7ad: mov     %rax,0x148(%rdi)
  0x00007fffe123d7b4: movq    $0x1,0x150(%rdi)
  0x00007fffe123d7bf: jmpq    0x7fffe123d7cc
  0x00007fffe123d7c4: addq    $0x1,0x130(%rdi)
  0x00007fffe123d7cc: movabs  $0x7ffff4d745c8,%rax  ;   {metadata(method data for {method} {0x00007ffff4d524a8} &apos;array&apos; &apos;()[C&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d7d6: mov     0x104(%rax),%edi
  0x00007fffe123d7dc: add     $0x8,%edi
  0x00007fffe123d7df: mov     %edi,0x104(%rax)
  0x00007fffe123d7e5: movabs  $0x7ffff4d524a8,%rax  ;   {metadata({method} {0x00007ffff4d524a8} &apos;array&apos; &apos;()[C&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d7ef: and     $0x7ffff8,%edi
  0x00007fffe123d7f5: cmp     $0x0,%edi
  ;;   56 branch [EQ] [CounterOverflowStub: 0x00007fffa805f100]
  0x00007fffe123d7f8: je      0x7fffe12406a4
  0x00007fffe123d7fe: mov     0x2c(%rdx),%edi
  0x00007fffe123d801: push    %r10
  0x00007fffe123d803: cmp     0x16b1c3d6(%rip),%r12  ;   {external_word}
  0x00007fffe123d80a: je      0x7fffe123d887
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123d810: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123d815: sub     $0x80,%rsp
  0x00007fffe123d81c: mov     %rax,0x78(%rsp)
  0x00007fffe123d821: mov     %rcx,0x70(%rsp)
  0x00007fffe123d826: mov     %rdx,0x68(%rsp)
  0x00007fffe123d82b: mov     %rbx,0x60(%rsp)
  0x00007fffe123d830: mov     %rbp,0x50(%rsp)
  0x00007fffe123d835: mov     %rsi,0x48(%rsp)
  0x00007fffe123d83a: mov     %rdi,0x40(%rsp)
  0x00007fffe123d83f: mov     %r8,0x38(%rsp)
  0x00007fffe123d844: mov     %r9,0x30(%rsp)
  0x00007fffe123d849: mov     %r10,0x28(%rsp)
  0x00007fffe123d84e: mov     %r11,0x20(%rsp)
  0x00007fffe123d853: mov     %r12,0x18(%rsp)
  0x00007fffe123d858: mov     %r13,0x10(%rsp)
  0x00007fffe123d85d: mov     %r14,0x8(%rsp)
  0x00007fffe123d862: mov     %r15,(%rsp)
  0x00007fffe123d866: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123d870: movabs  $0x7fffe123d810,%rsi  ;   {internal_word}
  0x00007fffe123d87a: mov     %rsp,%rdx
  0x00007fffe123d87d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123d881: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123d886: hlt
  0x00007fffe123d887: pop     %r10              ;*getfield hb
                                                ; - java.nio.CharBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  0x00007fffe123d889: mov     %rdi,0xb8(%rsp)
  0x00007fffe123d891: cmp     $0x0,%rdi
  0x00007fffe123d895: movabs  $0x7ffff4d745c8,%rax  ;   {metadata(method data for {method} {0x00007ffff4d524a8} &apos;array&apos; &apos;()[C&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d89f: movabs  $0x130,%rbx
  0x00007fffe123d8a9: jne     0x7fffe123d8b9
  0x00007fffe123d8af: movabs  $0x140,%rbx
  0x00007fffe123d8b9: mov     (%rax,%rbx),%r8
  0x00007fffe123d8bd: lea     0x1(%r8),%r8
  0x00007fffe123d8c1: mov     %r8,(%rax,%rbx)
  ;;   74 branch [EQ] [B28] 
  0x00007fffe123d8c5: je      0x7fffe12405c9    ;*ifnonnull
                                                ; - java.nio.CharBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  ;;  block B29 [15, 19]

  0x00007fffe123d8cb: movsbl  0x28(%rdx),%eax   ;*getfield isReadOnly
                                                ; - java.nio.CharBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  0x00007fffe123d8cf: cmp     $0x0,%eax
  0x00007fffe123d8d2: movabs  $0x7ffff4d745c8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4d524a8} &apos;array&apos; &apos;()[C&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d8dc: movabs  $0x160,%r8
  0x00007fffe123d8e6: je      0x7fffe123d8f6
  0x00007fffe123d8ec: movabs  $0x170,%r8
  0x00007fffe123d8f6: mov     (%rbx,%r8),%r9
  0x00007fffe123d8fa: lea     0x1(%r9),%r9
  0x00007fffe123d8fe: mov     %r9,(%rbx,%r8)
  ;;   94 branch [NE] [B30] 
  0x00007fffe123d902: jne     0x7fffe1240581    ;*ifeq
                                                ; - java.nio.CharBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  ;;  block B26 [4, 4]

  0x00007fffe123d908: mov     %rdx,%rbx
  0x00007fffe123d90b: movabs  $0x7ffff4d73f80,%r8  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123d915: mov     0x8(%rbx),%ebx
  0x00007fffe123d918: shl     $0x3,%rbx
  0x00007fffe123d91c: cmp     0x168(%r8),%rbx
  0x00007fffe123d923: jne     0x7fffe123d932
  0x00007fffe123d925: addq    $0x1,0x170(%r8)
  0x00007fffe123d92d: jmpq    0x7fffe123d998
  0x00007fffe123d932: cmp     0x178(%r8),%rbx
  0x00007fffe123d939: jne     0x7fffe123d948
  0x00007fffe123d93b: addq    $0x1,0x180(%r8)
  0x00007fffe123d943: jmpq    0x7fffe123d998
  0x00007fffe123d948: cmpq    $0x0,0x168(%r8)
  0x00007fffe123d953: jne     0x7fffe123d96c
  0x00007fffe123d955: mov     %rbx,0x168(%r8)
  0x00007fffe123d95c: movq    $0x1,0x170(%r8)
  0x00007fffe123d967: jmpq    0x7fffe123d998
  0x00007fffe123d96c: cmpq    $0x0,0x178(%r8)
  0x00007fffe123d977: jne     0x7fffe123d990
  0x00007fffe123d979: mov     %rbx,0x178(%r8)
  0x00007fffe123d980: movq    $0x1,0x180(%r8)
  0x00007fffe123d98b: jmpq    0x7fffe123d998
  0x00007fffe123d990: addq    $0x1,0x160(%r8)
  0x00007fffe123d998: movabs  $0x7ffff4d716a0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d9a2: mov     0x104(%rbx),%r8d
  0x00007fffe123d9a9: add     $0x8,%r8d
  0x00007fffe123d9ad: mov     %r8d,0x104(%rbx)
  0x00007fffe123d9b4: movabs  $0x7ffff4d52580,%rbx  ;   {metadata({method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d9be: and     $0x7ffff8,%r8d
  0x00007fffe123d9c5: cmp     $0x0,%r8d
  ;;  122 branch [EQ] [CounterOverflowStub: 0x00007fffb4024dc0]
  0x00007fffe123d9c9: je      0x7fffe12406bb
  0x00007fffe123d9cf: cmp     $0x0,%rdi
  0x00007fffe123d9d3: movabs  $0x7ffff4d716a0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123d9dd: movabs  $0x130,%r8
  0x00007fffe123d9e7: jne     0x7fffe123d9f7
  0x00007fffe123d9ed: movabs  $0x140,%r8
  0x00007fffe123d9f7: mov     (%rbx,%r8),%r9
  0x00007fffe123d9fb: lea     0x1(%r9),%r9
  0x00007fffe123d9ff: mov     %r9,(%rbx,%r8)
  ;;  138 branch [EQ] [B34] 
  0x00007fffe123da03: je      0x7fffe1240539    ;*ifnonnull
                                                ; - java.nio.CharBuffer::arrayOffset@4 (line 1029)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@6 (line 586)

  ;;  block B35 [15, 19]

  0x00007fffe123da09: cmp     $0x0,%eax
  0x00007fffe123da0c: movabs  $0x7ffff4d716a0,%rbx  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123da16: movabs  $0x160,%r8
  0x00007fffe123da20: je      0x7fffe123da30
  0x00007fffe123da26: movabs  $0x170,%r8
  0x00007fffe123da30: mov     (%rbx,%r8),%r9
  0x00007fffe123da34: lea     0x1(%r9),%r9
  0x00007fffe123da38: mov     %r9,(%rbx,%r8)
  ;;  156 branch [NE] [B36] 
  0x00007fffe123da3c: jne     0x7fffe12404f1    ;*ifeq
                                                ; - java.nio.CharBuffer::arrayOffset@19 (line 1031)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@6 (line 586)

  ;;  block B37 [30, 9]

  0x00007fffe123da42: mov     0x24(%rdx),%ebx   ;*getfield offset
                                                ; - java.nio.CharBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@6 (line 586)

  ;;  block B32 [9, 4]

  0x00007fffe123da45: mov     %rdx,%r8
  0x00007fffe123da48: movabs  $0x7ffff4d73f80,%r9  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123da52: mov     0x8(%r8),%r8d
  0x00007fffe123da56: shl     $0x3,%r8
  0x00007fffe123da5a: cmp     0x198(%r9),%r8
  0x00007fffe123da61: jne     0x7fffe123da70
  0x00007fffe123da63: addq    $0x1,0x1a0(%r9)
  0x00007fffe123da6b: jmpq    0x7fffe123dad6
  0x00007fffe123da70: cmp     0x1a8(%r9),%r8
  0x00007fffe123da77: jne     0x7fffe123da86
  0x00007fffe123da79: addq    $0x1,0x1b0(%r9)
  0x00007fffe123da81: jmpq    0x7fffe123dad6
  0x00007fffe123da86: cmpq    $0x0,0x198(%r9)
  0x00007fffe123da91: jne     0x7fffe123daaa
  0x00007fffe123da93: mov     %r8,0x198(%r9)
  0x00007fffe123da9a: movq    $0x1,0x1a0(%r9)
  0x00007fffe123daa5: jmpq    0x7fffe123dad6
  0x00007fffe123daaa: cmpq    $0x0,0x1a8(%r9)
  0x00007fffe123dab5: jne     0x7fffe123dace
  0x00007fffe123dab7: mov     %r8,0x1a8(%r9)
  0x00007fffe123dabe: movq    $0x1,0x1b0(%r9)
  0x00007fffe123dac9: jmpq    0x7fffe123dad6
  0x00007fffe123dace: addq    $0x1,0x190(%r9)
  0x00007fffe123dad6: mov     0x18(%rdx),%r8d   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@10 (line 586)

  0x00007fffe123dada: add     %ebx,%r8d
  0x00007fffe123dadd: mov     %r8d,0xd4(%rsp)
  0x00007fffe123dae5: mov     %rdx,%r9
  0x00007fffe123dae8: movabs  $0x7ffff4d73f80,%r11  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123daf2: mov     0x8(%r9),%r9d
  0x00007fffe123daf6: shl     $0x3,%r9
  0x00007fffe123dafa: cmp     0x1c8(%r11),%r9
  0x00007fffe123db01: jne     0x7fffe123db10
  0x00007fffe123db03: addq    $0x1,0x1d0(%r11)
  0x00007fffe123db0b: jmpq    0x7fffe123db76
  0x00007fffe123db10: cmp     0x1d8(%r11),%r9
  0x00007fffe123db17: jne     0x7fffe123db26
  0x00007fffe123db19: addq    $0x1,0x1e0(%r11)
  0x00007fffe123db21: jmpq    0x7fffe123db76
  0x00007fffe123db26: cmpq    $0x0,0x1c8(%r11)
  0x00007fffe123db31: jne     0x7fffe123db4a
  0x00007fffe123db33: mov     %r9,0x1c8(%r11)
  0x00007fffe123db3a: movq    $0x1,0x1d0(%r11)
  0x00007fffe123db45: jmpq    0x7fffe123db76
  0x00007fffe123db4a: cmpq    $0x0,0x1d8(%r11)
  0x00007fffe123db55: jne     0x7fffe123db6e
  0x00007fffe123db57: mov     %r9,0x1d8(%r11)
  0x00007fffe123db5e: movq    $0x1,0x1e0(%r11)
  0x00007fffe123db69: jmpq    0x7fffe123db76
  0x00007fffe123db6e: addq    $0x1,0x1c0(%r11)
  0x00007fffe123db76: movabs  $0x7ffff4d716a0,%r9  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123db80: mov     0x104(%r9),%r11d
  0x00007fffe123db87: add     $0x8,%r11d
  0x00007fffe123db8b: mov     %r11d,0x104(%r9)
  0x00007fffe123db92: movabs  $0x7ffff4d52580,%r9  ;   {metadata({method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123db9c: and     $0x7ffff8,%r11d
  0x00007fffe123dba3: cmp     $0x0,%r11d
  ;;  196 branch [EQ] [CounterOverflowStub: 0x00007fffb4026480]
  0x00007fffe123dba7: je      0x7fffe12406d2
  0x00007fffe123dbad: cmp     $0x0,%rdi
  0x00007fffe123dbb1: movabs  $0x7ffff4d716a0,%r9  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123dbbb: movabs  $0x130,%r11
  0x00007fffe123dbc5: jne     0x7fffe123dbd5
  0x00007fffe123dbcb: movabs  $0x140,%r11
  0x00007fffe123dbd5: mov     (%r9,%r11),%r13
  0x00007fffe123dbd9: lea     0x1(%r13),%r13
  0x00007fffe123dbdd: mov     %r13,(%r9,%r11)
  ;;  212 branch [EQ] [B42] 
  0x00007fffe123dbe1: je      0x7fffe12404a9    ;*ifnonnull
                                                ; - java.nio.CharBuffer::arrayOffset@4 (line 1029)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@17 (line 587)

  ;;  block B43 [15, 19]

  0x00007fffe123dbe7: cmp     $0x0,%eax
  0x00007fffe123dbea: movabs  $0x7ffff4d716a0,%rax  ;   {metadata(method data for {method} {0x00007ffff4d52580} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe123dbf4: movabs  $0x160,%r9
  0x00007fffe123dbfe: je      0x7fffe123dc0e
  0x00007fffe123dc04: movabs  $0x170,%r9
  0x00007fffe123dc0e: mov     (%rax,%r9),%r11
  0x00007fffe123dc12: lea     0x1(%r11),%r11
  0x00007fffe123dc16: mov     %r11,(%rax,%r9)
  ;;  230 branch [NE] [B44] 
  0x00007fffe123dc1a: jne     0x7fffe1240461    ;*ifeq
                                                ; - java.nio.CharBuffer::arrayOffset@19 (line 1031)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@17 (line 587)

  ;;  block B40 [20, 4]

  0x00007fffe123dc20: mov     %rdx,%rax
  0x00007fffe123dc23: movabs  $0x7ffff4d73f80,%r9  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123dc2d: mov     0x8(%rax),%eax
  0x00007fffe123dc30: shl     $0x3,%rax
  0x00007fffe123dc34: cmp     0x1f8(%r9),%rax
  0x00007fffe123dc3b: jne     0x7fffe123dc4a
  0x00007fffe123dc3d: addq    $0x1,0x200(%r9)
  0x00007fffe123dc45: jmpq    0x7fffe123dcb0
  0x00007fffe123dc4a: cmp     0x208(%r9),%rax
  0x00007fffe123dc51: jne     0x7fffe123dc60
  0x00007fffe123dc53: addq    $0x1,0x210(%r9)
  0x00007fffe123dc5b: jmpq    0x7fffe123dcb0
  0x00007fffe123dc60: cmpq    $0x0,0x1f8(%r9)
  0x00007fffe123dc6b: jne     0x7fffe123dc84
  0x00007fffe123dc6d: mov     %rax,0x1f8(%r9)
  0x00007fffe123dc74: movq    $0x1,0x200(%r9)
  0x00007fffe123dc7f: jmpq    0x7fffe123dcb0
  0x00007fffe123dc84: cmpq    $0x0,0x208(%r9)
  0x00007fffe123dc8f: jne     0x7fffe123dca8
  0x00007fffe123dc91: mov     %rax,0x208(%r9)
  0x00007fffe123dc98: movq    $0x1,0x210(%r9)
  0x00007fffe123dca3: jmpq    0x7fffe123dcb0
  0x00007fffe123dca8: addq    $0x1,0x1f0(%r9)
  0x00007fffe123dcb0: mov     0x1c(%rdx),%eax   ;*getfield limit
                                                ; - java.nio.Buffer::limit@1 (line 256)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@21 (line 587)

  0x00007fffe123dcb3: add     %ebx,%eax
  0x00007fffe123dcb5: mov     %eax,0xb4(%rsp)
  0x00007fffe123dcbc: cmp     (%rcx),%rax       ;*invokevirtual array
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ; implicit exception: dispatches to 0x00007fffe12406e9
  0x00007fffe123dcbf: mov     %rcx,%rbx
  0x00007fffe123dcc2: movabs  $0x7ffff4d73f80,%r9  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123dccc: mov     0x8(%rbx),%ebx
  0x00007fffe123dccf: shl     $0x3,%rbx
  0x00007fffe123dcd3: cmp     0x228(%r9),%rbx
  0x00007fffe123dcda: jne     0x7fffe123dce9
  0x00007fffe123dcdc: addq    $0x1,0x230(%r9)
  0x00007fffe123dce4: jmpq    0x7fffe123dd4f
  0x00007fffe123dce9: cmp     0x238(%r9),%rbx
  0x00007fffe123dcf0: jne     0x7fffe123dcff
  0x00007fffe123dcf2: addq    $0x1,0x240(%r9)
  0x00007fffe123dcfa: jmpq    0x7fffe123dd4f
  0x00007fffe123dcff: cmpq    $0x0,0x228(%r9)
  0x00007fffe123dd0a: jne     0x7fffe123dd23
  0x00007fffe123dd0c: mov     %rbx,0x228(%r9)
  0x00007fffe123dd13: movq    $0x1,0x230(%r9)
  0x00007fffe123dd1e: jmpq    0x7fffe123dd4f
  0x00007fffe123dd23: cmpq    $0x0,0x238(%r9)
  0x00007fffe123dd2e: jne     0x7fffe123dd47
  0x00007fffe123dd30: mov     %rbx,0x238(%r9)
  0x00007fffe123dd37: movq    $0x1,0x240(%r9)
  0x00007fffe123dd42: jmpq    0x7fffe123dd4f
  0x00007fffe123dd47: addq    $0x1,0x220(%r9)
  0x00007fffe123dd4f: movabs  $0x7ffff4d719c8,%rbx  ;   {metadata(method data for {method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123dd59: mov     0x104(%rbx),%r9d
  0x00007fffe123dd60: add     $0x8,%r9d
  0x00007fffe123dd64: mov     %r9d,0x104(%rbx)
  0x00007fffe123dd6b: movabs  $0x7ffff4c341c0,%rbx  ;   {metadata({method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123dd75: and     $0x7ffff8,%r9d
  0x00007fffe123dd7c: cmp     $0x0,%r9d
  ;;  270 branch [EQ] [CounterOverflowStub: 0x00007fffb4027b70]
  0x00007fffe123dd80: je      0x7fffe1240765
  0x00007fffe123dd86: mov     0x2c(%rcx),%ebx
  0x00007fffe123dd89: push    %r10
  0x00007fffe123dd8b: cmp     0x16b1be4e(%rip),%r12  ;   {external_word}
  0x00007fffe123dd92: je      0x7fffe123de0f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123dd98: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123dd9d: sub     $0x80,%rsp
  0x00007fffe123dda4: mov     %rax,0x78(%rsp)
  0x00007fffe123dda9: mov     %rcx,0x70(%rsp)
  0x00007fffe123ddae: mov     %rdx,0x68(%rsp)
  0x00007fffe123ddb3: mov     %rbx,0x60(%rsp)
  0x00007fffe123ddb8: mov     %rbp,0x50(%rsp)
  0x00007fffe123ddbd: mov     %rsi,0x48(%rsp)
  0x00007fffe123ddc2: mov     %rdi,0x40(%rsp)
  0x00007fffe123ddc7: mov     %r8,0x38(%rsp)
  0x00007fffe123ddcc: mov     %r9,0x30(%rsp)
  0x00007fffe123ddd1: mov     %r10,0x28(%rsp)
  0x00007fffe123ddd6: mov     %r11,0x20(%rsp)
  0x00007fffe123dddb: mov     %r12,0x18(%rsp)
  0x00007fffe123dde0: mov     %r13,0x10(%rsp)
  0x00007fffe123dde5: mov     %r14,0x8(%rsp)
  0x00007fffe123ddea: mov     %r15,(%rsp)
  0x00007fffe123ddee: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123ddf8: movabs  $0x7fffe123dd98,%rsi  ;   {internal_word}
  0x00007fffe123de02: mov     %rsp,%rdx
  0x00007fffe123de05: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123de09: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123de0e: hlt
  0x00007fffe123de0f: pop     %r10              ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)

  0x00007fffe123de11: mov     %rbx,0xd8(%rsp)
  0x00007fffe123de19: cmp     $0x0,%rbx
  0x00007fffe123de1d: movabs  $0x7ffff4d719c8,%r9  ;   {metadata(method data for {method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123de27: movabs  $0x130,%r11
  0x00007fffe123de31: jne     0x7fffe123de41
  0x00007fffe123de37: movabs  $0x140,%r11
  0x00007fffe123de41: mov     (%r9,%r11),%r13
  0x00007fffe123de45: lea     0x1(%r13),%r13
  0x00007fffe123de49: mov     %r13,(%r9,%r11)
  ;;  288 branch [EQ] [B50] 
  0x00007fffe123de4d: je      0x7fffe1240419    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)

  ;;  block B51 [15, 19]

  0x00007fffe123de53: movsbl  0x28(%rcx),%r9d   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)

  0x00007fffe123de58: cmp     $0x0,%r9d
  0x00007fffe123de5c: movabs  $0x7ffff4d719c8,%r11  ;   {metadata(method data for {method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123de66: movabs  $0x160,%r13
  0x00007fffe123de70: je      0x7fffe123de80
  0x00007fffe123de76: movabs  $0x170,%r13
  0x00007fffe123de80: mov     (%r11,%r13),%r14
  0x00007fffe123de84: lea     0x1(%r14),%r14
  0x00007fffe123de88: mov     %r14,(%r11,%r13)
  ;;  308 branch [NE] [B52] 
  0x00007fffe123de8c: jne     0x7fffe12403d1    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)

  ;;  block B48 [31, 4]

  0x00007fffe123de92: mov     %rcx,%r11
  0x00007fffe123de95: movabs  $0x7ffff4d73f80,%r13  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123de9f: mov     0x8(%r11),%r11d
  0x00007fffe123dea3: shl     $0x3,%r11
  0x00007fffe123dea7: cmp     0x258(%r13),%r11
  0x00007fffe123deae: jne     0x7fffe123debd
  0x00007fffe123deb0: addq    $0x1,0x260(%r13)
  0x00007fffe123deb8: jmpq    0x7fffe123df23
  0x00007fffe123debd: cmp     0x268(%r13),%r11
  0x00007fffe123dec4: jne     0x7fffe123ded3
  0x00007fffe123dec6: addq    $0x1,0x270(%r13)
  0x00007fffe123dece: jmpq    0x7fffe123df23
  0x00007fffe123ded3: cmpq    $0x0,0x258(%r13)
  0x00007fffe123dede: jne     0x7fffe123def7
  0x00007fffe123dee0: mov     %r11,0x258(%r13)
  0x00007fffe123dee7: movq    $0x1,0x260(%r13)
  0x00007fffe123def2: jmpq    0x7fffe123df23
  0x00007fffe123def7: cmpq    $0x0,0x268(%r13)
  0x00007fffe123df02: jne     0x7fffe123df1b
  0x00007fffe123df04: mov     %r11,0x268(%r13)
  0x00007fffe123df0b: movq    $0x1,0x270(%r13)
  0x00007fffe123df16: jmpq    0x7fffe123df23
  0x00007fffe123df1b: addq    $0x1,0x250(%r13)
  0x00007fffe123df23: movabs  $0x7ffff4d71338,%r11  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123df2d: mov     0x104(%r11),%r13d
  0x00007fffe123df34: add     $0x8,%r13d
  0x00007fffe123df38: mov     %r13d,0x104(%r11)
  0x00007fffe123df3f: movabs  $0x7ffff4c34298,%r11  ;   {metadata({method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123df49: and     $0x7ffff8,%r13d
  0x00007fffe123df50: cmp     $0x0,%r13d
  ;;  336 branch [EQ] [CounterOverflowStub: 0x00007fffb4029080]
  0x00007fffe123df54: je      0x7fffe124077c
  0x00007fffe123df5a: cmp     $0x0,%rbx
  0x00007fffe123df5e: movabs  $0x7ffff4d71338,%r11  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123df68: movabs  $0x130,%r13
  0x00007fffe123df72: jne     0x7fffe123df82
  0x00007fffe123df78: movabs  $0x140,%r13
  0x00007fffe123df82: mov     (%r11,%r13),%r14
  0x00007fffe123df86: lea     0x1(%r14),%r14
  0x00007fffe123df8a: mov     %r14,(%r11,%r13)
  ;;  352 branch [EQ] [B56] 
  0x00007fffe123df8e: je      0x7fffe1240389    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@34 (line 590)

  ;;  block B57 [15, 19]

  0x00007fffe123df94: cmp     $0x0,%r9d
  0x00007fffe123df98: movabs  $0x7ffff4d71338,%r11  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123dfa2: movabs  $0x160,%r13
  0x00007fffe123dfac: je      0x7fffe123dfbc
  0x00007fffe123dfb2: movabs  $0x170,%r13
  0x00007fffe123dfbc: mov     (%r11,%r13),%r14
  0x00007fffe123dfc0: lea     0x1(%r14),%r14
  0x00007fffe123dfc4: mov     %r14,(%r11,%r13)
  ;;  370 branch [NE] [B58] 
  0x00007fffe123dfc8: jne     0x7fffe1240341    ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@34 (line 590)

  ;;  block B59 [30, 37]

  0x00007fffe123dfce: mov     0x24(%rcx),%r11d  ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@34 (line 590)

  ;;  block B54 [37, 4]

  0x00007fffe123dfd2: mov     %rcx,%r13
  0x00007fffe123dfd5: movabs  $0x7ffff4d73f80,%r14  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123dfdf: mov     0x8(%r13),%r13d
  0x00007fffe123dfe3: shl     $0x3,%r13
  0x00007fffe123dfe7: cmp     0x288(%r14),%r13
  0x00007fffe123dfee: jne     0x7fffe123dffd
  0x00007fffe123dff0: addq    $0x1,0x290(%r14)
  0x00007fffe123dff8: jmpq    0x7fffe123e063
  0x00007fffe123dffd: cmp     0x298(%r14),%r13
  0x00007fffe123e004: jne     0x7fffe123e013
  0x00007fffe123e006: addq    $0x1,0x2a0(%r14)
  0x00007fffe123e00e: jmpq    0x7fffe123e063
  0x00007fffe123e013: cmpq    $0x0,0x288(%r14)
  0x00007fffe123e01e: jne     0x7fffe123e037
  0x00007fffe123e020: mov     %r13,0x288(%r14)
  0x00007fffe123e027: movq    $0x1,0x290(%r14)
  0x00007fffe123e032: jmpq    0x7fffe123e063
  0x00007fffe123e037: cmpq    $0x0,0x298(%r14)
  0x00007fffe123e042: jne     0x7fffe123e05b
  0x00007fffe123e044: mov     %r13,0x298(%r14)
  0x00007fffe123e04b: movq    $0x1,0x2a0(%r14)
  0x00007fffe123e056: jmpq    0x7fffe123e063
  0x00007fffe123e05b: addq    $0x1,0x280(%r14)
  0x00007fffe123e063: mov     0x18(%rcx),%esi   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@38 (line 590)

  0x00007fffe123e066: add     %r11d,%esi
  0x00007fffe123e069: mov     %esi,0xf0(%rsp)
  0x00007fffe123e070: mov     %rcx,%r13
  0x00007fffe123e073: movabs  $0x7ffff4d73f80,%r14  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e07d: mov     0x8(%r13),%r13d
  0x00007fffe123e081: shl     $0x3,%r13
  0x00007fffe123e085: cmp     0x2b8(%r14),%r13
  0x00007fffe123e08c: jne     0x7fffe123e09b
  0x00007fffe123e08e: addq    $0x1,0x2c0(%r14)
  0x00007fffe123e096: jmpq    0x7fffe123e101
  0x00007fffe123e09b: cmp     0x2c8(%r14),%r13
  0x00007fffe123e0a2: jne     0x7fffe123e0b1
  0x00007fffe123e0a4: addq    $0x1,0x2d0(%r14)
  0x00007fffe123e0ac: jmpq    0x7fffe123e101
  0x00007fffe123e0b1: cmpq    $0x0,0x2b8(%r14)
  0x00007fffe123e0bc: jne     0x7fffe123e0d5
  0x00007fffe123e0be: mov     %r13,0x2b8(%r14)
  0x00007fffe123e0c5: movq    $0x1,0x2c0(%r14)
  0x00007fffe123e0d0: jmpq    0x7fffe123e101
  0x00007fffe123e0d5: cmpq    $0x0,0x2c8(%r14)
  0x00007fffe123e0e0: jne     0x7fffe123e0f9
  0x00007fffe123e0e2: mov     %r13,0x2c8(%r14)
  0x00007fffe123e0e9: movq    $0x1,0x2d0(%r14)
  0x00007fffe123e0f4: jmpq    0x7fffe123e101
  0x00007fffe123e0f9: addq    $0x1,0x2b0(%r14)
  0x00007fffe123e101: movabs  $0x7ffff4d71338,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123e10b: mov     0x104(%rdx),%r13d
  0x00007fffe123e112: add     $0x8,%r13d
  0x00007fffe123e116: mov     %r13d,0x104(%rdx)
  0x00007fffe123e11d: movabs  $0x7ffff4c34298,%rdx  ;   {metadata({method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123e127: and     $0x7ffff8,%r13d
  0x00007fffe123e12e: cmp     $0x0,%r13d
  ;;  410 branch [EQ] [CounterOverflowStub: 0x00007fffb402b740]
  0x00007fffe123e132: je      0x7fffe1240793
  0x00007fffe123e138: cmp     $0x0,%rbx
  0x00007fffe123e13c: movabs  $0x7ffff4d71338,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123e146: movabs  $0x130,%r13
  0x00007fffe123e150: jne     0x7fffe123e160
  0x00007fffe123e156: movabs  $0x140,%r13
  0x00007fffe123e160: mov     (%rdx,%r13),%r14
  0x00007fffe123e164: lea     0x1(%r14),%r14
  0x00007fffe123e168: mov     %r14,(%rdx,%r13)
  ;;  426 branch [EQ] [B64] 
  0x00007fffe123e16c: je      0x7fffe12402f9    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@45 (line 591)

  ;;  block B65 [15, 19]

  0x00007fffe123e172: cmp     $0x0,%r9d
  0x00007fffe123e176: movabs  $0x7ffff4d71338,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe123e180: movabs  $0x160,%r9
  0x00007fffe123e18a: je      0x7fffe123e19a
  0x00007fffe123e190: movabs  $0x170,%r9
  0x00007fffe123e19a: mov     (%rdx,%r9),%r13
  0x00007fffe123e19e: lea     0x1(%r13),%r13
  0x00007fffe123e1a2: mov     %r13,(%rdx,%r9)
  ;;  444 branch [NE] [B66] 
  0x00007fffe123e1a6: jne     0x7fffe12402b5    ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@45 (line 591)

  ;;  block B62 [48, 2]

  0x00007fffe123e1ac: mov     %rcx,%rdx
  0x00007fffe123e1af: movabs  $0x7ffff4d73f80,%r9  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e1b9: mov     0x8(%rdx),%edx
  0x00007fffe123e1bc: shl     $0x3,%rdx
  0x00007fffe123e1c0: cmp     0x2e8(%r9),%rdx
  0x00007fffe123e1c7: jne     0x7fffe123e1d6
  0x00007fffe123e1c9: addq    $0x1,0x2f0(%r9)
  0x00007fffe123e1d1: jmpq    0x7fffe123e23c
  0x00007fffe123e1d6: cmp     0x2f8(%r9),%rdx
  0x00007fffe123e1dd: jne     0x7fffe123e1ec
  0x00007fffe123e1df: addq    $0x1,0x300(%r9)
  0x00007fffe123e1e7: jmpq    0x7fffe123e23c
  0x00007fffe123e1ec: cmpq    $0x0,0x2e8(%r9)
  0x00007fffe123e1f7: jne     0x7fffe123e210
  0x00007fffe123e1f9: mov     %rdx,0x2e8(%r9)
  0x00007fffe123e200: movq    $0x1,0x2f0(%r9)
  0x00007fffe123e20b: jmpq    0x7fffe123e23c
  0x00007fffe123e210: cmpq    $0x0,0x2f8(%r9)
  0x00007fffe123e21b: jne     0x7fffe123e234
  0x00007fffe123e21d: mov     %rdx,0x2f8(%r9)
  0x00007fffe123e224: movq    $0x1,0x300(%r9)
  0x00007fffe123e22f: jmpq    0x7fffe123e23c
  0x00007fffe123e234: addq    $0x1,0x2e0(%r9)
  0x00007fffe123e23c: mov     0x1c(%rcx),%edx   ;*getfield limit
                                                ; - java.nio.Buffer::limit@1 (line 256)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@49 (line 591)

  0x00007fffe123e23f: add     %r11d,%edx
  0x00007fffe123e242: mov     %edx,0xb0(%rsp)
  0x00007fffe123e249: mov     %rax,%r9
  0x00007fffe123e24c: sub     %r8d,%r9d
  0x00007fffe123e24f: mov     %rdx,%r11
  0x00007fffe123e252: sub     %esi,%r11d
  0x00007fffe123e255: movabs  $0x7ffff4d73f80,%r13  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e25f: addq    $0x1,0x310(%r13)
  0x00007fffe123e267: movabs  $0x7ffff4d19e38,%r13  ;   {metadata(method data for {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe123e271: mov     0x104(%r13),%r14d
  0x00007fffe123e278: add     $0x8,%r14d
  0x00007fffe123e27c: mov     %r14d,0x104(%r13)
  0x00007fffe123e283: movabs  $0x7ffff4bc5c20,%r13  ;   {metadata({method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe123e28d: and     $0x7ffff8,%r14d
  0x00007fffe123e294: cmp     $0x0,%r14d
  ;;  488 branch [EQ] [CounterOverflowStub: 0x00007fffb03a4160]
  0x00007fffe123e298: je      0x7fffe12407aa
  0x00007fffe123e29e: cmp     %r11d,%r9d
  0x00007fffe123e2a1: movabs  $0x7ffff4d19e38,%r13  ;   {metadata(method data for {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe123e2ab: movabs  $0x130,%r14
  0x00007fffe123e2b5: jnle    0x7fffe123e2c5
  0x00007fffe123e2bb: movabs  $0x140,%r14
  0x00007fffe123e2c5: mov     0x0(%r13,%r14),%rdx
  0x00007fffe123e2ca: lea     0x1(%rdx),%rdx
  0x00007fffe123e2ce: mov     %rdx,0x0(%r13,%r14)
  ;;  504 branch [GT] [B73] 
  0x00007fffe123e2d3: jnle    0x7fffe123e2ee    ;*if_icmpgt
                                                ; - java.lang.Math::min@2 (line 1336)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@67 (line 592)

  ;;  block B72 [5, 6]

  0x00007fffe123e2d9: movabs  $0x7ffff4d19e38,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bc5c20} &apos;min&apos; &apos;(II)I&apos; in &apos;java/lang/Math&apos;)}
  0x00007fffe123e2e3: incl    0x150(%rdx)
  ;;  516 branch [AL] [B70] 
  0x00007fffe123e2e9: jmpq    0x7fffe123e2f1    ;*goto
                                                ; - java.lang.Math::min@6 (line 1336)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@67 (line 592)

  ;;  block B73 [9, 10]

  0x00007fffe123e2ee: mov     %r11,%r9          ;*ireturn
                                                ; - java.lang.Math::min@10 (line 1336)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@67 (line 592)

  ;;  block B70 [70, 73]

  0x00007fffe123e2f1: add     %esi,%r9d
  ;;  538 branch [AL] [B1] 
  0x00007fffe123e2f4: jmpq    0x7fffe123e3b3    ;*iload
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@73 (line 595)

  0x00007fffe123e2f9: nop
  0x00007fffe123e2fa: nop
  0x00007fffe123e2fb: nop
  0x00007fffe123e2fc: nop
  0x00007fffe123e2fd: nop
  0x00007fffe123e2fe: nop
  0x00007fffe123e2ff: nop
  ;;  block B2 [80, 87]

  0x00007fffe123e300: movsxd  %r8d,%rdx
  0x00007fffe123e303: cmp     0xc(%rdi),%r8d    ; implicit exception: dispatches to 0x00007fffe12407c1
  ;;  564 branch [AE] [RangeCheckStub: 0x00007fffb03a8ba0] [bci:83]
  0x00007fffe123e307: jnb     0x7fffe12408b9
  0x00007fffe123e30d: movzwl  0x10(%rdi,%rdx,2),%edx  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@83 (line 595)

  0x00007fffe123e312: cmp     $0x80,%edx
  0x00007fffe123e318: movabs  $0x7ffff4d73f80,%r11  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e322: movabs  $0x340,%r13
  0x00007fffe123e32c: jnl     0x7fffe123e33c
  0x00007fffe123e332: movabs  $0x350,%r13
  0x00007fffe123e33c: mov     (%r11,%r13),%r14
  0x00007fffe123e340: lea     0x1(%r14),%r14
  0x00007fffe123e344: mov     %r14,(%r11,%r13)
  ;;  580 branch [GE] [B116] 
  0x00007fffe123e348: jnl     0x7fffe123e3f1    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@87 (line 595)

  ;;  block B4 [90, 106]

  0x00007fffe123e34e: mov     %rsi,%r11
  0x00007fffe123e351: incl    %r11d
  0x00007fffe123e354: incl    %r8d
  0x00007fffe123e357: movsxd  %esi,%r13
  0x00007fffe123e35a: cmp     0xc(%rbx),%esi    ; implicit exception: dispatches to 0x00007fffe1240939
  ;;  600 branch [AE] [RangeCheckStub: 0x00007fffb03a9770] [bci:105]
  0x00007fffe123e35d: jnb     0x7fffe1240a31
  0x00007fffe123e363: mov     %dl,0x10(%rbx,%r13)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@105 (line 596)

  0x00007fffe123e368: movabs  $0x7ffff4d73f80,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e372: mov     0x108(%rdx),%esi
  0x00007fffe123e378: add     $0x8,%esi
  0x00007fffe123e37b: mov     %esi,0x108(%rdx)
  0x00007fffe123e381: movabs  $0x7ffff4c2e258,%rdx  ;   {metadata({method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e38b: and     $0xfff8,%esi
  0x00007fffe123e391: cmp     $0x0,%esi
  ;;  618 branch [EQ] [CounterOverflowStub: 0x00007fffb03a9f90]
  0x00007fffe123e394: je      0x7fffe1240ab1    ; OopMap{rcx=Oop [224]=Oop rdi=Oop [184]=Oop rbx=Oop [216]=Oop [168]=Oop [160]=Oop off=3290}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@106 (line 596)

  0x00007fffe123e39a: test    %eax,0x16dbcd60(%rip)  ;   {poll}
  0x00007fffe123e3a0: movabs  $0x7ffff4d73f80,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e3aa: incl    0x360(%rdx)
  0x00007fffe123e3b0: mov     %r11,%rsi         ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@106 (line 596)

  ;;  block B1 [73, 77]

  0x00007fffe123e3b3: cmp     %r9d,%esi
  0x00007fffe123e3b6: movabs  $0x7ffff4d73f80,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e3c0: movabs  $0x320,%r11
  0x00007fffe123e3ca: jnl     0x7fffe123e3da
  0x00007fffe123e3d0: movabs  $0x330,%r11
  0x00007fffe123e3da: mov     (%rdx,%r11),%r13
  0x00007fffe123e3de: lea     0x1(%r13),%r13
  0x00007fffe123e3e2: mov     %r13,(%rdx,%r11)
  ;;  554 branch [GE] [B115] 
  0x00007fffe123e3e6: jnl     0x7fffe123e3fd
  ;;  556 branch [AL] [B2] 
  0x00007fffe123e3ec: jmpq    0x7fffe123e300    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@77 (line 595)

  ;;  block B116 [109, 109]

  0x00007fffe123e3f1: mov     0xb0(%rsp),%edx
  ;;  640 branch [AL] [B3] 
  0x00007fffe123e3f8: jmpq    0x7fffe123e408    ;*iload
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@109 (line 597)

  ;;  block B115 [109, 109]

  0x00007fffe123e3fd: mov     0xb0(%rsp),%edx
  0x00007fffe123e404: nop
  0x00007fffe123e405: nop
  0x00007fffe123e406: nop
  0x00007fffe123e407: nop
  ;;  block B3 [109, 113]

  0x00007fffe123e408: mov     0xa0(%rsp),%rcx
  0x00007fffe123e410: cmp     %eax,%r8d
  0x00007fffe123e413: movabs  $0x7ffff4d73f80,%r13  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e41d: movabs  $0x378,%r14
  0x00007fffe123e427: jnl     0x7fffe123e437
  0x00007fffe123e42d: movabs  $0x388,%r14
  0x00007fffe123e437: mov     0x0(%r13,%r14),%rax
  0x00007fffe123e43c: lea     0x1(%rax),%rax
  0x00007fffe123e440: mov     %rax,0x0(%r13,%r14)
  ;;  664 branch [GE] [B6] 
  0x00007fffe123e445: jnl     0x7fffe123ff55    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@113 (line 597)

  ;;  block B5 [116, 127]

  0x00007fffe123e44b: movsxd  %r8d,%rax
  0x00007fffe123e44e: cmp     0xc(%rdi),%r8d    ; implicit exception: dispatches to 0x00007fffe1240ac8
  ;;  674 branch [AE] [RangeCheckStub: 0x00007fffa8060050] [bci:119]
  0x00007fffe123e452: jnb     0x7fffe1240bc0
  0x00007fffe123e458: movzwl  0x10(%rdi,%rax,2),%r13d  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@119 (line 598)

  0x00007fffe123e45e: cmp     $0x80,%r13d
  0x00007fffe123e465: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e46f: movabs  $0x398,%r14
  0x00007fffe123e479: jnl     0x7fffe123e489
  0x00007fffe123e47f: movabs  $0x3a8,%r14
  0x00007fffe123e489: mov     (%rax,%r14),%rdi
  0x00007fffe123e48d: lea     0x1(%rdi),%rdi
  0x00007fffe123e491: mov     %rdi,(%rax,%r14)
  ;;  690 branch [GE] [B8] 
  0x00007fffe123e495: jnl     0x7fffe123e4fe    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@127 (line 599)

  ;;  block B7 [130, 134]

  0x00007fffe123e49b: cmp     %edx,%esi
  0x00007fffe123e49d: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e4a7: movabs  $0x3b8,%rdi
  0x00007fffe123e4b1: jl      0x7fffe123e4c1
  0x00007fffe123e4b7: movabs  $0x3c8,%rdi
  0x00007fffe123e4c1: mov     (%rax,%rdi),%r14
  0x00007fffe123e4c5: lea     0x1(%r14),%r14
  0x00007fffe123e4c9: mov     %r14,(%rax,%rdi)
  ;;  708 branch [GE] [B9] 
  0x00007fffe123e4cd: jnl     0x7fffe123fbb5    ;*if_icmplt
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@134 (line 601)

  ;;  block B10 [147, 158]

  0x00007fffe123e4d3: mov     %rsi,%rax
  0x00007fffe123e4d6: incl    %eax
  0x00007fffe123e4d8: movsxd  %esi,%rdi
  0x00007fffe123e4db: cmp     0xc(%rbx),%esi    ; implicit exception: dispatches to 0x00007fffe1240c40
  ;;  724 branch [AE] [RangeCheckStub: 0x00007fffa80610f0] [bci:157]
  0x00007fffe123e4de: jnb     0x7fffe1240d38
  0x00007fffe123e4e4: mov     %r13l,0x10(%rbx,%rdi)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@157 (line 603)

  0x00007fffe123e4e9: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e4f3: incl    0x3e8(%rsi)
  ;;  736 branch [AL] [B11] 
  0x00007fffe123e4f9: jmpq    0x7fffe123ec06    ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@158 (line 603)

  ;;  block B8 [161, 166]

  0x00007fffe123e4fe: cmp     $0x800,%r13d
  0x00007fffe123e505: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e50f: movabs  $0x400,%rdi
  0x00007fffe123e519: jnl     0x7fffe123e529
  0x00007fffe123e51f: movabs  $0x410,%rdi
  0x00007fffe123e529: mov     (%rax,%rdi),%r14
  0x00007fffe123e52d: lea     0x1(%r14),%r14
  0x00007fffe123e531: mov     %r14,(%rax,%rdi)
  ;;  752 branch [GE] [B13] 
  0x00007fffe123e535: jnl     0x7fffe123e5cd    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@166 (line 604)

  ;;  block B12 [169, 175]

  0x00007fffe123e53b: mov     %rdx,%rax
  0x00007fffe123e53e: sub     %esi,%eax
  0x00007fffe123e540: cmp     $0x2,%eax
  0x00007fffe123e543: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e54d: movabs  $0x420,%rdi
  0x00007fffe123e557: jnl     0x7fffe123e567
  0x00007fffe123e55d: movabs  $0x430,%rdi
  0x00007fffe123e567: mov     (%rax,%rdi),%r14
  0x00007fffe123e56b: lea     0x1(%r14),%r14
  0x00007fffe123e56f: mov     %r14,(%rax,%rdi)
  ;;  774 branch [LT] [B14] 
  0x00007fffe123e573: jl      0x7fffe123f813    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@175 (line 606)

  ;;  block B15 [188, 224]

  0x00007fffe123e579: mov     %r13,%rax
  0x00007fffe123e57c: sar     $0x6,%eax
  0x00007fffe123e57f: or      $0xc0,%eax
  0x00007fffe123e585: movsxd  %esi,%rdi
  0x00007fffe123e588: cmp     0xc(%rbx),%esi    ; implicit exception: dispatches to 0x00007fffe1240db8
  ;;  794 branch [AE] [RangeCheckStub: 0x00007fffa8062940] [bci:205]
  0x00007fffe123e58b: jnb     0x7fffe1240eb0
  0x00007fffe123e591: mov     %al,0x10(%rbx,%rdi)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@205 (line 608)

  0x00007fffe123e595: incl    %esi
  0x00007fffe123e597: mov     %rsi,%rax
  0x00007fffe123e59a: incl    %eax
  0x00007fffe123e59c: and     $0x3f,%r13d
  0x00007fffe123e5a0: or      $0x80,%r13d
  0x00007fffe123e5a7: movsxd  %esi,%rdi
  0x00007fffe123e5aa: cmp     0xc(%rbx),%esi
  ;;  820 branch [AE] [RangeCheckStub: 0x00007fffa8063220] [bci:223]
  0x00007fffe123e5ad: jnb     0x7fffe1240f30
  0x00007fffe123e5b3: mov     %r13l,0x10(%rbx,%rdi)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@223 (line 609)

  0x00007fffe123e5b8: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e5c2: incl    0x450(%rsi)
  ;;  832 branch [AL] [B11] 
  0x00007fffe123e5c8: jmpq    0x7fffe123ec06    ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@224 (line 609)

  ;;  block B13 [227, 3]

  0x00007fffe123e5cd: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e5d7: addq    $0x1,0x468(%rax)
  0x00007fffe123e5df: movabs  $0x7ffff4d78a40,%rax  ;   {metadata(method data for {method} {0x00007ffff4b5ab98} &apos;isSurrogate&apos; &apos;(C)Z&apos; in &apos;java/lang/Character&apos;)}
  0x00007fffe123e5e9: mov     0x104(%rax),%edi
  0x00007fffe123e5ef: add     $0x8,%edi
  0x00007fffe123e5f2: mov     %edi,0x104(%rax)
  0x00007fffe123e5f8: movabs  $0x7ffff4b5ab98,%rax  ;   {metadata({method} {0x00007ffff4b5ab98} &apos;isSurrogate&apos; &apos;(C)Z&apos; in &apos;java/lang/Character&apos;)}
  0x00007fffe123e602: and     $0x7ffff8,%edi
  0x00007fffe123e608: cmp     $0x0,%edi
  ;;  852 branch [EQ] [CounterOverflowStub: 0x00007fffa8063f10]
  0x00007fffe123e60b: je      0x7fffe1240fb0
  0x00007fffe123e611: cmp     $0xd800,%r13d
  0x00007fffe123e618: movabs  $0x7ffff4d78a40,%rax  ;   {metadata(method data for {method} {0x00007ffff4b5ab98} &apos;isSurrogate&apos; &apos;(C)Z&apos; in &apos;java/lang/Character&apos;)}
  0x00007fffe123e622: movabs  $0x130,%rdi
  0x00007fffe123e62c: jl      0x7fffe123e63c
  0x00007fffe123e632: movabs  $0x140,%rdi
  0x00007fffe123e63c: mov     (%rax,%rdi),%r14
  0x00007fffe123e640: lea     0x1(%r14),%r14
  0x00007fffe123e644: mov     %r14,(%rax,%rdi)
  ;;  868 branch [LT] [B90] 
  0x00007fffe123e648: jl      0x7fffe123e68b    ;*if_icmplt
                                                ; - java.lang.Character::isSurrogate@3 (line 4793)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@229 (line 610)

  ;;  block B89 [6, 9]

  0x00007fffe123e64e: cmp     $0xe000,%r13d
  0x00007fffe123e655: movabs  $0x7ffff4d78a40,%rax  ;   {metadata(method data for {method} {0x00007ffff4b5ab98} &apos;isSurrogate&apos; &apos;(C)Z&apos; in &apos;java/lang/Character&apos;)}
  0x00007fffe123e65f: movabs  $0x150,%rdi
  0x00007fffe123e669: jnl     0x7fffe123e679
  0x00007fffe123e66f: movabs  $0x160,%rdi
  0x00007fffe123e679: mov     (%rax,%rdi),%r14
  0x00007fffe123e67d: lea     0x1(%r14),%r14
  0x00007fffe123e681: mov     %r14,(%rax,%rdi)
  ;;  890 branch [LT] [B91] 
  0x00007fffe123e685: jl      0x7fffe123e695    ;*if_icmpge
                                                ; - java.lang.Character::isSurrogate@9 (line 4793)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@229 (line 610)

  ;;  block B90 [16, 17]

  0x00007fffe123e68b: mov     $0x0,%eax
  ;;  902 branch [AL] [B92] 
  0x00007fffe123e690: jmpq    0x7fffe123e6aa    ;*ireturn
                                                ; - java.lang.Character::isSurrogate@17 (line 4793)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@229 (line 610)

  ;;  block B91 [12, 13]

  0x00007fffe123e695: movabs  $0x7ffff4d78a40,%rax  ;   {metadata(method data for {method} {0x00007ffff4b5ab98} &apos;isSurrogate&apos; &apos;(C)Z&apos; in &apos;java/lang/Character&apos;)}
  0x00007fffe123e69f: incl    0x170(%rax)
  0x00007fffe123e6a5: mov     $0x1,%eax         ;*goto
                                                ; - java.lang.Character::isSurrogate@13 (line 4793)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@229 (line 610)

  ;;  block B92 [17, 232]

  0x00007fffe123e6aa: and     $0x1,%eax
  ;;  block B87 [232, 232]

  0x00007fffe123e6ad: cmp     $0x0,%eax
  0x00007fffe123e6b0: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e6ba: movabs  $0x478,%rdi
  0x00007fffe123e6c4: je      0x7fffe123e6d4
  0x00007fffe123e6ca: movabs  $0x488,%rdi
  0x00007fffe123e6d4: mov     (%rax,%rdi),%r14
  0x00007fffe123e6d8: lea     0x1(%r14),%r14
  0x00007fffe123e6dc: mov     %r14,(%rax,%rdi)
  ;;  936 branch [EQ] [B17] 
  0x00007fffe123e6e0: je      0x7fffe123eb3f    ;*ifeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@232 (line 610)

  ;;  block B16 [235, 239]

  0x00007fffe123e6e6: mov     0x30(%rcx),%eax
  0x00007fffe123e6e9: push    %r10
  0x00007fffe123e6eb: cmp     0x16b1b4ee(%rip),%r12  ;   {external_word}
  0x00007fffe123e6f2: je      0x7fffe123e76f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123e6f8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123e6fd: sub     $0x80,%rsp
  0x00007fffe123e704: mov     %rax,0x78(%rsp)
  0x00007fffe123e709: mov     %rcx,0x70(%rsp)
  0x00007fffe123e70e: mov     %rdx,0x68(%rsp)
  0x00007fffe123e713: mov     %rbx,0x60(%rsp)
  0x00007fffe123e718: mov     %rbp,0x50(%rsp)
  0x00007fffe123e71d: mov     %rsi,0x48(%rsp)
  0x00007fffe123e722: mov     %rdi,0x40(%rsp)
  0x00007fffe123e727: mov     %r8,0x38(%rsp)
  0x00007fffe123e72c: mov     %r9,0x30(%rsp)
  0x00007fffe123e731: mov     %r10,0x28(%rsp)
  0x00007fffe123e736: mov     %r11,0x20(%rsp)
  0x00007fffe123e73b: mov     %r12,0x18(%rsp)
  0x00007fffe123e740: mov     %r13,0x10(%rsp)
  0x00007fffe123e745: mov     %r14,0x8(%rsp)
  0x00007fffe123e74a: mov     %r15,(%rsp)
  0x00007fffe123e74e: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123e758: movabs  $0x7fffe123e6f8,%rsi  ;   {internal_word}
  0x00007fffe123e762: mov     %rsp,%rdx
  0x00007fffe123e765: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123e769: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123e76e: hlt
  0x00007fffe123e76f: pop     %r10              ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@236 (line 612)

  0x00007fffe123e771: cmp     $0x0,%rax
  0x00007fffe123e775: movabs  $0x7ffff4d73f80,%rax  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e77f: movabs  $0x498,%rdi
  0x00007fffe123e789: jne     0x7fffe123e799
  0x00007fffe123e78f: movabs  $0x4a8,%rdi
  0x00007fffe123e799: mov     (%rax,%rdi),%r14
  0x00007fffe123e79d: lea     0x1(%r14),%r14
  0x00007fffe123e7a1: mov     %r14,(%rax,%rdi)
  0x00007fffe123e7a5: mov     %r13d,0xc4(%rsp)
  0x00007fffe123e7ad: mov     %esi,0xc0(%rsp)
  0x00007fffe123e7b4: mov     %r8d,0xd0(%rsp)
  ;;  956 branch [EQ] [B18] 
  0x00007fffe123e7bc: je      0x7fffe123e7ca    ;*ifnonnull
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@239 (line 612)

  ;;  block B118 [253, 253]

  0x00007fffe123e7c2: mov     %rcx,%rsi
  ;;  962 branch [AL] [B19] 
  0x00007fffe123e7c5: jmpq    0x7fffe123e8b8    ;*aload_0
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@253 (line 614)

  ;;  block B18 [242, 253]

  ;;  966 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:243]
  0x00007fffe123e7ca: nop
  0x00007fffe123e7cb: nop
  0x00007fffe123e7cc: nop
  0x00007fffe123e7cd: nop
  0x00007fffe123e7ce: nop
  0x00007fffe123e7cf: nop
  0x00007fffe123e7d0: jmpq    0x7fffe1240fd6    ;   {no_reloc}
  0x00007fffe123e7d5: add     %al,(%rax)
  0x00007fffe123e7d7: add     %al,(%rax)
  0x00007fffe123e7d9: add     %ch,%cl
  0x00007fffe123e7db: add     %ebp,(%rax)
  0x00007fffe123e7dd: add     %al,(%rax)        ;*new  ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@243 (line 613)

  0x00007fffe123e7df: mov     %rax,%rdx
  0x00007fffe123e7e2: movabs  $0x7ffff4d73f80,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e7ec: addq    $0x1,0x4b8(%rdi)
  0x00007fffe123e7f4: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@247 (line 613)

  0x00007fffe123e7f7: mov     %rax,0xc8(%rsp)
  0x00007fffe123e7ff: callq   0x7fffe1105e80    ; OopMap{[160]=Oop [200]=Oop [224]=Oop [168]=Oop [216]=Oop [184]=Oop off=4420}
                                                ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@247 (line 613)
                                                ;   {optimized virtual_call}
  0x00007fffe123e804: mov     0xa0(%rsp),%rsi
  0x00007fffe123e80c: mov     0xc8(%rsp),%rax
  0x00007fffe123e814: mov     %rax,%r10
  0x00007fffe123e817: push    %r10
  0x00007fffe123e819: cmp     0x16b1b3c0(%rip),%r12  ;   {external_word}
  0x00007fffe123e820: je      0x7fffe123e89d
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe123e826: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123e82b: sub     $0x80,%rsp
  0x00007fffe123e832: mov     %rax,0x78(%rsp)
  0x00007fffe123e837: mov     %rcx,0x70(%rsp)
  0x00007fffe123e83c: mov     %rdx,0x68(%rsp)
  0x00007fffe123e841: mov     %rbx,0x60(%rsp)
  0x00007fffe123e846: mov     %rbp,0x50(%rsp)
  0x00007fffe123e84b: mov     %rsi,0x48(%rsp)
  0x00007fffe123e850: mov     %rdi,0x40(%rsp)
  0x00007fffe123e855: mov     %r8,0x38(%rsp)
  0x00007fffe123e85a: mov     %r9,0x30(%rsp)
  0x00007fffe123e85f: mov     %r10,0x28(%rsp)
  0x00007fffe123e864: mov     %r11,0x20(%rsp)
  0x00007fffe123e869: mov     %r12,0x18(%rsp)
  0x00007fffe123e86e: mov     %r13,0x10(%rsp)
  0x00007fffe123e873: mov     %r14,0x8(%rsp)
  0x00007fffe123e878: mov     %r15,(%rsp)
  0x00007fffe123e87c: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe123e886: movabs  $0x7fffe123e826,%rsi  ;   {internal_word}
  0x00007fffe123e890: mov     %rsp,%rdx
  0x00007fffe123e893: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123e897: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123e89c: hlt
  0x00007fffe123e89d: pop     %r10
  0x00007fffe123e89f: mov     %r10d,0x30(%rsi)
  0x00007fffe123e8a3: mov     %rsi,%rdx
  0x00007fffe123e8a6: shr     $0x9,%rdx
  0x00007fffe123e8aa: movabs  $0x7ffff591e000,%rcx
  0x00007fffe123e8b4: movb    $0x0,(%rdx,%rcx)  ;*putfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@250 (line 613)

  ;;  block B19 [253, 271]

  0x00007fffe123e8b8: mov     0x30(%rsi),%edi
  0x00007fffe123e8bb: push    %r10
  0x00007fffe123e8bd: cmp     0x16b1b31c(%rip),%r12  ;   {external_word}
  0x00007fffe123e8c4: je      0x7fffe123e941
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123e8ca: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123e8cf: sub     $0x80,%rsp
  0x00007fffe123e8d6: mov     %rax,0x78(%rsp)
  0x00007fffe123e8db: mov     %rcx,0x70(%rsp)
  0x00007fffe123e8e0: mov     %rdx,0x68(%rsp)
  0x00007fffe123e8e5: mov     %rbx,0x60(%rsp)
  0x00007fffe123e8ea: mov     %rbp,0x50(%rsp)
  0x00007fffe123e8ef: mov     %rsi,0x48(%rsp)
  0x00007fffe123e8f4: mov     %rdi,0x40(%rsp)
  0x00007fffe123e8f9: mov     %r8,0x38(%rsp)
  0x00007fffe123e8fe: mov     %r9,0x30(%rsp)
  0x00007fffe123e903: mov     %r10,0x28(%rsp)
  0x00007fffe123e908: mov     %r11,0x20(%rsp)
  0x00007fffe123e90d: mov     %r12,0x18(%rsp)
  0x00007fffe123e912: mov     %r13,0x10(%rsp)
  0x00007fffe123e917: mov     %r14,0x8(%rsp)
  0x00007fffe123e91c: mov     %r15,(%rsp)
  0x00007fffe123e920: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123e92a: movabs  $0x7fffe123e8ca,%rsi  ;   {internal_word}
  0x00007fffe123e934: mov     %rsp,%rdx
  0x00007fffe123e937: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123e93b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123e940: hlt
  0x00007fffe123e941: pop     %r10              ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@254 (line 614)

  0x00007fffe123e943: cmp     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe1240fed
  0x00007fffe123e946: mov     %rdi,%rdx
  0x00007fffe123e949: movabs  $0x7ffff4d73f80,%rcx  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123e953: mov     0x8(%rdx),%edx
  0x00007fffe123e956: shl     $0x3,%rdx
  0x00007fffe123e95a: cmp     0x4d0(%rcx),%rdx
  0x00007fffe123e961: jne     0x7fffe123e970
  0x00007fffe123e963: addq    $0x1,0x4d8(%rcx)
  0x00007fffe123e96b: jmpq    0x7fffe123e9d6
  0x00007fffe123e970: cmp     0x4e0(%rcx),%rdx
  0x00007fffe123e977: jne     0x7fffe123e986
  0x00007fffe123e979: addq    $0x1,0x4e8(%rcx)
  0x00007fffe123e981: jmpq    0x7fffe123e9d6
  0x00007fffe123e986: cmpq    $0x0,0x4d0(%rcx)
  0x00007fffe123e991: jne     0x7fffe123e9aa
  0x00007fffe123e993: mov     %rdx,0x4d0(%rcx)
  0x00007fffe123e99a: movq    $0x1,0x4d8(%rcx)
  0x00007fffe123e9a5: jmpq    0x7fffe123e9d6
  0x00007fffe123e9aa: cmpq    $0x0,0x4e0(%rcx)
  0x00007fffe123e9b5: jne     0x7fffe123e9ce
  0x00007fffe123e9b7: mov     %rdx,0x4e0(%rcx)
  0x00007fffe123e9be: movq    $0x1,0x4e8(%rcx)
  0x00007fffe123e9c9: jmpq    0x7fffe123e9d6
  0x00007fffe123e9ce: addq    $0x1,0x4c8(%rcx)
  0x00007fffe123e9d6: mov     0xc4(%rsp),%edx
  0x00007fffe123e9dd: mov     0xb8(%rsp),%rcx
  0x00007fffe123e9e5: mov     0xd0(%rsp),%r8d
  0x00007fffe123e9ed: mov     0xb4(%rsp),%r9d
  0x00007fffe123e9f5: mov     %rdi,%rsi         ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@264 (line 614)

  0x00007fffe123e9f8: nop
  0x00007fffe123e9f9: nop
  0x00007fffe123e9fa: nop
  0x00007fffe123e9fb: nop
  0x00007fffe123e9fc: nop
  0x00007fffe123e9fd: movabs  $0xffffffffffffffff,%rax
  0x00007fffe123ea07: callq   0x7fffe11060c0    ; OopMap{[224]=Oop [168]=Oop [216]=Oop [184]=Oop [160]=Oop off=4940}
                                                ;*invokevirtual parse
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@264 (line 614)
                                                ;   {virtual_call}
  0x00007fffe123ea0c: cmp     $0x0,%eax
  0x00007fffe123ea0f: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ea19: movabs  $0x4f8,%rdi
  0x00007fffe123ea23: jnl     0x7fffe123ea33
  0x00007fffe123ea29: movabs  $0x508,%rdi
  0x00007fffe123ea33: mov     (%rsi,%rdi),%rbx
  0x00007fffe123ea37: lea     0x1(%rbx),%rbx
  0x00007fffe123ea3b: mov     %rbx,(%rsi,%rdi)
  ;; 1030 branch [LT] [B20] 
  0x00007fffe123ea3f: jl      0x7fffe123f395    ;*ifge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@271 (line 615)

  ;;  block B21 [291, 297]

  0x00007fffe123ea45: mov     0xb0(%rsp),%edx
  0x00007fffe123ea4c: sub     0xc0(%rsp),%edx
  0x00007fffe123ea53: cmp     $0x4,%edx
  0x00007fffe123ea56: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ea60: movabs  $0x558,%rdi
  0x00007fffe123ea6a: jnl     0x7fffe123ea7a
  0x00007fffe123ea70: movabs  $0x568,%rdi
  0x00007fffe123ea7a: mov     (%rsi,%rdi),%rbx
  0x00007fffe123ea7e: lea     0x1(%rbx),%rbx
  0x00007fffe123ea82: mov     %rbx,(%rsi,%rdi)
  ;; 1052 branch [LT] [B22] 
  0x00007fffe123ea86: jl      0x7fffe123f005    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@297 (line 619)

  ;;  block B23 [310, 391]

  0x00007fffe123ea8c: mov     0xc0(%rsp),%esi
  0x00007fffe123ea93: mov     0xd8(%rsp),%rbx
  0x00007fffe123ea9b: mov     %rax,%rdi
  0x00007fffe123ea9e: sar     $0x12,%edi
  0x00007fffe123eaa1: or      $0xf0,%edi
  0x00007fffe123eaa7: movsxd  %esi,%rdx
  0x00007fffe123eaaa: cmp     0xc(%rbx),%esi    ; implicit exception: dispatches to 0x00007fffe1241069
  ;; 1072 branch [AE] [RangeCheckStub: 0x00007fffa82d3630] [bci:327]
  0x00007fffe123eaad: jnb     0x7fffe1241161
  0x00007fffe123eab3: mov     %dil,0x10(%rbx,%rdx)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@327 (line 621)

  0x00007fffe123eab8: incl    %esi
  0x00007fffe123eaba: mov     %rax,%rdi
  0x00007fffe123eabd: sar     $0xc,%edi
  0x00007fffe123eac0: and     $0x3f,%edi
  0x00007fffe123eac3: or      $0x80,%edi
  0x00007fffe123eac9: movsxd  %esi,%rdx
  0x00007fffe123eacc: cmp     0xc(%rbx),%esi
  ;; 1098 branch [AE] [RangeCheckStub: 0x00007fffa82d3f10] [bci:348]
  0x00007fffe123eacf: jnb     0x7fffe12411e1
  0x00007fffe123ead5: mov     %dil,0x10(%rbx,%rdx)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@348 (line 622)

  0x00007fffe123eada: incl    %esi
  0x00007fffe123eadc: mov     %rax,%rdi
  0x00007fffe123eadf: sar     $0x6,%edi
  0x00007fffe123eae2: and     $0x3f,%edi
  0x00007fffe123eae5: or      $0x80,%edi
  0x00007fffe123eaeb: movsxd  %esi,%rdx
  0x00007fffe123eaee: cmp     0xc(%rbx),%esi
  ;; 1124 branch [AE] [RangeCheckStub: 0x00007fffa82d4850] [bci:369]
  0x00007fffe123eaf1: jnb     0x7fffe1241261
  0x00007fffe123eaf7: mov     %dil,0x10(%rbx,%rdx)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@369 (line 623)

  0x00007fffe123eafc: incl    %esi
  0x00007fffe123eafe: mov     %rsi,%rdi
  0x00007fffe123eb01: incl    %edi
  0x00007fffe123eb03: and     $0x3f,%eax
  0x00007fffe123eb06: or      $0x80,%eax
  0x00007fffe123eb0c: movsxd  %esi,%rdx
  0x00007fffe123eb0f: cmp     0xc(%rbx),%esi
  ;; 1150 branch [AE] [RangeCheckStub: 0x00007fffa82d4f70] [bci:387]
  0x00007fffe123eb12: jnb     0x7fffe12412e1
  0x00007fffe123eb18: mov     %al,0x10(%rbx,%rdx)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@387 (line 624)

  0x00007fffe123eb1c: mov     0xd0(%rsp),%r8d
  0x00007fffe123eb24: incl    %r8d
  0x00007fffe123eb27: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123eb31: incl    0x588(%rsi)
  0x00007fffe123eb37: mov     %rdi,%rax
  ;; 1166 branch [AL] [B11] 
  0x00007fffe123eb3a: jmpq    0x7fffe123ec06    ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@391 (line 626)

  ;;  block B17 [394, 400]

  0x00007fffe123eb3f: mov     %r13d,0xc4(%rsp)
  0x00007fffe123eb47: mov     %r8d,0xd0(%rsp)
  0x00007fffe123eb4f: mov     0xb0(%rsp),%edx
  0x00007fffe123eb56: sub     %esi,%edx
  0x00007fffe123eb58: cmp     $0x3,%edx
  0x00007fffe123eb5b: movabs  $0x7ffff4d73f80,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123eb65: movabs  $0x5a0,%rax
  0x00007fffe123eb6f: jnl     0x7fffe123eb7f
  0x00007fffe123eb75: movabs  $0x5b0,%rax
  0x00007fffe123eb7f: mov     (%rdi,%rax),%rdx
  0x00007fffe123eb83: lea     0x1(%rdx),%rdx
  0x00007fffe123eb87: mov     %rdx,(%rdi,%rax)
  ;; 1186 branch [LT] [B24] 
  0x00007fffe123eb8b: jl      0x7fffe123ec6f    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@400 (line 628)

  ;;  block B25 [413, 470]

  0x00007fffe123eb91: mov     0xc4(%rsp),%r13d
  0x00007fffe123eb99: mov     %r13,%rdi
  0x00007fffe123eb9c: sar     $0xc,%edi
  0x00007fffe123eb9f: or      $0xe0,%edi
  0x00007fffe123eba5: movsxd  %esi,%rax
  0x00007fffe123eba8: cmp     0xc(%rbx),%esi    ; implicit exception: dispatches to 0x00007fffe1241361
  ;; 1206 branch [AE] [RangeCheckStub: 0x00007fffa82d6250] [bci:430]
  0x00007fffe123ebab: jnb     0x7fffe1241459
  0x00007fffe123ebb1: mov     %dil,0x10(%rbx,%rax)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@430 (line 630)

  0x00007fffe123ebb6: incl    %esi
  0x00007fffe123ebb8: mov     %r13,%rdi
  0x00007fffe123ebbb: sar     $0x6,%edi
  0x00007fffe123ebbe: and     $0x3f,%edi
  0x00007fffe123ebc1: or      $0x80,%edi
  0x00007fffe123ebc7: movsxd  %esi,%rax
  0x00007fffe123ebca: cmp     0xc(%rbx),%esi
  ;; 1232 branch [AE] [RangeCheckStub: 0x00007fffa82d6b30] [bci:451]
  0x00007fffe123ebcd: jnb     0x7fffe12414d9
  0x00007fffe123ebd3: mov     %dil,0x10(%rbx,%rax)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@451 (line 631)

  0x00007fffe123ebd8: incl    %esi
  0x00007fffe123ebda: mov     %rsi,%rdi
  0x00007fffe123ebdd: incl    %edi
  0x00007fffe123ebdf: and     $0x3f,%r13d
  0x00007fffe123ebe3: or      $0x80,%r13d
  0x00007fffe123ebea: movsxd  %esi,%rax
  0x00007fffe123ebed: cmp     0xc(%rbx),%esi
  ;; 1258 branch [AE] [RangeCheckStub: 0x00007fffa82d7450] [bci:469]
  0x00007fffe123ebf0: jnb     0x7fffe1241559
  0x00007fffe123ebf6: mov     %r13l,0x10(%rbx,%rax)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@469 (line 632)

  0x00007fffe123ebfb: mov     %rdi,%rax
  0x00007fffe123ebfe: mov     0xd0(%rsp),%r8d   ;*iinc
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@470 (line 634)

  ;;  block B11 [470, 473]

  0x00007fffe123ec06: incl    %r8d
  0x00007fffe123ec09: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ec13: mov     0x108(%rsi),%edi
  0x00007fffe123ec19: add     $0x8,%edi
  0x00007fffe123ec1c: mov     %edi,0x108(%rsi)
  0x00007fffe123ec22: movabs  $0x7ffff4c2e258,%rsi  ;   {metadata({method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ec2c: and     $0xfff8,%edi
  0x00007fffe123ec32: cmp     $0x0,%edi
  ;; 1288 branch [EQ] [CounterOverflowStub: 0x00007fffa82d7ff0]
  0x00007fffe123ec35: je      0x7fffe12415d9    ; OopMap{[224]=Oop [168]=Oop [184]=Oop [160]=Oop rbx=Oop [216]=Oop off=5499}
                                                ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@473 (line 635)

  0x00007fffe123ec3b: test    %eax,0x16dbc4bf(%rip)  ;   {poll}
  0x00007fffe123ec41: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ec4b: incl    0x5d0(%rsi)
  0x00007fffe123ec51: mov     %rax,%rsi
  0x00007fffe123ec54: mov     0xb0(%rsp),%edx
  0x00007fffe123ec5b: mov     0xb4(%rsp),%eax
  0x00007fffe123ec62: mov     0xb8(%rsp),%rdi
  ;; 1302 branch [AL] [B3] 
  0x00007fffe123ec6a: jmpq    0x7fffe123e408    ;*goto
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@473 (line 635)

  ;;  block B24 [403, 412]

  0x00007fffe123ec6f: mov     %esi,0xc0(%rsp)
  0x00007fffe123ec76: movabs  $0x7ffff4d73f80,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ec80: addq    $0x1,0x5c0(%rdi)
  0x00007fffe123ec88: movabs  $0x7ffff4d788a8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ec92: mov     0x104(%rdi),%ebx
  0x00007fffe123ec98: add     $0x8,%ebx
  0x00007fffe123ec9b: mov     %ebx,0x104(%rdi)
  0x00007fffe123eca1: movabs  $0x7ffff4c2de48,%rdi  ;   {metadata({method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ecab: and     $0x7ffff8,%ebx
  0x00007fffe123ecb1: cmp     $0x0,%ebx
  ;; 1322 branch [EQ] [CounterOverflowStub: 0x00007fffa82d8d70]
  0x00007fffe123ecb4: je      0x7fffe12415f0
  0x00007fffe123ecba: movabs  $0x7ffff4d788a8,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ecc4: addq    $0x1,0x130(%rdi)
  0x00007fffe123eccc: movabs  $0x7ffff4d74770,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ecd6: mov     0x104(%rdi),%ebx
  0x00007fffe123ecdc: add     $0x8,%ebx
  0x00007fffe123ecdf: mov     %ebx,0x104(%rdi)
  0x00007fffe123ece5: movabs  $0x7ffff4bf7be0,%rdi  ;   {metadata({method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ecef: and     $0x7ffff8,%ebx
  0x00007fffe123ecf5: cmp     $0x0,%ebx
  ;; 1342 branch [EQ] [CounterOverflowStub: 0x00007fffa82d9490]
  0x00007fffe123ecf8: je      0x7fffe1241607
  0x00007fffe123ecfe: movabs  $0x7ffff4d74770,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ed08: addq    $0x1,0x130(%rdi)
  0x00007fffe123ed10: movabs  $0x7ffff4d74908,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ed1a: mov     0x104(%rdi),%ebx
  0x00007fffe123ed20: add     $0x8,%ebx
  0x00007fffe123ed23: mov     %ebx,0x104(%rdi)
  0x00007fffe123ed29: movabs  $0x7ffff4bf7b08,%rdi  ;   {metadata({method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ed33: and     $0x7ffff8,%ebx
  0x00007fffe123ed39: cmp     $0x0,%ebx
  ;; 1362 branch [EQ] [CounterOverflowStub: 0x00007fffa82d9ad0]
  0x00007fffe123ed3c: je      0x7fffe124161e
  0x00007fffe123ed42: mov     0xa8(%rsp),%rdx
  0x00007fffe123ed4a: movabs  $0x7ffff4d74908,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ed54: mov     0x8(%rdx),%edx
  0x00007fffe123ed57: shl     $0x3,%rdx
  0x00007fffe123ed5b: cmp     0x138(%rdi),%rdx
  0x00007fffe123ed62: jne     0x7fffe123ed71
  0x00007fffe123ed64: addq    $0x1,0x140(%rdi)
  0x00007fffe123ed6c: jmpq    0x7fffe123edd7
  0x00007fffe123ed71: cmp     0x148(%rdi),%rdx
  0x00007fffe123ed78: jne     0x7fffe123ed87
  0x00007fffe123ed7a: addq    $0x1,0x150(%rdi)
  0x00007fffe123ed82: jmpq    0x7fffe123edd7
  0x00007fffe123ed87: cmpq    $0x0,0x138(%rdi)
  0x00007fffe123ed92: jne     0x7fffe123edab
  0x00007fffe123ed94: mov     %rdx,0x138(%rdi)
  0x00007fffe123ed9b: movq    $0x1,0x140(%rdi)
  0x00007fffe123eda6: jmpq    0x7fffe123edd7
  0x00007fffe123edab: cmpq    $0x0,0x148(%rdi)
  0x00007fffe123edb6: jne     0x7fffe123edcf
  0x00007fffe123edb8: mov     %rdx,0x148(%rdi)
  0x00007fffe123edbf: movq    $0x1,0x150(%rdi)
  0x00007fffe123edca: jmpq    0x7fffe123edd7
  0x00007fffe123edcf: addq    $0x1,0x130(%rdi)
  0x00007fffe123edd7: mov     0xa8(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)

  0x00007fffe123eddf: callq   0x7fffe1105e80    ; OopMap{[224]=Oop [168]=Oop off=5924}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)
                                                ;   {optimized virtual_call}
  0x00007fffe123ede4: mov     0xa8(%rsp),%rdx
  0x00007fffe123edec: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123edf6: mov     0x8(%rdx),%edx
  0x00007fffe123edf9: shl     $0x3,%rdx
  0x00007fffe123edfd: cmp     0x168(%rsi),%rdx
  0x00007fffe123ee04: jne     0x7fffe123ee13
  0x00007fffe123ee06: addq    $0x1,0x170(%rsi)
  0x00007fffe123ee0e: jmpq    0x7fffe123ee79
  0x00007fffe123ee13: cmp     0x178(%rsi),%rdx
  0x00007fffe123ee1a: jne     0x7fffe123ee29
  0x00007fffe123ee1c: addq    $0x1,0x180(%rsi)
  0x00007fffe123ee24: jmpq    0x7fffe123ee79
  0x00007fffe123ee29: cmpq    $0x0,0x168(%rsi)
  0x00007fffe123ee34: jne     0x7fffe123ee4d
  0x00007fffe123ee36: mov     %rdx,0x168(%rsi)
  0x00007fffe123ee3d: movq    $0x1,0x170(%rsi)
  0x00007fffe123ee48: jmpq    0x7fffe123ee79
  0x00007fffe123ee4d: cmpq    $0x0,0x178(%rsi)
  0x00007fffe123ee58: jne     0x7fffe123ee71
  0x00007fffe123ee5a: mov     %rdx,0x178(%rsi)
  0x00007fffe123ee61: movq    $0x1,0x180(%rsi)
  0x00007fffe123ee6c: jmpq    0x7fffe123ee79
  0x00007fffe123ee71: addq    $0x1,0x160(%rsi)
  0x00007fffe123ee79: mov     0xd0(%rsp),%r8d
  0x00007fffe123ee81: sub     %eax,%r8d
  0x00007fffe123ee84: mov     %r8,%rdx
  0x00007fffe123ee87: mov     0xa8(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)

  0x00007fffe123ee8f: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=6100}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)
                                                ;   {optimized virtual_call}
  0x00007fffe123ee94: mov     0xe0(%rsp),%rcx
  0x00007fffe123ee9c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123eea6: mov     0x8(%rcx),%ecx
  0x00007fffe123eea9: shl     $0x3,%rcx
  0x00007fffe123eead: cmp     0x198(%rsi),%rcx
  0x00007fffe123eeb4: jne     0x7fffe123eec3
  0x00007fffe123eeb6: addq    $0x1,0x1a0(%rsi)
  0x00007fffe123eebe: jmpq    0x7fffe123ef29
  0x00007fffe123eec3: cmp     0x1a8(%rsi),%rcx
  0x00007fffe123eeca: jne     0x7fffe123eed9
  0x00007fffe123eecc: addq    $0x1,0x1b0(%rsi)
  0x00007fffe123eed4: jmpq    0x7fffe123ef29
  0x00007fffe123eed9: cmpq    $0x0,0x198(%rsi)
  0x00007fffe123eee4: jne     0x7fffe123eefd
  0x00007fffe123eee6: mov     %rcx,0x198(%rsi)
  0x00007fffe123eeed: movq    $0x1,0x1a0(%rsi)
  0x00007fffe123eef8: jmpq    0x7fffe123ef29
  0x00007fffe123eefd: cmpq    $0x0,0x1a8(%rsi)
  0x00007fffe123ef08: jne     0x7fffe123ef21
  0x00007fffe123ef0a: mov     %rcx,0x1a8(%rsi)
  0x00007fffe123ef11: movq    $0x1,0x1b0(%rsi)
  0x00007fffe123ef1c: jmpq    0x7fffe123ef29
  0x00007fffe123ef21: addq    $0x1,0x190(%rsi)
  0x00007fffe123ef29: mov     0xe0(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)

  0x00007fffe123ef31: nop
  0x00007fffe123ef32: nop
  0x00007fffe123ef33: nop
  0x00007fffe123ef34: nop
  0x00007fffe123ef35: nop
  0x00007fffe123ef36: nop
  0x00007fffe123ef37: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=6268}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)
                                                ;   {optimized virtual_call}
  0x00007fffe123ef3c: mov     0xe0(%rsp),%rcx
  0x00007fffe123ef44: movabs  $0x7ffff4d74908,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ef4e: mov     0x8(%rcx),%ecx
  0x00007fffe123ef51: shl     $0x3,%rcx
  0x00007fffe123ef55: cmp     0x1c8(%rdx),%rcx
  0x00007fffe123ef5c: jne     0x7fffe123ef6b
  0x00007fffe123ef5e: addq    $0x1,0x1d0(%rdx)
  0x00007fffe123ef66: jmpq    0x7fffe123efd1
  0x00007fffe123ef6b: cmp     0x1d8(%rdx),%rcx
  0x00007fffe123ef72: jne     0x7fffe123ef81
  0x00007fffe123ef74: addq    $0x1,0x1e0(%rdx)
  0x00007fffe123ef7c: jmpq    0x7fffe123efd1
  0x00007fffe123ef81: cmpq    $0x0,0x1c8(%rdx)
  0x00007fffe123ef8c: jne     0x7fffe123efa5
  0x00007fffe123ef8e: mov     %rcx,0x1c8(%rdx)
  0x00007fffe123ef95: movq    $0x1,0x1d0(%rdx)
  0x00007fffe123efa0: jmpq    0x7fffe123efd1
  0x00007fffe123efa5: cmpq    $0x0,0x1d8(%rdx)
  0x00007fffe123efb0: jne     0x7fffe123efc9
  0x00007fffe123efb2: mov     %rcx,0x1d8(%rdx)
  0x00007fffe123efb9: movq    $0x1,0x1e0(%rdx)
  0x00007fffe123efc4: jmpq    0x7fffe123efd1
  0x00007fffe123efc9: addq    $0x1,0x1c0(%rdx)
  0x00007fffe123efd1: mov     0xc0(%rsp),%esi
  0x00007fffe123efd8: sub     %eax,%esi
  0x00007fffe123efda: mov     %rsi,%rdx
  0x00007fffe123efdd: mov     0xe0(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)

  0x00007fffe123efe5: nop
  0x00007fffe123efe6: nop
  0x00007fffe123efe7: callq   0x7fffe1105e80    ; OopMap{off=6444}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@409 (line 629)
                                                ;   {optimized virtual_call}
  0x00007fffe123efec: movabs  $0xd73dd9f8,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe123eff6: add     $0x160,%rsp
  0x00007fffe123effd: pop     %rbp
  0x00007fffe123effe: test    %eax,0x16dbc0fc(%rip)  ;   {poll_return}
  0x00007fffe123f004: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@412 (line 629)

  ;;  block B22 [300, 309]

  0x00007fffe123f005: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f00f: addq    $0x1,0x578(%rsi)
  0x00007fffe123f017: movabs  $0x7ffff4d788a8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f021: mov     0x104(%rsi),%edi
  0x00007fffe123f027: add     $0x8,%edi
  0x00007fffe123f02a: mov     %edi,0x104(%rsi)
  0x00007fffe123f030: movabs  $0x7ffff4c2de48,%rsi  ;   {metadata({method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f03a: and     $0x7ffff8,%edi
  0x00007fffe123f040: cmp     $0x0,%edi
  ;; 1440 branch [EQ] [CounterOverflowStub: 0x00007fffa8091eb0]
  0x00007fffe123f043: je      0x7fffe1241635
  0x00007fffe123f049: movabs  $0x7ffff4d788a8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f053: addq    $0x1,0x130(%rsi)
  0x00007fffe123f05b: movabs  $0x7ffff4d74770,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f065: mov     0x104(%rsi),%edi
  0x00007fffe123f06b: add     $0x8,%edi
  0x00007fffe123f06e: mov     %edi,0x104(%rsi)
  0x00007fffe123f074: movabs  $0x7ffff4bf7be0,%rsi  ;   {metadata({method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f07e: and     $0x7ffff8,%edi
  0x00007fffe123f084: cmp     $0x0,%edi
  ;; 1460 branch [EQ] [CounterOverflowStub: 0x00007fffa80925d0]
  0x00007fffe123f087: je      0x7fffe124164c
  0x00007fffe123f08d: movabs  $0x7ffff4d74770,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f097: addq    $0x1,0x130(%rsi)
  0x00007fffe123f09f: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f0a9: mov     0x104(%rsi),%edi
  0x00007fffe123f0af: add     $0x8,%edi
  0x00007fffe123f0b2: mov     %edi,0x104(%rsi)
  0x00007fffe123f0b8: movabs  $0x7ffff4bf7b08,%rsi  ;   {metadata({method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f0c2: and     $0x7ffff8,%edi
  0x00007fffe123f0c8: cmp     $0x0,%edi
  ;; 1480 branch [EQ] [CounterOverflowStub: 0x00007fffa8092c10]
  0x00007fffe123f0cb: je      0x7fffe1241663
  0x00007fffe123f0d1: mov     0xa8(%rsp),%rdx
  0x00007fffe123f0d9: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f0e3: mov     0x8(%rdx),%edx
  0x00007fffe123f0e6: shl     $0x3,%rdx
  0x00007fffe123f0ea: cmp     0x138(%rsi),%rdx
  0x00007fffe123f0f1: jne     0x7fffe123f100
  0x00007fffe123f0f3: addq    $0x1,0x140(%rsi)
  0x00007fffe123f0fb: jmpq    0x7fffe123f166
  0x00007fffe123f100: cmp     0x148(%rsi),%rdx
  0x00007fffe123f107: jne     0x7fffe123f116
  0x00007fffe123f109: addq    $0x1,0x150(%rsi)
  0x00007fffe123f111: jmpq    0x7fffe123f166
  0x00007fffe123f116: cmpq    $0x0,0x138(%rsi)
  0x00007fffe123f121: jne     0x7fffe123f13a
  0x00007fffe123f123: mov     %rdx,0x138(%rsi)
  0x00007fffe123f12a: movq    $0x1,0x140(%rsi)
  0x00007fffe123f135: jmpq    0x7fffe123f166
  0x00007fffe123f13a: cmpq    $0x0,0x148(%rsi)
  0x00007fffe123f145: jne     0x7fffe123f15e
  0x00007fffe123f147: mov     %rdx,0x148(%rsi)
  0x00007fffe123f14e: movq    $0x1,0x150(%rsi)
  0x00007fffe123f159: jmpq    0x7fffe123f166
  0x00007fffe123f15e: addq    $0x1,0x130(%rsi)
  0x00007fffe123f166: mov     0xa8(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)

  0x00007fffe123f16e: nop
  0x00007fffe123f16f: callq   0x7fffe1105e80    ; OopMap{[168]=Oop [224]=Oop off=6836}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)
                                                ;   {optimized virtual_call}
  0x00007fffe123f174: mov     0xa8(%rsp),%rdx
  0x00007fffe123f17c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f186: mov     0x8(%rdx),%edx
  0x00007fffe123f189: shl     $0x3,%rdx
  0x00007fffe123f18d: cmp     0x168(%rsi),%rdx
  0x00007fffe123f194: jne     0x7fffe123f1a3
  0x00007fffe123f196: addq    $0x1,0x170(%rsi)
  0x00007fffe123f19e: jmpq    0x7fffe123f209
  0x00007fffe123f1a3: cmp     0x178(%rsi),%rdx
  0x00007fffe123f1aa: jne     0x7fffe123f1b9
  0x00007fffe123f1ac: addq    $0x1,0x180(%rsi)
  0x00007fffe123f1b4: jmpq    0x7fffe123f209
  0x00007fffe123f1b9: cmpq    $0x0,0x168(%rsi)
  0x00007fffe123f1c4: jne     0x7fffe123f1dd
  0x00007fffe123f1c6: mov     %rdx,0x168(%rsi)
  0x00007fffe123f1cd: movq    $0x1,0x170(%rsi)
  0x00007fffe123f1d8: jmpq    0x7fffe123f209
  0x00007fffe123f1dd: cmpq    $0x0,0x178(%rsi)
  0x00007fffe123f1e8: jne     0x7fffe123f201
  0x00007fffe123f1ea: mov     %rdx,0x178(%rsi)
  0x00007fffe123f1f1: movq    $0x1,0x180(%rsi)
  0x00007fffe123f1fc: jmpq    0x7fffe123f209
  0x00007fffe123f201: addq    $0x1,0x160(%rsi)
  0x00007fffe123f209: mov     0xd0(%rsp),%r8d
  0x00007fffe123f211: sub     %eax,%r8d
  0x00007fffe123f214: mov     %r8,%rdx
  0x00007fffe123f217: mov     0xa8(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)

  0x00007fffe123f21f: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=7012}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)
                                                ;   {optimized virtual_call}
  0x00007fffe123f224: mov     0xe0(%rsp),%rcx
  0x00007fffe123f22c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f236: mov     0x8(%rcx),%ecx
  0x00007fffe123f239: shl     $0x3,%rcx
  0x00007fffe123f23d: cmp     0x198(%rsi),%rcx
  0x00007fffe123f244: jne     0x7fffe123f253
  0x00007fffe123f246: addq    $0x1,0x1a0(%rsi)
  0x00007fffe123f24e: jmpq    0x7fffe123f2b9
  0x00007fffe123f253: cmp     0x1a8(%rsi),%rcx
  0x00007fffe123f25a: jne     0x7fffe123f269
  0x00007fffe123f25c: addq    $0x1,0x1b0(%rsi)
  0x00007fffe123f264: jmpq    0x7fffe123f2b9
  0x00007fffe123f269: cmpq    $0x0,0x198(%rsi)
  0x00007fffe123f274: jne     0x7fffe123f28d
  0x00007fffe123f276: mov     %rcx,0x198(%rsi)
  0x00007fffe123f27d: movq    $0x1,0x1a0(%rsi)
  0x00007fffe123f288: jmpq    0x7fffe123f2b9
  0x00007fffe123f28d: cmpq    $0x0,0x1a8(%rsi)
  0x00007fffe123f298: jne     0x7fffe123f2b1
  0x00007fffe123f29a: mov     %rcx,0x1a8(%rsi)
  0x00007fffe123f2a1: movq    $0x1,0x1b0(%rsi)
  0x00007fffe123f2ac: jmpq    0x7fffe123f2b9
  0x00007fffe123f2b1: addq    $0x1,0x190(%rsi)
  0x00007fffe123f2b9: mov     0xe0(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)

  0x00007fffe123f2c1: nop
  0x00007fffe123f2c2: nop
  0x00007fffe123f2c3: nop
  0x00007fffe123f2c4: nop
  0x00007fffe123f2c5: nop
  0x00007fffe123f2c6: nop
  0x00007fffe123f2c7: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=7180}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)
                                                ;   {optimized virtual_call}
  0x00007fffe123f2cc: mov     0xe0(%rsp),%rcx
  0x00007fffe123f2d4: movabs  $0x7ffff4d74908,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f2de: mov     0x8(%rcx),%ecx
  0x00007fffe123f2e1: shl     $0x3,%rcx
  0x00007fffe123f2e5: cmp     0x1c8(%rdx),%rcx
  0x00007fffe123f2ec: jne     0x7fffe123f2fb
  0x00007fffe123f2ee: addq    $0x1,0x1d0(%rdx)
  0x00007fffe123f2f6: jmpq    0x7fffe123f361
  0x00007fffe123f2fb: cmp     0x1d8(%rdx),%rcx
  0x00007fffe123f302: jne     0x7fffe123f311
  0x00007fffe123f304: addq    $0x1,0x1e0(%rdx)
  0x00007fffe123f30c: jmpq    0x7fffe123f361
  0x00007fffe123f311: cmpq    $0x0,0x1c8(%rdx)
  0x00007fffe123f31c: jne     0x7fffe123f335
  0x00007fffe123f31e: mov     %rcx,0x1c8(%rdx)
  0x00007fffe123f325: movq    $0x1,0x1d0(%rdx)
  0x00007fffe123f330: jmpq    0x7fffe123f361
  0x00007fffe123f335: cmpq    $0x0,0x1d8(%rdx)
  0x00007fffe123f340: jne     0x7fffe123f359
  0x00007fffe123f342: mov     %rcx,0x1d8(%rdx)
  0x00007fffe123f349: movq    $0x1,0x1e0(%rdx)
  0x00007fffe123f354: jmpq    0x7fffe123f361
  0x00007fffe123f359: addq    $0x1,0x1c0(%rdx)
  0x00007fffe123f361: mov     0xc0(%rsp),%esi
  0x00007fffe123f368: sub     %eax,%esi
  0x00007fffe123f36a: mov     %rsi,%rdx
  0x00007fffe123f36d: mov     0xe0(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)

  0x00007fffe123f375: nop
  0x00007fffe123f376: nop
  0x00007fffe123f377: callq   0x7fffe1105e80    ; OopMap{off=7356}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@306 (line 620)
                                                ;   {optimized virtual_call}
  0x00007fffe123f37c: movabs  $0xd73dd9f8,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe123f386: add     $0x160,%rsp
  0x00007fffe123f38d: pop     %rbp
  0x00007fffe123f38e: test    %eax,0x16dbbd6c(%rip)  ;   {poll_return}
  0x00007fffe123f394: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@309 (line 620)

  ;;  block B20 [274, 290]

  0x00007fffe123f395: movabs  $0x7ffff4d73f80,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f39f: addq    $0x1,0x518(%rdi)
  0x00007fffe123f3a7: movabs  $0x7ffff4d74770,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f3b1: mov     0x104(%rdi),%ebx
  0x00007fffe123f3b7: add     $0x8,%ebx
  0x00007fffe123f3ba: mov     %ebx,0x104(%rdi)
  0x00007fffe123f3c0: movabs  $0x7ffff4bf7be0,%rdi  ;   {metadata({method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f3ca: and     $0x7ffff8,%ebx
  0x00007fffe123f3d0: cmp     $0x0,%ebx
  ;; 1558 branch [EQ] [CounterOverflowStub: 0x00007fffa8094860]
  0x00007fffe123f3d3: je      0x7fffe124167a
  0x00007fffe123f3d9: movabs  $0x7ffff4d74770,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f3e3: addq    $0x1,0x130(%rdi)
  0x00007fffe123f3eb: movabs  $0x7ffff4d74908,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f3f5: mov     0x104(%rdi),%ebx
  0x00007fffe123f3fb: add     $0x8,%ebx
  0x00007fffe123f3fe: mov     %ebx,0x104(%rdi)
  0x00007fffe123f404: movabs  $0x7ffff4bf7b08,%rdi  ;   {metadata({method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f40e: and     $0x7ffff8,%ebx
  0x00007fffe123f414: cmp     $0x0,%ebx
  ;; 1578 branch [EQ] [CounterOverflowStub: 0x00007fffa8094f80]
  0x00007fffe123f417: je      0x7fffe1241691
  0x00007fffe123f41d: mov     0xa8(%rsp),%rdx
  0x00007fffe123f425: movabs  $0x7ffff4d74908,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f42f: mov     0x8(%rdx),%edx
  0x00007fffe123f432: shl     $0x3,%rdx
  0x00007fffe123f436: cmp     0x138(%rdi),%rdx
  0x00007fffe123f43d: jne     0x7fffe123f44c
  0x00007fffe123f43f: addq    $0x1,0x140(%rdi)
  0x00007fffe123f447: jmpq    0x7fffe123f4b2
  0x00007fffe123f44c: cmp     0x148(%rdi),%rdx
  0x00007fffe123f453: jne     0x7fffe123f462
  0x00007fffe123f455: addq    $0x1,0x150(%rdi)
  0x00007fffe123f45d: jmpq    0x7fffe123f4b2
  0x00007fffe123f462: cmpq    $0x0,0x138(%rdi)
  0x00007fffe123f46d: jne     0x7fffe123f486
  0x00007fffe123f46f: mov     %rdx,0x138(%rdi)
  0x00007fffe123f476: movq    $0x1,0x140(%rdi)
  0x00007fffe123f481: jmpq    0x7fffe123f4b2
  0x00007fffe123f486: cmpq    $0x0,0x148(%rdi)
  0x00007fffe123f491: jne     0x7fffe123f4aa
  0x00007fffe123f493: mov     %rdx,0x148(%rdi)
  0x00007fffe123f49a: movq    $0x1,0x150(%rdi)
  0x00007fffe123f4a5: jmpq    0x7fffe123f4b2
  0x00007fffe123f4aa: addq    $0x1,0x130(%rdi)
  0x00007fffe123f4b2: mov     0xa8(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)

  0x00007fffe123f4ba: nop
  0x00007fffe123f4bb: nop
  0x00007fffe123f4bc: nop
  0x00007fffe123f4bd: nop
  0x00007fffe123f4be: nop
  0x00007fffe123f4bf: callq   0x7fffe1105e80    ; OopMap{[168]=Oop [224]=Oop [160]=Oop off=7684}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)
                                                ;   {optimized virtual_call}
  0x00007fffe123f4c4: mov     0xa8(%rsp),%rdx
  0x00007fffe123f4cc: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f4d6: mov     0x8(%rdx),%edx
  0x00007fffe123f4d9: shl     $0x3,%rdx
  0x00007fffe123f4dd: cmp     0x168(%rsi),%rdx
  0x00007fffe123f4e4: jne     0x7fffe123f4f3
  0x00007fffe123f4e6: addq    $0x1,0x170(%rsi)
  0x00007fffe123f4ee: jmpq    0x7fffe123f559
  0x00007fffe123f4f3: cmp     0x178(%rsi),%rdx
  0x00007fffe123f4fa: jne     0x7fffe123f509
  0x00007fffe123f4fc: addq    $0x1,0x180(%rsi)
  0x00007fffe123f504: jmpq    0x7fffe123f559
  0x00007fffe123f509: cmpq    $0x0,0x168(%rsi)
  0x00007fffe123f514: jne     0x7fffe123f52d
  0x00007fffe123f516: mov     %rdx,0x168(%rsi)
  0x00007fffe123f51d: movq    $0x1,0x170(%rsi)
  0x00007fffe123f528: jmpq    0x7fffe123f559
  0x00007fffe123f52d: cmpq    $0x0,0x178(%rsi)
  0x00007fffe123f538: jne     0x7fffe123f551
  0x00007fffe123f53a: mov     %rdx,0x178(%rsi)
  0x00007fffe123f541: movq    $0x1,0x180(%rsi)
  0x00007fffe123f54c: jmpq    0x7fffe123f559
  0x00007fffe123f551: addq    $0x1,0x160(%rsi)
  0x00007fffe123f559: mov     0xd0(%rsp),%r8d
  0x00007fffe123f561: sub     %eax,%r8d
  0x00007fffe123f564: mov     %r8,%rdx
  0x00007fffe123f567: mov     0xa8(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)

  0x00007fffe123f56f: callq   0x7fffe1105e80    ; OopMap{[224]=Oop [160]=Oop off=7860}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)
                                                ;   {optimized virtual_call}
  0x00007fffe123f574: mov     0xe0(%rsp),%rcx
  0x00007fffe123f57c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f586: mov     0x8(%rcx),%ecx
  0x00007fffe123f589: shl     $0x3,%rcx
  0x00007fffe123f58d: cmp     0x198(%rsi),%rcx
  0x00007fffe123f594: jne     0x7fffe123f5a3
  0x00007fffe123f596: addq    $0x1,0x1a0(%rsi)
  0x00007fffe123f59e: jmpq    0x7fffe123f609
  0x00007fffe123f5a3: cmp     0x1a8(%rsi),%rcx
  0x00007fffe123f5aa: jne     0x7fffe123f5b9
  0x00007fffe123f5ac: addq    $0x1,0x1b0(%rsi)
  0x00007fffe123f5b4: jmpq    0x7fffe123f609
  0x00007fffe123f5b9: cmpq    $0x0,0x198(%rsi)
  0x00007fffe123f5c4: jne     0x7fffe123f5dd
  0x00007fffe123f5c6: mov     %rcx,0x198(%rsi)
  0x00007fffe123f5cd: movq    $0x1,0x1a0(%rsi)
  0x00007fffe123f5d8: jmpq    0x7fffe123f609
  0x00007fffe123f5dd: cmpq    $0x0,0x1a8(%rsi)
  0x00007fffe123f5e8: jne     0x7fffe123f601
  0x00007fffe123f5ea: mov     %rcx,0x1a8(%rsi)
  0x00007fffe123f5f1: movq    $0x1,0x1b0(%rsi)
  0x00007fffe123f5fc: jmpq    0x7fffe123f609
  0x00007fffe123f601: addq    $0x1,0x190(%rsi)
  0x00007fffe123f609: mov     0xe0(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)

  0x00007fffe123f611: nop
  0x00007fffe123f612: nop
  0x00007fffe123f613: nop
  0x00007fffe123f614: nop
  0x00007fffe123f615: nop
  0x00007fffe123f616: nop
  0x00007fffe123f617: callq   0x7fffe1105e80    ; OopMap{[224]=Oop [160]=Oop off=8028}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)
                                                ;   {optimized virtual_call}
  0x00007fffe123f61c: mov     0xe0(%rsp),%rcx
  0x00007fffe123f624: movabs  $0x7ffff4d74908,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f62e: mov     0x8(%rcx),%ecx
  0x00007fffe123f631: shl     $0x3,%rcx
  0x00007fffe123f635: cmp     0x1c8(%rdx),%rcx
  0x00007fffe123f63c: jne     0x7fffe123f64b
  0x00007fffe123f63e: addq    $0x1,0x1d0(%rdx)
  0x00007fffe123f646: jmpq    0x7fffe123f6b1
  0x00007fffe123f64b: cmp     0x1d8(%rdx),%rcx
  0x00007fffe123f652: jne     0x7fffe123f661
  0x00007fffe123f654: addq    $0x1,0x1e0(%rdx)
  0x00007fffe123f65c: jmpq    0x7fffe123f6b1
  0x00007fffe123f661: cmpq    $0x0,0x1c8(%rdx)
  0x00007fffe123f66c: jne     0x7fffe123f685
  0x00007fffe123f66e: mov     %rcx,0x1c8(%rdx)
  0x00007fffe123f675: movq    $0x1,0x1d0(%rdx)
  0x00007fffe123f680: jmpq    0x7fffe123f6b1
  0x00007fffe123f685: cmpq    $0x0,0x1d8(%rdx)
  0x00007fffe123f690: jne     0x7fffe123f6a9
  0x00007fffe123f692: mov     %rcx,0x1d8(%rdx)
  0x00007fffe123f699: movq    $0x1,0x1e0(%rdx)
  0x00007fffe123f6a4: jmpq    0x7fffe123f6b1
  0x00007fffe123f6a9: addq    $0x1,0x1c0(%rdx)
  0x00007fffe123f6b1: mov     0xc0(%rsp),%esi
  0x00007fffe123f6b8: sub     %eax,%esi
  0x00007fffe123f6ba: mov     %rsi,%rdx
  0x00007fffe123f6bd: mov     0xe0(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)

  0x00007fffe123f6c5: nop
  0x00007fffe123f6c6: nop
  0x00007fffe123f6c7: callq   0x7fffe1105e80    ; OopMap{[160]=Oop off=8204}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@280 (line 616)
                                                ;   {optimized virtual_call}
  0x00007fffe123f6cc: mov     0xa0(%rsp),%rsi
  0x00007fffe123f6d4: mov     0x30(%rsi),%esi
  0x00007fffe123f6d7: push    %r10
  0x00007fffe123f6d9: cmp     0x16b1a500(%rip),%r12  ;   {external_word}
  0x00007fffe123f6e0: je      0x7fffe123f75d
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123f6e6: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123f6eb: sub     $0x80,%rsp
  0x00007fffe123f6f2: mov     %rax,0x78(%rsp)
  0x00007fffe123f6f7: mov     %rcx,0x70(%rsp)
  0x00007fffe123f6fc: mov     %rdx,0x68(%rsp)
  0x00007fffe123f701: mov     %rbx,0x60(%rsp)
  0x00007fffe123f706: mov     %rbp,0x50(%rsp)
  0x00007fffe123f70b: mov     %rsi,0x48(%rsp)
  0x00007fffe123f710: mov     %rdi,0x40(%rsp)
  0x00007fffe123f715: mov     %r8,0x38(%rsp)
  0x00007fffe123f71a: mov     %r9,0x30(%rsp)
  0x00007fffe123f71f: mov     %r10,0x28(%rsp)
  0x00007fffe123f724: mov     %r11,0x20(%rsp)
  0x00007fffe123f729: mov     %r12,0x18(%rsp)
  0x00007fffe123f72e: mov     %r13,0x10(%rsp)
  0x00007fffe123f733: mov     %r14,0x8(%rsp)
  0x00007fffe123f738: mov     %r15,(%rsp)
  0x00007fffe123f73c: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123f746: movabs  $0x7fffe123f6e6,%rsi  ;   {internal_word}
  0x00007fffe123f750: mov     %rsp,%rdx
  0x00007fffe123f753: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123f757: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123f75c: hlt
  0x00007fffe123f75d: pop     %r10              ;*getfield sgp
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@284 (line 617)

  0x00007fffe123f75f: cmp     (%rsi),%rax       ;*invokevirtual error
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@287 (line 617)
                                                ; implicit exception: dispatches to 0x00007fffe12416a8
  0x00007fffe123f762: mov     %rsi,%rdi
  0x00007fffe123f765: movabs  $0x7ffff4d73f80,%rbx  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f76f: mov     0x8(%rdi),%edi
  0x00007fffe123f772: shl     $0x3,%rdi
  0x00007fffe123f776: cmp     0x530(%rbx),%rdi
  0x00007fffe123f77d: jne     0x7fffe123f78c
  0x00007fffe123f77f: addq    $0x1,0x538(%rbx)
  0x00007fffe123f787: jmpq    0x7fffe123f7f2
  0x00007fffe123f78c: cmp     0x540(%rbx),%rdi
  0x00007fffe123f793: jne     0x7fffe123f7a2
  0x00007fffe123f795: addq    $0x1,0x548(%rbx)
  0x00007fffe123f79d: jmpq    0x7fffe123f7f2
  0x00007fffe123f7a2: cmpq    $0x0,0x530(%rbx)
  0x00007fffe123f7ad: jne     0x7fffe123f7c6
  0x00007fffe123f7af: mov     %rdi,0x530(%rbx)
  0x00007fffe123f7b6: movq    $0x1,0x538(%rbx)
  0x00007fffe123f7c1: jmpq    0x7fffe123f7f2
  0x00007fffe123f7c6: cmpq    $0x0,0x540(%rbx)
  0x00007fffe123f7d1: jne     0x7fffe123f7ea
  0x00007fffe123f7d3: mov     %rdi,0x540(%rbx)
  0x00007fffe123f7da: movq    $0x1,0x548(%rbx)
  0x00007fffe123f7e5: jmpq    0x7fffe123f7f2
  0x00007fffe123f7ea: addq    $0x1,0x528(%rbx)
  0x00007fffe123f7f2: nop
  0x00007fffe123f7f3: nop
  0x00007fffe123f7f4: nop
  0x00007fffe123f7f5: movabs  $0xffffffffffffffff,%rax
  0x00007fffe123f7ff: callq   0x7fffe11060c0    ; OopMap{off=8516}
                                                ;*invokevirtual error
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@287 (line 617)
                                                ;   {virtual_call}
  0x00007fffe123f804: add     $0x160,%rsp
  0x00007fffe123f80b: pop     %rbp
  0x00007fffe123f80c: test    %eax,0x16dbb8ee(%rip)  ;   {poll_return}
  0x00007fffe123f812: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@290 (line 617)

  ;;  block B14 [178, 187]

  0x00007fffe123f813: mov     %esi,0xc0(%rsp)
  0x00007fffe123f81a: mov     %r8d,0xd0(%rsp)
  0x00007fffe123f822: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f82c: addq    $0x1,0x440(%rsi)
  0x00007fffe123f834: movabs  $0x7ffff4d788a8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f83e: mov     0x104(%rsi),%edi
  0x00007fffe123f844: add     $0x8,%edi
  0x00007fffe123f847: mov     %edi,0x104(%rsi)
  0x00007fffe123f84d: movabs  $0x7ffff4c2de48,%rsi  ;   {metadata({method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f857: and     $0x7ffff8,%edi
  0x00007fffe123f85d: cmp     $0x0,%edi
  ;; 1670 branch [EQ] [CounterOverflowStub: 0x00007fffa807c560]
  0x00007fffe123f860: je      0x7fffe1241724
  0x00007fffe123f866: movabs  $0x7ffff4d788a8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123f870: addq    $0x1,0x130(%rsi)
  0x00007fffe123f878: movabs  $0x7ffff4d74770,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f882: mov     0x104(%rsi),%edi
  0x00007fffe123f888: add     $0x8,%edi
  0x00007fffe123f88b: mov     %edi,0x104(%rsi)
  0x00007fffe123f891: movabs  $0x7ffff4bf7be0,%rsi  ;   {metadata({method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f89b: and     $0x7ffff8,%edi
  0x00007fffe123f8a1: cmp     $0x0,%edi
  ;; 1690 branch [EQ] [CounterOverflowStub: 0x00007fffa807cc80]
  0x00007fffe123f8a4: je      0x7fffe124173b
  0x00007fffe123f8aa: movabs  $0x7ffff4d74770,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f8b4: addq    $0x1,0x130(%rsi)
  0x00007fffe123f8bc: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f8c6: mov     0x104(%rsi),%edi
  0x00007fffe123f8cc: add     $0x8,%edi
  0x00007fffe123f8cf: mov     %edi,0x104(%rsi)
  0x00007fffe123f8d5: movabs  $0x7ffff4bf7b08,%rsi  ;   {metadata({method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f8df: and     $0x7ffff8,%edi
  0x00007fffe123f8e5: cmp     $0x0,%edi
  ;; 1710 branch [EQ] [CounterOverflowStub: 0x00007fffa807d2c0]
  0x00007fffe123f8e8: je      0x7fffe1241752
  0x00007fffe123f8ee: mov     0xa8(%rsp),%rdx
  0x00007fffe123f8f6: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f900: mov     0x8(%rdx),%edx
  0x00007fffe123f903: shl     $0x3,%rdx
  0x00007fffe123f907: cmp     0x138(%rsi),%rdx
  0x00007fffe123f90e: jne     0x7fffe123f91d
  0x00007fffe123f910: addq    $0x1,0x140(%rsi)
  0x00007fffe123f918: jmpq    0x7fffe123f983
  0x00007fffe123f91d: cmp     0x148(%rsi),%rdx
  0x00007fffe123f924: jne     0x7fffe123f933
  0x00007fffe123f926: addq    $0x1,0x150(%rsi)
  0x00007fffe123f92e: jmpq    0x7fffe123f983
  0x00007fffe123f933: cmpq    $0x0,0x138(%rsi)
  0x00007fffe123f93e: jne     0x7fffe123f957
  0x00007fffe123f940: mov     %rdx,0x138(%rsi)
  0x00007fffe123f947: movq    $0x1,0x140(%rsi)
  0x00007fffe123f952: jmpq    0x7fffe123f983
  0x00007fffe123f957: cmpq    $0x0,0x148(%rsi)
  0x00007fffe123f962: jne     0x7fffe123f97b
  0x00007fffe123f964: mov     %rdx,0x148(%rsi)
  0x00007fffe123f96b: movq    $0x1,0x150(%rsi)
  0x00007fffe123f976: jmpq    0x7fffe123f983
  0x00007fffe123f97b: addq    $0x1,0x130(%rsi)
  0x00007fffe123f983: mov     0xa8(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)

  0x00007fffe123f98b: nop
  0x00007fffe123f98c: nop
  0x00007fffe123f98d: nop
  0x00007fffe123f98e: nop
  0x00007fffe123f98f: callq   0x7fffe1105e80    ; OopMap{[168]=Oop [224]=Oop off=8916}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)
                                                ;   {optimized virtual_call}
  0x00007fffe123f994: mov     0xa8(%rsp),%rdx
  0x00007fffe123f99c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123f9a6: mov     0x8(%rdx),%edx
  0x00007fffe123f9a9: shl     $0x3,%rdx
  0x00007fffe123f9ad: cmp     0x168(%rsi),%rdx
  0x00007fffe123f9b4: jne     0x7fffe123f9c3
  0x00007fffe123f9b6: addq    $0x1,0x170(%rsi)
  0x00007fffe123f9be: jmpq    0x7fffe123fa29
  0x00007fffe123f9c3: cmp     0x178(%rsi),%rdx
  0x00007fffe123f9ca: jne     0x7fffe123f9d9
  0x00007fffe123f9cc: addq    $0x1,0x180(%rsi)
  0x00007fffe123f9d4: jmpq    0x7fffe123fa29
  0x00007fffe123f9d9: cmpq    $0x0,0x168(%rsi)
  0x00007fffe123f9e4: jne     0x7fffe123f9fd
  0x00007fffe123f9e6: mov     %rdx,0x168(%rsi)
  0x00007fffe123f9ed: movq    $0x1,0x170(%rsi)
  0x00007fffe123f9f8: jmpq    0x7fffe123fa29
  0x00007fffe123f9fd: cmpq    $0x0,0x178(%rsi)
  0x00007fffe123fa08: jne     0x7fffe123fa21
  0x00007fffe123fa0a: mov     %rdx,0x178(%rsi)
  0x00007fffe123fa11: movq    $0x1,0x180(%rsi)
  0x00007fffe123fa1c: jmpq    0x7fffe123fa29
  0x00007fffe123fa21: addq    $0x1,0x160(%rsi)
  0x00007fffe123fa29: mov     0xd0(%rsp),%r8d
  0x00007fffe123fa31: sub     %eax,%r8d
  0x00007fffe123fa34: mov     %r8,%rdx
  0x00007fffe123fa37: mov     0xa8(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)

  0x00007fffe123fa3f: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=9092}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)
                                                ;   {optimized virtual_call}
  0x00007fffe123fa44: mov     0xe0(%rsp),%rcx
  0x00007fffe123fa4c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fa56: mov     0x8(%rcx),%ecx
  0x00007fffe123fa59: shl     $0x3,%rcx
  0x00007fffe123fa5d: cmp     0x198(%rsi),%rcx
  0x00007fffe123fa64: jne     0x7fffe123fa73
  0x00007fffe123fa66: addq    $0x1,0x1a0(%rsi)
  0x00007fffe123fa6e: jmpq    0x7fffe123fad9
  0x00007fffe123fa73: cmp     0x1a8(%rsi),%rcx
  0x00007fffe123fa7a: jne     0x7fffe123fa89
  0x00007fffe123fa7c: addq    $0x1,0x1b0(%rsi)
  0x00007fffe123fa84: jmpq    0x7fffe123fad9
  0x00007fffe123fa89: cmpq    $0x0,0x198(%rsi)
  0x00007fffe123fa94: jne     0x7fffe123faad
  0x00007fffe123fa96: mov     %rcx,0x198(%rsi)
  0x00007fffe123fa9d: movq    $0x1,0x1a0(%rsi)
  0x00007fffe123faa8: jmpq    0x7fffe123fad9
  0x00007fffe123faad: cmpq    $0x0,0x1a8(%rsi)
  0x00007fffe123fab8: jne     0x7fffe123fad1
  0x00007fffe123faba: mov     %rcx,0x1a8(%rsi)
  0x00007fffe123fac1: movq    $0x1,0x1b0(%rsi)
  0x00007fffe123facc: jmpq    0x7fffe123fad9
  0x00007fffe123fad1: addq    $0x1,0x190(%rsi)
  0x00007fffe123fad9: mov     0xe0(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)

  0x00007fffe123fae1: nop
  0x00007fffe123fae2: nop
  0x00007fffe123fae3: nop
  0x00007fffe123fae4: nop
  0x00007fffe123fae5: nop
  0x00007fffe123fae6: nop
  0x00007fffe123fae7: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=9260}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)
                                                ;   {optimized virtual_call}
  0x00007fffe123faec: mov     0xe0(%rsp),%rcx
  0x00007fffe123faf4: movabs  $0x7ffff4d74908,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fafe: mov     0x8(%rcx),%ecx
  0x00007fffe123fb01: shl     $0x3,%rcx
  0x00007fffe123fb05: cmp     0x1c8(%rdx),%rcx
  0x00007fffe123fb0c: jne     0x7fffe123fb1b
  0x00007fffe123fb0e: addq    $0x1,0x1d0(%rdx)
  0x00007fffe123fb16: jmpq    0x7fffe123fb81
  0x00007fffe123fb1b: cmp     0x1d8(%rdx),%rcx
  0x00007fffe123fb22: jne     0x7fffe123fb31
  0x00007fffe123fb24: addq    $0x1,0x1e0(%rdx)
  0x00007fffe123fb2c: jmpq    0x7fffe123fb81
  0x00007fffe123fb31: cmpq    $0x0,0x1c8(%rdx)
  0x00007fffe123fb3c: jne     0x7fffe123fb55
  0x00007fffe123fb3e: mov     %rcx,0x1c8(%rdx)
  0x00007fffe123fb45: movq    $0x1,0x1d0(%rdx)
  0x00007fffe123fb50: jmpq    0x7fffe123fb81
  0x00007fffe123fb55: cmpq    $0x0,0x1d8(%rdx)
  0x00007fffe123fb60: jne     0x7fffe123fb79
  0x00007fffe123fb62: mov     %rcx,0x1d8(%rdx)
  0x00007fffe123fb69: movq    $0x1,0x1e0(%rdx)
  0x00007fffe123fb74: jmpq    0x7fffe123fb81
  0x00007fffe123fb79: addq    $0x1,0x1c0(%rdx)
  0x00007fffe123fb81: mov     0xc0(%rsp),%esi
  0x00007fffe123fb88: sub     %eax,%esi
  0x00007fffe123fb8a: mov     %rsi,%rdx
  0x00007fffe123fb8d: mov     0xe0(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)

  0x00007fffe123fb95: nop
  0x00007fffe123fb96: nop
  0x00007fffe123fb97: callq   0x7fffe1105e80    ; OopMap{off=9436}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@184 (line 607)
                                                ;   {optimized virtual_call}
  0x00007fffe123fb9c: movabs  $0xd73dd9f8,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe123fba6: add     $0x160,%rsp
  0x00007fffe123fbad: pop     %rbp
  0x00007fffe123fbae: test    %eax,0x16dbb54c(%rip)  ;   {poll_return}
  0x00007fffe123fbb4: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@187 (line 607)

  ;;  block B9 [137, 146]

  0x00007fffe123fbb5: mov     %esi,0xc0(%rsp)
  0x00007fffe123fbbc: mov     %r8d,0xd0(%rsp)
  0x00007fffe123fbc4: movabs  $0x7ffff4d73f80,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123fbce: addq    $0x1,0x3d8(%rsi)
  0x00007fffe123fbd6: movabs  $0x7ffff4d788a8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123fbe0: mov     0x104(%rsi),%edi
  0x00007fffe123fbe6: add     $0x8,%edi
  0x00007fffe123fbe9: mov     %edi,0x104(%rsi)
  0x00007fffe123fbef: movabs  $0x7ffff4c2de48,%rsi  ;   {metadata({method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123fbf9: and     $0x7ffff8,%edi
  0x00007fffe123fbff: cmp     $0x0,%edi
  ;; 1788 branch [EQ] [CounterOverflowStub: 0x00007fffa807ef10]
  0x00007fffe123fc02: je      0x7fffe1241769
  0x00007fffe123fc08: movabs  $0x7ffff4d788a8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c2de48} &apos;overflow&apos; &apos;(Ljava/nio/CharBuffer;ILjava/nio/ByteBuffer;I)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123fc12: addq    $0x1,0x130(%rsi)
  0x00007fffe123fc1a: movabs  $0x7ffff4d74770,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fc24: mov     0x104(%rsi),%edi
  0x00007fffe123fc2a: add     $0x8,%edi
  0x00007fffe123fc2d: mov     %edi,0x104(%rsi)
  0x00007fffe123fc33: movabs  $0x7ffff4bf7be0,%rsi  ;   {metadata({method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fc3d: and     $0x7ffff8,%edi
  0x00007fffe123fc43: cmp     $0x0,%edi
  ;; 1808 branch [EQ] [CounterOverflowStub: 0x00007fffa807f630]
  0x00007fffe123fc46: je      0x7fffe1241780
  0x00007fffe123fc4c: movabs  $0x7ffff4d74770,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fc56: addq    $0x1,0x130(%rsi)
  0x00007fffe123fc5e: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fc68: mov     0x104(%rsi),%edi
  0x00007fffe123fc6e: add     $0x8,%edi
  0x00007fffe123fc71: mov     %edi,0x104(%rsi)
  0x00007fffe123fc77: movabs  $0x7ffff4bf7b08,%rsi  ;   {metadata({method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fc81: and     $0x7ffff8,%edi
  0x00007fffe123fc87: cmp     $0x0,%edi
  ;; 1828 branch [EQ] [CounterOverflowStub: 0x00007fffa807fc70]
  0x00007fffe123fc8a: je      0x7fffe1241797
  0x00007fffe123fc90: mov     0xa8(%rsp),%rdx
  0x00007fffe123fc98: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fca2: mov     0x8(%rdx),%edx
  0x00007fffe123fca5: shl     $0x3,%rdx
  0x00007fffe123fca9: cmp     0x138(%rsi),%rdx
  0x00007fffe123fcb0: jne     0x7fffe123fcbf
  0x00007fffe123fcb2: addq    $0x1,0x140(%rsi)
  0x00007fffe123fcba: jmpq    0x7fffe123fd25
  0x00007fffe123fcbf: cmp     0x148(%rsi),%rdx
  0x00007fffe123fcc6: jne     0x7fffe123fcd5
  0x00007fffe123fcc8: addq    $0x1,0x150(%rsi)
  0x00007fffe123fcd0: jmpq    0x7fffe123fd25
  0x00007fffe123fcd5: cmpq    $0x0,0x138(%rsi)
  0x00007fffe123fce0: jne     0x7fffe123fcf9
  0x00007fffe123fce2: mov     %rdx,0x138(%rsi)
  0x00007fffe123fce9: movq    $0x1,0x140(%rsi)
  0x00007fffe123fcf4: jmpq    0x7fffe123fd25
  0x00007fffe123fcf9: cmpq    $0x0,0x148(%rsi)
  0x00007fffe123fd04: jne     0x7fffe123fd1d
  0x00007fffe123fd06: mov     %rdx,0x148(%rsi)
  0x00007fffe123fd0d: movq    $0x1,0x150(%rsi)
  0x00007fffe123fd18: jmpq    0x7fffe123fd25
  0x00007fffe123fd1d: addq    $0x1,0x130(%rsi)
  0x00007fffe123fd25: mov     0xa8(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)

  0x00007fffe123fd2d: nop
  0x00007fffe123fd2e: nop
  0x00007fffe123fd2f: callq   0x7fffe1105e80    ; OopMap{[168]=Oop [224]=Oop off=9844}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)
                                                ;   {optimized virtual_call}
  0x00007fffe123fd34: mov     0xa8(%rsp),%rdx
  0x00007fffe123fd3c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fd46: mov     0x8(%rdx),%edx
  0x00007fffe123fd49: shl     $0x3,%rdx
  0x00007fffe123fd4d: cmp     0x168(%rsi),%rdx
  0x00007fffe123fd54: jne     0x7fffe123fd63
  0x00007fffe123fd56: addq    $0x1,0x170(%rsi)
  0x00007fffe123fd5e: jmpq    0x7fffe123fdc9
  0x00007fffe123fd63: cmp     0x178(%rsi),%rdx
  0x00007fffe123fd6a: jne     0x7fffe123fd79
  0x00007fffe123fd6c: addq    $0x1,0x180(%rsi)
  0x00007fffe123fd74: jmpq    0x7fffe123fdc9
  0x00007fffe123fd79: cmpq    $0x0,0x168(%rsi)
  0x00007fffe123fd84: jne     0x7fffe123fd9d
  0x00007fffe123fd86: mov     %rdx,0x168(%rsi)
  0x00007fffe123fd8d: movq    $0x1,0x170(%rsi)
  0x00007fffe123fd98: jmpq    0x7fffe123fdc9
  0x00007fffe123fd9d: cmpq    $0x0,0x178(%rsi)
  0x00007fffe123fda8: jne     0x7fffe123fdc1
  0x00007fffe123fdaa: mov     %rdx,0x178(%rsi)
  0x00007fffe123fdb1: movq    $0x1,0x180(%rsi)
  0x00007fffe123fdbc: jmpq    0x7fffe123fdc9
  0x00007fffe123fdc1: addq    $0x1,0x160(%rsi)
  0x00007fffe123fdc9: mov     0xd0(%rsp),%r8d
  0x00007fffe123fdd1: sub     %eax,%r8d
  0x00007fffe123fdd4: mov     %r8,%rdx
  0x00007fffe123fdd7: mov     0xa8(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)

  0x00007fffe123fddf: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=10020}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)
                                                ;   {optimized virtual_call}
  0x00007fffe123fde4: mov     0xe0(%rsp),%rcx
  0x00007fffe123fdec: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fdf6: mov     0x8(%rcx),%ecx
  0x00007fffe123fdf9: shl     $0x3,%rcx
  0x00007fffe123fdfd: cmp     0x198(%rsi),%rcx
  0x00007fffe123fe04: jne     0x7fffe123fe13
  0x00007fffe123fe06: addq    $0x1,0x1a0(%rsi)
  0x00007fffe123fe0e: jmpq    0x7fffe123fe79
  0x00007fffe123fe13: cmp     0x1a8(%rsi),%rcx
  0x00007fffe123fe1a: jne     0x7fffe123fe29
  0x00007fffe123fe1c: addq    $0x1,0x1b0(%rsi)
  0x00007fffe123fe24: jmpq    0x7fffe123fe79
  0x00007fffe123fe29: cmpq    $0x0,0x198(%rsi)
  0x00007fffe123fe34: jne     0x7fffe123fe4d
  0x00007fffe123fe36: mov     %rcx,0x198(%rsi)
  0x00007fffe123fe3d: movq    $0x1,0x1a0(%rsi)
  0x00007fffe123fe48: jmpq    0x7fffe123fe79
  0x00007fffe123fe4d: cmpq    $0x0,0x1a8(%rsi)
  0x00007fffe123fe58: jne     0x7fffe123fe71
  0x00007fffe123fe5a: mov     %rcx,0x1a8(%rsi)
  0x00007fffe123fe61: movq    $0x1,0x1b0(%rsi)
  0x00007fffe123fe6c: jmpq    0x7fffe123fe79
  0x00007fffe123fe71: addq    $0x1,0x190(%rsi)
  0x00007fffe123fe79: mov     0xe0(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)

  0x00007fffe123fe81: nop
  0x00007fffe123fe82: nop
  0x00007fffe123fe83: nop
  0x00007fffe123fe84: nop
  0x00007fffe123fe85: nop
  0x00007fffe123fe86: nop
  0x00007fffe123fe87: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=10188}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)
                                                ;   {optimized virtual_call}
  0x00007fffe123fe8c: mov     0xe0(%rsp),%rcx
  0x00007fffe123fe94: movabs  $0x7ffff4d74908,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fe9e: mov     0x8(%rcx),%ecx
  0x00007fffe123fea1: shl     $0x3,%rcx
  0x00007fffe123fea5: cmp     0x1c8(%rdx),%rcx
  0x00007fffe123feac: jne     0x7fffe123febb
  0x00007fffe123feae: addq    $0x1,0x1d0(%rdx)
  0x00007fffe123feb6: jmpq    0x7fffe123ff21
  0x00007fffe123febb: cmp     0x1d8(%rdx),%rcx
  0x00007fffe123fec2: jne     0x7fffe123fed1
  0x00007fffe123fec4: addq    $0x1,0x1e0(%rdx)
  0x00007fffe123fecc: jmpq    0x7fffe123ff21
  0x00007fffe123fed1: cmpq    $0x0,0x1c8(%rdx)
  0x00007fffe123fedc: jne     0x7fffe123fef5
  0x00007fffe123fede: mov     %rcx,0x1c8(%rdx)
  0x00007fffe123fee5: movq    $0x1,0x1d0(%rdx)
  0x00007fffe123fef0: jmpq    0x7fffe123ff21
  0x00007fffe123fef5: cmpq    $0x0,0x1d8(%rdx)
  0x00007fffe123ff00: jne     0x7fffe123ff19
  0x00007fffe123ff02: mov     %rcx,0x1d8(%rdx)
  0x00007fffe123ff09: movq    $0x1,0x1e0(%rdx)
  0x00007fffe123ff14: jmpq    0x7fffe123ff21
  0x00007fffe123ff19: addq    $0x1,0x1c0(%rdx)
  0x00007fffe123ff21: mov     0xc0(%rsp),%esi
  0x00007fffe123ff28: sub     %eax,%esi
  0x00007fffe123ff2a: mov     %rsi,%rdx
  0x00007fffe123ff2d: mov     0xe0(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)

  0x00007fffe123ff35: nop
  0x00007fffe123ff36: nop
  0x00007fffe123ff37: callq   0x7fffe1105e80    ; OopMap{off=10364}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::overflow@4 (line 572)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@143 (line 602)
                                                ;   {optimized virtual_call}
  0x00007fffe123ff3c: movabs  $0xd73dd9f8,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe123ff46: add     $0x160,%rsp
  0x00007fffe123ff4d: pop     %rbp
  0x00007fffe123ff4e: test    %eax,0x16dbb1ac(%rip)  ;   {poll_return}
  0x00007fffe123ff54: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@146 (line 602)

  ;;  block B6 [476, 488]

  0x00007fffe123ff55: mov     %esi,0xc0(%rsp)
  0x00007fffe123ff5c: mov     %r8d,0xd0(%rsp)
  0x00007fffe123ff64: movabs  $0x7ffff4d73f80,%rdi  ;   {metadata(method data for {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe123ff6e: addq    $0x1,0x5e8(%rdi)
  0x00007fffe123ff76: movabs  $0x7ffff4d74770,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ff80: mov     0x104(%rdi),%ebx
  0x00007fffe123ff86: add     $0x8,%ebx
  0x00007fffe123ff89: mov     %ebx,0x104(%rdi)
  0x00007fffe123ff8f: movabs  $0x7ffff4bf7be0,%rdi  ;   {metadata({method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ff99: and     $0x7ffff8,%ebx
  0x00007fffe123ff9f: cmp     $0x0,%ebx
  ;; 1906 branch [EQ] [CounterOverflowStub: 0x00007fffa80818c0]
  0x00007fffe123ffa2: je      0x7fffe12417ae
  0x00007fffe123ffa8: movabs  $0x7ffff4d74770,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7be0} &apos;access$200&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ffb2: addq    $0x1,0x130(%rdi)
  0x00007fffe123ffba: movabs  $0x7ffff4d74908,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ffc4: mov     0x104(%rdi),%ebx
  0x00007fffe123ffca: add     $0x8,%ebx
  0x00007fffe123ffcd: mov     %ebx,0x104(%rdi)
  0x00007fffe123ffd3: movabs  $0x7ffff4bf7b08,%rdi  ;   {metadata({method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123ffdd: and     $0x7ffff8,%ebx
  0x00007fffe123ffe3: cmp     $0x0,%ebx
  ;; 1926 branch [EQ] [CounterOverflowStub: 0x00007fffa8081fe0]
  0x00007fffe123ffe6: je      0x7fffe12417c5
  0x00007fffe123ffec: mov     0xa8(%rsp),%rdx
  0x00007fffe123fff4: movabs  $0x7ffff4d74908,%rdi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe123fffe: mov     0x8(%rdx),%edx
  0x00007fffe1240001: shl     $0x3,%rdx
  0x00007fffe1240005: cmp     0x138(%rdi),%rdx
  0x00007fffe124000c: jne     0x7fffe124001b
  0x00007fffe124000e: addq    $0x1,0x140(%rdi)
  0x00007fffe1240016: jmpq    0x7fffe1240081
  0x00007fffe124001b: cmp     0x148(%rdi),%rdx
  0x00007fffe1240022: jne     0x7fffe1240031
  0x00007fffe1240024: addq    $0x1,0x150(%rdi)
  0x00007fffe124002c: jmpq    0x7fffe1240081
  0x00007fffe1240031: cmpq    $0x0,0x138(%rdi)
  0x00007fffe124003c: jne     0x7fffe1240055
  0x00007fffe124003e: mov     %rdx,0x138(%rdi)
  0x00007fffe1240045: movq    $0x1,0x140(%rdi)
  0x00007fffe1240050: jmpq    0x7fffe1240081
  0x00007fffe1240055: cmpq    $0x0,0x148(%rdi)
  0x00007fffe1240060: jne     0x7fffe1240079
  0x00007fffe1240062: mov     %rdx,0x148(%rdi)
  0x00007fffe1240069: movq    $0x1,0x150(%rdi)
  0x00007fffe1240074: jmpq    0x7fffe1240081
  0x00007fffe1240079: addq    $0x1,0x130(%rdi)
  0x00007fffe1240081: mov     0xa8(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe1240089: nop
  0x00007fffe124008a: nop
  0x00007fffe124008b: nop
  0x00007fffe124008c: nop
  0x00007fffe124008d: nop
  0x00007fffe124008e: nop
  0x00007fffe124008f: callq   0x7fffe1105e80    ; OopMap{[168]=Oop [224]=Oop off=10708}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@3 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {optimized virtual_call}
  0x00007fffe1240094: mov     0xa8(%rsp),%rdx
  0x00007fffe124009c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe12400a6: mov     0x8(%rdx),%edx
  0x00007fffe12400a9: shl     $0x3,%rdx
  0x00007fffe12400ad: cmp     0x168(%rsi),%rdx
  0x00007fffe12400b4: jne     0x7fffe12400c3
  0x00007fffe12400b6: addq    $0x1,0x170(%rsi)
  0x00007fffe12400be: jmpq    0x7fffe1240129
  0x00007fffe12400c3: cmp     0x178(%rsi),%rdx
  0x00007fffe12400ca: jne     0x7fffe12400d9
  0x00007fffe12400cc: addq    $0x1,0x180(%rsi)
  0x00007fffe12400d4: jmpq    0x7fffe1240129
  0x00007fffe12400d9: cmpq    $0x0,0x168(%rsi)
  0x00007fffe12400e4: jne     0x7fffe12400fd
  0x00007fffe12400e6: mov     %rdx,0x168(%rsi)
  0x00007fffe12400ed: movq    $0x1,0x170(%rsi)
  0x00007fffe12400f8: jmpq    0x7fffe1240129
  0x00007fffe12400fd: cmpq    $0x0,0x178(%rsi)
  0x00007fffe1240108: jne     0x7fffe1240121
  0x00007fffe124010a: mov     %rdx,0x178(%rsi)
  0x00007fffe1240111: movq    $0x1,0x180(%rsi)
  0x00007fffe124011c: jmpq    0x7fffe1240129
  0x00007fffe1240121: addq    $0x1,0x160(%rsi)
  0x00007fffe1240129: mov     0xd0(%rsp),%r8d
  0x00007fffe1240131: sub     %eax,%r8d
  0x00007fffe1240134: mov     %r8,%rdx
  0x00007fffe1240137: mov     0xa8(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe124013f: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=10884}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {optimized virtual_call}
  0x00007fffe1240144: mov     0xe0(%rsp),%rcx
  0x00007fffe124014c: movabs  $0x7ffff4d74908,%rsi  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe1240156: mov     0x8(%rcx),%ecx
  0x00007fffe1240159: shl     $0x3,%rcx
  0x00007fffe124015d: cmp     0x198(%rsi),%rcx
  0x00007fffe1240164: jne     0x7fffe1240173
  0x00007fffe1240166: addq    $0x1,0x1a0(%rsi)
  0x00007fffe124016e: jmpq    0x7fffe12401d9
  0x00007fffe1240173: cmp     0x1a8(%rsi),%rcx
  0x00007fffe124017a: jne     0x7fffe1240189
  0x00007fffe124017c: addq    $0x1,0x1b0(%rsi)
  0x00007fffe1240184: jmpq    0x7fffe12401d9
  0x00007fffe1240189: cmpq    $0x0,0x198(%rsi)
  0x00007fffe1240194: jne     0x7fffe12401ad
  0x00007fffe1240196: mov     %rcx,0x198(%rsi)
  0x00007fffe124019d: movq    $0x1,0x1a0(%rsi)
  0x00007fffe12401a8: jmpq    0x7fffe12401d9
  0x00007fffe12401ad: cmpq    $0x0,0x1a8(%rsi)
  0x00007fffe12401b8: jne     0x7fffe12401d1
  0x00007fffe12401ba: mov     %rcx,0x1a8(%rsi)
  0x00007fffe12401c1: movq    $0x1,0x1b0(%rsi)
  0x00007fffe12401cc: jmpq    0x7fffe12401d9
  0x00007fffe12401d1: addq    $0x1,0x190(%rsi)
  0x00007fffe12401d9: mov     0xe0(%rsp),%rsi   ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe12401e1: nop
  0x00007fffe12401e2: nop
  0x00007fffe12401e3: nop
  0x00007fffe12401e4: nop
  0x00007fffe12401e5: nop
  0x00007fffe12401e6: nop
  0x00007fffe12401e7: callq   0x7fffe1105e80    ; OopMap{[224]=Oop off=11052}
                                                ;*invokevirtual arrayOffset
                                                ; - sun.nio.cs.UTF_8::updatePositions@14 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {optimized virtual_call}
  0x00007fffe12401ec: mov     0xe0(%rsp),%rcx
  0x00007fffe12401f4: movabs  $0x7ffff4d74908,%rdx  ;   {metadata(method data for {method} {0x00007ffff4bf7b08} &apos;updatePositions&apos; &apos;(Ljava/nio/Buffer;ILjava/nio/Buffer;I)V&apos; in &apos;sun/nio/cs/UTF_8&apos;)}
  0x00007fffe12401fe: mov     0x8(%rcx),%ecx
  0x00007fffe1240201: shl     $0x3,%rcx
  0x00007fffe1240205: cmp     0x1c8(%rdx),%rcx
  0x00007fffe124020c: jne     0x7fffe124021b
  0x00007fffe124020e: addq    $0x1,0x1d0(%rdx)
  0x00007fffe1240216: jmpq    0x7fffe1240281
  0x00007fffe124021b: cmp     0x1d8(%rdx),%rcx
  0x00007fffe1240222: jne     0x7fffe1240231
  0x00007fffe1240224: addq    $0x1,0x1e0(%rdx)
  0x00007fffe124022c: jmpq    0x7fffe1240281
  0x00007fffe1240231: cmpq    $0x0,0x1c8(%rdx)
  0x00007fffe124023c: jne     0x7fffe1240255
  0x00007fffe124023e: mov     %rcx,0x1c8(%rdx)
  0x00007fffe1240245: movq    $0x1,0x1d0(%rdx)
  0x00007fffe1240250: jmpq    0x7fffe1240281
  0x00007fffe1240255: cmpq    $0x0,0x1d8(%rdx)
  0x00007fffe1240260: jne     0x7fffe1240279
  0x00007fffe1240262: mov     %rcx,0x1d8(%rdx)
  0x00007fffe1240269: movq    $0x1,0x1e0(%rdx)
  0x00007fffe1240274: jmpq    0x7fffe1240281
  0x00007fffe1240279: addq    $0x1,0x1c0(%rdx)
  0x00007fffe1240281: mov     0xc0(%rsp),%esi
  0x00007fffe1240288: sub     %eax,%esi
  0x00007fffe124028a: mov     %rsi,%rdx
  0x00007fffe124028d: mov     0xe0(%rsp),%rsi   ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe1240295: nop
  0x00007fffe1240296: nop
  0x00007fffe1240297: callq   0x7fffe1105e80    ; OopMap{off=11228}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {optimized virtual_call}
  0x00007fffe124029c: movabs  $0xd73dd9e0,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe12402a6: add     $0x160,%rsp
  0x00007fffe12402ad: pop     %rbp
  0x00007fffe12402ae: test    %eax,0x16dbae4c(%rip)  ;   {poll_return}
  0x00007fffe12402b4: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@488 (line 637)

  ;;  block B66 [22, 29]

  ;; 1988 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:22]
  0x00007fffe12402b5: nop
  0x00007fffe12402b6: nop
  0x00007fffe12402b7: nop
  0x00007fffe12402b8: jmpq    0x7fffe12417eb    ;   {no_reloc}
  0x00007fffe12402bd: add     %al,(%rax)
  0x00007fffe12402bf: add     %al,(%rax)
  0x00007fffe12402c1: add     %ch,%cl
  0x00007fffe12402c3: adc     $0x8b480000,%eax  ;*new  ; - java.nio.ByteBuffer::arrayOffset@22 (line 1032)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@45 (line 591)

  0x00007fffe12402c9: rorb    $0x1,0xffffffffffffffb9(%rax)
                                                ;   {metadata(method data for {method} {0x00007ffff4c34298} &apos;arrayOffset&apos; &apos;()I&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe12402cc: cmp     %dl,(%rbx)
  0x00007fffe12402ce: xlat    (%rbx)
  0x00007fffe12402cf: hlt
  0x00007fffe12402d0: Fatal error: Disassembling failed with error code: 15<nmethod compile_id='36' compiler='C1' level='3' entry='0x00007fffe123d6c0' size='27472' address='0x00007fffe123ced0' relocation_offset='304' insts_offset='2032' stub_offset='19216' scopes_data_offset='20128' scopes_pcs_offset='23056' dependencies_offset='27312' nul_chk_table_offset='27320' method='sun/nio/cs/UTF_8$Encoder encodeArrayLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='489' count='9215' backedge_count='11636' iicount='9215' stamp='118.077'/>
<writer thread='140737327351552'/>
<task_queued compile_id='74' method='StackTopCache add (II)I' bytes='9' count='2304' iicount='2304' level='3' stamp='118.077' comment='tiered' hot_count='2304'/>
<task_queued compile_id='75' method='sun/nio/cs/UTF_8$Encoder encodeArrayLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='489' count='9728' backedge_count='12276' iicount='9728' stamp='118.086' comment='tiered' hot_count='9728'/>
<task_queued compile_id='76' method='StackTopCache add2 (II)I' bytes='9' count='2432' iicount='2432' level='3' stamp='118.086' comment='tiered' hot_count='2432'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1238d10:
Code:
Argument 0 is unknown.RIP: 0x7fffe1238f20 Code size: 0x00000770
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47e68} &apos;write&apos; &apos;(Ljava/lang/String;II)V&apos; in &apos;java/io/BufferedWriter&apos;
  # this:     rsi:rsi   = &apos;java/io/BufferedWriter&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/String&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0xb0]  (sp of caller)
  ;;  block B19 [0, 0]

  0x00007fffe1238f20: mov     0x8(%rsi),%r10d
  0x00007fffe1238f24: shl     $0x3,%r10
  0x00007fffe1238f28: cmp     %rax,%r10
  0x00007fffe1238f2b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1238f31: nop
  0x00007fffe1238f32: nop
  0x00007fffe1238f33: nop
  0x00007fffe1238f34: nop
  0x00007fffe1238f35: nop
  0x00007fffe1238f36: nop
  0x00007fffe1238f37: nop
  0x00007fffe1238f38: nop
  0x00007fffe1238f39: nop
  0x00007fffe1238f3a: nop
  0x00007fffe1238f3b: nop
  0x00007fffe1238f3c: nop
  0x00007fffe1238f3d: nop
  0x00007fffe1238f3e: nop
  0x00007fffe1238f3f: nop
[Verified Entry Point]
  0x00007fffe1238f40: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1238f47: push    %rbp
  0x00007fffe1238f48: sub     $0xa0,%rsp
  0x00007fffe1238f4f: mov     %rsi,0x58(%rsp)
  0x00007fffe1238f54: mov     %rdx,0x68(%rsp)
  0x00007fffe1238f59: movabs  $0x7ffff4d71018,%rax
  0x00007fffe1238f63: mov     0x8(%rax),%r9d
  0x00007fffe1238f67: add     $0x8,%r9d
  0x00007fffe1238f6b: mov     %r9d,0x8(%rax)
  0x00007fffe1238f6f: movabs  $0x7ffff4c47e68,%rax  ;   {metadata({method} {0x00007ffff4c47e68} &apos;write&apos; &apos;(Ljava/lang/String;II)V&apos; in &apos;java/io/BufferedWriter&apos;)}
  0x00007fffe1238f79: and     $0x3ff8,%r9d
  0x00007fffe1238f80: cmp     $0x0,%r9d
  ;;   26 branch [EQ] [CounterOverflowStub: 0x00007fffa84ebf40]
  0x00007fffe1238f84: je      0x7fffe12393c3    ;*aload_0
                                                ; - java.io.BufferedWriter::write@0 (line 220)

  ;;  block B20 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe1238f8a: mov     0x10(%rsi),%edi
  0x00007fffe1238f8d: push    %r10
  0x00007fffe1238f8f: cmp     0x16b20c4a(%rip),%r12  ;   {external_word}
  0x00007fffe1238f96: je      0x7fffe1239013
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1238f9c: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1238fa1: sub     $0x80,%rsp
  0x00007fffe1238fa8: mov     %rax,0x78(%rsp)
  0x00007fffe1238fad: mov     %rcx,0x70(%rsp)
  0x00007fffe1238fb2: mov     %rdx,0x68(%rsp)
  0x00007fffe1238fb7: mov     %rbx,0x60(%rsp)
  0x00007fffe1238fbc: mov     %rbp,0x50(%rsp)
  0x00007fffe1238fc1: mov     %rsi,0x48(%rsp)
  0x00007fffe1238fc6: mov     %rdi,0x40(%rsp)
  0x00007fffe1238fcb: mov     %r8,0x38(%rsp)
  0x00007fffe1238fd0: mov     %r9,0x30(%rsp)
  0x00007fffe1238fd5: mov     %r10,0x28(%rsp)
  0x00007fffe1238fda: mov     %r11,0x20(%rsp)
  0x00007fffe1238fdf: mov     %r12,0x18(%rsp)
  0x00007fffe1238fe4: mov     %r13,0x10(%rsp)
  0x00007fffe1238fe9: mov     %r14,0x8(%rsp)
  0x00007fffe1238fee: mov     %r15,(%rsp)
  0x00007fffe1238ff2: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1238ffc: movabs  $0x7fffe1238f9c,%rsi  ;   {internal_word}
  0x00007fffe1239006: mov     %rsp,%rdx
  0x00007fffe1239009: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123900d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1239012: hlt
  0x00007fffe1239013: pop     %r10              ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)

  0x00007fffe1239015: mov     %rdi,0x70(%rsp)
  0x00007fffe123901a: lea     0x88(%rsp),%r9
  0x00007fffe1239022: mov     %rdi,0x8(%r9)
  0x00007fffe1239026: mov     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe12393da
  0x00007fffe1239029: mov     %rax,%rbx
  0x00007fffe123902c: and     $0x7,%rbx
  0x00007fffe1239030: cmp     $0x5,%rbx
  0x00007fffe1239034: jne     0x7fffe12390bb
  0x00007fffe123903a: mov     0x8(%rdi),%ebx
  0x00007fffe123903d: shl     $0x3,%rbx
  0x00007fffe1239041: mov     0xb0(%rbx),%rbx
  0x00007fffe1239048: or      %r15,%rbx
  0x00007fffe123904b: xor     %rax,%rbx
  0x00007fffe123904e: and     $0xffffffffffffff87,%rbx
  0x00007fffe1239052: je      0x7fffe12390e3
  0x00007fffe1239058: test    $0x7,%rbx
  0x00007fffe123905f: jne     0x7fffe12390a8
  0x00007fffe1239061: test    $0x300,%rbx
  0x00007fffe1239068: jne     0x7fffe1239087
  0x00007fffe123906a: and     $0x37f,%rax
  0x00007fffe1239071: mov     %rax,%rbx
  0x00007fffe1239074: or      %r15,%rbx
  0x00007fffe1239077: lock cmpxchg %rbx,(%rdi)
  0x00007fffe123907c: jne     0x7fffe1239456
  0x00007fffe1239082: jmpq    0x7fffe12390e3
  0x00007fffe1239087: mov     0x8(%rdi),%ebx
  0x00007fffe123908a: shl     $0x3,%rbx
  0x00007fffe123908e: mov     0xb0(%rbx),%rbx
  0x00007fffe1239095: or      %r15,%rbx
  0x00007fffe1239098: lock cmpxchg %rbx,(%rdi)
  0x00007fffe123909d: jne     0x7fffe1239456
  0x00007fffe12390a3: jmpq    0x7fffe12390e3
  0x00007fffe12390a8: mov     0x8(%rdi),%ebx
  0x00007fffe12390ab: shl     $0x3,%rbx
  0x00007fffe12390af: mov     0xb0(%rbx),%rbx
  0x00007fffe12390b6: lock cmpxchg %rbx,(%rdi)
  0x00007fffe12390bb: mov     (%rdi),%rax
  0x00007fffe12390be: or      $0x1,%rax
  0x00007fffe12390c2: mov     %rax,(%r9)
  0x00007fffe12390c5: lock cmpxchg %r9,(%rdi)
  0x00007fffe12390ca: je      0x7fffe12390e3
  0x00007fffe12390d0: sub     %rsp,%rax
  0x00007fffe12390d3: and     $0xfffffffffffff007,%rax
  0x00007fffe12390da: mov     %rax,(%r9)
  0x00007fffe12390dd: jne     0x7fffe1239456    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)

  0x00007fffe12390e3: mov     0x1c(%rsi),%r9d
  0x00007fffe12390e7: push    %r10
  0x00007fffe12390e9: cmp     0x16b20af0(%rip),%r12  ;   {external_word}
  0x00007fffe12390f0: je      0x7fffe123916d
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12390f6: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12390fb: sub     $0x80,%rsp
  0x00007fffe1239102: mov     %rax,0x78(%rsp)
  0x00007fffe1239107: mov     %rcx,0x70(%rsp)
  0x00007fffe123910c: mov     %rdx,0x68(%rsp)
  0x00007fffe1239111: mov     %rbx,0x60(%rsp)
  0x00007fffe1239116: mov     %rbp,0x50(%rsp)
  0x00007fffe123911b: mov     %rsi,0x48(%rsp)
  0x00007fffe1239120: mov     %rdi,0x40(%rsp)
  0x00007fffe1239125: mov     %r8,0x38(%rsp)
  0x00007fffe123912a: mov     %r9,0x30(%rsp)
  0x00007fffe123912f: mov     %r10,0x28(%rsp)
  0x00007fffe1239134: mov     %r11,0x20(%rsp)
  0x00007fffe1239139: mov     %r12,0x18(%rsp)
  0x00007fffe123913e: mov     %r13,0x10(%rsp)
  0x00007fffe1239143: mov     %r14,0x8(%rsp)
  0x00007fffe1239148: mov     %r15,(%rsp)
  0x00007fffe123914c: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1239156: movabs  $0x7fffe12390f6,%rsi  ;   {internal_word}
  0x00007fffe1239160: mov     %rsp,%rdx
  0x00007fffe1239163: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1239167: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123916c: hlt
  0x00007fffe123916d: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  0x00007fffe123916f: cmp     $0x0,%r9
  ;;   48 branch [EQ] [B13] 
  0x00007fffe1239173: je      0x7fffe1239319    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  ;;  block B14 [17, 20]

  0x00007fffe1239179: add     %ecx,%r8d
  0x00007fffe123917c: mov     %r8d,0x50(%rsp)
  ;;   60 branch [AL] [B3] 
  0x00007fffe1239181: jmpq    0x7fffe12392cd    ;*iload
                                                ; - java.io.BufferedWriter::write@20 (line 224)

  0x00007fffe1239186: nop
  0x00007fffe1239187: nop
  ;;  block B4 [27, 92]

  0x00007fffe1239188: mov     0x14(%rsi),%r9d   ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@29 (line 225)

  0x00007fffe123918c: mov     0x18(%rsi),%ebx   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)

  0x00007fffe123918f: sub     %ebx,%r9d
  0x00007fffe1239192: mov     %r8,%rax
  0x00007fffe1239195: sub     %ecx,%eax
  0x00007fffe1239197: cmp     %eax,%r9d
  0x00007fffe123919a: cmovl   %r9,%rax
  0x00007fffe123919e: mov     %rax,%r11
  0x00007fffe12391a1: add     %ecx,%r11d
  0x00007fffe12391a4: mov     0x20(%rsi),%r9d
  0x00007fffe12391a8: push    %r10
  0x00007fffe12391aa: cmp     0x16b20a2f(%rip),%r12  ;   {external_word}
  0x00007fffe12391b1: je      0x7fffe123922e
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12391b7: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12391bc: sub     $0x80,%rsp
  0x00007fffe12391c3: mov     %rax,0x78(%rsp)
  0x00007fffe12391c8: mov     %rcx,0x70(%rsp)
  0x00007fffe12391cd: mov     %rdx,0x68(%rsp)
  0x00007fffe12391d2: mov     %rbx,0x60(%rsp)
  0x00007fffe12391d7: mov     %rbp,0x50(%rsp)
  0x00007fffe12391dc: mov     %rsi,0x48(%rsp)
  0x00007fffe12391e1: mov     %rdi,0x40(%rsp)
  0x00007fffe12391e6: mov     %r8,0x38(%rsp)
  0x00007fffe12391eb: mov     %r9,0x30(%rsp)
  0x00007fffe12391f0: mov     %r10,0x28(%rsp)
  0x00007fffe12391f5: mov     %r11,0x20(%rsp)
  0x00007fffe12391fa: mov     %r12,0x18(%rsp)
  0x00007fffe12391ff: mov     %r13,0x10(%rsp)
  0x00007fffe1239204: mov     %r14,0x8(%rsp)
  0x00007fffe1239209: mov     %r15,(%rsp)
  0x00007fffe123920d: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1239217: movabs  $0x7fffe12391b7,%rsi  ;   {internal_word}
  0x00007fffe1239221: mov     %rsp,%rdx
  0x00007fffe1239224: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1239228: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123922d: hlt
  0x00007fffe123922e: pop     %r10              ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)

  0x00007fffe1239230: cmp     (%rdx),%rax       ; implicit exception: dispatches to 0x00007fffe1239469
  0x00007fffe1239233: mov     %rdx,%r13
  0x00007fffe1239236: mov     %rcx,%rdx
  0x00007fffe1239239: mov     %ecx,0x60(%rsp)
  0x00007fffe123923d: mov     %r11,%rcx
  0x00007fffe1239240: mov     %r9,%r8
  0x00007fffe1239243: mov     %rbx,%r9
  0x00007fffe1239246: mov     %r13,%rsi         ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  0x00007fffe1239249: mov     %r11d,0x64(%rsp)
  0x00007fffe123924e: mov     %eax,0x54(%rsp)
  0x00007fffe1239252: nop
  0x00007fffe1239253: nop
  0x00007fffe1239254: nop
  0x00007fffe1239255: nop
  0x00007fffe1239256: nop
  0x00007fffe1239257: callq   0x7fffe1105e80    ; OopMap{[88]=Oop [104]=Oop [112]=Oop [144]=Oop off=828}
                                                ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {optimized virtual_call}
  0x00007fffe123925c: mov     0x58(%rsp),%rsi
  0x00007fffe1239261: mov     0x18(%rsi),%edi   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@75 (line 228)

  0x00007fffe1239264: add     0x54(%rsp),%edi
  0x00007fffe1239268: mov     %edi,0x18(%rsi)   ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)

  0x00007fffe123926b: mov     0x14(%rsi),%ebx   ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)

  0x00007fffe123926e: cmp     %ebx,%edi
  ;;  120 branch [LT] [B7] 
  0x00007fffe1239270: jl      0x7fffe1239284    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)

  ;;  block B6 [95, 99]

  0x00007fffe1239276: mov     %rsi,%rdi
  0x00007fffe1239279: mov     %rdi,%rsi         ;*invokevirtual flushBuffer
                                                ; - java.io.BufferedWriter::write@96 (line 230)

  0x00007fffe123927c: nop
  0x00007fffe123927d: nop
  0x00007fffe123927e: nop
  0x00007fffe123927f: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [112]=Oop [88]=Oop [144]=Oop off=868}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.BufferedWriter::write@96 (line 230)
                                                ;   {optimized virtual_call}
  ;;  block B7 [99, 99]

  0x00007fffe1239284: mov     0x64(%rsp),%r11d
  0x00007fffe1239289: movabs  $0x7ffff4d71018,%rax
  0x00007fffe1239293: mov     0xc(%rax),%edx
  0x00007fffe1239296: add     $0x8,%edx
  0x00007fffe1239299: mov     %edx,0xc(%rax)
  0x00007fffe123929c: movabs  $0x7ffff4c47e68,%rax  ;   {metadata({method} {0x00007ffff4c47e68} &apos;write&apos; &apos;(Ljava/lang/String;II)V&apos; in &apos;java/io/BufferedWriter&apos;)}
  0x00007fffe12392a6: and     $0x1fff8,%edx
  0x00007fffe12392ac: cmp     $0x0,%edx
  ;;  152 branch [EQ] [CounterOverflowStub: 0x00007fffa84f0150]
  0x00007fffe12392af: je      0x7fffe12394e5    ; OopMap{[104]=Oop [112]=Oop [88]=Oop [144]=Oop off=917}
                                                ;*goto
                                                ; - java.io.BufferedWriter::write@99 (line 231)

  0x00007fffe12392b5: test    %eax,0x16dc1e45(%rip)  ;   {poll}
  0x00007fffe12392bb: mov     %r11,%rcx         ;*goto
                                                ; - java.io.BufferedWriter::write@99 (line 231)

  0x00007fffe12392be: mov     0x50(%rsp),%r8d
  0x00007fffe12392c3: mov     0x68(%rsp),%rdx
  0x00007fffe12392c8: mov     0x58(%rsp),%rsi
  ;;  block B3 [20, 24]

  0x00007fffe12392cd: cmp     %r8d,%ecx
  ;;   66 branch [LT] [B4] 
  0x00007fffe12392d0: jl      0x7fffe1239188    ;*if_icmpge
                                                ; - java.io.BufferedWriter::write@24 (line 224)

  ;;  block B5 [102, 116]

  0x00007fffe12392d6: lea     0x88(%rsp),%rax
  0x00007fffe12392de: mov     0x8(%rax),%rsi
  0x00007fffe12392e2: mov     (%rsi),%rdx
  0x00007fffe12392e5: and     $0x7,%rdx
  0x00007fffe12392e9: cmp     $0x5,%rdx
  0x00007fffe12392ed: je      0x7fffe123930a
  0x00007fffe12392f3: mov     (%rax),%rdx
  0x00007fffe12392f6: test    %rdx,%rdx
  0x00007fffe12392f9: je      0x7fffe123930a
  0x00007fffe12392ff: lock cmpxchg %rdx,(%rsi)
  0x00007fffe1239304: jne     0x7fffe12394fc    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)

  0x00007fffe123930a: add     $0xa0,%rsp
  0x00007fffe1239311: pop     %rbp
  0x00007fffe1239312: test    %eax,0x16dc1de8(%rip)  ;   {poll_return}
  0x00007fffe1239318: retq                      ;*return
                                                ; - java.io.BufferedWriter::write@116 (line 233)

  ;;  block B13 [7, 16]

  0x00007fffe1239319: mov     %r8d,0x84(%rsp)
  0x00007fffe1239321: mov     %ecx,0x80(%rsp)
  ;;  172 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1239328: jmpq    0x7fffe1239521    ;   {no_reloc}
  0x00007fffe123932d: add     %al,(%rax)
  0x00007fffe123932f: add     %al,(%rax)
  0x00007fffe1239331: add     %ch,%cl
  0x00007fffe1239333: hlt
  0x00007fffe1239334: add     %eax,(%rax)
  0x00007fffe1239336: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe1239339: pop     %rax
  0x00007fffe123933a: xlat    (%rbx)
  0x00007fffe123933b: xlat    (%rbx)
  0x00007fffe123933d: add     %al,(%rax)
  0x00007fffe123933f: add     %al,(%rax)
  0x00007fffe1239341: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.BufferedWriter::ensureOpen@13 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  0x00007fffe1239344: mov     %rax,0x78(%rsp)
  0x00007fffe1239349: nop
  0x00007fffe123934a: nop
  0x00007fffe123934b: nop
  0x00007fffe123934c: nop
  0x00007fffe123934d: nop
  0x00007fffe123934e: nop
  0x00007fffe123934f: callq   0x7fffe1105e80    ; OopMap{[88]=Oop [120]=Oop [104]=Oop [112]=Oop [144]=Oop off=1076}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.BufferedWriter::ensureOpen@13 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ;   {optimized virtual_call}
  0x00007fffe1239354: mov     0x78(%rsp),%rax   ; OopMap{[88]=Oop [104]=Oop [112]=Oop [144]=Oop rax=Oop off=1081}
                                                ;*athrow
                                                ; - java.io.BufferedWriter::ensureOpen@16 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  0x00007fffe1239359: movabs  $0x7fffe1239359,%rdx  ;   {section_word}
  0x00007fffe1239363: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe1239368: nop                       ;*athrow
                                                ; - java.io.BufferedWriter::ensureOpen@16 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  ;;  block B1 [108, 115]

  0x00007fffe1239369: mov     0x348(%r15),%rax
  0x00007fffe1239370: xor     %r10,%r10
  0x00007fffe1239373: mov     %r10,0x348(%r15)
  0x00007fffe123937a: xor     %r10,%r10
  0x00007fffe123937d: mov     %r10,0x350(%r15)
  0x00007fffe1239384: mov     %rax,%rsi
  0x00007fffe1239387: lea     0x88(%rsp),%rax
  0x00007fffe123938f: mov     0x8(%rax),%rbx
  0x00007fffe1239393: mov     (%rbx),%rdi
  0x00007fffe1239396: and     $0x7,%rdi
  0x00007fffe123939a: cmp     $0x5,%rdi
  0x00007fffe123939e: je      0x7fffe12393bb
  0x00007fffe12393a4: mov     (%rax),%rdi
  0x00007fffe12393a7: test    %rdi,%rdi
  0x00007fffe12393aa: je      0x7fffe12393bb
  0x00007fffe12393b0: lock cmpxchg %rdi,(%rbx)
  0x00007fffe12393b5: jne     0x7fffe1239538    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)

  0x00007fffe12393bb: mov     %rsi,%rax
  0x00007fffe12393be: jmpq    0x7fffe1239579
  ;; CounterOverflowStub slow case
  0x00007fffe12393c3: mov     %rax,0x8(%rsp)
  0x00007fffe12393c8: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12393d0: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop [104]=Oop off=1205}
                                                ;*synchronization entry
                                                ; - java.io.BufferedWriter::write@-1 (line 220)
                                                ;   {runtime_call}
  0x00007fffe12393d5: jmpq    0x7fffe1238f8a
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12393da: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop [104]=Oop rdi=Oop [112]=Oop off=1215}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ;   {runtime_call}
  0x00007fffe12393df: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12393e4: sub     $0x80,%rsp
  0x00007fffe12393eb: mov     %rax,0x78(%rsp)
  0x00007fffe12393f0: mov     %rcx,0x70(%rsp)
  0x00007fffe12393f5: mov     %rdx,0x68(%rsp)
  0x00007fffe12393fa: mov     %rbx,0x60(%rsp)
  0x00007fffe12393ff: mov     %rbp,0x50(%rsp)
  0x00007fffe1239404: mov     %rsi,0x48(%rsp)
  0x00007fffe1239409: mov     %rdi,0x40(%rsp)
  0x00007fffe123940e: mov     %r8,0x38(%rsp)
  0x00007fffe1239413: mov     %r9,0x30(%rsp)
  0x00007fffe1239418: mov     %r10,0x28(%rsp)
  0x00007fffe123941d: mov     %r11,0x20(%rsp)
  0x00007fffe1239422: mov     %r12,0x18(%rsp)
  0x00007fffe1239427: mov     %r13,0x10(%rsp)
  0x00007fffe123942c: mov     %r14,0x8(%rsp)
  0x00007fffe1239431: mov     %r15,(%rsp)
  0x00007fffe1239435: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123943f: movabs  $0x7fffe12393df,%rsi  ;   {internal_word}
  0x00007fffe1239449: mov     %rsp,%rdx
  0x00007fffe123944c: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1239450: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1239455: hlt
  ;; MonitorEnterStub slow case
  0x00007fffe1239456: mov     %rdi,0x8(%rsp)
  0x00007fffe123945b: mov     %r9,(%rsp)
  0x00007fffe123945f: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop [104]=Oop rdi=Oop [112]=Oop [144]=Oop off=1348}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ;   {runtime_call}
  0x00007fffe1239464: jmpq    0x7fffe12390e3
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1239469: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop [104]=Oop [112]=Oop r9=Oop [144]=Oop off=1358}
                                                ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe123946e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1239473: sub     $0x80,%rsp
  0x00007fffe123947a: mov     %rax,0x78(%rsp)
  0x00007fffe123947f: mov     %rcx,0x70(%rsp)
  0x00007fffe1239484: mov     %rdx,0x68(%rsp)
  0x00007fffe1239489: mov     %rbx,0x60(%rsp)
  0x00007fffe123948e: mov     %rbp,0x50(%rsp)
  0x00007fffe1239493: mov     %rsi,0x48(%rsp)
  0x00007fffe1239498: mov     %rdi,0x40(%rsp)
  0x00007fffe123949d: mov     %r8,0x38(%rsp)
  0x00007fffe12394a2: mov     %r9,0x30(%rsp)
  0x00007fffe12394a7: mov     %r10,0x28(%rsp)
  0x00007fffe12394ac: mov     %r11,0x20(%rsp)
  0x00007fffe12394b1: mov     %r12,0x18(%rsp)
  0x00007fffe12394b6: mov     %r13,0x10(%rsp)
  0x00007fffe12394bb: mov     %r14,0x8(%rsp)
  0x00007fffe12394c0: mov     %r15,(%rsp)
  0x00007fffe12394c4: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12394ce: movabs  $0x7fffe123946e,%rsi  ;   {internal_word}
  0x00007fffe12394d8: mov     %rsp,%rdx
  0x00007fffe12394db: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12394df: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12394e4: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe12394e5: mov     %rax,0x8(%rsp)
  0x00007fffe12394ea: movq    $0x63,(%rsp)
  0x00007fffe12394f2: callq   0x7fffe11fe5a0    ; OopMap{[104]=Oop [112]=Oop [88]=Oop [144]=Oop off=1495}
                                                ;*goto
                                                ; - java.io.BufferedWriter::write@99 (line 231)
                                                ;   {runtime_call}
  0x00007fffe12394f7: jmpq    0x7fffe12392b5
  ;; MonitorExitStub slow case
  0x00007fffe12394fc: lea     0x88(%rsp),%rax
  0x00007fffe1239504: mov     %rax,(%rsp)
  0x00007fffe1239508: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe123950d: jmpq    0x7fffe123930a
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1239512: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe123951c: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1239521: callq   0x7fffe11fc960    ; OopMap{[88]=Oop [112]=Oop [104]=Oop [144]=Oop off=1542}
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1239526: jmpq    0x7fffe1239328
  ;; NewInstanceStub slow case
  0x00007fffe123952b: mov     %rdx,%rdx
  0x00007fffe123952e: callq   0x7fffe11668a0    ; OopMap{[88]=Oop [112]=Oop [104]=Oop [144]=Oop off=1555}
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1239533: jmpq    0x7fffe1239337
  ;; MonitorExitStub slow case
  0x00007fffe1239538: lea     0x88(%rsp),%rax
  0x00007fffe1239540: mov     %rax,(%rsp)
  0x00007fffe1239544: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1239549: jmpq    0x7fffe12393bb
  0x00007fffe123954e: nop
  0x00007fffe123954f: nop
  ;; Unwind handler
  0x00007fffe1239550: mov     0x348(%r15),%rax
  0x00007fffe1239557: movabs  $0x0,%r10
  0x00007fffe1239561: mov     %r10,0x348(%r15)
  0x00007fffe1239568: movabs  $0x0,%r10
  0x00007fffe1239572: mov     %r10,0x350(%r15)
  0x00007fffe1239579: add     $0xa0,%rsp
  0x00007fffe1239580: pop     %rbp
  0x00007fffe1239581: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1239586: hlt
  0x00007fffe1239587: hlt
  0x00007fffe1239588: hlt
  0x00007fffe1239589: hlt
  0x00007fffe123958a: hlt
  0x00007fffe123958b: hlt
  0x00007fffe123958c: hlt
  0x00007fffe123958d: hlt
  0x00007fffe123958e: hlt
  0x00007fffe123958f: hlt
  0x00007fffe1239590: hlt
  0x00007fffe1239591: hlt
  0x00007fffe1239592: hlt
  0x00007fffe1239593: hlt
  0x00007fffe1239594: hlt
  0x00007fffe1239595: hlt
  0x00007fffe1239596: hlt
  0x00007fffe1239597: hlt
  0x00007fffe1239598: hlt
  0x00007fffe1239599: hlt
  0x00007fffe123959a: hlt
  0x00007fffe123959b: hlt
  0x00007fffe123959c: hlt
  0x00007fffe123959d: hlt
  0x00007fffe123959e: hlt
  0x00007fffe123959f: hlt
[Stub Code]
  0x00007fffe12395a0: nop                       ;   {no_reloc}
  0x00007fffe12395a1: nop
  0x00007fffe12395a2: nop
  0x00007fffe12395a3: nop
  0x00007fffe12395a4: nop
  0x00007fffe12395a5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12395af: jmpq    0x7fffe12395af    ;   {runtime_call}
  0x00007fffe12395b4: nop
  0x00007fffe12395b5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12395bf: jmpq    0x7fffe12395bf    ;   {runtime_call}
  0x00007fffe12395c4: nop
  0x00007fffe12395c5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12395cf: jmpq    0x7fffe12395cf    ;   {runtime_call}
[Exception Handler]
  0x00007fffe12395d4: movabs  $0xdead,%rbx
  0x00007fffe12395de: movabs  $0xdead,%rcx
  0x00007fffe12395e8: movabs  $0xdead,%rsi
  0x00007fffe12395f2: movabs  $0xdead,%rdi
  0x00007fffe12395fc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1239601: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1239606: sub     $0x80,%rsp
  0x00007fffe123960d: mov     %rax,0x78(%rsp)
  0x00007fffe1239612: mov     %rcx,0x70(%rsp)
  0x00007fffe1239617: mov     %rdx,0x68(%rsp)
  0x00007fffe123961c: mov     %rbx,0x60(%rsp)
  0x00007fffe1239621: mov     %rbp,0x50(%rsp)
  0x00007fffe1239626: mov     %rsi,0x48(%rsp)
  0x00007fffe123962b: mov     %rdi,0x40(%rsp)
  0x00007fffe1239630: mov     %r8,0x38(%rsp)
  0x00007fffe1239635: mov     %r9,0x30(%rsp)
  0x00007fffe123963a: mov     %r10,0x28(%rsp)
  0x00007fffe123963f: mov     %r11,0x20(%rsp)
  0x00007fffe1239644: mov     %r12,0x18(%rsp)
  0x00007fffe1239649: mov     %r13,0x10(%rsp)
  0x00007fffe123964e: mov     %r14,0x8(%rsp)
  0x00007fffe1239653: mov     %r15,(%rsp)
  0x00007fffe1239657: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1239661: movabs  $0x7fffe1239601,%rsi  ;   {internal_word}
  0x00007fffe123966b: mov     %rsp,%rdx
  0x00007fffe123966e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1239672: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1239677: hlt
[Deopt Handler Code]
  0x00007fffe1239678: movabs  $0x7fffe1239678,%r10  ;   {section_word}
  0x00007fffe1239682: push    %r10
  0x00007fffe1239684: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1239689: hlt
  0x00007fffe123968a: hlt
  0x00007fffe123968b: hlt
  0x00007fffe123968c: hlt
  0x00007fffe123968d: hlt
  0x00007fffe123968e: hlt
  0x00007fffe123968f: hlt
<nmethod compile_id='41' compiler='C1' level='2' entry='0x00007fffe1238f20' size='3672' address='0x00007fffe1238d10' relocation_offset='304' insts_offset='528' stub_offset='2192' scopes_data_offset='2456' scopes_pcs_offset='2880' dependencies_offset='3472' handler_table_offset='3480' nul_chk_table_offset='3648' method='java/io/BufferedWriter write (Ljava/lang/String;II)V' bytes='117' count='10133' backedge_count='10133' iicount='10133' stamp='118.114'/>
<writer thread='140737327351552'/>
<task_queued compile_id='77' method='java/lang/String indexOf (II)I' bytes='70' count='5268' backedge_count='13042' iicount='5268' stamp='118.115' comment='tiered' hot_count='5268'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1237590:
Code:
Argument 0 is unknown.RIP: 0x7fffe1237740 Code size: 0x00000398
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;
  # parm0:    rsi       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B4 [0, 0]

  0x00007fffe1237740: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1237747: push    %rbp
  0x00007fffe1237748: sub     $0x30,%rsp
  0x00007fffe123774c: movabs  $0x7ffff4d77d50,%rax  ;   {metadata(method data for {method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1237756: mov     0x104(%rax),%edi
  0x00007fffe123775c: add     $0x8,%edi
  0x00007fffe123775f: mov     %edi,0x104(%rax)
  0x00007fffe1237765: movabs  $0x7ffff4b68b88,%rax  ;   {metadata({method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe123776f: and     $0x1ff8,%edi
  0x00007fffe1237775: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa84f47d0]
  0x00007fffe1237778: je      0x7fffe1237832    ;*iconst_0
                                                ; - java.lang.Integer::stringSize@0 (line 472)

  ;;  block B5 [0, 0]

  ;;  block B0 [0, 2]

  0x00007fffe123777e: mov     $0x0,%eax
  ;;   34 branch [AL] [B1] 
  0x00007fffe1237783: jmpq    0x7fffe12377d2    ;*iload_0
                                                ; - java.lang.Integer::stringSize@2 (line 473)

  ;;  block B3 [15, 18]

  0x00007fffe1237788: incl    %eax
  0x00007fffe123778a: movabs  $0x7ffff4d77d50,%rdi  ;   {metadata(method data for {method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1237794: mov     0x108(%rdi),%ebx
  0x00007fffe123779a: add     $0x8,%ebx
  0x00007fffe123779d: mov     %ebx,0x108(%rdi)
  0x00007fffe12377a3: movabs  $0x7ffff4b68b88,%rdi  ;   {metadata({method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12377ad: and     $0xfff8,%ebx
  0x00007fffe12377b3: cmp     $0x0,%ebx
  ;;   84 branch [EQ] [CounterOverflowStub: 0x00007fffa84f7520]
  0x00007fffe12377b6: je      0x7fffe1237849    ; OopMap{off=124}
                                                ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)

  0x00007fffe12377bc: test    %eax,0x16dc393e(%rip)  ;   {poll}
  0x00007fffe12377c2: movabs  $0x7ffff4d77d50,%rdi  ;   {metadata(method data for {method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12377cc: incl    0x150(%rdi)       ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)

  ;;  block B1 [2, 8]

  0x00007fffe12377d2: movabs  $0xd73af3c0,%rdi  ;   {oop([I)}
  0x00007fffe12377dc: movsxd  %eax,%rbx
  0x00007fffe12377df: cmp     0xc(%rdi),%eax    ; implicit exception: dispatches to 0x00007fffe1237860
  ;;   44 branch [AE] [RangeCheckStub: 0x00007fffa84f6790] [bci:7]
  0x00007fffe12377e2: jnb     0x7fffe1237958
  0x00007fffe12377e8: mov     0x10(%rdi,%rbx,4),%edi  ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)

  0x00007fffe12377ec: cmp     %edi,%esi
  0x00007fffe12377ee: movabs  $0x7ffff4d77d50,%rdi  ;   {metadata(method data for {method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12377f8: movabs  $0x130,%rbx
  0x00007fffe1237802: jnle    0x7fffe1237812
  0x00007fffe1237808: movabs  $0x140,%rbx
  0x00007fffe1237812: mov     (%rdi,%rbx),%rdx
  0x00007fffe1237816: lea     0x1(%rdx),%rdx
  0x00007fffe123781a: mov     %rdx,(%rdi,%rbx)
  ;;   60 branch [GT] [B3] 
  0x00007fffe123781e: jnle    0x7fffe1237788    ;*if_icmpgt
                                                ; - java.lang.Integer::stringSize@8 (line 473)

  ;;  block B2 [11, 14]

  0x00007fffe1237824: incl    %eax
  0x00007fffe1237826: add     $0x30,%rsp
  0x00007fffe123782a: pop     %rbp
  0x00007fffe123782b: test    %eax,0x16dc38cf(%rip)  ;   {poll_return}
  0x00007fffe1237831: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1237832: mov     %rax,0x8(%rsp)
  0x00007fffe1237837: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe123783f: callq   0x7fffe11fe5a0    ; OopMap{off=260}
                                                ;*synchronization entry
                                                ; - java.lang.Integer::stringSize@-1 (line 472)
                                                ;   {runtime_call}
  0x00007fffe1237844: jmpq    0x7fffe123777e
  ;; CounterOverflowStub slow case
  0x00007fffe1237849: mov     %rdi,0x8(%rsp)
  0x00007fffe123784e: movq    $0x12,(%rsp)
  0x00007fffe1237856: callq   0x7fffe11fe5a0    ; OopMap{off=283}
                                                ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ;   {runtime_call}
  0x00007fffe123785b: jmpq    0x7fffe12377bc
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1237860: callq   0x7fffe11670a0    ; OopMap{rdi=Oop off=293}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ;   {runtime_call}
  0x00007fffe1237865: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123786a: sub     $0x80,%rsp
  0x00007fffe1237871: mov     %rax,0x78(%rsp)
  0x00007fffe1237876: mov     %rcx,0x70(%rsp)
  0x00007fffe123787b: mov     %rdx,0x68(%rsp)
  0x00007fffe1237880: mov     %rbx,0x60(%rsp)
  0x00007fffe1237885: mov     %rbp,0x50(%rsp)
  0x00007fffe123788a: mov     %rsi,0x48(%rsp)
  0x00007fffe123788f: mov     %rdi,0x40(%rsp)
  0x00007fffe1237894: mov     %r8,0x38(%rsp)
  0x00007fffe1237899: mov     %r9,0x30(%rsp)
  0x00007fffe123789e: mov     %r10,0x28(%rsp)
  0x00007fffe12378a3: mov     %r11,0x20(%rsp)
  0x00007fffe12378a8: mov     %r12,0x18(%rsp)
  0x00007fffe12378ad: mov     %r13,0x10(%rsp)
  0x00007fffe12378b2: mov     %r14,0x8(%rsp)
  0x00007fffe12378b7: mov     %r15,(%rsp)
  0x00007fffe12378bb: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12378c5: movabs  $0x7fffe1237865,%rsi  ;   {internal_word}
  0x00007fffe12378cf: mov     %rsp,%rdx
  0x00007fffe12378d2: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12378d6: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12378db: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12378dc: callq   0x7fffe11670a0    ; OopMap{rdi=Oop off=417}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ;   {runtime_call}
  0x00007fffe12378e1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12378e6: sub     $0x80,%rsp
  0x00007fffe12378ed: mov     %rax,0x78(%rsp)
  0x00007fffe12378f2: mov     %rcx,0x70(%rsp)
  0x00007fffe12378f7: mov     %rdx,0x68(%rsp)
  0x00007fffe12378fc: mov     %rbx,0x60(%rsp)
  0x00007fffe1237901: mov     %rbp,0x50(%rsp)
  0x00007fffe1237906: mov     %rsi,0x48(%rsp)
  0x00007fffe123790b: mov     %rdi,0x40(%rsp)
  0x00007fffe1237910: mov     %r8,0x38(%rsp)
  0x00007fffe1237915: mov     %r9,0x30(%rsp)
  0x00007fffe123791a: mov     %r10,0x28(%rsp)
  0x00007fffe123791f: mov     %r11,0x20(%rsp)
  0x00007fffe1237924: mov     %r12,0x18(%rsp)
  0x00007fffe1237929: mov     %r13,0x10(%rsp)
  0x00007fffe123792e: mov     %r14,0x8(%rsp)
  0x00007fffe1237933: mov     %r15,(%rsp)
  0x00007fffe1237937: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1237941: movabs  $0x7fffe12378e1,%rsi  ;   {internal_word}
  0x00007fffe123794b: mov     %rsp,%rdx
  0x00007fffe123794e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1237952: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1237957: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1237958: mov     %rax,(%rsp)
  0x00007fffe123795c: callq   0x7fffe1168720    ; OopMap{rdi=Oop off=545}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ;   {runtime_call}
  0x00007fffe1237961: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1237966: sub     $0x80,%rsp
  0x00007fffe123796d: mov     %rax,0x78(%rsp)
  0x00007fffe1237972: mov     %rcx,0x70(%rsp)
  0x00007fffe1237977: mov     %rdx,0x68(%rsp)
  0x00007fffe123797c: mov     %rbx,0x60(%rsp)
  0x00007fffe1237981: mov     %rbp,0x50(%rsp)
  0x00007fffe1237986: mov     %rsi,0x48(%rsp)
  0x00007fffe123798b: mov     %rdi,0x40(%rsp)
  0x00007fffe1237990: mov     %r8,0x38(%rsp)
  0x00007fffe1237995: mov     %r9,0x30(%rsp)
  0x00007fffe123799a: mov     %r10,0x28(%rsp)
  0x00007fffe123799f: mov     %r11,0x20(%rsp)
  0x00007fffe12379a4: mov     %r12,0x18(%rsp)
  0x00007fffe12379a9: mov     %r13,0x10(%rsp)
  0x00007fffe12379ae: mov     %r14,0x8(%rsp)
  0x00007fffe12379b3: mov     %r15,(%rsp)
  0x00007fffe12379b7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12379c1: movabs  $0x7fffe1237961,%rsi  ;   {internal_word}
  0x00007fffe12379cb: mov     %rsp,%rdx
  0x00007fffe12379ce: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12379d2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12379d7: hlt
  0x00007fffe12379d8: nop
  0x00007fffe12379d9: nop
  ;; Unwind handler
  0x00007fffe12379da: mov     0x348(%r15),%rax
  0x00007fffe12379e1: movabs  $0x0,%r10
  0x00007fffe12379eb: mov     %r10,0x348(%r15)
  0x00007fffe12379f2: movabs  $0x0,%r10
  0x00007fffe12379fc: mov     %r10,0x350(%r15)
  0x00007fffe1237a03: add     $0x30,%rsp
  0x00007fffe1237a07: pop     %rbp
  0x00007fffe1237a08: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1237a0d: hlt
  0x00007fffe1237a0e: hlt
  0x00007fffe1237a0f: hlt
  0x00007fffe1237a10: hlt
  0x00007fffe1237a11: hlt
  0x00007fffe1237a12: hlt
  0x00007fffe1237a13: hlt
  0x00007fffe1237a14: hlt
  0x00007fffe1237a15: hlt
  0x00007fffe1237a16: hlt
  0x00007fffe1237a17: hlt
  0x00007fffe1237a18: hlt
  0x00007fffe1237a19: hlt
  0x00007fffe1237a1a: hlt
  0x00007fffe1237a1b: hlt
  0x00007fffe1237a1c: hlt
  0x00007fffe1237a1d: hlt
  0x00007fffe1237a1e: hlt
  0x00007fffe1237a1f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1237a20: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe1237a2a: movabs  $0xdead,%rcx
  0x00007fffe1237a34: movabs  $0xdead,%rsi
  0x00007fffe1237a3e: movabs  $0xdead,%rdi
  0x00007fffe1237a48: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1237a4d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1237a52: sub     $0x80,%rsp
  0x00007fffe1237a59: mov     %rax,0x78(%rsp)
  0x00007fffe1237a5e: mov     %rcx,0x70(%rsp)
  0x00007fffe1237a63: mov     %rdx,0x68(%rsp)
  0x00007fffe1237a68: mov     %rbx,0x60(%rsp)
  0x00007fffe1237a6d: mov     %rbp,0x50(%rsp)
  0x00007fffe1237a72: mov     %rsi,0x48(%rsp)
  0x00007fffe1237a77: mov     %rdi,0x40(%rsp)
  0x00007fffe1237a7c: mov     %r8,0x38(%rsp)
  0x00007fffe1237a81: mov     %r9,0x30(%rsp)
  0x00007fffe1237a86: mov     %r10,0x28(%rsp)
  0x00007fffe1237a8b: mov     %r11,0x20(%rsp)
  0x00007fffe1237a90: mov     %r12,0x18(%rsp)
  0x00007fffe1237a95: mov     %r13,0x10(%rsp)
  0x00007fffe1237a9a: mov     %r14,0x8(%rsp)
  0x00007fffe1237a9f: mov     %r15,(%rsp)
  0x00007fffe1237aa3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1237aad: movabs  $0x7fffe1237a4d,%rsi  ;   {internal_word}
  0x00007fffe1237ab7: mov     %rsp,%rdx
  0x00007fffe1237aba: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1237abe: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1237ac3: hlt
[Deopt Handler Code]
  0x00007fffe1237ac4: movabs  $0x7fffe1237ac4,%r10  ;   {section_word}
  0x00007fffe1237ace: push    %r10
  0x00007fffe1237ad0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1237ad5: hlt
  0x00007fffe1237ad6: hlt
  0x00007fffe1237ad7: hlt
<nmethod compile_id='68' compiler='C1' level='3' entry='0x00007fffe1237740' size='1672' address='0x00007fffe1237590' relocation_offset='304' insts_offset='432' stub_offset='1168' scopes_data_offset='1360' scopes_pcs_offset='1432' dependencies_offset='1640' nul_chk_table_offset='1648' method='java/lang/Integer stringSize (I)I' bytes='21' count='5332' backedge_count='2666' iicount='5332' stamp='118.130'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe12370d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1237220 Code size: 0x00000118
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa8478} &apos;indexOf&apos; &apos;(II)I&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  #           [sp+0x40]  (sp of caller)
  ;; N127: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1237220: mov     0x8(%rsi),%r10d
  0x00007fffe1237224: shl     $0x3,%r10
  0x00007fffe1237228: cmp     %r10,%rax
  0x00007fffe123722b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1237231: nop
  0x00007fffe1237232: nop
  0x00007fffe1237233: nop
  0x00007fffe1237234: nop
  0x00007fffe1237235: nop
  0x00007fffe1237236: nop
  0x00007fffe1237237: nop
  0x00007fffe1237238: nop
  0x00007fffe1237239: nop
  0x00007fffe123723a: nop
  0x00007fffe123723b: nop
  0x00007fffe123723c: nop
  0x00007fffe123723d: nop
  0x00007fffe123723e: nop
  0x00007fffe123723f: nop
[Verified Entry Point]
  ;; B1: #	B14 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1237240: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1237247: push    %rbp
  0x00007fffe1237248: sub     $0x30,%rsp        ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1545)

  0x00007fffe123724c: mov     %rsi,%r10
  0x00007fffe123724f: mov     0xc(%rsi),%r11d   ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1545)

  0x00007fffe1237253: mov     0xc(%r11),%ebp    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; implicit exception: dispatches to 0x00007fffe12372f5
  ;; B2: #	B12 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1237257: test    %ecx,%ecx
  0x00007fffe1237259: jl      0x7fffe12372bd    ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1546)

  ;; B3: #	B9 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe123725b: mov     $0xffffffff,%eax
  0x00007fffe1237260: cmp     %ebp,%ecx
  0x00007fffe1237262: jnl     0x7fffe1237291    ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1548)

  ;; B4: #	B13 B5 &lt;- B3  Freq: 0.999217

  0x00007fffe1237264: cmp     $0x10000,%edx
  0x00007fffe123726a: jnl     0x7fffe12372d9    ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)

  ;; B5: #	B11 B6 &lt;- B4  Freq: 0.999217

  0x00007fffe123726c: cmp     %ebp,%ecx
  0x00007fffe123726e: jnb     0x7fffe12372a1
  ;; B6: #	B11 B7 &lt;- B5  Freq: 0.999216

  0x00007fffe1237270: mov     %ebp,%r10d
  0x00007fffe1237273: decl    %r10d
  0x00007fffe1237276: cmp     %ebp,%r10d
  0x00007fffe1237279: jnb     0x7fffe12372a1
  0x00007fffe123727b: nop
  0x00007fffe123727c: nop
  0x00007fffe123727d: nop
  0x00007fffe123727e: nop
  0x00007fffe123727f: nop                       ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)

  ;; B7: #	B10 B8 &lt;- B6 B8 	Loop: B7-B8 inner  Freq: 2.9455

  0x00007fffe1237280: movzwl  0x10(%r11,%rcx,2),%r8d  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1558)

  0x00007fffe1237286: cmp     %edx,%r8d
  0x00007fffe1237289: je      0x7fffe123729d    ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1558)

  ;; B8: #	B7 B9 &lt;- B7  Freq: 2.94491

  0x00007fffe123728b: incl    %ecx              ;*iinc
                                                ; - java.lang.String::indexOf@55 (line 1557)

  0x00007fffe123728d: cmp     %ebp,%ecx
  0x00007fffe123728f: jl      0x7fffe1237280    ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1546)

  ;; B9: #	N127 &lt;- B3 B10 B8  Freq: 0.999996

  0x00007fffe1237291: add     $0x30,%rsp
  0x00007fffe1237295: pop     %rbp
  0x00007fffe1237296: test    %eax,0x16dc3d64(%rip)  ;   {poll_return}
  0x00007fffe123729c: retq
  ;; B10: #	B9 &lt;- B7  Freq: 0.000591128

  0x00007fffe123729d: mov     %ecx,%eax
  0x00007fffe123729f: jmp     0x7fffe1237291
  ;; B11: #	N127 &lt;- B6 B5  Freq: 2.02497e-06

  0x00007fffe12372a1: mov     $0xffffff86,%esi
  0x00007fffe12372a6: mov     %edx,(%rsp)
  0x00007fffe12372a9: mov     %r11d,0x4(%rsp)
  0x00007fffe12372ae: mov     %ecx,0x8(%rsp)
  0x00007fffe12372b2: nop
  0x00007fffe12372b3: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop off=152}
                                                ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ;   {runtime_call}
  0x00007fffe12372b8: callq   0x7ffff736b4ea    ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ;   {runtime_call}
  ;; B12: #	N127 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe12372bd: mov     $0xffffff65,%esi
  0x00007fffe12372c2: mov     %edx,(%rsp)
  0x00007fffe12372c5: mov     %ecx,0x8(%rsp)
  0x00007fffe12372c9: mov     %r10,0x10(%rsp)
  0x00007fffe12372ce: nop
  0x00007fffe12372cf: callq   0x7fffe1107820    ; OopMap{[16]=Oop off=180}
                                                ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1546)
                                                ;   {runtime_call}
  0x00007fffe12372d4: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.lang.String::indexOf@7 (line 1546)
                                                ;   {runtime_call}
  ;; B13: #	N127 &lt;- B4  Freq: 4.76464e-07

  0x00007fffe12372d9: mov     $0xffffff65,%esi
  0x00007fffe12372de: mov     %ecx,0x4(%rsp)
  0x00007fffe12372e2: mov     %edx,0x8(%rsp)
  0x00007fffe12372e6: mov     %r10,0x10(%rsp)
  0x00007fffe12372eb: callq   0x7fffe1107820    ; OopMap{[16]=Oop off=208}
                                                ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)
                                                ;   {runtime_call}
  0x00007fffe12372f0: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)
                                                ;   {runtime_call}
  ;; B14: #	N127 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe12372f5: mov     $0xfffffff6,%esi
  0x00007fffe12372fa: nop
  0x00007fffe12372fb: callq   0x7fffe1107820    ; OopMap{off=224}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ;   {runtime_call}
  0x00007fffe1237300: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ;   {runtime_call}
  0x00007fffe1237305: hlt
  0x00007fffe1237306: hlt
  0x00007fffe1237307: hlt
  0x00007fffe1237308: hlt
  0x00007fffe1237309: hlt
  0x00007fffe123730a: hlt
  0x00007fffe123730b: hlt
  0x00007fffe123730c: hlt
  0x00007fffe123730d: hlt
  0x00007fffe123730e: hlt
  0x00007fffe123730f: hlt
  0x00007fffe1237310: hlt
  0x00007fffe1237311: hlt
  0x00007fffe1237312: hlt
  0x00007fffe1237313: hlt
  0x00007fffe1237314: hlt
  0x00007fffe1237315: hlt
  0x00007fffe1237316: hlt
  0x00007fffe1237317: hlt
  0x00007fffe1237318: hlt
  0x00007fffe1237319: hlt
  0x00007fffe123731a: hlt
  0x00007fffe123731b: hlt
  0x00007fffe123731c: hlt
  0x00007fffe123731d: hlt
  0x00007fffe123731e: hlt
  0x00007fffe123731f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1237320: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1237325: callq   0x7fffe123732a
  0x00007fffe123732a: subq    $0x5,(%rsp)
  0x00007fffe123732f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1237334: hlt
  0x00007fffe1237335: hlt
  0x00007fffe1237336: hlt
  0x00007fffe1237337: hlt
<nmethod compile_id='77' compiler='C2' level='4' entry='0x00007fffe1237220' size='1144' address='0x00007fffe12370d0' relocation_offset='304' insts_offset='336' stub_offset='592' scopes_data_offset='624' scopes_pcs_offset='784' dependencies_offset='1120' nul_chk_table_offset='1128' method='java/lang/String indexOf (II)I' bytes='70' count='5832' backedge_count='13889' iicount='5832' stamp='118.145'/>
<make_not_entrant thread='140736956679936' compile_id='6' compiler='C1' level='3' stamp='118.145'/>
<writer thread='140737327351552'/>
<task_queued compile_id='78' method='java/lang/Integer stringSize (I)I' bytes='21' count='5632' backedge_count='2815' iicount='5632' stamp='118.145' comment='tiered' hot_count='5632'/>
<task_queued compile_id='79' method='java/io/BufferedWriter write (Ljava/lang/String;II)V' bytes='117' count='11669' backedge_count='11668' iicount='11669' stamp='118.159' comment='tiered' hot_count='11669'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1245250:
Code:
Argument 0 is unknown.RIP: 0x7fffe1245520 Code size: 0x00000d18
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  # parm2:    rcx:rcx   = &apos;[C&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B9 [0, 0]

  0x00007fffe1245520: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1245527: push    %rbp
  0x00007fffe1245528: sub     $0x30,%rsp
  0x00007fffe124552c: movabs  $0x7ffff4d77ed0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1245536: mov     0x104(%rax),%edi
  0x00007fffe124553c: add     $0x8,%edi
  0x00007fffe124553f: mov     %edi,0x104(%rax)
  0x00007fffe1245545: movabs  $0x7ffff4b68ab0,%rax  ;   {metadata({method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe124554f: and     $0x1ff8,%edi
  0x00007fffe1245555: cmp     $0x0,%edi
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffb4015ec0]
  0x00007fffe1245558: je      0x7fffe124581a    ;*iload_1
                                                ; - java.lang.Integer::getChars@0 (line 435)

  ;;  block B10 [0, 0]

  ;;  block B0 [0, 7]

  0x00007fffe124555e: cmp     $0x0,%esi
  0x00007fffe1245561: movabs  $0x7ffff4d77ed0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe124556b: movabs  $0x130,%rdi
  0x00007fffe1245575: jnl     0x7fffe1245585
  0x00007fffe124557b: movabs  $0x140,%rdi
  0x00007fffe1245585: mov     (%rax,%rdi),%rbx
  0x00007fffe1245589: lea     0x1(%rbx),%rbx
  0x00007fffe124558d: mov     %rbx,(%rax,%rdi)
  ;;   48 branch [LT] [B1] 
  0x00007fffe1245591: jl      0x7fffe12455a4    ;*ifge
                                                ; - java.lang.Integer::getChars@7 (line 438)

  ;;  block B11 [17, 17]

  0x00007fffe1245597: mov     %rdx,%rdi
  0x00007fffe124559a: mov     $0x0,%ebx
  ;;   60 branch [AL] [B2] 
  0x00007fffe124559f: jmpq    0x7fffe12456ab
  ;;  block B1 [10, 17]

  0x00007fffe12455a4: neg     %esi
  0x00007fffe12455a6: mov     %rsi,%rax
  0x00007fffe12455a9: mov     %rdx,%rdi
  0x00007fffe12455ac: mov     %rax,%rsi
  0x00007fffe12455af: mov     $0x2d,%ebx
  ;;   74 branch [AL] [B2] 
  0x00007fffe12455b4: jmpq    0x7fffe12456ab    ;*iload_0
                                                ; - java.lang.Integer::getChars@17 (line 444)

  0x00007fffe12455b9: nop
  0x00007fffe12455ba: nop
  0x00007fffe12455bb: nop
  0x00007fffe12455bc: nop
  0x00007fffe12455bd: nop
  0x00007fffe12455be: nop
  0x00007fffe12455bf: nop
  ;;  block B3 [23, 72]

  0x00007fffe12455c0: mov     %rsi,%rax
  0x00007fffe12455c3: mov     $0x64,%r8d
  0x00007fffe12455c9: cmp     $0x80000000,%eax
  0x00007fffe12455cf: jne     0x7fffe12455e1
  0x00007fffe12455d5: xor     %edx,%edx
  0x00007fffe12455d7: cmp     $0xffffffff,%r8d
  0x00007fffe12455db: je      0x7fffe12455e5
  0x00007fffe12455e1: cltd
  0x00007fffe12455e2: idivl   %r8d,%eax         ;*idiv
                                                ; - java.lang.Integer::getChars@26 (line 445)
                                                ; implicit exception: dispatches to 0x00007fffe1245831
  0x00007fffe12455e5: mov     %rax,%rdx
  0x00007fffe12455e8: shl     $0x6,%edx
  0x00007fffe12455eb: mov     %rax,%r8
  0x00007fffe12455ee: shl     $0x5,%r8d
  0x00007fffe12455f2: add     %r8d,%edx
  0x00007fffe12455f5: mov     %rax,%r8
  0x00007fffe12455f8: shl     $0x2,%r8d
  0x00007fffe12455fc: add     %r8d,%edx
  0x00007fffe12455ff: sub     %edx,%esi
  0x00007fffe1245601: movabs  $0xd73af2e8,%rdx  ;   {oop([C)}
  0x00007fffe124560b: movsxd  %esi,%r8
  0x00007fffe124560e: cmp     0xc(%rdx),%esi    ; implicit exception: dispatches to 0x00007fffe12458ad
  ;;  134 branch [AE] [RangeCheckStub: 0x00007fffb4019a30] [bci:57]
  0x00007fffe1245611: jnb     0x7fffe12459a5
  0x00007fffe1245617: movzwl  0x10(%rdx,%r8,2),%edx  ;*caload
                                                ; - java.lang.Integer::getChars@57 (line 449)

  0x00007fffe124561d: decl    %edi
  0x00007fffe124561f: movsxd  %edi,%r8
  0x00007fffe1245622: cmp     0xc(%rcx),%edi    ; implicit exception: dispatches to 0x00007fffe1245a25
  ;;  146 branch [AE] [RangeCheckStub: 0x00007fffb4019ef0] [bci:58]
  0x00007fffe1245625: jnb     0x7fffe1245b1d
  0x00007fffe124562b: mov     %dx,0x10(%rcx,%r8,2)  ;*castore
                                                ; - java.lang.Integer::getChars@58 (line 449)

  0x00007fffe1245631: decl    %edi
  0x00007fffe1245633: movabs  $0xd73af210,%rdx  ;   {oop([C)}
  0x00007fffe124563d: movsxd  %esi,%r8
  0x00007fffe1245640: cmp     0xc(%rdx),%esi    ; implicit exception: dispatches to 0x00007fffe1245b9d
  ;;  160 branch [AE] [RangeCheckStub: 0x00007fffb401a380] [bci:70]
  0x00007fffe1245643: jnb     0x7fffe1245c95
  0x00007fffe1245649: movzwl  0x10(%rdx,%r8,2),%esi  ;*caload
                                                ; - java.lang.Integer::getChars@70 (line 450)

  0x00007fffe124564f: movsxd  %edi,%rdx
  0x00007fffe1245652: cmp     0xc(%rcx),%edi
  ;;  168 branch [AE] [RangeCheckStub: 0x00007fffb401a8c0] [bci:71]
  0x00007fffe1245655: jnb     0x7fffe1245d15
  0x00007fffe124565b: mov     %si,0x10(%rcx,%rdx,2)  ;*castore
                                                ; - java.lang.Integer::getChars@71 (line 450)

  0x00007fffe1245660: movabs  $0x7ffff4d77ed0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe124566a: mov     0x108(%rsi),%edx
  0x00007fffe1245670: add     $0x8,%edx
  0x00007fffe1245673: mov     %edx,0x108(%rsi)
  0x00007fffe1245679: movabs  $0x7ffff4b68ab0,%rsi  ;   {metadata({method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1245683: and     $0xfff8,%edx
  0x00007fffe1245689: cmp     $0x0,%edx
  ;;  186 branch [EQ] [CounterOverflowStub: 0x00007fffb401af40]
  0x00007fffe124568c: je      0x7fffe1245d95    ; OopMap{rcx=Oop off=370}
                                                ;*goto
                                                ; - java.lang.Integer::getChars@72 (line 450)

  0x00007fffe1245692: test    %eax,0x16db5a68(%rip)  ;   {poll}
  0x00007fffe1245698: movabs  $0x7ffff4d77ed0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12456a2: incl    0x170(%rsi)
  0x00007fffe12456a8: mov     %rax,%rsi         ;*goto
                                                ; - java.lang.Integer::getChars@72 (line 450)

  ;;  block B2 [17, 20]

  0x00007fffe12456ab: cmp     $0x10000,%esi
  0x00007fffe12456b1: movabs  $0x7ffff4d77ed0,%rax  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12456bb: movabs  $0x150,%rdx
  0x00007fffe12456c5: jl      0x7fffe12456d5
  0x00007fffe12456cb: movabs  $0x160,%rdx
  0x00007fffe12456d5: mov     (%rax,%rdx),%r8
  0x00007fffe12456d9: lea     0x1(%r8),%r8
  0x00007fffe12456dd: mov     %r8,(%rax,%rdx)
  ;;   90 branch [LT] [B4] 
  0x00007fffe12456e1: jl      0x7fffe12456f3
  ;;   92 branch [AL] [B3] 
  0x00007fffe12456e7: jmpq    0x7fffe12455c0    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)

  0x00007fffe12456ec: nop
  0x00007fffe12456ed: nop
  0x00007fffe12456ee: nop
  0x00007fffe12456ef: nop
  ;;  block B13 [75, 75]

  0x00007fffe12456f0: mov     %rdx,%rsi         ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)

  ;;  block B4 [75, 110]

  0x00007fffe12456f3: mov     $0xcccd,%eax
  0x00007fffe12456f8: mov     %rsi,%rdx
  0x00007fffe12456fb: imull   %eax,%edx
  0x00007fffe12456fe: shr     $0x13,%edx
  0x00007fffe1245701: mov     %rdx,%rax
  0x00007fffe1245704: shl     $0x3,%eax
  0x00007fffe1245707: mov     %rdx,%r8
  0x00007fffe124570a: shl     $0x1,%r8d
  0x00007fffe124570d: add     %r8d,%eax
  0x00007fffe1245710: sub     %eax,%esi
  0x00007fffe1245712: decl    %edi
  0x00007fffe1245714: movabs  $0xd73af1b8,%rax  ;   {oop([C)}
  0x00007fffe124571e: movsxd  %esi,%r8
  0x00007fffe1245721: cmp     0xc(%rax),%esi    ; implicit exception: dispatches to 0x00007fffe1245dac
  ;;  248 branch [AE] [RangeCheckStub: 0x00007fffb0383880] [bci:105]
  0x00007fffe1245724: jnb     0x7fffe1245ea4
  0x00007fffe124572a: movzwl  0x10(%rax,%r8,2),%esi  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)

  0x00007fffe1245730: movsxd  %edi,%rax
  0x00007fffe1245733: cmp     0xc(%rcx),%edi    ; implicit exception: dispatches to 0x00007fffe1245f24
  ;;  256 branch [AE] [RangeCheckStub: 0x00007fffb0383c40] [bci:106]
  0x00007fffe1245736: jnb     0x7fffe124601c
  0x00007fffe124573c: mov     %si,0x10(%rcx,%rax,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)

  0x00007fffe1245741: movabs  $0x7ffff4d77ed0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe124574b: mov     0x108(%rsi),%eax
  0x00007fffe1245751: add     $0x8,%eax
  0x00007fffe1245754: mov     %eax,0x108(%rsi)
  0x00007fffe124575a: movabs  $0x7ffff4b68ab0,%rsi  ;   {metadata({method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1245764: and     $0xfff8,%eax
  0x00007fffe124576a: cmp     $0x0,%eax
  ;;  274 branch [EQ] [CounterOverflowStub: 0x00007fffb03842c0]
  0x00007fffe124576d: je      0x7fffe124609c    ; OopMap{rcx=Oop off=595}
                                                ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)

  0x00007fffe1245773: test    %eax,0x16db5987(%rip)  ;   {poll}
  0x00007fffe1245779: cmp     $0x0,%edx
  0x00007fffe124577c: movabs  $0x7ffff4d77ed0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1245786: movabs  $0x188,%rax
  0x00007fffe1245790: jne     0x7fffe12457a0
  0x00007fffe1245796: movabs  $0x198,%rax
  0x00007fffe12457a0: mov     (%rsi,%rax),%r8
  0x00007fffe12457a4: lea     0x1(%r8),%r8
  0x00007fffe12457a8: mov     %r8,(%rsi,%rax)
  ;;  292 branch [NE] [B13] 
  0x00007fffe12457ac: jne     0x7fffe12456f0    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)

  ;;  block B5 [113, 113]

  0x00007fffe12457b2: movabs  $0x7ffff4d77ed0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12457bc: incl    0x1a8(%rsi)       ;*goto
                                                ; - java.lang.Integer::getChars@113 (line 460)

  ;;  block B6 [116, 118]

  0x00007fffe12457c2: cmp     $0x0,%ebx
  0x00007fffe12457c5: movabs  $0x7ffff4d77ed0,%rsi  ;   {metadata(method data for {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12457cf: movabs  $0x1c0,%rax
  0x00007fffe12457d9: je      0x7fffe12457e9
  0x00007fffe12457df: movabs  $0x1d0,%rax
  0x00007fffe12457e9: mov     (%rsi,%rax),%rdx
  0x00007fffe12457ed: lea     0x1(%rdx),%rdx
  0x00007fffe12457f1: mov     %rdx,(%rsi,%rax)
  ;;  326 branch [EQ] [B8] 
  0x00007fffe12457f5: je      0x7fffe124580e    ;*ifeq
                                                ; - java.lang.Integer::getChars@118 (line 462)

  ;;  block B7 [121, 130]

  0x00007fffe12457fb: decl    %edi
  0x00007fffe12457fd: movsxd  %edi,%rsi
  0x00007fffe1245800: cmp     0xc(%rcx),%edi
  ;;  344 branch [AE] [RangeCheckStub: 0x00007fffb0385b00] [bci:129]
  0x00007fffe1245803: jnb     0x7fffe12460b3
  0x00007fffe1245809: mov     %bx,0x10(%rcx,%rsi,2)  ;*castore
                                                ; - java.lang.Integer::getChars@129 (line 463)

  ;;  block B8 [130, 130]

  0x00007fffe124580e: add     $0x30,%rsp
  0x00007fffe1245812: pop     %rbp
  0x00007fffe1245813: test    %eax,0x16db58e7(%rip)  ;   {poll_return}
  0x00007fffe1245819: retq
  ;; CounterOverflowStub slow case
  0x00007fffe124581a: mov     %rax,0x8(%rsp)
  0x00007fffe124581f: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1245827: callq   0x7fffe11fe5a0    ; OopMap{rcx=Oop off=780}
                                                ;*synchronization entry
                                                ; - java.lang.Integer::getChars@-1 (line 435)
                                                ;   {runtime_call}
  0x00007fffe124582c: jmpq    0x7fffe124555e
  ;; DivByZeroStub slow case
  0x00007fffe1245831: callq   0x7fffe11673e0    ; OopMap{rcx=Oop off=790}
                                                ;*idiv
                                                ; - java.lang.Integer::getChars@26 (line 445)
                                                ;   {runtime_call}
  0x00007fffe1245836: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124583b: sub     $0x80,%rsp
  0x00007fffe1245842: mov     %rax,0x78(%rsp)
  0x00007fffe1245847: mov     %rcx,0x70(%rsp)
  0x00007fffe124584c: mov     %rdx,0x68(%rsp)
  0x00007fffe1245851: mov     %rbx,0x60(%rsp)
  0x00007fffe1245856: mov     %rbp,0x50(%rsp)
  0x00007fffe124585b: mov     %rsi,0x48(%rsp)
  0x00007fffe1245860: mov     %rdi,0x40(%rsp)
  0x00007fffe1245865: mov     %r8,0x38(%rsp)
  0x00007fffe124586a: mov     %r9,0x30(%rsp)
  0x00007fffe124586f: mov     %r10,0x28(%rsp)
  0x00007fffe1245874: mov     %r11,0x20(%rsp)
  0x00007fffe1245879: mov     %r12,0x18(%rsp)
  0x00007fffe124587e: mov     %r13,0x10(%rsp)
  0x00007fffe1245883: mov     %r14,0x8(%rsp)
  0x00007fffe1245888: mov     %r15,(%rsp)
  0x00007fffe124588c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245896: movabs  $0x7fffe1245836,%rsi  ;   {internal_word}
  0x00007fffe12458a0: mov     %rsp,%rdx
  0x00007fffe12458a3: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12458a7: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12458ac: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12458ad: callq   0x7fffe11670a0    ; OopMap{rcx=Oop rdx=Oop off=914}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@57 (line 449)
                                                ;   {runtime_call}
  0x00007fffe12458b2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12458b7: sub     $0x80,%rsp
  0x00007fffe12458be: mov     %rax,0x78(%rsp)
  0x00007fffe12458c3: mov     %rcx,0x70(%rsp)
  0x00007fffe12458c8: mov     %rdx,0x68(%rsp)
  0x00007fffe12458cd: mov     %rbx,0x60(%rsp)
  0x00007fffe12458d2: mov     %rbp,0x50(%rsp)
  0x00007fffe12458d7: mov     %rsi,0x48(%rsp)
  0x00007fffe12458dc: mov     %rdi,0x40(%rsp)
  0x00007fffe12458e1: mov     %r8,0x38(%rsp)
  0x00007fffe12458e6: mov     %r9,0x30(%rsp)
  0x00007fffe12458eb: mov     %r10,0x28(%rsp)
  0x00007fffe12458f0: mov     %r11,0x20(%rsp)
  0x00007fffe12458f5: mov     %r12,0x18(%rsp)
  0x00007fffe12458fa: mov     %r13,0x10(%rsp)
  0x00007fffe12458ff: mov     %r14,0x8(%rsp)
  0x00007fffe1245904: mov     %r15,(%rsp)
  0x00007fffe1245908: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245912: movabs  $0x7fffe12458b2,%rsi  ;   {internal_word}
  0x00007fffe124591c: mov     %rsp,%rdx
  0x00007fffe124591f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245923: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245928: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245929: callq   0x7fffe11670a0    ; OopMap{rcx=Oop rdx=Oop off=1038}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@57 (line 449)
                                                ;   {runtime_call}
  0x00007fffe124592e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245933: sub     $0x80,%rsp
  0x00007fffe124593a: mov     %rax,0x78(%rsp)
  0x00007fffe124593f: mov     %rcx,0x70(%rsp)
  0x00007fffe1245944: mov     %rdx,0x68(%rsp)
  0x00007fffe1245949: mov     %rbx,0x60(%rsp)
  0x00007fffe124594e: mov     %rbp,0x50(%rsp)
  0x00007fffe1245953: mov     %rsi,0x48(%rsp)
  0x00007fffe1245958: mov     %rdi,0x40(%rsp)
  0x00007fffe124595d: mov     %r8,0x38(%rsp)
  0x00007fffe1245962: mov     %r9,0x30(%rsp)
  0x00007fffe1245967: mov     %r10,0x28(%rsp)
  0x00007fffe124596c: mov     %r11,0x20(%rsp)
  0x00007fffe1245971: mov     %r12,0x18(%rsp)
  0x00007fffe1245976: mov     %r13,0x10(%rsp)
  0x00007fffe124597b: mov     %r14,0x8(%rsp)
  0x00007fffe1245980: mov     %r15,(%rsp)
  0x00007fffe1245984: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124598e: movabs  $0x7fffe124592e,%rsi  ;   {internal_word}
  0x00007fffe1245998: mov     %rsp,%rdx
  0x00007fffe124599b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124599f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12459a4: hlt
  ;; RangeCheckStub slow case
  0x00007fffe12459a5: mov     %rsi,(%rsp)
  0x00007fffe12459a9: callq   0x7fffe1168720    ; OopMap{rcx=Oop rdx=Oop off=1166}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@57 (line 449)
                                                ;   {runtime_call}
  0x00007fffe12459ae: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12459b3: sub     $0x80,%rsp
  0x00007fffe12459ba: mov     %rax,0x78(%rsp)
  0x00007fffe12459bf: mov     %rcx,0x70(%rsp)
  0x00007fffe12459c4: mov     %rdx,0x68(%rsp)
  0x00007fffe12459c9: mov     %rbx,0x60(%rsp)
  0x00007fffe12459ce: mov     %rbp,0x50(%rsp)
  0x00007fffe12459d3: mov     %rsi,0x48(%rsp)
  0x00007fffe12459d8: mov     %rdi,0x40(%rsp)
  0x00007fffe12459dd: mov     %r8,0x38(%rsp)
  0x00007fffe12459e2: mov     %r9,0x30(%rsp)
  0x00007fffe12459e7: mov     %r10,0x28(%rsp)
  0x00007fffe12459ec: mov     %r11,0x20(%rsp)
  0x00007fffe12459f1: mov     %r12,0x18(%rsp)
  0x00007fffe12459f6: mov     %r13,0x10(%rsp)
  0x00007fffe12459fb: mov     %r14,0x8(%rsp)
  0x00007fffe1245a00: mov     %r15,(%rsp)
  0x00007fffe1245a04: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245a0e: movabs  $0x7fffe12459ae,%rsi  ;   {internal_word}
  0x00007fffe1245a18: mov     %rsp,%rdx
  0x00007fffe1245a1b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245a1f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245a24: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245a25: callq   0x7fffe11670a0    ; OopMap{rcx=Oop off=1290}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@58 (line 449)
                                                ;   {runtime_call}
  0x00007fffe1245a2a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245a2f: sub     $0x80,%rsp
  0x00007fffe1245a36: mov     %rax,0x78(%rsp)
  0x00007fffe1245a3b: mov     %rcx,0x70(%rsp)
  0x00007fffe1245a40: mov     %rdx,0x68(%rsp)
  0x00007fffe1245a45: mov     %rbx,0x60(%rsp)
  0x00007fffe1245a4a: mov     %rbp,0x50(%rsp)
  0x00007fffe1245a4f: mov     %rsi,0x48(%rsp)
  0x00007fffe1245a54: mov     %rdi,0x40(%rsp)
  0x00007fffe1245a59: mov     %r8,0x38(%rsp)
  0x00007fffe1245a5e: mov     %r9,0x30(%rsp)
  0x00007fffe1245a63: mov     %r10,0x28(%rsp)
  0x00007fffe1245a68: mov     %r11,0x20(%rsp)
  0x00007fffe1245a6d: mov     %r12,0x18(%rsp)
  0x00007fffe1245a72: mov     %r13,0x10(%rsp)
  0x00007fffe1245a77: mov     %r14,0x8(%rsp)
  0x00007fffe1245a7c: mov     %r15,(%rsp)
  0x00007fffe1245a80: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245a8a: movabs  $0x7fffe1245a2a,%rsi  ;   {internal_word}
  0x00007fffe1245a94: mov     %rsp,%rdx
  0x00007fffe1245a97: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245a9b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245aa0: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245aa1: callq   0x7fffe11670a0    ; OopMap{rcx=Oop off=1414}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@58 (line 449)
                                                ;   {runtime_call}
  0x00007fffe1245aa6: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245aab: sub     $0x80,%rsp
  0x00007fffe1245ab2: mov     %rax,0x78(%rsp)
  0x00007fffe1245ab7: mov     %rcx,0x70(%rsp)
  0x00007fffe1245abc: mov     %rdx,0x68(%rsp)
  0x00007fffe1245ac1: mov     %rbx,0x60(%rsp)
  0x00007fffe1245ac6: mov     %rbp,0x50(%rsp)
  0x00007fffe1245acb: mov     %rsi,0x48(%rsp)
  0x00007fffe1245ad0: mov     %rdi,0x40(%rsp)
  0x00007fffe1245ad5: mov     %r8,0x38(%rsp)
  0x00007fffe1245ada: mov     %r9,0x30(%rsp)
  0x00007fffe1245adf: mov     %r10,0x28(%rsp)
  0x00007fffe1245ae4: mov     %r11,0x20(%rsp)
  0x00007fffe1245ae9: mov     %r12,0x18(%rsp)
  0x00007fffe1245aee: mov     %r13,0x10(%rsp)
  0x00007fffe1245af3: mov     %r14,0x8(%rsp)
  0x00007fffe1245af8: mov     %r15,(%rsp)
  0x00007fffe1245afc: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245b06: movabs  $0x7fffe1245aa6,%rsi  ;   {internal_word}
  0x00007fffe1245b10: mov     %rsp,%rdx
  0x00007fffe1245b13: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245b17: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245b1c: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1245b1d: mov     %rdi,(%rsp)
  0x00007fffe1245b21: callq   0x7fffe1168720    ; OopMap{rcx=Oop off=1542}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@58 (line 449)
                                                ;   {runtime_call}
  0x00007fffe1245b26: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245b2b: sub     $0x80,%rsp
  0x00007fffe1245b32: mov     %rax,0x78(%rsp)
  0x00007fffe1245b37: mov     %rcx,0x70(%rsp)
  0x00007fffe1245b3c: mov     %rdx,0x68(%rsp)
  0x00007fffe1245b41: mov     %rbx,0x60(%rsp)
  0x00007fffe1245b46: mov     %rbp,0x50(%rsp)
  0x00007fffe1245b4b: mov     %rsi,0x48(%rsp)
  0x00007fffe1245b50: mov     %rdi,0x40(%rsp)
  0x00007fffe1245b55: mov     %r8,0x38(%rsp)
  0x00007fffe1245b5a: mov     %r9,0x30(%rsp)
  0x00007fffe1245b5f: mov     %r10,0x28(%rsp)
  0x00007fffe1245b64: mov     %r11,0x20(%rsp)
  0x00007fffe1245b69: mov     %r12,0x18(%rsp)
  0x00007fffe1245b6e: mov     %r13,0x10(%rsp)
  0x00007fffe1245b73: mov     %r14,0x8(%rsp)
  0x00007fffe1245b78: mov     %r15,(%rsp)
  0x00007fffe1245b7c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245b86: movabs  $0x7fffe1245b26,%rsi  ;   {internal_word}
  0x00007fffe1245b90: mov     %rsp,%rdx
  0x00007fffe1245b93: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245b97: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245b9c: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245b9d: callq   0x7fffe11670a0    ; OopMap{rcx=Oop rdx=Oop off=1666}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@70 (line 450)
                                                ;   {runtime_call}
  0x00007fffe1245ba2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245ba7: sub     $0x80,%rsp
  0x00007fffe1245bae: mov     %rax,0x78(%rsp)
  0x00007fffe1245bb3: mov     %rcx,0x70(%rsp)
  0x00007fffe1245bb8: mov     %rdx,0x68(%rsp)
  0x00007fffe1245bbd: mov     %rbx,0x60(%rsp)
  0x00007fffe1245bc2: mov     %rbp,0x50(%rsp)
  0x00007fffe1245bc7: mov     %rsi,0x48(%rsp)
  0x00007fffe1245bcc: mov     %rdi,0x40(%rsp)
  0x00007fffe1245bd1: mov     %r8,0x38(%rsp)
  0x00007fffe1245bd6: mov     %r9,0x30(%rsp)
  0x00007fffe1245bdb: mov     %r10,0x28(%rsp)
  0x00007fffe1245be0: mov     %r11,0x20(%rsp)
  0x00007fffe1245be5: mov     %r12,0x18(%rsp)
  0x00007fffe1245bea: mov     %r13,0x10(%rsp)
  0x00007fffe1245bef: mov     %r14,0x8(%rsp)
  0x00007fffe1245bf4: mov     %r15,(%rsp)
  0x00007fffe1245bf8: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245c02: movabs  $0x7fffe1245ba2,%rsi  ;   {internal_word}
  0x00007fffe1245c0c: mov     %rsp,%rdx
  0x00007fffe1245c0f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245c13: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245c18: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245c19: callq   0x7fffe11670a0    ; OopMap{rcx=Oop rdx=Oop off=1790}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@70 (line 450)
                                                ;   {runtime_call}
  0x00007fffe1245c1e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245c23: sub     $0x80,%rsp
  0x00007fffe1245c2a: mov     %rax,0x78(%rsp)
  0x00007fffe1245c2f: mov     %rcx,0x70(%rsp)
  0x00007fffe1245c34: mov     %rdx,0x68(%rsp)
  0x00007fffe1245c39: mov     %rbx,0x60(%rsp)
  0x00007fffe1245c3e: mov     %rbp,0x50(%rsp)
  0x00007fffe1245c43: mov     %rsi,0x48(%rsp)
  0x00007fffe1245c48: mov     %rdi,0x40(%rsp)
  0x00007fffe1245c4d: mov     %r8,0x38(%rsp)
  0x00007fffe1245c52: mov     %r9,0x30(%rsp)
  0x00007fffe1245c57: mov     %r10,0x28(%rsp)
  0x00007fffe1245c5c: mov     %r11,0x20(%rsp)
  0x00007fffe1245c61: mov     %r12,0x18(%rsp)
  0x00007fffe1245c66: mov     %r13,0x10(%rsp)
  0x00007fffe1245c6b: mov     %r14,0x8(%rsp)
  0x00007fffe1245c70: mov     %r15,(%rsp)
  0x00007fffe1245c74: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245c7e: movabs  $0x7fffe1245c1e,%rsi  ;   {internal_word}
  0x00007fffe1245c88: mov     %rsp,%rdx
  0x00007fffe1245c8b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245c8f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245c94: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1245c95: mov     %rsi,(%rsp)
  0x00007fffe1245c99: callq   0x7fffe1168720    ; OopMap{rcx=Oop rdx=Oop off=1918}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@70 (line 450)
                                                ;   {runtime_call}
  0x00007fffe1245c9e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245ca3: sub     $0x80,%rsp
  0x00007fffe1245caa: mov     %rax,0x78(%rsp)
  0x00007fffe1245caf: mov     %rcx,0x70(%rsp)
  0x00007fffe1245cb4: mov     %rdx,0x68(%rsp)
  0x00007fffe1245cb9: mov     %rbx,0x60(%rsp)
  0x00007fffe1245cbe: mov     %rbp,0x50(%rsp)
  0x00007fffe1245cc3: mov     %rsi,0x48(%rsp)
  0x00007fffe1245cc8: mov     %rdi,0x40(%rsp)
  0x00007fffe1245ccd: mov     %r8,0x38(%rsp)
  0x00007fffe1245cd2: mov     %r9,0x30(%rsp)
  0x00007fffe1245cd7: mov     %r10,0x28(%rsp)
  0x00007fffe1245cdc: mov     %r11,0x20(%rsp)
  0x00007fffe1245ce1: mov     %r12,0x18(%rsp)
  0x00007fffe1245ce6: mov     %r13,0x10(%rsp)
  0x00007fffe1245ceb: mov     %r14,0x8(%rsp)
  0x00007fffe1245cf0: mov     %r15,(%rsp)
  0x00007fffe1245cf4: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245cfe: movabs  $0x7fffe1245c9e,%rsi  ;   {internal_word}
  0x00007fffe1245d08: mov     %rsp,%rdx
  0x00007fffe1245d0b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245d0f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245d14: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1245d15: mov     %rdi,(%rsp)
  0x00007fffe1245d19: callq   0x7fffe1168720    ; OopMap{rcx=Oop off=2046}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@71 (line 450)
                                                ;   {runtime_call}
  0x00007fffe1245d1e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245d23: sub     $0x80,%rsp
  0x00007fffe1245d2a: mov     %rax,0x78(%rsp)
  0x00007fffe1245d2f: mov     %rcx,0x70(%rsp)
  0x00007fffe1245d34: mov     %rdx,0x68(%rsp)
  0x00007fffe1245d39: mov     %rbx,0x60(%rsp)
  0x00007fffe1245d3e: mov     %rbp,0x50(%rsp)
  0x00007fffe1245d43: mov     %rsi,0x48(%rsp)
  0x00007fffe1245d48: mov     %rdi,0x40(%rsp)
  0x00007fffe1245d4d: mov     %r8,0x38(%rsp)
  0x00007fffe1245d52: mov     %r9,0x30(%rsp)
  0x00007fffe1245d57: mov     %r10,0x28(%rsp)
  0x00007fffe1245d5c: mov     %r11,0x20(%rsp)
  0x00007fffe1245d61: mov     %r12,0x18(%rsp)
  0x00007fffe1245d66: mov     %r13,0x10(%rsp)
  0x00007fffe1245d6b: mov     %r14,0x8(%rsp)
  0x00007fffe1245d70: mov     %r15,(%rsp)
  0x00007fffe1245d74: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245d7e: movabs  $0x7fffe1245d1e,%rsi  ;   {internal_word}
  0x00007fffe1245d88: mov     %rsp,%rdx
  0x00007fffe1245d8b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245d8f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245d94: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe1245d95: mov     %rsi,0x8(%rsp)
  0x00007fffe1245d9a: movq    $0x48,(%rsp)
  0x00007fffe1245da2: callq   0x7fffe11fe5a0    ; OopMap{rcx=Oop off=2183}
                                                ;*goto
                                                ; - java.lang.Integer::getChars@72 (line 450)
                                                ;   {runtime_call}
  0x00007fffe1245da7: jmpq    0x7fffe1245692
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245dac: callq   0x7fffe11670a0    ; OopMap{rcx=Oop rax=Oop off=2193}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  0x00007fffe1245db1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245db6: sub     $0x80,%rsp
  0x00007fffe1245dbd: mov     %rax,0x78(%rsp)
  0x00007fffe1245dc2: mov     %rcx,0x70(%rsp)
  0x00007fffe1245dc7: mov     %rdx,0x68(%rsp)
  0x00007fffe1245dcc: mov     %rbx,0x60(%rsp)
  0x00007fffe1245dd1: mov     %rbp,0x50(%rsp)
  0x00007fffe1245dd6: mov     %rsi,0x48(%rsp)
  0x00007fffe1245ddb: mov     %rdi,0x40(%rsp)
  0x00007fffe1245de0: mov     %r8,0x38(%rsp)
  0x00007fffe1245de5: mov     %r9,0x30(%rsp)
  0x00007fffe1245dea: mov     %r10,0x28(%rsp)
  0x00007fffe1245def: mov     %r11,0x20(%rsp)
  0x00007fffe1245df4: mov     %r12,0x18(%rsp)
  0x00007fffe1245df9: mov     %r13,0x10(%rsp)
  0x00007fffe1245dfe: mov     %r14,0x8(%rsp)
  0x00007fffe1245e03: mov     %r15,(%rsp)
  0x00007fffe1245e07: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245e11: movabs  $0x7fffe1245db1,%rsi  ;   {internal_word}
  0x00007fffe1245e1b: mov     %rsp,%rdx
  0x00007fffe1245e1e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245e22: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245e27: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245e28: callq   0x7fffe11670a0    ; OopMap{rcx=Oop rax=Oop off=2317}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  0x00007fffe1245e2d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245e32: sub     $0x80,%rsp
  0x00007fffe1245e39: mov     %rax,0x78(%rsp)
  0x00007fffe1245e3e: mov     %rcx,0x70(%rsp)
  0x00007fffe1245e43: mov     %rdx,0x68(%rsp)
  0x00007fffe1245e48: mov     %rbx,0x60(%rsp)
  0x00007fffe1245e4d: mov     %rbp,0x50(%rsp)
  0x00007fffe1245e52: mov     %rsi,0x48(%rsp)
  0x00007fffe1245e57: mov     %rdi,0x40(%rsp)
  0x00007fffe1245e5c: mov     %r8,0x38(%rsp)
  0x00007fffe1245e61: mov     %r9,0x30(%rsp)
  0x00007fffe1245e66: mov     %r10,0x28(%rsp)
  0x00007fffe1245e6b: mov     %r11,0x20(%rsp)
  0x00007fffe1245e70: mov     %r12,0x18(%rsp)
  0x00007fffe1245e75: mov     %r13,0x10(%rsp)
  0x00007fffe1245e7a: mov     %r14,0x8(%rsp)
  0x00007fffe1245e7f: mov     %r15,(%rsp)
  0x00007fffe1245e83: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245e8d: movabs  $0x7fffe1245e2d,%rsi  ;   {internal_word}
  0x00007fffe1245e97: mov     %rsp,%rdx
  0x00007fffe1245e9a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245e9e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245ea3: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1245ea4: mov     %rsi,(%rsp)
  0x00007fffe1245ea8: callq   0x7fffe1168720    ; OopMap{rcx=Oop rax=Oop off=2445}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  0x00007fffe1245ead: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245eb2: sub     $0x80,%rsp
  0x00007fffe1245eb9: mov     %rax,0x78(%rsp)
  0x00007fffe1245ebe: mov     %rcx,0x70(%rsp)
  0x00007fffe1245ec3: mov     %rdx,0x68(%rsp)
  0x00007fffe1245ec8: mov     %rbx,0x60(%rsp)
  0x00007fffe1245ecd: mov     %rbp,0x50(%rsp)
  0x00007fffe1245ed2: mov     %rsi,0x48(%rsp)
  0x00007fffe1245ed7: mov     %rdi,0x40(%rsp)
  0x00007fffe1245edc: mov     %r8,0x38(%rsp)
  0x00007fffe1245ee1: mov     %r9,0x30(%rsp)
  0x00007fffe1245ee6: mov     %r10,0x28(%rsp)
  0x00007fffe1245eeb: mov     %r11,0x20(%rsp)
  0x00007fffe1245ef0: mov     %r12,0x18(%rsp)
  0x00007fffe1245ef5: mov     %r13,0x10(%rsp)
  0x00007fffe1245efa: mov     %r14,0x8(%rsp)
  0x00007fffe1245eff: mov     %r15,(%rsp)
  0x00007fffe1245f03: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245f0d: movabs  $0x7fffe1245ead,%rsi  ;   {internal_word}
  0x00007fffe1245f17: mov     %rsp,%rdx
  0x00007fffe1245f1a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245f1e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245f23: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245f24: callq   0x7fffe11670a0    ; OopMap{rcx=Oop off=2569}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe1245f29: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245f2e: sub     $0x80,%rsp
  0x00007fffe1245f35: mov     %rax,0x78(%rsp)
  0x00007fffe1245f3a: mov     %rcx,0x70(%rsp)
  0x00007fffe1245f3f: mov     %rdx,0x68(%rsp)
  0x00007fffe1245f44: mov     %rbx,0x60(%rsp)
  0x00007fffe1245f49: mov     %rbp,0x50(%rsp)
  0x00007fffe1245f4e: mov     %rsi,0x48(%rsp)
  0x00007fffe1245f53: mov     %rdi,0x40(%rsp)
  0x00007fffe1245f58: mov     %r8,0x38(%rsp)
  0x00007fffe1245f5d: mov     %r9,0x30(%rsp)
  0x00007fffe1245f62: mov     %r10,0x28(%rsp)
  0x00007fffe1245f67: mov     %r11,0x20(%rsp)
  0x00007fffe1245f6c: mov     %r12,0x18(%rsp)
  0x00007fffe1245f71: mov     %r13,0x10(%rsp)
  0x00007fffe1245f76: mov     %r14,0x8(%rsp)
  0x00007fffe1245f7b: mov     %r15,(%rsp)
  0x00007fffe1245f7f: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1245f89: movabs  $0x7fffe1245f29,%rsi  ;   {internal_word}
  0x00007fffe1245f93: mov     %rsp,%rdx
  0x00007fffe1245f96: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1245f9a: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245f9f: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1245fa0: callq   0x7fffe11670a0    ; OopMap{rcx=Oop off=2693}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe1245fa5: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245faa: sub     $0x80,%rsp
  0x00007fffe1245fb1: mov     %rax,0x78(%rsp)
  0x00007fffe1245fb6: mov     %rcx,0x70(%rsp)
  0x00007fffe1245fbb: mov     %rdx,0x68(%rsp)
  0x00007fffe1245fc0: mov     %rbx,0x60(%rsp)
  0x00007fffe1245fc5: mov     %rbp,0x50(%rsp)
  0x00007fffe1245fca: mov     %rsi,0x48(%rsp)
  0x00007fffe1245fcf: mov     %rdi,0x40(%rsp)
  0x00007fffe1245fd4: mov     %r8,0x38(%rsp)
  0x00007fffe1245fd9: mov     %r9,0x30(%rsp)
  0x00007fffe1245fde: mov     %r10,0x28(%rsp)
  0x00007fffe1245fe3: mov     %r11,0x20(%rsp)
  0x00007fffe1245fe8: mov     %r12,0x18(%rsp)
  0x00007fffe1245fed: mov     %r13,0x10(%rsp)
  0x00007fffe1245ff2: mov     %r14,0x8(%rsp)
  0x00007fffe1245ff7: mov     %r15,(%rsp)
  0x00007fffe1245ffb: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1246005: movabs  $0x7fffe1245fa5,%rsi  ;   {internal_word}
  0x00007fffe124600f: mov     %rsp,%rdx
  0x00007fffe1246012: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1246016: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124601b: hlt
  ;; RangeCheckStub slow case
  0x00007fffe124601c: mov     %rdi,(%rsp)
  0x00007fffe1246020: callq   0x7fffe1168720    ; OopMap{rcx=Oop off=2821}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe1246025: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124602a: sub     $0x80,%rsp
  0x00007fffe1246031: mov     %rax,0x78(%rsp)
  0x00007fffe1246036: mov     %rcx,0x70(%rsp)
  0x00007fffe124603b: mov     %rdx,0x68(%rsp)
  0x00007fffe1246040: mov     %rbx,0x60(%rsp)
  0x00007fffe1246045: mov     %rbp,0x50(%rsp)
  0x00007fffe124604a: mov     %rsi,0x48(%rsp)
  0x00007fffe124604f: mov     %rdi,0x40(%rsp)
  0x00007fffe1246054: mov     %r8,0x38(%rsp)
  0x00007fffe1246059: mov     %r9,0x30(%rsp)
  0x00007fffe124605e: mov     %r10,0x28(%rsp)
  0x00007fffe1246063: mov     %r11,0x20(%rsp)
  0x00007fffe1246068: mov     %r12,0x18(%rsp)
  0x00007fffe124606d: mov     %r13,0x10(%rsp)
  0x00007fffe1246072: mov     %r14,0x8(%rsp)
  0x00007fffe1246077: mov     %r15,(%rsp)
  0x00007fffe124607b: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1246085: movabs  $0x7fffe1246025,%rsi  ;   {internal_word}
  0x00007fffe124608f: mov     %rsp,%rdx
  0x00007fffe1246092: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1246096: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124609b: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe124609c: mov     %rsi,0x8(%rsp)
  0x00007fffe12460a1: movq    $0x6e,(%rsp)
  0x00007fffe12460a9: callq   0x7fffe11fe5a0    ; OopMap{rcx=Oop off=2958}
                                                ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ;   {runtime_call}
  0x00007fffe12460ae: jmpq    0x7fffe1245773
  ;; RangeCheckStub slow case
  0x00007fffe12460b3: mov     %rdi,(%rsp)
  0x00007fffe12460b7: callq   0x7fffe1168720    ; OopMap{rcx=Oop off=2972}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@129 (line 463)
                                                ;   {runtime_call}
  0x00007fffe12460bc: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12460c1: sub     $0x80,%rsp
  0x00007fffe12460c8: mov     %rax,0x78(%rsp)
  0x00007fffe12460cd: mov     %rcx,0x70(%rsp)
  0x00007fffe12460d2: mov     %rdx,0x68(%rsp)
  0x00007fffe12460d7: mov     %rbx,0x60(%rsp)
  0x00007fffe12460dc: mov     %rbp,0x50(%rsp)
  0x00007fffe12460e1: mov     %rsi,0x48(%rsp)
  0x00007fffe12460e6: mov     %rdi,0x40(%rsp)
  0x00007fffe12460eb: mov     %r8,0x38(%rsp)
  0x00007fffe12460f0: mov     %r9,0x30(%rsp)
  0x00007fffe12460f5: mov     %r10,0x28(%rsp)
  0x00007fffe12460fa: mov     %r11,0x20(%rsp)
  0x00007fffe12460ff: mov     %r12,0x18(%rsp)
  0x00007fffe1246104: mov     %r13,0x10(%rsp)
  0x00007fffe1246109: mov     %r14,0x8(%rsp)
  0x00007fffe124610e: mov     %r15,(%rsp)
  0x00007fffe1246112: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124611c: movabs  $0x7fffe12460bc,%rsi  ;   {internal_word}
  0x00007fffe1246126: mov     %rsp,%rdx
  0x00007fffe1246129: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124612d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1246132: hlt
  0x00007fffe1246133: nop
  0x00007fffe1246134: nop
  ;; Unwind handler
  0x00007fffe1246135: mov     0x348(%r15),%rax
  0x00007fffe124613c: movabs  $0x0,%r10
  0x00007fffe1246146: mov     %r10,0x348(%r15)
  0x00007fffe124614d: movabs  $0x0,%r10
  0x00007fffe1246157: mov     %r10,0x350(%r15)
  0x00007fffe124615e: add     $0x30,%rsp
  0x00007fffe1246162: pop     %rbp
  0x00007fffe1246163: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1246168: hlt
  0x00007fffe1246169: hlt
  0x00007fffe124616a: hlt
  0x00007fffe124616b: hlt
  0x00007fffe124616c: hlt
  0x00007fffe124616d: hlt
  0x00007fffe124616e: hlt
  0x00007fffe124616f: hlt
  0x00007fffe1246170: hlt
  0x00007fffe1246171: hlt
  0x00007fffe1246172: hlt
  0x00007fffe1246173: hlt
  0x00007fffe1246174: hlt
  0x00007fffe1246175: hlt
  0x00007fffe1246176: hlt
  0x00007fffe1246177: hlt
  0x00007fffe1246178: hlt
  0x00007fffe1246179: hlt
  0x00007fffe124617a: hlt
  0x00007fffe124617b: hlt
  0x00007fffe124617c: hlt
  0x00007fffe124617d: hlt
  0x00007fffe124617e: hlt
  0x00007fffe124617f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1246180: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe124618a: movabs  $0xdead,%rcx
  0x00007fffe1246194: movabs  $0xdead,%rsi
  0x00007fffe124619e: movabs  $0xdead,%rdi
  0x00007fffe12461a8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12461ad: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12461b2: sub     $0x80,%rsp
  0x00007fffe12461b9: mov     %rax,0x78(%rsp)
  0x00007fffe12461be: mov     %rcx,0x70(%rsp)
  0x00007fffe12461c3: mov     %rdx,0x68(%rsp)
  0x00007fffe12461c8: mov     %rbx,0x60(%rsp)
  0x00007fffe12461cd: mov     %rbp,0x50(%rsp)
  0x00007fffe12461d2: mov     %rsi,0x48(%rsp)
  0x00007fffe12461d7: mov     %rdi,0x40(%rsp)
  0x00007fffe12461dc: mov     %r8,0x38(%rsp)
  0x00007fffe12461e1: mov     %r9,0x30(%rsp)
  0x00007fffe12461e6: mov     %r10,0x28(%rsp)
  0x00007fffe12461eb: mov     %r11,0x20(%rsp)
  0x00007fffe12461f0: mov     %r12,0x18(%rsp)
  0x00007fffe12461f5: mov     %r13,0x10(%rsp)
  0x00007fffe12461fa: mov     %r14,0x8(%rsp)
  0x00007fffe12461ff: mov     %r15,(%rsp)
  0x00007fffe1246203: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124620d: movabs  $0x7fffe12461ad,%rsi  ;   {internal_word}
  0x00007fffe1246217: mov     %rsp,%rdx
  0x00007fffe124621a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124621e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1246223: hlt
[Deopt Handler Code]
  0x00007fffe1246224: movabs  $0x7fffe1246224,%r10  ;   {section_word}
  0x00007fffe124622e: push    %r10
  0x00007fffe1246230: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1246235: hlt
  0x00007fffe1246236: hlt
  0x00007fffe1246237: hlt
<nmethod compile_id='69' compiler='C1' level='3' entry='0x00007fffe1245520' size='5096' address='0x00007fffe1245250' relocation_offset='304' insts_offset='720' stub_offset='3888' scopes_data_offset='4080' scopes_pcs_offset='4320' dependencies_offset='4992' nul_chk_table_offset='5000' method='java/lang/Integer getChars (II[C)V' bytes='131' count='6687' backedge_count='3343' iicount='6687' stamp='118.205'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe123a510:
Code:
Argument 0 is unknown.RIP: 0x7fffe123a6a0 Code size: 0x00000418
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2e258} &apos;encodeArrayLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;
  # this:     rsi:rsi   = &apos;sun/nio/cs/UTF_8$Encoder&apos;
  # parm0:    rdx:rdx   = &apos;java/nio/CharBuffer&apos;
  # parm1:    rcx:rcx   = &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x60]  (sp of caller)
  ;; N448: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123a6a0: mov     0x8(%rsi),%r10d
  0x00007fffe123a6a4: shl     $0x3,%r10
  0x00007fffe123a6a8: cmp     %r10,%rax
  0x00007fffe123a6ab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123a6b1: nop
  0x00007fffe123a6b2: nop
  0x00007fffe123a6b3: nop
  0x00007fffe123a6b4: nop
  0x00007fffe123a6b5: nop
  0x00007fffe123a6b6: nop
  0x00007fffe123a6b7: nop
  0x00007fffe123a6b8: nop
  0x00007fffe123a6b9: nop
  0x00007fffe123a6ba: nop
  0x00007fffe123a6bb: nop
  0x00007fffe123a6bc: nop
  0x00007fffe123a6bd: nop
  0x00007fffe123a6be: nop
  0x00007fffe123a6bf: nop
[Verified Entry Point]
  ;; B1: #	B35 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123a6c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123a6c7: push    %rbp
  0x00007fffe123a6c8: sub     $0x50,%rsp        ;*synchronization entry
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@-1 (line 585)

  0x00007fffe123a6cc: mov     %rsi,%r13
  0x00007fffe123a6cf: mov     0x2c(%rdx),%r14d  ;*getfield hb
                                                ; - java.nio.CharBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ; implicit exception: dispatches to 0x00007fffe123aa21
  ;; B2: #	B37 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe123a6d3: mov     0xc(%r14),%esi    ; implicit exception: dispatches to 0x00007fffe123aa41
  ;; B3: #	B26 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe123a6d7: movzbl  0x28(%rdx),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.CharBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  0x00007fffe123a6db: test    %ebp,%ebp
  0x00007fffe123a6dd: jne     0x7fffe123a8dd    ;*ifeq
                                                ; - java.nio.CharBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  ;; B4: #	B36 B5 &lt;- B3  Freq: 0.999998

  0x00007fffe123a6e3: mov     %rcx,%r11
  0x00007fffe123a6e6: mov     0x2c(%rcx),%edi   ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ; implicit exception: dispatches to 0x00007fffe123aa31
  ;; B5: #	B38 B6 &lt;- B4  Freq: 0.999997

  0x00007fffe123a6e9: mov     0x18(%rdx),%r10d  ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@10 (line 586)

  0x00007fffe123a6ed: mov     0x1c(%rdx),%eax   ;*getfield limit
                                                ; - java.nio.Buffer::limit@1 (line 256)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@21 (line 587)

  0x00007fffe123a6f0: mov     0x24(%rdx),%r8d   ;*getfield offset
                                                ; - java.nio.CharBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@6 (line 586)

  0x00007fffe123a6f4: mov     %r8d,%r9d
  0x00007fffe123a6f7: add     %r10d,%r9d        ;*iadd
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@13 (line 586)

  0x00007fffe123a6fa: mov     %r8d,%ecx
  0x00007fffe123a6fd: add     %eax,%ecx         ;*iadd
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@24 (line 587)

  0x00007fffe123a6ff: mov     0xc(%rdi),%ebx    ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@105 (line 596)
                                                ; implicit exception: dispatches to 0x00007fffe123aa61
  ;; B6: #	B27 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe123a702: movzbl  0x28(%r11),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)

  0x00007fffe123a707: test    %ebp,%ebp
  0x00007fffe123a709: jne     0x7fffe123a8fd    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)

  ;; B7: #	B9 B8 &lt;- B6  Freq: 0.999996

  0x00007fffe123a70f: mov     %ecx,0x10(%rsp)
  0x00007fffe123a713: vmovd   %edi,%xmm1
  0x00007fffe123a717: vmovq   %r11,%xmm0
  0x00007fffe123a71c: mov     0x1c(%r11),%ecx   ;*getfield limit
                                                ; - java.nio.Buffer::limit@1 (line 256)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@49 (line 591)

  0x00007fffe123a720: mov     %eax,0x8(%rsp)
  0x00007fffe123a724: sub     %r10d,%eax        ;*isub
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@61 (line 592)

  0x00007fffe123a727: mov     0x24(%r11),%edi   ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@34 (line 590)

  0x00007fffe123a72b: mov     0x18(%r11),%r11d  ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@38 (line 590)

  0x00007fffe123a72f: mov     %edi,%r10d
  0x00007fffe123a732: mov     %ecx,0x4(%rsp)
  0x00007fffe123a736: add     %ecx,%r10d        ;*iadd
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@52 (line 591)

  0x00007fffe123a739: vmovd   %r10d,%xmm2
  0x00007fffe123a73e: mov     %ecx,%ebp
  0x00007fffe123a740: sub     %r11d,%ebp        ;*isub
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@66 (line 592)

  0x00007fffe123a743: mov     %edi,%r10d
  0x00007fffe123a746: add     %r11d,%r10d       ;*iadd
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@41 (line 590)

  0x00007fffe123a749: cmp     %ebp,%eax
  0x00007fffe123a74b: cmovl   %eax,%ebp
  0x00007fffe123a74e: add     %r10d,%ebp        ;*iadd
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@70 (line 592)

  0x00007fffe123a751: cmp     %ebp,%r10d
  0x00007fffe123a754: jl      0x7fffe123a760    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@77 (line 595)

  ;; B8: #	B16 &lt;- B7  Freq: 0.444437

  0x00007fffe123a756: vmovd   %xmm1,%r11d
  0x00007fffe123a75b: jmpq    0x7fffe123a7dd
  ;; B9: #	B25 B10 &lt;- B7  Freq: 0.555559

  0x00007fffe123a760: mov     %r9d,%eax
  0x00007fffe123a763: sub     %r10d,%eax        ;*iadd
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@13 (line 586)

  0x00007fffe123a766: movsxd  %r10d,%r11
  0x00007fffe123a769: movsxd  %eax,%rcx
  0x00007fffe123a76c: add     %rcx,%r11
  0x00007fffe123a76f: movsxd  %esi,%rsi
  0x00007fffe123a772: cmp     %rsi,%r11
  0x00007fffe123a775: jnb     0x7fffe123a891
  ;; B10: #	B25 B11 &lt;- B9  Freq: 0.555558

  0x00007fffe123a77b: movsxd  %ebp,%r11
  0x00007fffe123a77e: add     %r11,%rcx
  0x00007fffe123a781: decq    %rcx
  0x00007fffe123a784: cmp     %rsi,%rcx
  0x00007fffe123a787: jnb     0x7fffe123a891
  ;; B11: #	B25 B12 &lt;- B10  Freq: 0.555558

  0x00007fffe123a78d: cmp     %ebx,%r10d
  0x00007fffe123a790: jnb     0x7fffe123a891
  ;; B12: #	B25 B13 &lt;- B11  Freq: 0.555557

  0x00007fffe123a796: movsxd  %ebx,%rcx
  0x00007fffe123a799: decq    %r11
  0x00007fffe123a79c: cmp     %rcx,%r11
  0x00007fffe123a79f: jnb     0x7fffe123a891
  0x00007fffe123a7a5: nop
  0x00007fffe123a7a6: nop
  0x00007fffe123a7a7: nop
  0x00007fffe123a7a8: nop
  0x00007fffe123a7a9: nop
  0x00007fffe123a7aa: nop
  0x00007fffe123a7ab: nop
  0x00007fffe123a7ac: nop
  0x00007fffe123a7ad: nop
  0x00007fffe123a7ae: nop
  0x00007fffe123a7af: nop
  ;; B13: #	B24 B14 &lt;- B12 B14 	Loop: B13-B14 inner  Freq: 1.25002

  0x00007fffe123a7b0: mov     %r10d,%r9d
  0x00007fffe123a7b3: add     %eax,%r9d         ;*aload_3
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@80 (line 595)

  0x00007fffe123a7b6: movzwl  0x10(%r14,%r9,2),%ecx  ;*caload
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@83 (line 595)

  0x00007fffe123a7bc: cmp     $0x80,%ecx
  0x00007fffe123a7c2: jnl     0x7fffe123a852    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@87 (line 595)

  ;; B14: #	B13 B15 &lt;- B13  Freq: 1.25002

  0x00007fffe123a7c8: vmovd   %xmm1,%r11d
  0x00007fffe123a7cd: mov     %cl,0x10(%r11,%r10)  ;*bastore
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@105 (line 596)

  0x00007fffe123a7d2: incl    %r10d             ;*iinc
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@94 (line 596)

  0x00007fffe123a7d5: cmp     %ebp,%r10d
  0x00007fffe123a7d8: jl      0x7fffe123a7b0
  ;; B15: #	B16 &lt;- B14  Freq: 0.555556

  0x00007fffe123a7da: incl    %r9d              ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@77 (line 595)

  ;; B16: #	B28 B17 &lt;- B8 B15  Freq: 0.999993

  0x00007fffe123a7dd: cmp     0x10(%rsp),%r9d
  0x00007fffe123a7e2: jl      0x7fffe123a929    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@113 (line 597)

  ;; B17: #	B29 B18 &lt;- B16  Freq: 0.999993

  0x00007fffe123a7e8: sub     %r8d,%r9d         ;*isub
                                                ; - sun.nio.cs.UTF_8::updatePositions@6 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe123a7eb: cmp     0x8(%rsp),%r9d
  0x00007fffe123a7f0: jnle    0x7fffe123a961    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  ;; B18: #	B30 B19 &lt;- B17  Freq: 0.999992

  0x00007fffe123a7f6: test    %r9d,%r9d
  0x00007fffe123a7f9: jl      0x7fffe123a985    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  ;; B19: #	B31 B20 &lt;- B18  Freq: 0.999992

  0x00007fffe123a7ff: mov     0xc(%rdx),%ebp    ;*getfield mark
                                                ; - java.nio.Buffer::position@21 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe123a802: cmp     %r9d,%ebp
  0x00007fffe123a805: jnle    0x7fffe123a9a9    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  ;; B20: #	B32 B21 &lt;- B19  Freq: 0.999991

  0x00007fffe123a80b: mov     %r9d,0x18(%rdx)   ;*putfield position
                                                ; - java.nio.Buffer::position@35 (line 246)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe123a80f: sub     %edi,%r10d        ;*isub
                                                ; - sun.nio.cs.UTF_8::updatePositions@17 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe123a812: cmp     0x4(%rsp),%r10d
  0x00007fffe123a817: jnle    0x7fffe123a9cd    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  ;; B21: #	B33 B22 &lt;- B20  Freq: 0.999991

  0x00007fffe123a81d: test    %r10d,%r10d
  0x00007fffe123a820: jl      0x7fffe123a9e9    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  ;; B22: #	B34 B23 &lt;- B21  Freq: 0.99999

  0x00007fffe123a826: vmovq   %xmm0,%r11
  0x00007fffe123a82b: mov     0xc(%r11),%ebp    ;*getfield mark
                                                ; - java.nio.Buffer::position@21 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  0x00007fffe123a82f: cmp     %r10d,%ebp
  0x00007fffe123a832: jnle    0x7fffe123aa05    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)

  ;; B23: #	N448 &lt;- B22  Freq: 0.99999

  0x00007fffe123a838: mov     %r10d,0x18(%r11)  ;*ifnonnull
                                                ; - java.nio.CharBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)

  0x00007fffe123a83c: movabs  $0xd73dd9e0,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe123a846: add     $0x50,%rsp
  0x00007fffe123a84a: pop     %rbp
  0x00007fffe123a84b: test    %eax,0x16dc07af(%rip)  ;   {poll_return}
  0x00007fffe123a851: retq
  ;; B24: #	N448 &lt;- B13  Freq: 5.96054e-07

  0x00007fffe123a852: mov     $0xffffff65,%esi
  0x00007fffe123a857: mov     %r14d,(%rsp)
  0x00007fffe123a85b: mov     %r9d,0x4(%rsp)
  0x00007fffe123a860: mov     %r10d,0x8(%rsp)
  0x00007fffe123a865: mov     %ecx,0xc(%rsp)
  0x00007fffe123a869: mov     %r13,0x18(%rsp)
  0x00007fffe123a86e: mov     %rdx,0x20(%rsp)
  0x00007fffe123a873: vmovsd  %xmm0,0x28(%rsp)
  0x00007fffe123a879: vmovss  %xmm1,0x14(%rsp)
  0x00007fffe123a87f: vmovss  %xmm2,0x30(%rsp)
  0x00007fffe123a885: nop
  0x00007fffe123a886: nop
  0x00007fffe123a887: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [20]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=492}
                                                ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@87 (line 595)
                                                ;   {runtime_call}
  0x00007fffe123a88c: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@87 (line 595)
                                                ;   {runtime_call}
  ;; B25: #	N448 &lt;- B12 B9 B10 B11  Freq: 2.25174e-06

  0x00007fffe123a891: mov     $0xffffff86,%esi
  0x00007fffe123a896: mov     %r14d,(%rsp)
  0x00007fffe123a89a: mov     %r9d,0x4(%rsp)
  0x00007fffe123a89f: mov     %r10d,0x8(%rsp)
  0x00007fffe123a8a4: mov     %r13,0x18(%rsp)
  0x00007fffe123a8a9: mov     %rdx,0x20(%rsp)
  0x00007fffe123a8ae: vmovsd  %xmm0,0x28(%rsp)
  0x00007fffe123a8b4: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe123a8b9: mov     0x10(%rsp),%eax
  0x00007fffe123a8bd: mov     %eax,0xc(%rsp)
  0x00007fffe123a8c1: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe123a8c6: vmovss  %xmm1,0x10(%rsp)
  0x00007fffe123a8cc: vmovss  %xmm2,0x14(%rsp)
  0x00007fffe123a8d2: nop
  0x00007fffe123a8d3: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=568}
                                                ;*aload_3
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@80 (line 595)
                                                ;   {runtime_call}
  0x00007fffe123a8d8: callq   0x7ffff736b4ea    ;*aload_3
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@80 (line 595)
                                                ;   {runtime_call}
  ;; B26: #	N448 &lt;- B3  Freq: 4.76836e-07

  0x00007fffe123a8dd: mov     $0xffffff65,%esi
  0x00007fffe123a8e2: mov     %r13,(%rsp)
  0x00007fffe123a8e6: mov     %rcx,0x10(%rsp)
  0x00007fffe123a8eb: mov     %rdx,0x18(%rsp)
  0x00007fffe123a8f0: nop
  0x00007fffe123a8f1: nop
  0x00007fffe123a8f2: nop
  0x00007fffe123a8f3: callq   0x7fffe1107820    ; OopMap{[0]=Oop [16]=Oop [24]=Oop off=600}
                                                ;*ifeq
                                                ; - java.nio.CharBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ;   {runtime_call}
  0x00007fffe123a8f8: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.CharBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ;   {runtime_call}
  ;; B27: #	N448 &lt;- B6  Freq: 4.76836e-07

  0x00007fffe123a8fd: mov     $0xffffff65,%esi
  0x00007fffe123a902: mov     %r14d,(%rsp)
  0x00007fffe123a906: mov     %r9d,0x4(%rsp)
  0x00007fffe123a90b: mov     %r13,0x8(%rsp)
  0x00007fffe123a910: mov     %rdx,0x10(%rsp)
  0x00007fffe123a915: mov     %ecx,0x20(%rsp)
  0x00007fffe123a919: mov     %r11,0x28(%rsp)
  0x00007fffe123a91e: nop
  0x00007fffe123a91f: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=Oop [16]=Oop [40]=Oop off=644}
                                                ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ;   {runtime_call}
  0x00007fffe123a924: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@77 (line 595)
                                                ;   {runtime_call}
  ;; B28: #	N448 &lt;- B16  Freq: 4.76834e-07

  0x00007fffe123a929: mov     $0xffffff65,%esi
  0x00007fffe123a92e: mov     %r14d,%ebp
  0x00007fffe123a931: mov     %r10d,0x4(%rsp)
  0x00007fffe123a936: mov     %r9d,0x8(%rsp)
  0x00007fffe123a93b: mov     %r13,0x18(%rsp)
  0x00007fffe123a940: mov     %rdx,0x20(%rsp)
  0x00007fffe123a945: vmovsd  %xmm0,0x28(%rsp)
  0x00007fffe123a94b: mov     %r11d,0x14(%rsp)
  0x00007fffe123a950: vmovss  %xmm2,0x30(%rsp)
  0x00007fffe123a956: nop
  0x00007fffe123a957: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [20]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=700}
                                                ;*if_icmpge
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@113 (line 597)
                                                ;   {runtime_call}
  0x00007fffe123a95c: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B29: #	N448 &lt;- B17  Freq: 4.76834e-07

  0x00007fffe123a961: mov     $0xffffff65,%esi
  0x00007fffe123a966: mov     %r10d,%ebp
  0x00007fffe123a969: mov     %r9d,0x4(%rsp)
  0x00007fffe123a96e: vmovsd  %xmm0,0x10(%rsp)
  0x00007fffe123a974: mov     %rdx,0x18(%rsp)
  0x00007fffe123a979: nop
  0x00007fffe123a97a: nop
  0x00007fffe123a97b: callq   0x7fffe1107820    ; OopMap{[16]=Oop [24]=Oop off=736}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  0x00007fffe123a980: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B30: #	N448 &lt;- B18  Freq: 4.76834e-07

  0x00007fffe123a985: mov     $0xffffff65,%esi
  0x00007fffe123a98a: mov     %r10d,%ebp
  0x00007fffe123a98d: mov     %r9d,0x4(%rsp)
  0x00007fffe123a992: vmovsd  %xmm0,0x8(%rsp)
  0x00007fffe123a998: mov     %rdx,0x10(%rsp)
  0x00007fffe123a99d: nop
  0x00007fffe123a99e: nop
  0x00007fffe123a99f: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop off=772}
                                                ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  0x00007fffe123a9a4: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B31: #	N448 &lt;- B19  Freq: 4.76833e-07

  0x00007fffe123a9a9: mov     $0xffffff65,%esi
  0x00007fffe123a9ae: mov     %r10d,(%rsp)
  0x00007fffe123a9b2: mov     %r9d,0x8(%rsp)
  0x00007fffe123a9b7: vmovsd  %xmm0,0x10(%rsp)
  0x00007fffe123a9bd: mov     %rdx,0x18(%rsp)
  0x00007fffe123a9c2: nop
  0x00007fffe123a9c3: callq   0x7fffe1107820    ; OopMap{[16]=Oop [24]=Oop off=808}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@7 (line 77)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  0x00007fffe123a9c8: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B32: #	N448 &lt;- B20  Freq: 4.76833e-07

  0x00007fffe123a9cd: mov     $0xffffff65,%esi
  0x00007fffe123a9d2: mov     %r10d,(%rsp)
  0x00007fffe123a9d6: vmovsd  %xmm0,0x8(%rsp)
  0x00007fffe123a9dc: nop
  0x00007fffe123a9dd: nop
  0x00007fffe123a9de: nop
  0x00007fffe123a9df: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=836}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  0x00007fffe123a9e4: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B33: #	N448 &lt;- B21  Freq: 4.76833e-07

  0x00007fffe123a9e9: mov     $0xffffff65,%esi
  0x00007fffe123a9ee: mov     %r10d,(%rsp)
  0x00007fffe123a9f2: vmovsd  %xmm0,0x8(%rsp)
  0x00007fffe123a9f8: nop
  0x00007fffe123a9f9: nop
  0x00007fffe123a9fa: nop
  0x00007fffe123a9fb: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=864}
                                                ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  0x00007fffe123aa00: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B34: #	N448 &lt;- B22  Freq: 4.76833e-07

  0x00007fffe123aa05: mov     $0xffffff65,%esi
  0x00007fffe123aa0a: mov     %r10d,0x4(%rsp)
  0x00007fffe123aa0f: mov     %r11,0x8(%rsp)
  0x00007fffe123aa14: nop
  0x00007fffe123aa15: nop
  0x00007fffe123aa16: nop
  0x00007fffe123aa17: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=892}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  0x00007fffe123aa1c: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - sun.nio.cs.UTF_8::updatePositions@18 (line 78)
                                                ; - sun.nio.cs.UTF_8::access$200@4 (line 57)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@482 (line 636)
                                                ;   {runtime_call}
  ;; B35: #	N448 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe123aa21: mov     $0xfffffff6,%esi
  0x00007fffe123aa26: nop
  0x00007fffe123aa27: callq   0x7fffe1107820    ; OopMap{off=908}
                                                ;*invokevirtual array
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ;   {runtime_call}
  0x00007fffe123aa2c: callq   0x7ffff736b4ea    ;*invokevirtual array
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ;   {runtime_call}
  ;; B36: #	N448 &lt;- B4  Freq: 1.01328e-06

  0x00007fffe123aa31: mov     $0xfffffff6,%esi
  0x00007fffe123aa36: nop
  0x00007fffe123aa37: callq   0x7fffe1107820    ; OopMap{off=924}
                                                ;*invokevirtual array
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ;   {runtime_call}
  0x00007fffe123aa3c: callq   0x7ffff736b4ea    ;*invokevirtual array
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ;   {runtime_call}
  ;; B37: #	N448 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe123aa41: mov     $0xffffff65,%esi
  0x00007fffe123aa46: mov     %r14d,%ebp
  0x00007fffe123aa49: mov     %r13,(%rsp)
  0x00007fffe123aa4d: mov     %rcx,0x10(%rsp)
  0x00007fffe123aa52: mov     %rdx,0x18(%rsp)
  0x00007fffe123aa57: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [24]=Oop off=956}
                                                ;*ifnonnull
                                                ; - java.nio.CharBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ;   {runtime_call}
  0x00007fffe123aa5c: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.CharBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@1 (line 585)
                                                ;   {runtime_call}
  ;; B38: #	N448 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe123aa61: mov     $0xffffff65,%esi
  0x00007fffe123aa66: mov     %r14d,%ebp
  0x00007fffe123aa69: mov     %r9d,(%rsp)
  0x00007fffe123aa6d: mov     %r13,0x8(%rsp)
  0x00007fffe123aa72: mov     %rdx,0x10(%rsp)
  0x00007fffe123aa77: mov     %ecx,0x4(%rsp)
  0x00007fffe123aa7b: mov     %r11,0x20(%rsp)
  0x00007fffe123aa80: mov     %edi,0x28(%rsp)
  0x00007fffe123aa84: nop
  0x00007fffe123aa85: nop
  0x00007fffe123aa86: nop
  0x00007fffe123aa87: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [32]=Oop [40]=NarrowOop off=1004}
                                                ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ;   {runtime_call}
  0x00007fffe123aa8c: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeArrayLoop@28 (line 589)
                                                ;   {runtime_call}
  0x00007fffe123aa91: hlt
  0x00007fffe123aa92: hlt
  0x00007fffe123aa93: hlt
  0x00007fffe123aa94: hlt
  0x00007fffe123aa95: hlt
  0x00007fffe123aa96: hlt
  0x00007fffe123aa97: hlt
  0x00007fffe123aa98: hlt
  0x00007fffe123aa99: hlt
  0x00007fffe123aa9a: hlt
  0x00007fffe123aa9b: hlt
  0x00007fffe123aa9c: hlt
  0x00007fffe123aa9d: hlt
  0x00007fffe123aa9e: hlt
  0x00007fffe123aa9f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe123aaa0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe123aaa5: callq   0x7fffe123aaaa
  0x00007fffe123aaaa: subq    $0x5,(%rsp)
  0x00007fffe123aaaf: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123aab4: hlt
  0x00007fffe123aab5: hlt
  0x00007fffe123aab6: hlt
  0x00007fffe123aab7: hlt
<nmethod compile_id='75' compiler='C2' level='4' entry='0x00007fffe123a6a0' size='3664' address='0x00007fffe123a510' relocation_offset='304' insts_offset='400' stub_offset='1424' scopes_data_offset='1544' scopes_pcs_offset='2424' dependencies_offset='3608' nul_chk_table_offset='3624' method='sun/nio/cs/UTF_8$Encoder encodeArrayLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='489' count='14460' backedge_count='18192' iicount='14460' stamp='118.251'/>
<make_not_entrant thread='140736955627264' compile_id='36' compiler='C1' level='3' stamp='118.252'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe12389d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1238b20 Code size: 0x000000f8
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;
  # parm0:    rsi       = int
  #           [sp+0x30]  (sp of caller)
  ;; N1: #	B1 &lt;- B21 B22  Freq: 1

  ;; B1: #	B20 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1238b20: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1238b27: push    %rbp
  0x00007fffe1238b28: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.lang.Integer::stringSize@-1 (line 472)

  0x00007fffe1238b2c: movabs  $0xd73af3c0,%r10  ;   {oop([I)}
  0x00007fffe1238b36: mov     0x10(%r10),%r8d
  0x00007fffe1238b3a: cmp     %r8d,%esi
  0x00007fffe1238b3d: jle     0x7fffe1238bd7
  ;; B2: #	B19 B3 &lt;- B1  Freq: 0.333295

  0x00007fffe1238b43: mov     0x14(%r10),%r11d
  0x00007fffe1238b47: cmp     %r11d,%esi
  0x00007fffe1238b4a: jle     0x7fffe1238bd0
  ;; B3: #	B18 B4 &lt;- B2  Freq: 0.111085

  0x00007fffe1238b50: mov     0x18(%r10),%r11d
  0x00007fffe1238b54: cmp     %r11d,%esi
  0x00007fffe1238b57: jle     0x7fffe1238bc9
  ;; B4: #	B17 B5 &lt;- B3  Freq: 0.0370242

  0x00007fffe1238b59: mov     0x1c(%r10),%r11d
  0x00007fffe1238b5d: cmp     %r11d,%esi
  0x00007fffe1238b60: jle     0x7fffe1238bc2
  ;; B5: #	B16 B6 &lt;- B4  Freq: 0.01234

  0x00007fffe1238b62: mov     0x20(%r10),%r11d
  0x00007fffe1238b66: cmp     %r11d,%esi
  0x00007fffe1238b69: jle     0x7fffe1238bbb
  ;; B6: #	B15 B7 &lt;- B5  Freq: 0.00411284

  0x00007fffe1238b6b: mov     0x24(%r10),%r11d
  0x00007fffe1238b6f: cmp     %r11d,%esi
  0x00007fffe1238b72: jle     0x7fffe1238bb4
  ;; B7: #	B14 B8 &lt;- B6  Freq: 0.00137079

  0x00007fffe1238b74: mov     0x28(%r10),%r11d
  0x00007fffe1238b78: cmp     %r11d,%esi
  0x00007fffe1238b7b: jle     0x7fffe1238bad
  ;; B8: #	B13 B9 &lt;- B7  Freq: 0.000456876

  0x00007fffe1238b7d: mov     0x2c(%r10),%r11d
  0x00007fffe1238b81: cmp     %r11d,%esi
  0x00007fffe1238b84: jle     0x7fffe1238ba6
  ;; B9: #	B12 B10 &lt;- B8  Freq: 0.000152274

  0x00007fffe1238b86: mov     0x30(%r10),%r11d
  0x00007fffe1238b8a: cmp     %r11d,%esi
  0x00007fffe1238b8d: jle     0x7fffe1238b9f
  ;; B10: #	B22 B11 &lt;- B9  Freq: 5.07523e-05

  0x00007fffe1238b8f: mov     0x34(%r10),%r10d
  0x00007fffe1238b93: cmp     %r10d,%esi
  0x00007fffe1238b96: jnle    0x7fffe1238be8    ;*if_icmpgt
                                                ; - java.lang.Integer::stringSize@8 (line 473)

  ;; B11: #	B21 &lt;- B10  Freq: 5.07522e-05

  0x00007fffe1238b98: mov     $0xa,%eax
  0x00007fffe1238b9d: jmp     0x7fffe1238bdc
  ;; B12: #	B21 &lt;- B9  Freq: 0.000101522

  0x00007fffe1238b9f: mov     $0x9,%eax
  0x00007fffe1238ba4: jmp     0x7fffe1238bdc
  ;; B13: #	B21 &lt;- B8  Freq: 0.000304602

  0x00007fffe1238ba6: mov     $0x8,%eax
  0x00007fffe1238bab: jmp     0x7fffe1238bdc
  ;; B14: #	B21 &lt;- B7  Freq: 0.000913912

  0x00007fffe1238bad: mov     $0x7,%eax
  0x00007fffe1238bb2: jmp     0x7fffe1238bdc
  ;; B15: #	B21 &lt;- B6  Freq: 0.00274205

  0x00007fffe1238bb4: mov     $0x6,%eax
  0x00007fffe1238bb9: jmp     0x7fffe1238bdc
  ;; B16: #	B21 &lt;- B5  Freq: 0.00822711

  0x00007fffe1238bbb: mov     $0x5,%eax
  0x00007fffe1238bc0: jmp     0x7fffe1238bdc
  ;; B17: #	B21 &lt;- B4  Freq: 0.0246842

  0x00007fffe1238bc2: mov     $0x4,%eax
  0x00007fffe1238bc7: jmp     0x7fffe1238bdc
  ;; B18: #	B21 &lt;- B3  Freq: 0.0740612

  0x00007fffe1238bc9: mov     $0x3,%eax
  0x00007fffe1238bce: jmp     0x7fffe1238bdc
  ;; B19: #	B21 &lt;- B2  Freq: 0.222209

  0x00007fffe1238bd0: mov     $0x2,%eax
  0x00007fffe1238bd5: jmp     0x7fffe1238bdc
  ;; B20: #	B21 &lt;- B1  Freq: 0.666705

  0x00007fffe1238bd7: mov     $0x1,%eax         ;*iadd
                                                ; - java.lang.Integer::stringSize@13 (line 474)

  ;; B21: #	N1 &lt;- B19 B18 B14 B16 B12 B17 B13 B15 B11 B20  Freq: 1

  0x00007fffe1238bdc: add     $0x20,%rsp
  0x00007fffe1238be0: pop     %rbp
  0x00007fffe1238be1: test    %eax,0x16dc2419(%rip)  ;   {poll_return}
  0x00007fffe1238be7: retq
  ;; B22: #	N1 &lt;- B10  Freq: 5.14262e-11

  0x00007fffe1238be8: mov     %esi,(%rsp)
  0x00007fffe1238beb: mov     $0xffffffe4,%esi
  0x00007fffe1238bf0: nop
  0x00007fffe1238bf1: nop
  0x00007fffe1238bf2: nop
  0x00007fffe1238bf3: callq   0x7fffe1107820    ; OopMap{off=216}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ;   {runtime_call}
  0x00007fffe1238bf8: callq   0x7ffff736b4ea    ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ;   {runtime_call}
  0x00007fffe1238bfd: hlt
  0x00007fffe1238bfe: hlt
  0x00007fffe1238bff: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1238c00: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1238c05: callq   0x7fffe1238c0a
  0x00007fffe1238c0a: subq    $0x5,(%rsp)
  0x00007fffe1238c0f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1238c14: hlt
  0x00007fffe1238c15: hlt
  0x00007fffe1238c16: hlt
  0x00007fffe1238c17: hlt
<nmethod compile_id='78' compiler='C2' level='4' entry='0x00007fffe1238b20' size='768' address='0x00007fffe12389d0' relocation_offset='304' insts_offset='336' stub_offset='560' scopes_data_offset='600' scopes_pcs_offset='648' dependencies_offset='760' oops_offset='584' method='java/lang/Integer stringSize (I)I' bytes='21' count='7289' backedge_count='3644' iicount='7289' stamp='118.264'/>
<make_not_entrant thread='140736956679936' compile_id='68' compiler='C1' level='3' stamp='118.264'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1244e90:
Code:
Argument 0 is unknown.RIP: 0x7fffe1245000 Code size: 0x00000198
[Entry Point]
[Constants]
  # {method} {0x00007ffff4d56d08} &apos;isUnderflow&apos; &apos;()Z&apos; in &apos;java/nio/charset/CoderResult&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B4 [0, 0]

  0x00007fffe1245000: mov     0x8(%rsi),%r10d
  0x00007fffe1245004: shl     $0x3,%r10
  0x00007fffe1245008: cmp     %rax,%r10
  0x00007fffe124500b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1245011: nop
  0x00007fffe1245012: nop
  0x00007fffe1245013: nop
  0x00007fffe1245014: nop
  0x00007fffe1245015: nop
  0x00007fffe1245016: nop
  0x00007fffe1245017: nop
  0x00007fffe1245018: nop
  0x00007fffe1245019: nop
  0x00007fffe124501a: nop
  0x00007fffe124501b: nop
  0x00007fffe124501c: nop
  0x00007fffe124501d: nop
  0x00007fffe124501e: nop
  0x00007fffe124501f: nop
[Verified Entry Point]
  0x00007fffe1245020: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1245027: push    %rbp
  0x00007fffe1245028: sub     $0x30,%rsp
  0x00007fffe124502c: movabs  $0x7ffff4d58ac0,%rax
  0x00007fffe1245036: mov     0x8(%rax),%edi
  0x00007fffe1245039: add     $0x8,%edi
  0x00007fffe124503c: mov     %edi,0x8(%rax)
  0x00007fffe124503f: movabs  $0x7ffff4d56d08,%rax  ;   {metadata({method} {0x00007ffff4d56d08} &apos;isUnderflow&apos; &apos;()Z&apos; in &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe1245049: and     $0x3ff8,%edi
  0x00007fffe124504f: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa8060a10]
  0x00007fffe1245052: je      0x7fffe124507d    ;*aload_0
                                                ; - java.nio.charset.CoderResult::isUnderflow@0 (line 120)

  ;;  block B5 [0, 0]

  ;;  block B0 [0, 12]

  0x00007fffe1245058: mov     0xc(%rsi),%eax    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isUnderflow@1 (line 120)

  0x00007fffe124505b: cmp     $0x0,%eax
  0x00007fffe124505e: mov     $0x0,%eax
  0x00007fffe1245063: jne     0x7fffe124506e
  0x00007fffe1245069: mov     $0x1,%eax
  0x00007fffe124506e: and     $0x1,%eax
  0x00007fffe1245071: add     $0x30,%rsp
  0x00007fffe1245075: pop     %rbp
  0x00007fffe1245076: test    %eax,0x16db6084(%rip)  ;   {poll_return}
  0x00007fffe124507c: retq
  ;; CounterOverflowStub slow case
  0x00007fffe124507d: mov     %rax,0x8(%rsp)
  0x00007fffe1245082: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124508a: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=143}
                                                ;*synchronization entry
                                                ; - java.nio.charset.CoderResult::isUnderflow@-1 (line 120)
                                                ;   {runtime_call}
  0x00007fffe124508f: jmp     0x7fffe1245058
  0x00007fffe1245091: nop
  0x00007fffe1245092: nop
  ;; Unwind handler
  0x00007fffe1245093: mov     0x348(%r15),%rax
  0x00007fffe124509a: movabs  $0x0,%r10
  0x00007fffe12450a4: mov     %r10,0x348(%r15)
  0x00007fffe12450ab: movabs  $0x0,%r10
  0x00007fffe12450b5: mov     %r10,0x350(%r15)
  0x00007fffe12450bc: add     $0x30,%rsp
  0x00007fffe12450c0: pop     %rbp
  0x00007fffe12450c1: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe12450c6: hlt
  0x00007fffe12450c7: hlt
  0x00007fffe12450c8: hlt
  0x00007fffe12450c9: hlt
  0x00007fffe12450ca: hlt
  0x00007fffe12450cb: hlt
  0x00007fffe12450cc: hlt
  0x00007fffe12450cd: hlt
  0x00007fffe12450ce: hlt
  0x00007fffe12450cf: hlt
  0x00007fffe12450d0: hlt
  0x00007fffe12450d1: hlt
  0x00007fffe12450d2: hlt
  0x00007fffe12450d3: hlt
  0x00007fffe12450d4: hlt
  0x00007fffe12450d5: hlt
  0x00007fffe12450d6: hlt
  0x00007fffe12450d7: hlt
  0x00007fffe12450d8: hlt
  0x00007fffe12450d9: hlt
  0x00007fffe12450da: hlt
  0x00007fffe12450db: hlt
  0x00007fffe12450dc: hlt
  0x00007fffe12450dd: hlt
  0x00007fffe12450de: hlt
  0x00007fffe12450df: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe12450e0: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe12450ea: movabs  $0xdead,%rcx
  0x00007fffe12450f4: movabs  $0xdead,%rsi
  0x00007fffe12450fe: movabs  $0xdead,%rdi
  0x00007fffe1245108: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124510d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1245112: sub     $0x80,%rsp
  0x00007fffe1245119: mov     %rax,0x78(%rsp)
  0x00007fffe124511e: mov     %rcx,0x70(%rsp)
  0x00007fffe1245123: mov     %rdx,0x68(%rsp)
  0x00007fffe1245128: mov     %rbx,0x60(%rsp)
  0x00007fffe124512d: mov     %rbp,0x50(%rsp)
  0x00007fffe1245132: mov     %rsi,0x48(%rsp)
  0x00007fffe1245137: mov     %rdi,0x40(%rsp)
  0x00007fffe124513c: mov     %r8,0x38(%rsp)
  0x00007fffe1245141: mov     %r9,0x30(%rsp)
  0x00007fffe1245146: mov     %r10,0x28(%rsp)
  0x00007fffe124514b: mov     %r11,0x20(%rsp)
  0x00007fffe1245150: mov     %r12,0x18(%rsp)
  0x00007fffe1245155: mov     %r13,0x10(%rsp)
  0x00007fffe124515a: mov     %r14,0x8(%rsp)
  0x00007fffe124515f: mov     %r15,(%rsp)
  0x00007fffe1245163: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124516d: movabs  $0x7fffe124510d,%rsi  ;   {internal_word}
  0x00007fffe1245177: mov     %rsp,%rdx
  0x00007fffe124517a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124517e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1245183: hlt
[Deopt Handler Code]
  0x00007fffe1245184: movabs  $0x7fffe1245184,%r10  ;   {section_word}
  0x00007fffe124518e: push    %r10
  0x00007fffe1245190: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1245195: hlt
  0x00007fffe1245196: hlt
  0x00007fffe1245197: hlt
<nmethod compile_id='16' compiler='C1' level='2' entry='0x00007fffe1245000' size='896' address='0x00007fffe1244e90' relocation_offset='304' insts_offset='368' stub_offset='592' scopes_data_offset='784' scopes_pcs_offset='808' dependencies_offset='888' method='java/nio/charset/CoderResult isUnderflow ()Z' bytes='13' count='30032' iicount='30032' stamp='118.274'/>
Decoding compiled method 0x00007fffe1244910:
Code:
Argument 0 is unknown.RIP: 0x7fffe1244aa0 Code size: 0x00000290
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c234e0} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/io/PrintStream&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B3 [0, 0]

  0x00007fffe1244aa0: mov     0x8(%rsi),%r10d
  0x00007fffe1244aa4: shl     $0x3,%r10
  0x00007fffe1244aa8: cmp     %rax,%r10
  0x00007fffe1244aab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1244ab1: nop
  0x00007fffe1244ab2: nop
  0x00007fffe1244ab3: nop
  0x00007fffe1244ab4: nop
  0x00007fffe1244ab5: nop
  0x00007fffe1244ab6: nop
  0x00007fffe1244ab7: nop
  0x00007fffe1244ab8: nop
  0x00007fffe1244ab9: nop
  0x00007fffe1244aba: nop
  0x00007fffe1244abb: nop
  0x00007fffe1244abc: nop
  0x00007fffe1244abd: nop
  0x00007fffe1244abe: nop
  0x00007fffe1244abf: nop
[Verified Entry Point]
  0x00007fffe1244ac0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1244ac7: push    %rbp
  0x00007fffe1244ac8: sub     $0x30,%rsp
  0x00007fffe1244acc: movabs  $0x7ffff4d70fd8,%rdx
  0x00007fffe1244ad6: mov     0x8(%rdx),%eax
  0x00007fffe1244ad9: add     $0x8,%eax
  0x00007fffe1244adc: mov     %eax,0x8(%rdx)
  0x00007fffe1244adf: movabs  $0x7ffff4c234e0,%rdx  ;   {metadata({method} {0x00007ffff4c234e0} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1244ae9: and     $0x3ff8,%eax
  0x00007fffe1244aef: cmp     $0x0,%eax
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa81311a0]
  0x00007fffe1244af2: je      0x7fffe1244bd6    ;*aload_0
                                                ; - java.io.PrintStream::ensureOpen@0 (line 324)

  ;;  block B4 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe1244af8: mov     0xc(%rsi),%edx
  0x00007fffe1244afb: push    %r10
  0x00007fffe1244afd: cmp     0x16b150dc(%rip),%r12  ;   {external_word}
  0x00007fffe1244b04: je      0x7fffe1244b81
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1244b0a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1244b0f: sub     $0x80,%rsp
  0x00007fffe1244b16: mov     %rax,0x78(%rsp)
  0x00007fffe1244b1b: mov     %rcx,0x70(%rsp)
  0x00007fffe1244b20: mov     %rdx,0x68(%rsp)
  0x00007fffe1244b25: mov     %rbx,0x60(%rsp)
  0x00007fffe1244b2a: mov     %rbp,0x50(%rsp)
  0x00007fffe1244b2f: mov     %rsi,0x48(%rsp)
  0x00007fffe1244b34: mov     %rdi,0x40(%rsp)
  0x00007fffe1244b39: mov     %r8,0x38(%rsp)
  0x00007fffe1244b3e: mov     %r9,0x30(%rsp)
  0x00007fffe1244b43: mov     %r10,0x28(%rsp)
  0x00007fffe1244b48: mov     %r11,0x20(%rsp)
  0x00007fffe1244b4d: mov     %r12,0x18(%rsp)
  0x00007fffe1244b52: mov     %r13,0x10(%rsp)
  0x00007fffe1244b57: mov     %r14,0x8(%rsp)
  0x00007fffe1244b5c: mov     %r15,(%rsp)
  0x00007fffe1244b60: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1244b6a: movabs  $0x7fffe1244b0a,%rsi  ;   {internal_word}
  0x00007fffe1244b74: mov     %rsp,%rdx
  0x00007fffe1244b77: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1244b7b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1244b80: hlt
  0x00007fffe1244b81: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)

  0x00007fffe1244b83: cmp     $0x0,%rdx
  ;;   36 branch [EQ] [B1] 
  0x00007fffe1244b87: je      0x7fffe1244b99    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)

  ;;  block B2 [17, 17]

  0x00007fffe1244b8d: add     $0x30,%rsp
  0x00007fffe1244b91: pop     %rbp
  0x00007fffe1244b92: test    %eax,0x16db6568(%rip)  ;   {poll_return}
  0x00007fffe1244b98: retq                      ;*return
                                                ; - java.io.PrintStream::ensureOpen@17 (line 326)

  ;;  block B1 [7, 16]

  ;;   46 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1244b99: nop
  0x00007fffe1244b9a: nop
  0x00007fffe1244b9b: nop
  0x00007fffe1244b9c: nop
  0x00007fffe1244b9d: nop
  0x00007fffe1244b9e: nop
  0x00007fffe1244b9f: nop
  0x00007fffe1244ba0: jmpq    0x7fffe1244bfc    ;   {no_reloc}
  0x00007fffe1244ba5: add     %al,(%rax)
  0x00007fffe1244ba7: add     %al,(%rax)
  0x00007fffe1244ba9: add     %ch,%cl
  0x00007fffe1244bab: push    %rdi
  0x00007fffe1244bac: add     %al,(%rax)
  0x00007fffe1244bae: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe1244bb1: pop     %rax
  0x00007fffe1244bb2: xlat    (%rbx)
  0x00007fffe1244bb3: xlat    (%rbx)
  0x00007fffe1244bb5: add     %al,(%rax)
  0x00007fffe1244bb7: add     %al,(%rax)
  0x00007fffe1244bb9: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)

  0x00007fffe1244bbc: mov     %rax,0x20(%rsp)
  0x00007fffe1244bc1: nop
  0x00007fffe1244bc2: nop
  0x00007fffe1244bc3: nop
  0x00007fffe1244bc4: nop
  0x00007fffe1244bc5: nop
  0x00007fffe1244bc6: nop
  0x00007fffe1244bc7: callq   0x7fffe1105e80    ; OopMap{[32]=Oop off=300}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ;   {optimized virtual_call}
  0x00007fffe1244bcc: mov     0x20(%rsp),%rax
  0x00007fffe1244bd1: jmpq    0x7fffe1244c3b
  ;; CounterOverflowStub slow case
  0x00007fffe1244bd6: mov     %rdx,0x8(%rsp)
  0x00007fffe1244bdb: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1244be3: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=328}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::ensureOpen@-1 (line 324)
                                                ;   {runtime_call}
  0x00007fffe1244be8: jmpq    0x7fffe1244af8
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1244bed: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1244bf7: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1244bfc: callq   0x7fffe11fc960    ; OopMap{off=353}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ;   {runtime_call}
  0x00007fffe1244c01: jmp     0x7fffe1244ba0
  0x00007fffe1244c03: nop
  0x00007fffe1244c04: nop
  0x00007fffe1244c05: nop
  ;; NewInstanceStub slow case
  0x00007fffe1244c06: mov     %rdx,%rdx
  0x00007fffe1244c09: callq   0x7fffe11668a0    ; OopMap{off=366}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ;   {runtime_call}
  0x00007fffe1244c0e: jmp     0x7fffe1244baf
  0x00007fffe1244c10: nop
  0x00007fffe1244c11: nop
  ;; Unwind handler
  0x00007fffe1244c12: mov     0x348(%r15),%rax
  0x00007fffe1244c19: movabs  $0x0,%r10
  0x00007fffe1244c23: mov     %r10,0x348(%r15)
  0x00007fffe1244c2a: movabs  $0x0,%r10
  0x00007fffe1244c34: mov     %r10,0x350(%r15)
  0x00007fffe1244c3b: add     $0x30,%rsp
  0x00007fffe1244c3f: pop     %rbp
  0x00007fffe1244c40: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1244c45: hlt
  0x00007fffe1244c46: hlt
  0x00007fffe1244c47: hlt
  0x00007fffe1244c48: hlt
  0x00007fffe1244c49: hlt
  0x00007fffe1244c4a: hlt
  0x00007fffe1244c4b: hlt
  0x00007fffe1244c4c: hlt
  0x00007fffe1244c4d: hlt
  0x00007fffe1244c4e: hlt
  0x00007fffe1244c4f: hlt
  0x00007fffe1244c50: hlt
  0x00007fffe1244c51: hlt
  0x00007fffe1244c52: hlt
  0x00007fffe1244c53: hlt
  0x00007fffe1244c54: hlt
  0x00007fffe1244c55: hlt
  0x00007fffe1244c56: hlt
  0x00007fffe1244c57: hlt
  0x00007fffe1244c58: hlt
  0x00007fffe1244c59: hlt
  0x00007fffe1244c5a: hlt
  0x00007fffe1244c5b: hlt
  0x00007fffe1244c5c: hlt
  0x00007fffe1244c5d: hlt
  0x00007fffe1244c5e: hlt
  0x00007fffe1244c5f: hlt
[Stub Code]
  0x00007fffe1244c60: nop                       ;   {no_reloc}
  0x00007fffe1244c61: nop
  0x00007fffe1244c62: nop
  0x00007fffe1244c63: nop
  0x00007fffe1244c64: nop
  0x00007fffe1244c65: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1244c6f: jmpq    0x7fffe1244c6f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1244c74: movabs  $0xdead,%rbx
  0x00007fffe1244c7e: movabs  $0xdead,%rcx
  0x00007fffe1244c88: movabs  $0xdead,%rsi
  0x00007fffe1244c92: movabs  $0xdead,%rdi
  0x00007fffe1244c9c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1244ca1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1244ca6: sub     $0x80,%rsp
  0x00007fffe1244cad: mov     %rax,0x78(%rsp)
  0x00007fffe1244cb2: mov     %rcx,0x70(%rsp)
  0x00007fffe1244cb7: mov     %rdx,0x68(%rsp)
  0x00007fffe1244cbc: mov     %rbx,0x60(%rsp)
  0x00007fffe1244cc1: mov     %rbp,0x50(%rsp)
  0x00007fffe1244cc6: mov     %rsi,0x48(%rsp)
  0x00007fffe1244ccb: mov     %rdi,0x40(%rsp)
  0x00007fffe1244cd0: mov     %r8,0x38(%rsp)
  0x00007fffe1244cd5: mov     %r9,0x30(%rsp)
  0x00007fffe1244cda: mov     %r10,0x28(%rsp)
  0x00007fffe1244cdf: mov     %r11,0x20(%rsp)
  0x00007fffe1244ce4: mov     %r12,0x18(%rsp)
  0x00007fffe1244ce9: mov     %r13,0x10(%rsp)
  0x00007fffe1244cee: mov     %r14,0x8(%rsp)
  0x00007fffe1244cf3: mov     %r15,(%rsp)
  0x00007fffe1244cf7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1244d01: movabs  $0x7fffe1244ca1,%rsi  ;   {internal_word}
  0x00007fffe1244d0b: mov     %rsp,%rdx
  0x00007fffe1244d0e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1244d12: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1244d17: hlt
[Deopt Handler Code]
  0x00007fffe1244d18: movabs  $0x7fffe1244d18,%r10  ;   {section_word}
  0x00007fffe1244d22: push    %r10
  0x00007fffe1244d24: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1244d29: hlt
  0x00007fffe1244d2a: hlt
  0x00007fffe1244d2b: hlt
  0x00007fffe1244d2c: hlt
  0x00007fffe1244d2d: hlt
  0x00007fffe1244d2e: hlt
  0x00007fffe1244d2f: hlt
<nmethod compile_id='19' compiler='C1' level='2' entry='0x00007fffe1244aa0' size='1336' address='0x00007fffe1244910' relocation_offset='304' insts_offset='400' stub_offset='848' scopes_data_offset='1064' scopes_pcs_offset='1136' dependencies_offset='1328' method='java/io/PrintStream ensureOpen ()V' bytes='18' count='30716' iicount='30716' stamp='118.291'/>
<writer thread='140737327351552'/>
<task_queued compile_id='80' method='java/lang/Integer getChars (II[C)V' bytes='131' count='7680' backedge_count='4831' iicount='7680' stamp='118.291' comment='tiered' hot_count='7680'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe12440d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe12442a0 Code size: 0x000004e0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c27410} &apos;flush&apos; &apos;()V&apos; in &apos;java/io/BufferedOutputStream&apos;
  #           [sp+0x70]  (sp of caller)
  ;;  block B5 [0, 0]

  0x00007fffe12442a0: mov     0x8(%rsi),%r10d
  0x00007fffe12442a4: shl     $0x3,%r10
  0x00007fffe12442a8: cmp     %rax,%r10
  0x00007fffe12442ab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12442b1: nop
  0x00007fffe12442b2: nop
  0x00007fffe12442b3: nop
  0x00007fffe12442b4: nop
  0x00007fffe12442b5: nop
  0x00007fffe12442b6: nop
  0x00007fffe12442b7: nop
  0x00007fffe12442b8: nop
  0x00007fffe12442b9: nop
  0x00007fffe12442ba: nop
  0x00007fffe12442bb: nop
  0x00007fffe12442bc: nop
  0x00007fffe12442bd: nop
  0x00007fffe12442be: nop
  0x00007fffe12442bf: nop
[Verified Entry Point]
  0x00007fffe12442c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12442c7: push    %rbp
  0x00007fffe12442c8: sub     $0x60,%rsp
  0x00007fffe12442cc: lea     0x40(%rsp),%rdx
  0x00007fffe12442d1: mov     %rsi,0x8(%rdx)
  0x00007fffe12442d5: mov     (%rsi),%rax
  0x00007fffe12442d8: mov     %rax,%rcx
  0x00007fffe12442db: and     $0x7,%rcx
  0x00007fffe12442df: cmp     $0x5,%rcx
  0x00007fffe12442e3: jne     0x7fffe124436a
  0x00007fffe12442e9: mov     0x8(%rsi),%ecx
  0x00007fffe12442ec: shl     $0x3,%rcx
  0x00007fffe12442f0: mov     0xb0(%rcx),%rcx
  0x00007fffe12442f7: or      %r15,%rcx
  0x00007fffe12442fa: xor     %rax,%rcx
  0x00007fffe12442fd: and     $0xffffffffffffff87,%rcx
  0x00007fffe1244301: je      0x7fffe1244392
  0x00007fffe1244307: test    $0x7,%rcx
  0x00007fffe124430e: jne     0x7fffe1244357
  0x00007fffe1244310: test    $0x300,%rcx
  0x00007fffe1244317: jne     0x7fffe1244336
  0x00007fffe1244319: and     $0x37f,%rax
  0x00007fffe1244320: mov     %rax,%rcx
  0x00007fffe1244323: or      %r15,%rcx
  0x00007fffe1244326: lock cmpxchg %rcx,(%rsi)
  0x00007fffe124432b: jne     0x7fffe12445e9
  0x00007fffe1244331: jmpq    0x7fffe1244392
  0x00007fffe1244336: mov     0x8(%rsi),%ecx
  0x00007fffe1244339: shl     $0x3,%rcx
  0x00007fffe124433d: mov     0xb0(%rcx),%rcx
  0x00007fffe1244344: or      %r15,%rcx
  0x00007fffe1244347: lock cmpxchg %rcx,(%rsi)
  0x00007fffe124434c: jne     0x7fffe12445e9
  0x00007fffe1244352: jmpq    0x7fffe1244392
  0x00007fffe1244357: mov     0x8(%rsi),%ecx
  0x00007fffe124435a: shl     $0x3,%rcx
  0x00007fffe124435e: mov     0xb0(%rcx),%rcx
  0x00007fffe1244365: lock cmpxchg %rcx,(%rsi)
  0x00007fffe124436a: mov     (%rsi),%rax
  0x00007fffe124436d: or      $0x1,%rax
  0x00007fffe1244371: mov     %rax,(%rdx)
  0x00007fffe1244374: lock cmpxchg %rdx,(%rsi)
  0x00007fffe1244379: je      0x7fffe1244392
  0x00007fffe124437f: sub     %rsp,%rax
  0x00007fffe1244382: and     $0xfffffffffffff007,%rax
  0x00007fffe1244389: mov     %rax,(%rdx)
  0x00007fffe124438c: jne     0x7fffe12445e9
  0x00007fffe1244392: movabs  $0x7ffff4d71238,%rdx
  0x00007fffe124439c: mov     0x8(%rdx),%ecx
  0x00007fffe124439f: add     $0x8,%ecx
  0x00007fffe12443a2: mov     %ecx,0x8(%rdx)
  0x00007fffe12443a5: movabs  $0x7ffff4c27410,%rdx  ;   {metadata({method} {0x00007ffff4c27410} &apos;flush&apos; &apos;()V&apos; in &apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe12443af: and     $0x3ff8,%ecx
  0x00007fffe12443b5: cmp     $0x0,%ecx
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffb008e9f0]
  0x00007fffe12443b8: je      0x7fffe12445fc    ;*aload_0
                                                ; - java.io.BufferedOutputStream::flush@0 (line 140)

  ;;  block B6 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe12443be: mov     0x10(%rsi),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe12443c2: cmp     $0x0,%r8d
  ;;   40 branch [LE] [B4] 
  0x00007fffe12443c6: jle     0x7fffe1244510    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  ;;  block B3 [7, 28]

  0x00007fffe12443cc: mov     0xc(%rsi),%edi
  0x00007fffe12443cf: push    %r10
  0x00007fffe12443d1: cmp     0x16b15808(%rip),%r12  ;   {external_word}
  0x00007fffe12443d8: je      0x7fffe1244455
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12443de: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12443e3: sub     $0x80,%rsp
  0x00007fffe12443ea: mov     %rax,0x78(%rsp)
  0x00007fffe12443ef: mov     %rcx,0x70(%rsp)
  0x00007fffe12443f4: mov     %rdx,0x68(%rsp)
  0x00007fffe12443f9: mov     %rbx,0x60(%rsp)
  0x00007fffe12443fe: mov     %rbp,0x50(%rsp)
  0x00007fffe1244403: mov     %rsi,0x48(%rsp)
  0x00007fffe1244408: mov     %rdi,0x40(%rsp)
  0x00007fffe124440d: mov     %r8,0x38(%rsp)
  0x00007fffe1244412: mov     %r9,0x30(%rsp)
  0x00007fffe1244417: mov     %r10,0x28(%rsp)
  0x00007fffe124441c: mov     %r11,0x20(%rsp)
  0x00007fffe1244421: mov     %r12,0x18(%rsp)
  0x00007fffe1244426: mov     %r13,0x10(%rsp)
  0x00007fffe124442b: mov     %r14,0x8(%rsp)
  0x00007fffe1244430: mov     %r15,(%rsp)
  0x00007fffe1244434: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124443e: movabs  $0x7fffe12443de,%rsi  ;   {internal_word}
  0x00007fffe1244448: mov     %rsp,%rdx
  0x00007fffe124444b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124444f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1244454: hlt
  0x00007fffe1244455: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe1244457: mov     0x14(%rsi),%edx
  0x00007fffe124445a: push    %r10
  0x00007fffe124445c: cmp     0x16b1577d(%rip),%r12  ;   {external_word}
  0x00007fffe1244463: je      0x7fffe12444e0
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1244469: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124446e: sub     $0x80,%rsp
  0x00007fffe1244475: mov     %rax,0x78(%rsp)
  0x00007fffe124447a: mov     %rcx,0x70(%rsp)
  0x00007fffe124447f: mov     %rdx,0x68(%rsp)
  0x00007fffe1244484: mov     %rbx,0x60(%rsp)
  0x00007fffe1244489: mov     %rbp,0x50(%rsp)
  0x00007fffe124448e: mov     %rsi,0x48(%rsp)
  0x00007fffe1244493: mov     %rdi,0x40(%rsp)
  0x00007fffe1244498: mov     %r8,0x38(%rsp)
  0x00007fffe124449d: mov     %r9,0x30(%rsp)
  0x00007fffe12444a2: mov     %r10,0x28(%rsp)
  0x00007fffe12444a7: mov     %r11,0x20(%rsp)
  0x00007fffe12444ac: mov     %r12,0x18(%rsp)
  0x00007fffe12444b1: mov     %r13,0x10(%rsp)
  0x00007fffe12444b6: mov     %r14,0x8(%rsp)
  0x00007fffe12444bb: mov     %r15,(%rsp)
  0x00007fffe12444bf: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12444c9: movabs  $0x7fffe1244469,%rsi  ;   {internal_word}
  0x00007fffe12444d3: mov     %rsp,%rdx
  0x00007fffe12444d6: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12444da: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12444df: hlt
  0x00007fffe12444e0: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe12444e2: mov     $0x0,%ecx
  0x00007fffe12444e7: mov     %rsi,0x38(%rsp)
  0x00007fffe12444ec: mov     %rdi,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe12444ef: nop
  0x00007fffe12444f0: nop
  0x00007fffe12444f1: nop
  0x00007fffe12444f2: nop
  0x00007fffe12444f3: nop
  0x00007fffe12444f4: nop
  0x00007fffe12444f5: movabs  $0xffffffffffffffff,%rax
  0x00007fffe12444ff: callq   0x7fffe11060c0    ; OopMap{[56]=Oop [72]=Oop off=612}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ;   {virtual_call}
  0x00007fffe1244504: mov     0x38(%rsp),%rsi
  0x00007fffe1244509: movl    $0x0,0x10(%rsi)   ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  ;;  block B4 [28, 11]

  0x00007fffe1244510: mov     0xc(%rsi),%esi
  0x00007fffe1244513: push    %r10
  0x00007fffe1244515: cmp     0x16b156c4(%rip),%r12  ;   {external_word}
  0x00007fffe124451c: je      0x7fffe1244599
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1244522: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1244527: sub     $0x80,%rsp
  0x00007fffe124452e: mov     %rax,0x78(%rsp)
  0x00007fffe1244533: mov     %rcx,0x70(%rsp)
  0x00007fffe1244538: mov     %rdx,0x68(%rsp)
  0x00007fffe124453d: mov     %rbx,0x60(%rsp)
  0x00007fffe1244542: mov     %rbp,0x50(%rsp)
  0x00007fffe1244547: mov     %rsi,0x48(%rsp)
  0x00007fffe124454c: mov     %rdi,0x40(%rsp)
  0x00007fffe1244551: mov     %r8,0x38(%rsp)
  0x00007fffe1244556: mov     %r9,0x30(%rsp)
  0x00007fffe124455b: mov     %r10,0x28(%rsp)
  0x00007fffe1244560: mov     %r11,0x20(%rsp)
  0x00007fffe1244565: mov     %r12,0x18(%rsp)
  0x00007fffe124456a: mov     %r13,0x10(%rsp)
  0x00007fffe124456f: mov     %r14,0x8(%rsp)
  0x00007fffe1244574: mov     %r15,(%rsp)
  0x00007fffe1244578: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1244582: movabs  $0x7fffe1244522,%rsi  ;   {internal_word}
  0x00007fffe124458c: mov     %rsp,%rdx
  0x00007fffe124458f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1244593: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1244598: hlt
  0x00007fffe1244599: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)

  0x00007fffe124459b: nop
  0x00007fffe124459c: nop
  0x00007fffe124459d: movabs  $0xffffffffffffffff,%rax
  0x00007fffe12445a7: callq   0x7fffe11060c0    ; OopMap{[72]=Oop off=780}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ;   {virtual_call}
  0x00007fffe12445ac: lea     0x40(%rsp),%rax
  0x00007fffe12445b1: mov     0x8(%rax),%rdi
  0x00007fffe12445b5: mov     (%rdi),%rsi
  0x00007fffe12445b8: and     $0x7,%rsi
  0x00007fffe12445bc: cmp     $0x5,%rsi
  0x00007fffe12445c0: je      0x7fffe12445dd
  0x00007fffe12445c6: mov     (%rax),%rsi
  0x00007fffe12445c9: test    %rsi,%rsi
  0x00007fffe12445cc: je      0x7fffe12445dd
  0x00007fffe12445d2: lock cmpxchg %rsi,(%rdi)
  0x00007fffe12445d7: jne     0x7fffe1244613    ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)

  0x00007fffe12445dd: add     $0x60,%rsp
  0x00007fffe12445e1: pop     %rbp
  0x00007fffe12445e2: test    %eax,0x16db6b18(%rip)  ;   {poll_return}
  0x00007fffe12445e8: retq
  ;; MonitorEnterStub slow case
  0x00007fffe12445e9: mov     %rsi,0x8(%rsp)
  0x00007fffe12445ee: mov     %rdx,(%rsp)
  0x00007fffe12445f2: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [72]=Oop off=855}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ;   {runtime_call}
  0x00007fffe12445f7: jmpq    0x7fffe1244392
  ;; CounterOverflowStub slow case
  0x00007fffe12445fc: mov     %rdx,0x8(%rsp)
  0x00007fffe1244601: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1244609: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [72]=Oop off=878}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ;   {runtime_call}
  0x00007fffe124460e: jmpq    0x7fffe12443be
  ;; MonitorExitStub slow case
  0x00007fffe1244613: lea     0x40(%rsp),%rax
  0x00007fffe1244618: mov     %rax,(%rsp)
  0x00007fffe124461c: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1244621: jmp     0x7fffe12445dd
  0x00007fffe1244623: nop
  0x00007fffe1244624: nop
  ;; Unwind handler
  0x00007fffe1244625: mov     0x348(%r15),%rax
  0x00007fffe124462c: movabs  $0x0,%r10
  0x00007fffe1244636: mov     %r10,0x348(%r15)
  0x00007fffe124463d: movabs  $0x0,%r10
  0x00007fffe1244647: mov     %r10,0x350(%r15)
  0x00007fffe124464e: mov     %rax,%rbx
  0x00007fffe1244651: lea     0x40(%rsp),%rax
  0x00007fffe1244656: mov     0x8(%rax),%rsi
  0x00007fffe124465a: mov     (%rsi),%rdi
  0x00007fffe124465d: and     $0x7,%rdi
  0x00007fffe1244661: cmp     $0x5,%rdi
  0x00007fffe1244665: je      0x7fffe1244682
  0x00007fffe124466b: mov     (%rax),%rdi
  0x00007fffe124466e: test    %rdi,%rdi
  0x00007fffe1244671: je      0x7fffe1244682
  0x00007fffe1244677: lock cmpxchg %rdi,(%rsi)
  0x00007fffe124467c: jne     0x7fffe124468f
  0x00007fffe1244682: mov     %rbx,%rax
  0x00007fffe1244685: add     $0x60,%rsp
  0x00007fffe1244689: pop     %rbp
  0x00007fffe124468a: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124468f: lea     0x40(%rsp),%rax
  0x00007fffe1244694: mov     %rax,(%rsp)
  0x00007fffe1244698: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124469d: jmp     0x7fffe1244682
  0x00007fffe124469f: hlt
[Stub Code]
  0x00007fffe12446a0: nop                       ;   {no_reloc}
  0x00007fffe12446a1: nop
  0x00007fffe12446a2: nop
  0x00007fffe12446a3: nop
  0x00007fffe12446a4: nop
  0x00007fffe12446a5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12446af: jmpq    0x7fffe12446af    ;   {runtime_call}
  0x00007fffe12446b4: nop
  0x00007fffe12446b5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12446bf: jmpq    0x7fffe12446bf    ;   {runtime_call}
[Exception Handler]
  0x00007fffe12446c4: movabs  $0xdead,%rbx
  0x00007fffe12446ce: movabs  $0xdead,%rcx
  0x00007fffe12446d8: movabs  $0xdead,%rsi
  0x00007fffe12446e2: movabs  $0xdead,%rdi
  0x00007fffe12446ec: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12446f1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12446f6: sub     $0x80,%rsp
  0x00007fffe12446fd: mov     %rax,0x78(%rsp)
  0x00007fffe1244702: mov     %rcx,0x70(%rsp)
  0x00007fffe1244707: mov     %rdx,0x68(%rsp)
  0x00007fffe124470c: mov     %rbx,0x60(%rsp)
  0x00007fffe1244711: mov     %rbp,0x50(%rsp)
  0x00007fffe1244716: mov     %rsi,0x48(%rsp)
  0x00007fffe124471b: mov     %rdi,0x40(%rsp)
  0x00007fffe1244720: mov     %r8,0x38(%rsp)
  0x00007fffe1244725: mov     %r9,0x30(%rsp)
  0x00007fffe124472a: mov     %r10,0x28(%rsp)
  0x00007fffe124472f: mov     %r11,0x20(%rsp)
  0x00007fffe1244734: mov     %r12,0x18(%rsp)
  0x00007fffe1244739: mov     %r13,0x10(%rsp)
  0x00007fffe124473e: mov     %r14,0x8(%rsp)
  0x00007fffe1244743: mov     %r15,(%rsp)
  0x00007fffe1244747: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1244751: movabs  $0x7fffe12446f1,%rsi  ;   {internal_word}
  0x00007fffe124475b: mov     %rsp,%rdx
  0x00007fffe124475e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1244762: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1244767: hlt
[Deopt Handler Code]
  0x00007fffe1244768: movabs  $0x7fffe1244768,%r10  ;   {section_word}
  0x00007fffe1244772: push    %r10
  0x00007fffe1244774: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1244779: hlt
  0x00007fffe124477a: hlt
  0x00007fffe124477b: hlt
  0x00007fffe124477c: hlt
  0x00007fffe124477d: hlt
  0x00007fffe124477e: hlt
  0x00007fffe124477f: hlt
<nmethod compile_id='20' compiler='C1' level='2' entry='0x00007fffe12442a0' size='2088' address='0x00007fffe12440d0' relocation_offset='304' insts_offset='464' stub_offset='1488' scopes_data_offset='1736' scopes_pcs_offset='1840' dependencies_offset='2080' method='java/io/BufferedOutputStream flush ()V' bytes='12' count='23667' iicount='23667' stamp='118.314'/>
<writer thread='140737327351552'/>
<task_queued compile_id='81' method='java/nio/charset/CoderResult isUnderflow ()Z' bytes='13' count='31570' iicount='31570' stamp='118.314' comment='tiered' hot_count='31570'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe1246650:
Code:
Argument 0 is unknown.RIP: 0x7fffe12467c0 Code size: 0x00000678
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47e68} &apos;write&apos; &apos;(Ljava/lang/String;II)V&apos; in &apos;java/io/BufferedWriter&apos;
  # this:     rsi:rsi   = &apos;java/io/BufferedWriter&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/String&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0x70]  (sp of caller)
  ;; N622: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe12467c0: mov     0x8(%rsi),%r10d
  0x00007fffe12467c4: shl     $0x3,%r10
  0x00007fffe12467c8: cmp     %r10,%rax
  0x00007fffe12467cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12467d1: nop
  0x00007fffe12467d2: nop
  0x00007fffe12467d3: nop
  0x00007fffe12467d4: nop
  0x00007fffe12467d5: nop
  0x00007fffe12467d6: nop
  0x00007fffe12467d7: nop
  0x00007fffe12467d8: nop
  0x00007fffe12467d9: nop
  0x00007fffe12467da: nop
  0x00007fffe12467db: nop
  0x00007fffe12467dc: nop
  0x00007fffe12467dd: nop
  0x00007fffe12467de: nop
  0x00007fffe12467df: nop
[Verified Entry Point]
  ;; B1: #	B40 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe12467e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12467e7: push    %rbp
  0x00007fffe12467e8: sub     $0x60,%rsp        ;*synchronization entry
                                                ; - java.io.BufferedWriter::write@-1 (line 220)

  0x00007fffe12467ec: mov     %r8d,0x1c(%rsp)
  0x00007fffe12467f1: mov     %ecx,0x10(%rsp)
  0x00007fffe12467f5: mov     %rdx,0x8(%rsp)
  0x00007fffe12467fa: mov     %rsi,0x40(%rsp)
  0x00007fffe12467ff: mov     0x10(%rsi),%r10d
  0x00007fffe1246803: mov     %r10d,0x30(%rsp)
  0x00007fffe1246808: mov     (%r10),%rax       ; implicit exception: dispatches to 0x00007fffe1246c69
  ;; B2: #	B23 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe124680b: mov     %rax,%r10
  0x00007fffe124680e: and     $0x7,%r10
  0x00007fffe1246812: mov     0x30(%rsp),%r11d
  0x00007fffe1246817: mov     %r11,%rdi         ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)

  0x00007fffe124681a: cmp     $0x5,%r10
  0x00007fffe124681e: jne     0x7fffe124698b
  ;; B3: #	B25 B4 &lt;- B2  Freq: 0.999998

  0x00007fffe1246824: mov     0x8(%r11),%r11d
  0x00007fffe1246828: movabs  $0x0,%r10
  0x00007fffe1246832: lea     (%r10,%r11,8),%r10
  0x00007fffe1246836: mov     0xb0(%r10),%r10
  0x00007fffe124683d: mov     %r10,%r11
  0x00007fffe1246840: or      %r15,%r11
  0x00007fffe1246843: mov     %r11,%r8
  0x00007fffe1246846: xor     %rax,%r8
  0x00007fffe1246849: test    $0xffffffffffffff87,%r8
  0x00007fffe1246850: jne     0x7fffe1246a06    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)

  ;; B4: #	B35 B5 &lt;- B24 B23 B3 B29  Freq: 0.999999

  0x00007fffe1246856: mov     0x40(%rsp),%r10
  0x00007fffe124685b: mov     0x1c(%r10),%ebp   ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  0x00007fffe124685f: test    %ebp,%ebp
  0x00007fffe1246861: je      0x7fffe1246b2b    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)

  ;; B5: #	B20 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe1246867: mov     0x10(%rsp),%r13d
  0x00007fffe124686c: add     0x1c(%rsp),%r13d  ;*iadd
                                                ; - java.io.BufferedWriter::write@17 (line 223)

  0x00007fffe1246871: mov     0x10(%rsp),%r8d
  0x00007fffe1246876: cmp     %r13d,%r8d
  0x00007fffe1246879: jnl     0x7fffe124695d    ;*if_icmpge
                                                ; - java.io.BufferedWriter::write@24 (line 224)

  ;; B6: #	B36 B7 &lt;- B5  Freq: 0.499999

  0x00007fffe124687f: mov     0x18(%r10),%r11d  ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)

  0x00007fffe1246883: mov     0x14(%r10),%ebp
  0x00007fffe1246887: sub     %r11d,%ebp        ;*isub
                                                ; - java.io.BufferedWriter::write@36 (line 225)

  0x00007fffe124688a: cmp     0x1c(%rsp),%ebp
  0x00007fffe124688e: jl      0x7fffe1246b59    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)

  ;; B7: #	B41 B8 &lt;- B6  Freq: 0.499999

  0x00007fffe1246894: mov     0x20(%r10),%r9d   ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)

  0x00007fffe1246898: mov     0x8(%rsp),%r14
  0x00007fffe124689d: mov     0xc(%r14),%edx    ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; implicit exception: dispatches to 0x00007fffe1246c81
  ;; B8: #	B37 B9 &lt;- B7  Freq: 0.499999

  0x00007fffe12468a1: test    %r8d,%r8d
  0x00007fffe12468a4: jl      0x7fffe1246b85    ;*ifge
                                                ; - java.lang.String::getChars@1 (line 816)
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  ;; B9: #	B42 B10 &lt;- B8  Freq: 0.499998

  0x00007fffe12468aa: mov     0xc(%rdx),%ebp    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; implicit exception: dispatches to 0x00007fffe1246cc1
  ;; B10: #	B38 B11 &lt;- B9  Freq: 0.499998

  0x00007fffe12468ad: cmp     %ebp,%r13d
  0x00007fffe12468b0: jnle    0x7fffe1246bd1    ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  ;; B11: #	B39 B12 &lt;- B10  Freq: 0.499998

  0x00007fffe12468b6: cmp     %r13d,%r8d
  0x00007fffe12468b9: jnle    0x7fffe1246c15    ;*if_icmple
                                                ; - java.lang.String::getChars@33 (line 822)
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  ;; B12: #	B43 B13 &lt;- B11  Freq: 0.499997

  0x00007fffe12468bf: mov     0xc(%r9),%r10d    ; implicit exception: dispatches to 0x00007fffe1246cf5
  ;; B13: #	B33 B14 &lt;- B12  Freq: 0.499997

  0x00007fffe12468c3: mov     %rdx,%rsi         ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  0x00007fffe12468c6: mov     %r9,%rcx          ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)

  0x00007fffe12468c9: test    %r11d,%r11d
  0x00007fffe12468cc: jl      0x7fffe1246ae5
  ;; B14: #	B33 B15 &lt;- B13  Freq: 0.499996

  0x00007fffe12468d2: cmp     %r13d,%ebp
  0x00007fffe12468d5: jb      0x7fffe1246ae5
  ;; B15: #	B33 B16 &lt;- B14  Freq: 0.499996

  0x00007fffe12468db: mov     0x1c(%rsp),%ebx
  0x00007fffe12468df: add     %r11d,%ebx
  0x00007fffe12468e2: cmp     %ebx,%r10d
  0x00007fffe12468e5: jb      0x7fffe1246ae5
  ;; B16: #	B32 B17 &lt;- B15  Freq: 0.499995

  0x00007fffe12468eb: mov     0x1c(%rsp),%ebx
  0x00007fffe12468ef: test    %ebx,%ebx
  0x00007fffe12468f1: jle     0x7fffe1246add
  ;; B17: #	B18 &lt;- B16  Freq: 0.499995

  0x00007fffe12468f7: mov     %rdi,%rbp
  0x00007fffe12468fa: lea     0x10(%rdx,%r8,2),%rdi
  0x00007fffe12468ff: lea     0x10(%r9,%r11,2),%rsi
  0x00007fffe1246904: movsxd  %ebx,%rdx
  0x00007fffe1246907: movabs  $0x7fffe1141060,%r10
  0x00007fffe1246911: callq   %r10
  0x00007fffe1246914: mov     %rbp,%rdi         ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  ;; B18: #	B20 B19 &lt;- B17 B32 B34  Freq: 0.499997

  0x00007fffe1246917: mov     0x40(%rsp),%r10
  0x00007fffe124691c: add     0x18(%r10),%ebx   ;*iadd
                                                ; - java.io.BufferedWriter::write@80 (line 228)

  0x00007fffe1246920: mov     %ebx,0x18(%r10)   ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)

  0x00007fffe1246924: mov     0x14(%r10),%ebp   ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)

  0x00007fffe1246928: cmp     %ebp,%ebx
  0x00007fffe124692a: jl      0x7fffe124695d    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)

  ;; B19: #	N622 &lt;- B18  Freq: 2.38417e-07

  0x00007fffe124692c: mov     $0xffffff65,%esi
  0x00007fffe1246931: mov     %r14,0x8(%rsp)
  0x00007fffe1246936: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe124693b: mov     0x30(%rsp),%eax
  0x00007fffe124693f: mov     %eax,0x10(%rsp)
  0x00007fffe1246943: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246948: mov     %ebx,0x14(%rsp)
  0x00007fffe124694c: mov     %r13d,0x20(%rsp)
  0x00007fffe1246951: nop
  0x00007fffe1246952: nop
  0x00007fffe1246953: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=NarrowOop [64]=Oop off=408}
                                                ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ;   {runtime_call}
  0x00007fffe1246958: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B20: #	B30 B21 &lt;- B18 B5  Freq: 0.999996

  0x00007fffe124695d: mov     $0x7,%r10d
  0x00007fffe1246963: mov     0x30(%rsp),%r11d
  0x00007fffe1246968: and     (%r11),%r10
  0x00007fffe124696b: cmp     $0x5,%r10
  0x00007fffe124696f: jne     0x7fffe1246a3a    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)

  ;; B21: #	N622 &lt;- B31 B30 B20  Freq: 0.999996

  0x00007fffe1246975: add     $0x60,%rsp
  0x00007fffe1246979: pop     %rbp
  0x00007fffe124697a: test    %eax,0x16db4680(%rip)  ;   {poll_return}
  0x00007fffe1246980: retq
  ;; B22: #	B23 &lt;- B25  Freq: 9.99998e-13

  0x00007fffe1246981: mov     0x30(%rsp),%r8d
  0x00007fffe1246986: lock cmpxchg %r10,(%r8)
  ;; B23: #	B4 B24 &lt;- B2 B22  Freq: 1e-06

  0x00007fffe124698b: lea     0x50(%rsp),%rbx
  0x00007fffe1246990: mov     (%rdi),%rax
  0x00007fffe1246993: test    $0x2,%rax
  0x00007fffe1246999: jne     0x7fffe12469bf
  0x00007fffe124699b: or      $0x1,%rax
  0x00007fffe124699f: mov     %rax,(%rbx)
  0x00007fffe12469a2: lock cmpxchg %rbx,(%rdi)
  0x00007fffe12469a7: je      0x7fffe12469d8
  0x00007fffe12469ad: sub     %rsp,%rax
  0x00007fffe12469b0: and     $0xfffffffffffff007,%rax
  0x00007fffe12469b7: mov     %rax,(%rbx)
  0x00007fffe12469ba: jmpq    0x7fffe12469d8
  0x00007fffe12469bf: movq    $0x3,(%rbx)
  0x00007fffe12469c6: mov     %rax,%rbx
  0x00007fffe12469c9: mov     0x16(%rbx),%rax
  0x00007fffe12469cd: test    %rax,%rax
  0x00007fffe12469d0: jne     0x7fffe12469d8
  0x00007fffe12469d2: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe12469d8: je      0x7fffe1246856
  ;; B24: #	B4 &lt;- B28 B23  Freq: 2e-12

  0x00007fffe12469de: mov     %rdi,%rsi
  0x00007fffe12469e1: lea     0x50(%rsp),%rdx
  0x00007fffe12469e6: mov     0x40(%rsp),%rbp
  0x00007fffe12469eb: mov     %rdi,0x28(%rsp)
  0x00007fffe12469f0: mov     %rdi,0x38(%rsp)
  0x00007fffe12469f5: nop
  0x00007fffe12469f6: nop
  0x00007fffe12469f7: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [8]=Oop [40]=Oop [48]=NarrowOop [56]=Oop [64]=Oop off=572}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ;   {runtime_call}
  0x00007fffe12469fc: mov     0x28(%rsp),%rdi
  0x00007fffe1246a01: jmpq    0x7fffe1246856
  ;; B25: #	B22 B26 &lt;- B3  Freq: 9.99998e-07

  0x00007fffe1246a06: test    $0x7,%r8
  0x00007fffe1246a0d: jne     0x7fffe1246981
  ;; B26: #	B28 B27 &lt;- B25  Freq: 9.99997e-07

  0x00007fffe1246a13: test    $0x300,%r8
  0x00007fffe1246a1a: jne     0x7fffe1246a29
  ;; B27: #	B28 &lt;- B26  Freq: 9.99996e-07

  0x00007fffe1246a1c: and     $0x37f,%rax
  0x00007fffe1246a23: mov     %rax,%r11
  0x00007fffe1246a26: or      %r15,%r11
  ;; B28: #	B24 B29 &lt;- B27 B26  Freq: 9.99997e-07

  0x00007fffe1246a29: mov     0x30(%rsp),%r10d
  0x00007fffe1246a2e: lock cmpxchg %r11,(%r10)
  0x00007fffe1246a33: jne     0x7fffe12469de
  ;; B29: #	B4 &lt;- B28  Freq: 9.99996e-07

  0x00007fffe1246a35: jmpq    0x7fffe1246856
  ;; B30: #	B21 B31 &lt;- B20  Freq: 9.99996e-07

  0x00007fffe1246a3a: lea     0x50(%rsp),%rax
  0x00007fffe1246a3f: cmpq    $0x0,(%rax)
  0x00007fffe1246a46: je      0x7fffe1246ac0
  0x00007fffe1246a4c: mov     (%rdi),%r10
  0x00007fffe1246a4f: test    $0x2,%r10
  0x00007fffe1246a56: je      0x7fffe1246ab8
  0x00007fffe1246a58: mov     0x16(%r10),%rax
  0x00007fffe1246a5c: xor     %r15,%rax
  0x00007fffe1246a5f: or      0x26(%r10),%rax
  0x00007fffe1246a63: jne     0x7fffe1246ac0
  0x00007fffe1246a65: mov     0x36(%r10),%rax
  0x00007fffe1246a69: or      0x3e(%r10),%rax
  0x00007fffe1246a6d: jne     0x7fffe1246a79
  0x00007fffe1246a6f: movq    $0x0,0x16(%r10)
  0x00007fffe1246a77: jmp     0x7fffe1246ac0
  0x00007fffe1246a79: cmpq    $0x0,0x46(%r10)
  0x00007fffe1246a81: je      0x7fffe1246aac
  0x00007fffe1246a83: movq    $0x0,0x16(%r10)
  0x00007fffe1246a8b: lock addl $0x0,(%rsp)
  0x00007fffe1246a90: cmpq    $0x0,0x46(%r10)
  0x00007fffe1246a98: jne     0x7fffe1246ab1
  0x00007fffe1246a9a: movabs  $0x0,%rax
  0x00007fffe1246aa4: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1246aaa: jne     0x7fffe1246ab1
  0x00007fffe1246aac: or      $0x1,%eax
  0x00007fffe1246aaf: jmp     0x7fffe1246ac0
  0x00007fffe1246ab1: test    $0x0,%eax
  0x00007fffe1246ab6: jmp     0x7fffe1246ac0
  0x00007fffe1246ab8: mov     (%rax),%r10
  0x00007fffe1246abb: lock cmpxchg %r10,(%rdi)
  0x00007fffe1246ac0: je      0x7fffe1246975
  ;; B31: #	B21 &lt;- B30  Freq: 9.99996e-13

  0x00007fffe1246ac6: lea     0x50(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)

  0x00007fffe1246acb: movabs  $0x7ffff744655c,%r10
  0x00007fffe1246ad5: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)

  0x00007fffe1246ad8: jmpq    0x7fffe1246975
  ;; B32: #	B18 B33 &lt;- B16  Freq: 4.99995e-07

  0x00007fffe1246add: test    %ebx,%ebx
  0x00007fffe1246adf: jnl     0x7fffe1246917
  ;; B33: #	B44 B34 &lt;- B32 B13 B14 B15  Freq: 1.49999e-06

  0x00007fffe1246ae5: mov     %r13d,0x14(%rsp)
  0x00007fffe1246aea: mov     %rdi,0x20(%rsp)
  0x00007fffe1246aef: mov     %r8d,%r10d
  0x00007fffe1246af2: pushq   0x40(%rsp)
  0x00007fffe1246af7: popq    (%rsp)
  0x00007fffe1246afb: mov     %r10d,%ebp
  0x00007fffe1246afe: mov     %r10d,%edx
  0x00007fffe1246b01: mov     %r11d,%r8d
  0x00007fffe1246b04: mov     0x1c(%rsp),%r9d
  0x00007fffe1246b09: nop
  0x00007fffe1246b0a: nop
  0x00007fffe1246b0b: callq   0x7fffe1169ba0    ; OopMap{[0]=Oop [8]=Oop [32]=Oop [48]=NarrowOop [64]=Oop off=848}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B34: #	B18 &lt;- B33  Freq: 1.49996e-06

  0x00007fffe1246b10: mov     0x8(%rsp),%r14
  0x00007fffe1246b15: mov     0x1c(%rsp),%ebx
  0x00007fffe1246b19: mov     0x20(%rsp),%r10
  0x00007fffe1246b1e: mov     0x14(%rsp),%r13d
  0x00007fffe1246b23: mov     %r10,%rdi
  0x00007fffe1246b26: jmpq    0x7fffe1246917
  ;; B35: #	N622 &lt;- B4  Freq: 4.76837e-07

  0x00007fffe1246b2b: mov     $0xffffff65,%esi
  0x00007fffe1246b30: mov     0x1c(%rsp),%r10d
  0x00007fffe1246b35: mov     %r10d,0x14(%rsp)
  0x00007fffe1246b3a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246b3f: mov     0x30(%rsp),%eax
  0x00007fffe1246b43: mov     %eax,0x18(%rsp)
  0x00007fffe1246b47: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246b4c: nop
  0x00007fffe1246b4d: nop
  0x00007fffe1246b4e: nop
  0x00007fffe1246b4f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [24]=NarrowOop [64]=Oop off=916}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1246b54: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ;   {runtime_call}
  ;; B36: #	N622 &lt;- B6  Freq: 2.38418e-07

  0x00007fffe1246b59: mov     $0xffffff65,%esi
  0x00007fffe1246b5e: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246b63: mov     0x30(%rsp),%eax
  0x00007fffe1246b67: mov     %eax,0x10(%rsp)
  0x00007fffe1246b6b: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246b70: mov     %r8d,0x14(%rsp)
  0x00007fffe1246b75: mov     %r13d,0x24(%rsp)
  0x00007fffe1246b7a: nop
  0x00007fffe1246b7b: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=NarrowOop [64]=Oop off=960}
                                                ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ;   {runtime_call}
  0x00007fffe1246b80: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ;   {runtime_call}
  ;; B37: #	N622 &lt;- B8  Freq: 2.38418e-07

  0x00007fffe1246b85: mov     $0xffffff65,%esi
  0x00007fffe1246b8a: mov     %r10,%rbp
  0x00007fffe1246b8d: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246b92: mov     0x30(%rsp),%eax
  0x00007fffe1246b96: mov     %eax,0x8(%rsp)
  0x00007fffe1246b9a: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246b9f: mov     0x1c(%rsp),%ecx
  0x00007fffe1246ba3: mov     %ecx,0x10(%rsp)
  0x00007fffe1246ba7: mov     %r14,0x18(%rsp)
  0x00007fffe1246bac: mov     %r8d,0x20(%rsp)
  0x00007fffe1246bb1: mov     %r8d,0x24(%rsp)
  0x00007fffe1246bb6: mov     %r13d,0x2c(%rsp)
  0x00007fffe1246bbb: mov     %r9d,0x30(%rsp)
  0x00007fffe1246bc0: mov     %r11d,0x34(%rsp)
  0x00007fffe1246bc5: nop
  0x00007fffe1246bc6: nop
  0x00007fffe1246bc7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [8]=NarrowOop [24]=Oop [48]=NarrowOop off=1036}
                                                ;*ifge
                                                ; - java.lang.String::getChars@1 (line 816)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe1246bcc: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.lang.String::getChars@1 (line 816)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B38: #	N622 &lt;- B10  Freq: 2.38418e-07

  0x00007fffe1246bd1: mov     $0xffffff65,%esi
  0x00007fffe1246bd6: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246bdb: mov     0x30(%rsp),%eax
  0x00007fffe1246bdf: mov     %eax,0x10(%rsp)
  0x00007fffe1246be3: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246be8: mov     0x1c(%rsp),%ecx
  0x00007fffe1246bec: mov     %ecx,0x18(%rsp)
  0x00007fffe1246bf0: mov     %r8d,0x28(%rsp)
  0x00007fffe1246bf5: mov     %r13d,0x30(%rsp)
  0x00007fffe1246bfa: mov     %r9d,0x34(%rsp)
  0x00007fffe1246bff: mov     %r11d,0x38(%rsp)
  0x00007fffe1246c04: mov     %r13d,0x3c(%rsp)
  0x00007fffe1246c09: nop
  0x00007fffe1246c0a: nop
  0x00007fffe1246c0b: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=NarrowOop [52]=NarrowOop [64]=Oop off=1104}
                                                ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe1246c10: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B39: #	N622 &lt;- B11  Freq: 2.38417e-07

  0x00007fffe1246c15: mov     $0xffffff65,%esi
  0x00007fffe1246c1a: mov     %r10,%rbp
  0x00007fffe1246c1d: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246c22: mov     0x30(%rsp),%eax
  0x00007fffe1246c26: mov     %eax,0x8(%rsp)
  0x00007fffe1246c2a: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246c2f: mov     0x1c(%rsp),%r10d
  0x00007fffe1246c34: mov     %r10d,0x10(%rsp)
  0x00007fffe1246c39: mov     %r14,0x18(%rsp)
  0x00007fffe1246c3e: mov     %r8d,0x20(%rsp)
  0x00007fffe1246c43: mov     %r8d,0x24(%rsp)
  0x00007fffe1246c48: mov     %r13d,0x2c(%rsp)
  0x00007fffe1246c4d: mov     %r9d,0x30(%rsp)
  0x00007fffe1246c52: mov     %r11d,0x34(%rsp)
  0x00007fffe1246c57: mov     %r13d,0x38(%rsp)
  0x00007fffe1246c5c: nop
  0x00007fffe1246c5d: nop
  0x00007fffe1246c5e: nop
  0x00007fffe1246c5f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [8]=NarrowOop [24]=Oop [48]=NarrowOop off=1188}
                                                ;*if_icmple
                                                ; - java.lang.String::getChars@33 (line 822)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe1246c64: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.lang.String::getChars@33 (line 822)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B40: #	N622 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe1246c69: mov     $0xfffffff6,%esi
  0x00007fffe1246c6e: mov     0x40(%rsp),%rbp
  0x00007fffe1246c73: mov     %rdx,(%rsp)
  0x00007fffe1246c77: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=1212}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ;   {runtime_call}
  0x00007fffe1246c7c: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ;   {runtime_call}
  ;; B41: #	N622 &lt;- B7  Freq: 5.06638e-07

  0x00007fffe1246c81: mov     $0xfffffff6,%esi
  0x00007fffe1246c86: mov     %r10,%rbp
  0x00007fffe1246c89: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246c8e: mov     0x30(%rsp),%eax
  0x00007fffe1246c92: mov     %eax,(%rsp)
  0x00007fffe1246c95: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246c9a: mov     0x1c(%rsp),%ecx
  0x00007fffe1246c9e: mov     %ecx,0x8(%rsp)
  0x00007fffe1246ca2: mov     %r8d,0xc(%rsp)
  0x00007fffe1246ca7: mov     %r13d,0x18(%rsp)
  0x00007fffe1246cac: mov     %r9d,0x1c(%rsp)
  0x00007fffe1246cb1: mov     %r11d,0x20(%rsp)
  0x00007fffe1246cb6: nop
  0x00007fffe1246cb7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop [28]=NarrowOop off=1276}
                                                ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe1246cbc: callq   0x7ffff736b4ea    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B42: #	N622 &lt;- B9  Freq: 5.06638e-07

  0x00007fffe1246cc1: mov     $0xfffffff6,%esi
  0x00007fffe1246cc6: mov     %r10,%rbp
  0x00007fffe1246cc9: mov     %r14,(%rsp)
  0x00007fffe1246ccd: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246cd2: mov     0x30(%rsp),%eax
  0x00007fffe1246cd6: mov     %eax,0x8(%rsp)
  0x00007fffe1246cda: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246cdf: mov     %r8d,0xc(%rsp)
  0x00007fffe1246ce4: mov     %r13d,0x18(%rsp)
  0x00007fffe1246ce9: nop
  0x00007fffe1246cea: nop
  0x00007fffe1246ceb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop off=1328}
                                                ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe1246cf0: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B43: #	N622 &lt;- B12  Freq: 5.06637e-07

  0x00007fffe1246cf5: mov     $0xfffffff6,%esi
  0x00007fffe1246cfa: mov     0x40(%rsp),%rbp
  0x00007fffe1246cff: mov     %r14,(%rsp)
  0x00007fffe1246d03: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1246d08: mov     0x30(%rsp),%eax
  0x00007fffe1246d0c: mov     %eax,0x8(%rsp)
  0x00007fffe1246d10: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1246d15: mov     %r8d,0x18(%rsp)
  0x00007fffe1246d1a: mov     %r13d,0x20(%rsp)
  0x00007fffe1246d1f: mov     %edx,0x24(%rsp)
  0x00007fffe1246d23: mov     %r11d,0x28(%rsp)
  0x00007fffe1246d28: nop
  0x00007fffe1246d29: nop
  0x00007fffe1246d2a: nop
  0x00007fffe1246d2b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [36]=NarrowOop off=1392}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  0x00007fffe1246d30: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ;   {runtime_call}
  ;; B44: #	B46 B45 &lt;- B33  Freq: 1.49999e-11

  0x00007fffe1246d35: mov     %rax,%rbx
  0x00007fffe1246d38: mov     0x30(%rsp),%r11d
  0x00007fffe1246d3d: mov     $0x7,%r10d
  0x00007fffe1246d43: and     (%r11),%r10
  0x00007fffe1246d46: cmp     $0x5,%r10
  0x00007fffe1246d4a: jne     0x7fffe1246d59    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)

  ;; B45: #	N622 &lt;- B47 B46 B44  Freq: 1.49999e-11

  0x00007fffe1246d4c: mov     %rbx,%rsi
  0x00007fffe1246d4f: add     $0x60,%rsp
  0x00007fffe1246d53: pop     %rbp
  0x00007fffe1246d54: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B46: #	B45 B47 &lt;- B44  Freq: 1.49999e-17

  0x00007fffe1246d59: mov     0x20(%rsp),%r11
  0x00007fffe1246d5e: lea     0x50(%rsp),%rax
  0x00007fffe1246d63: cmpq    $0x0,(%rax)
  0x00007fffe1246d6a: je      0x7fffe1246de4
  0x00007fffe1246d70: mov     (%r11),%r10
  0x00007fffe1246d73: test    $0x2,%r10
  0x00007fffe1246d7a: je      0x7fffe1246ddc
  0x00007fffe1246d7c: mov     0x16(%r10),%rax
  0x00007fffe1246d80: xor     %r15,%rax
  0x00007fffe1246d83: or      0x26(%r10),%rax
  0x00007fffe1246d87: jne     0x7fffe1246de4
  0x00007fffe1246d89: mov     0x36(%r10),%rax
  0x00007fffe1246d8d: or      0x3e(%r10),%rax
  0x00007fffe1246d91: jne     0x7fffe1246d9d
  0x00007fffe1246d93: movq    $0x0,0x16(%r10)
  0x00007fffe1246d9b: jmp     0x7fffe1246de4
  0x00007fffe1246d9d: cmpq    $0x0,0x46(%r10)
  0x00007fffe1246da5: je      0x7fffe1246dd0
  0x00007fffe1246da7: movq    $0x0,0x16(%r10)
  0x00007fffe1246daf: lock addl $0x0,(%rsp)
  0x00007fffe1246db4: cmpq    $0x0,0x46(%r10)
  0x00007fffe1246dbc: jne     0x7fffe1246dd5
  0x00007fffe1246dbe: movabs  $0x0,%rax
  0x00007fffe1246dc8: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1246dce: jne     0x7fffe1246dd5
  0x00007fffe1246dd0: or      $0x1,%eax
  0x00007fffe1246dd3: jmp     0x7fffe1246de4
  0x00007fffe1246dd5: test    $0x0,%eax
  0x00007fffe1246dda: jmp     0x7fffe1246de4
  0x00007fffe1246ddc: mov     (%rax),%r10
  0x00007fffe1246ddf: lock cmpxchg %r10,(%r11)
  0x00007fffe1246de4: je      0x7fffe1246d4c
  ;; B47: #	B45 &lt;- B46  Freq: 1.49999e-23

  0x00007fffe1246dea: mov     %r11,%rdi
  0x00007fffe1246ded: lea     0x50(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)

  0x00007fffe1246df2: movabs  $0x7ffff744655c,%r10
  0x00007fffe1246dfc: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)

  0x00007fffe1246dff: jmpq    0x7fffe1246d4c
  0x00007fffe1246e04: hlt
  0x00007fffe1246e05: hlt
  0x00007fffe1246e06: hlt
  0x00007fffe1246e07: hlt
  0x00007fffe1246e08: hlt
  0x00007fffe1246e09: hlt
  0x00007fffe1246e0a: hlt
  0x00007fffe1246e0b: hlt
  0x00007fffe1246e0c: hlt
  0x00007fffe1246e0d: hlt
  0x00007fffe1246e0e: hlt
  0x00007fffe1246e0f: hlt
  0x00007fffe1246e10: hlt
  0x00007fffe1246e11: hlt
  0x00007fffe1246e12: hlt
  0x00007fffe1246e13: hlt
  0x00007fffe1246e14: hlt
  0x00007fffe1246e15: hlt
  0x00007fffe1246e16: hlt
  0x00007fffe1246e17: hlt
  0x00007fffe1246e18: hlt
  0x00007fffe1246e19: hlt
  0x00007fffe1246e1a: hlt
  0x00007fffe1246e1b: hlt
  0x00007fffe1246e1c: hlt
  0x00007fffe1246e1d: hlt
  0x00007fffe1246e1e: hlt
  0x00007fffe1246e1f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1246e20: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1246e25: callq   0x7fffe1246e2a
  0x00007fffe1246e2a: subq    $0x5,(%rsp)
  0x00007fffe1246e2f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1246e34: hlt
  0x00007fffe1246e35: hlt
  0x00007fffe1246e36: hlt
  0x00007fffe1246e37: hlt
<nmethod compile_id='79' compiler='C2' level='4' entry='0x00007fffe12467c0' size='3704' address='0x00007fffe1246650' relocation_offset='304' insts_offset='368' stub_offset='2000' scopes_data_offset='2056' scopes_pcs_offset='2800' dependencies_offset='3632' handler_table_offset='3640' nul_chk_table_offset='3664' method='java/io/BufferedWriter write (Ljava/lang/String;II)V' bytes='117' count='16126' backedge_count='16126' iicount='16126' stamp='118.335'/>
<make_not_entrant thread='140736955627264' compile_id='41' compiler='C1' level='2' stamp='118.335'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe123b650:
Code:
Argument 0 is unknown.RIP: 0x7fffe123b7c0 Code size: 0x00000178
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c19438} &apos;flush&apos; &apos;()V&apos; in &apos;java/io/OutputStream&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe123b7c0: mov     0x8(%rsi),%r10d
  0x00007fffe123b7c4: shl     $0x3,%r10
  0x00007fffe123b7c8: cmp     %rax,%r10
  0x00007fffe123b7cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123b7d1: nop
  0x00007fffe123b7d2: nop
  0x00007fffe123b7d3: nop
  0x00007fffe123b7d4: nop
  0x00007fffe123b7d5: nop
  0x00007fffe123b7d6: nop
  0x00007fffe123b7d7: nop
  0x00007fffe123b7d8: nop
  0x00007fffe123b7d9: nop
  0x00007fffe123b7da: nop
  0x00007fffe123b7db: nop
  0x00007fffe123b7dc: nop
  0x00007fffe123b7dd: nop
  0x00007fffe123b7de: nop
  0x00007fffe123b7df: nop
[Verified Entry Point]
  0x00007fffe123b7e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123b7e7: push    %rbp
  0x00007fffe123b7e8: sub     $0x30,%rsp
  0x00007fffe123b7ec: movabs  $0x7ffff4d712b8,%rdi
  0x00007fffe123b7f6: mov     0x8(%rdi),%ebx
  0x00007fffe123b7f9: add     $0x8,%ebx
  0x00007fffe123b7fc: mov     %ebx,0x8(%rdi)
  0x00007fffe123b7ff: movabs  $0x7ffff4c19438,%rdi  ;   {metadata({method} {0x00007ffff4c19438} &apos;flush&apos; &apos;()V&apos; in &apos;java/io/OutputStream&apos;)}
  0x00007fffe123b809: and     $0x3ff8,%ebx
  0x00007fffe123b80f: cmp     $0x0,%ebx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb009a7e0]
  0x00007fffe123b812: je      0x7fffe123b824    ;*return
                                                ; - java.io.OutputStream::flush@0 (line 139)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 0]

  0x00007fffe123b818: add     $0x30,%rsp
  0x00007fffe123b81c: pop     %rbp
  0x00007fffe123b81d: test    %eax,0x16dbf8dd(%rip)  ;   {poll_return}
  0x00007fffe123b823: retq
  ;; CounterOverflowStub slow case
  0x00007fffe123b824: mov     %rdi,0x8(%rsp)
  0x00007fffe123b829: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe123b831: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=118}
                                                ;*synchronization entry
                                                ; - java.io.OutputStream::flush@-1 (line 139)
                                                ;   {runtime_call}
  0x00007fffe123b836: jmp     0x7fffe123b818
  0x00007fffe123b838: nop
  0x00007fffe123b839: nop
  ;; Unwind handler
  0x00007fffe123b83a: mov     0x348(%r15),%rax
  0x00007fffe123b841: movabs  $0x0,%r10
  0x00007fffe123b84b: mov     %r10,0x348(%r15)
  0x00007fffe123b852: movabs  $0x0,%r10
  0x00007fffe123b85c: mov     %r10,0x350(%r15)
  0x00007fffe123b863: add     $0x30,%rsp
  0x00007fffe123b867: pop     %rbp
  0x00007fffe123b868: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe123b86d: hlt
  0x00007fffe123b86e: hlt
  0x00007fffe123b86f: hlt
  0x00007fffe123b870: hlt
  0x00007fffe123b871: hlt
  0x00007fffe123b872: hlt
  0x00007fffe123b873: hlt
  0x00007fffe123b874: hlt
  0x00007fffe123b875: hlt
  0x00007fffe123b876: hlt
  0x00007fffe123b877: hlt
  0x00007fffe123b878: hlt
  0x00007fffe123b879: hlt
  0x00007fffe123b87a: hlt
  0x00007fffe123b87b: hlt
  0x00007fffe123b87c: hlt
  0x00007fffe123b87d: hlt
  0x00007fffe123b87e: hlt
  0x00007fffe123b87f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe123b880: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe123b88a: movabs  $0xdead,%rcx
  0x00007fffe123b894: movabs  $0xdead,%rsi
  0x00007fffe123b89e: movabs  $0xdead,%rdi
  0x00007fffe123b8a8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe123b8ad: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123b8b2: sub     $0x80,%rsp
  0x00007fffe123b8b9: mov     %rax,0x78(%rsp)
  0x00007fffe123b8be: mov     %rcx,0x70(%rsp)
  0x00007fffe123b8c3: mov     %rdx,0x68(%rsp)
  0x00007fffe123b8c8: mov     %rbx,0x60(%rsp)
  0x00007fffe123b8cd: mov     %rbp,0x50(%rsp)
  0x00007fffe123b8d2: mov     %rsi,0x48(%rsp)
  0x00007fffe123b8d7: mov     %rdi,0x40(%rsp)
  0x00007fffe123b8dc: mov     %r8,0x38(%rsp)
  0x00007fffe123b8e1: mov     %r9,0x30(%rsp)
  0x00007fffe123b8e6: mov     %r10,0x28(%rsp)
  0x00007fffe123b8eb: mov     %r11,0x20(%rsp)
  0x00007fffe123b8f0: mov     %r12,0x18(%rsp)
  0x00007fffe123b8f5: mov     %r13,0x10(%rsp)
  0x00007fffe123b8fa: mov     %r14,0x8(%rsp)
  0x00007fffe123b8ff: mov     %r15,(%rsp)
  0x00007fffe123b903: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123b90d: movabs  $0x7fffe123b8ad,%rsi  ;   {internal_word}
  0x00007fffe123b917: mov     %rsp,%rdx
  0x00007fffe123b91a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123b91e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123b923: hlt
[Deopt Handler Code]
  0x00007fffe123b924: movabs  $0x7fffe123b924,%r10  ;   {section_word}
  0x00007fffe123b92e: push    %r10
  0x00007fffe123b930: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123b935: hlt
  0x00007fffe123b936: hlt
  0x00007fffe123b937: hlt
<nmethod compile_id='22' compiler='C1' level='2' entry='0x00007fffe123b7c0' size='848' address='0x00007fffe123b650' relocation_offset='304' insts_offset='368' stub_offset='560' scopes_data_offset='752' scopes_pcs_offset='776' dependencies_offset='840' method='java/io/OutputStream flush ()V' bytes='1' count='24187' iicount='24187' stamp='118.344'/>
<writer thread='140737327351552'/>
<task_queued compile_id='82' method='java/io/PrintStream ensureOpen ()V' bytes='18' count='32252' iicount='32252' stamp='118.345' comment='tiered' hot_count='32252'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe124c550:
Code:
Argument 0 is unknown.RIP: 0x7fffe124c6c0 Code size: 0x00000358
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4b68ab0} &apos;getChars&apos; &apos;(II[C)V&apos; in &apos;java/lang/Integer&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  # parm2:    rcx:rcx   = &apos;[C&apos;
  #           [sp+0x40]  (sp of caller)
  ;; N1: #	B1 &lt;- B26 B27 B21 B41 B22 B14 B25 B31  Freq: 1

  ;; B1: #	B26 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124c6c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124c6c7: push    %rbp
  0x00007fffe124c6c8: sub     $0x30,%rsp        ;*synchronization entry
                                                ; - java.lang.Integer::getChars@-1 (line 435)

  0x00007fffe124c6cc: test    %esi,%esi
  0x00007fffe124c6ce: jl      0x7fffe124c901    ;*ifge
                                                ; - java.lang.Integer::getChars@7 (line 438)

  ;; B2: #	B27 B3 &lt;- B1  Freq: 1

  0x00007fffe124c6d4: cmp     $0x10000,%esi
  0x00007fffe124c6da: jnl     0x7fffe124c91d    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)

  ;; B3: #	B21 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe124c6e0: imull   $0xcccd,%esi,%r9d
  0x00007fffe124c6e7: mov     %edx,%r10d
  0x00007fffe124c6ea: decl    %r10d             ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)

  0x00007fffe124c6ed: shr     $0x13,%r9d        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)

  0x00007fffe124c6f1: mov     %r9d,%ebx
  0x00007fffe124c6f4: shl     $0x1,%ebx         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)

  0x00007fffe124c6f6: mov     %r9d,%edi
  0x00007fffe124c6f9: shl     $0x3,%edi         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)

  0x00007fffe124c6fc: mov     %edi,%eax
  0x00007fffe124c6fe: add     %ebx,%eax
  0x00007fffe124c700: mov     %esi,%r8d
  0x00007fffe124c703: sub     %eax,%r8d         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)

  0x00007fffe124c706: cmp     $0x24,%r8d
  0x00007fffe124c70a: jnb     0x7fffe124c891
  ;; B4: #	B41 B5 &lt;- B3  Freq: 0.999998

  0x00007fffe124c710: movsxd  %edi,%r11
  0x00007fffe124c713: movsxd  %ebx,%r8
  0x00007fffe124c716: add     %r8,%r11
  0x00007fffe124c719: movsxd  %esi,%r8
  0x00007fffe124c71c: sub     %r11,%r8
  0x00007fffe124c71f: movabs  $0xd73af1b8,%rdi  ;   {oop([C)}
  0x00007fffe124c729: movzwl  0x10(%rdi,%r8,2),%r8d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)

  0x00007fffe124c72f: mov     0xc(%rcx),%esi    ; implicit exception: dispatches to 0x00007fffe124c9e0
  ;; B5: #	B22 B6 &lt;- B4  Freq: 0.999997

  0x00007fffe124c732: cmp     %esi,%r10d
  0x00007fffe124c735: jnb     0x7fffe124c8b5
  ;; B6: #	B14 B7 &lt;- B5  Freq: 0.999996

  0x00007fffe124c73b: mov     %r8w,0xe(%rcx,%rdx,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)

  0x00007fffe124c741: test    %r9d,%r9d
  0x00007fffe124c744: je      0x7fffe124c81f    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)

  ;; B7: #	B28 B8 &lt;- B6  Freq: 0.333332

  0x00007fffe124c74a: imull   $0xcccd,%r9d,%ebx
  0x00007fffe124c751: mov     %edx,%r11d
  0x00007fffe124c754: add     $0xfffffffe,%r11d  ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)

  0x00007fffe124c758: shr     $0x13,%ebx        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)

  0x00007fffe124c75b: mov     %ebx,%r8d
  0x00007fffe124c75e: shl     $0x1,%r8d         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)

  0x00007fffe124c761: mov     %ebx,%eax
  0x00007fffe124c763: shl     $0x3,%eax         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)

  0x00007fffe124c766: mov     %eax,%r13d
  0x00007fffe124c769: add     %r8d,%r13d
  0x00007fffe124c76c: mov     %r9d,%r10d
  0x00007fffe124c76f: sub     %r13d,%r10d       ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)

  0x00007fffe124c772: cmp     $0x24,%r10d
  0x00007fffe124c776: jnb     0x7fffe124c939
  ;; B8: #	B23 B9 &lt;- B7  Freq: 0.333332

  0x00007fffe124c77c: movsxd  %eax,%r10
  0x00007fffe124c77f: movsxd  %r8d,%r8
  0x00007fffe124c782: add     %r8,%r10
  0x00007fffe124c785: movsxd  %r9d,%r8
  0x00007fffe124c788: sub     %r10,%r8
  0x00007fffe124c78b: movzwl  0x10(%rdi,%r8,2),%r8d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)

  0x00007fffe124c791: test    %r11d,%r11d
  0x00007fffe124c794: jl      0x7fffe124c8d9
  0x00007fffe124c79a: nop
  0x00007fffe124c79b: nop                       ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)

  ;; B9: #	B25 B10 &lt;- B8 B13 	Loop: B9-B13 inner pre of N387 Freq: 0.476187

  0x00007fffe124c79c: cmp     %esi,%r11d
  0x00007fffe124c79f: jnb     0x7fffe124c8df
  ;; B10: #	B14 B11 &lt;- B9  Freq: 0.476187

  0x00007fffe124c7a5: mov     %r8w,0x10(%rcx,%r11,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)

  0x00007fffe124c7ab: test    %ebx,%ebx
  0x00007fffe124c7ad: je      0x7fffe124c81f    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)

  ;; B11: #	B29 B12 &lt;- B10  Freq: 0.158729

  0x00007fffe124c7af: imull   $0xcccd,%ebx,%r9d
  0x00007fffe124c7b6: decl    %r11d             ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)

  0x00007fffe124c7b9: shr     $0x13,%r9d        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)

  0x00007fffe124c7bd: mov     %r9d,%r8d
  0x00007fffe124c7c0: shl     $0x1,%r8d         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)

  0x00007fffe124c7c3: mov     %r9d,%eax
  0x00007fffe124c7c6: shl     $0x3,%eax         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)

  0x00007fffe124c7c9: mov     %eax,%r13d
  0x00007fffe124c7cc: add     %r8d,%r13d
  0x00007fffe124c7cf: mov     %ebx,%r10d
  0x00007fffe124c7d2: sub     %r13d,%r10d       ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)

  0x00007fffe124c7d5: cmp     $0x24,%r10d
  0x00007fffe124c7d9: jnb     0x7fffe124c93e
  ;; B12: #	B15 B13 &lt;- B11  Freq: 0.158729

  0x00007fffe124c7df: mov     %esi,%ebp
  0x00007fffe124c7e1: decl    %ebp
  0x00007fffe124c7e3: movsxd  %eax,%rax
  0x00007fffe124c7e6: mov     %edx,%r10d
  0x00007fffe124c7e9: add     $0xfffffffd,%r10d
  0x00007fffe124c7ed: cmp     %ebp,%r10d
  0x00007fffe124c7f0: cmovnle %ebp,%r10d
  0x00007fffe124c7f4: movsxd  %ebx,%rbx
  0x00007fffe124c7f7: movsxd  %r8d,%r8
  0x00007fffe124c7fa: add     %r8,%rax
  0x00007fffe124c7fd: sub     %rax,%rbx
  0x00007fffe124c800: movzwl  0x10(%rdi,%rbx,2),%r8d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)

  0x00007fffe124c806: mov     $0xffffffff,%eax
  0x00007fffe124c80b: cmp     %eax,%r10d
  0x00007fffe124c80e: cmovl   %eax,%r10d
  0x00007fffe124c812: cmp     %r10d,%r11d
  0x00007fffe124c815: jle     0x7fffe124c82b
  ;; B13: #	B9 &lt;- B12  Freq: 0.142856

  0x00007fffe124c817: mov     %r9d,%ebx
  0x00007fffe124c81a: jmpq    0x7fffe124c79c    ;*synchronization entry
                                                ; - java.lang.Integer::getChars@-1 (line 435)

  ;; B14: #	N1 &lt;- B36 B10 B17 B6  Freq: 0.999995

  0x00007fffe124c81f: add     $0x30,%rsp
  0x00007fffe124c823: pop     %rbp
  0x00007fffe124c824: test    %eax,0x16dae7d6(%rip)  ;   {poll_return}
  0x00007fffe124c82a: retq
  ;; B15: #	B32 B16 &lt;- B12  Freq: 0.0158729

  0x00007fffe124c82b: cmp     $0xffffffff,%r11d
  0x00007fffe124c82f: jle     0x7fffe124c969    ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)

  ;; B16: #	B17 &lt;- B15  Freq: 0.0158729

  ;; B17: #	B14 B18 &lt;- B16 B20 	Loop: B17-B20 inner main of N177 Freq: 0.0238093

  0x00007fffe124c835: mov     %r8w,0x10(%rcx,%r11,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)

  0x00007fffe124c83b: test    %r9d,%r9d
  0x00007fffe124c83e: je      0x7fffe124c81f    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)

  ;; B18: #	B30 B19 &lt;- B17  Freq: 0.00793642

  0x00007fffe124c840: imull   $0xcccd,%r9d,%ebx
  0x00007fffe124c847: decl    %r11d             ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)

  0x00007fffe124c84a: shr     $0x13,%ebx        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)

  0x00007fffe124c84d: mov     %ebx,%eax
  0x00007fffe124c84f: shl     $0x1,%eax         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)

  0x00007fffe124c851: mov     %ebx,%r8d
  0x00007fffe124c854: shl     $0x3,%r8d         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)

  0x00007fffe124c858: mov     %r8d,%edx
  0x00007fffe124c85b: add     %eax,%edx
  0x00007fffe124c85d: mov     %r9d,%r10d
  0x00007fffe124c860: sub     %edx,%r10d        ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)

  0x00007fffe124c863: cmp     $0x24,%r10d
  0x00007fffe124c867: jnb     0x7fffe124c941
  ;; B19: #	B33 B20 &lt;- B18  Freq: 0.00793642

  0x00007fffe124c86d: movsxd  %r8d,%r10
  0x00007fffe124c870: movsxd  %r9d,%r8
  0x00007fffe124c873: movsxd  %eax,%r9
  0x00007fffe124c876: add     %r9,%r10
  0x00007fffe124c879: sub     %r10,%r8
  0x00007fffe124c87c: movzwl  0x10(%rdi,%r8,2),%r8d
  0x00007fffe124c882: cmp     $0xffffffff,%r11d
  0x00007fffe124c886: jle     0x7fffe124c96c
  ;; B20: #	B17 &lt;- B19  Freq: 0.00793641

  0x00007fffe124c88c: mov     %ebx,%r9d
  0x00007fffe124c88f: jmp     0x7fffe124c835
  ;; B21: #	N1 &lt;- B3  Freq: 1.01328e-06

  0x00007fffe124c891: mov     $0xffffffe4,%esi
  0x00007fffe124c896: mov     %r9d,(%rsp)
  0x00007fffe124c89a: mov     %rcx,0x8(%rsp)
  0x00007fffe124c89f: mov     %r10d,0x10(%rsp)
  0x00007fffe124c8a4: mov     %r8d,0x14(%rsp)
  0x00007fffe124c8a9: nop
  0x00007fffe124c8aa: nop
  0x00007fffe124c8ab: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=496}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  0x00007fffe124c8b0: callq   0x7ffff736b4ea    ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  ;; B22: #	N1 &lt;- B5  Freq: 1.01328e-06

  0x00007fffe124c8b5: mov     $0xffffffe4,%esi
  0x00007fffe124c8ba: mov     %r9d,(%rsp)
  0x00007fffe124c8be: mov     %rcx,0x8(%rsp)
  0x00007fffe124c8c3: mov     %r10d,0x10(%rsp)
  0x00007fffe124c8c8: mov     %r8d,0x14(%rsp)
  0x00007fffe124c8cd: nop
  0x00007fffe124c8ce: nop
  0x00007fffe124c8cf: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=532}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe124c8d4: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B23: #	B24 &lt;- B8  Freq: 3.33332e-07

  0x00007fffe124c8d9: mov     %ebx,%r9d
  ;; B24: #	B25 &lt;- B23 B38 B40  Freq: 3.33332e-07

  0x00007fffe124c8dc: mov     %r9d,%ebx
  ;; B25: #	N1 &lt;- B35 B9 B24  Freq: 8.15842e-07

  0x00007fffe124c8df: mov     $0xffffffe4,%esi
  0x00007fffe124c8e4: mov     %ebx,(%rsp)
  0x00007fffe124c8e7: mov     %rcx,0x8(%rsp)
  0x00007fffe124c8ec: mov     %r11d,0x10(%rsp)
  0x00007fffe124c8f1: mov     %r8d,0x14(%rsp)
  0x00007fffe124c8f6: nop
  0x00007fffe124c8f7: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=572}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe124c8fc: callq   0x7ffff736b4ea    ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  ;; B26: #	N1 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe124c901: mov     %rcx,(%rsp)
  0x00007fffe124c905: mov     %edx,0x8(%rsp)
  0x00007fffe124c909: mov     %esi,0xc(%rsp)
  0x00007fffe124c90d: mov     $0xffffff65,%esi
  0x00007fffe124c912: nop
  0x00007fffe124c913: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=600}
                                                ;*ifge
                                                ; - java.lang.Integer::getChars@7 (line 438)
                                                ;   {runtime_call}
  0x00007fffe124c918: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.lang.Integer::getChars@7 (line 438)
                                                ;   {runtime_call}
  ;; B27: #	N1 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe124c91d: mov     %rcx,(%rsp)
  0x00007fffe124c921: mov     %edx,0x8(%rsp)
  0x00007fffe124c925: mov     %esi,0xc(%rsp)
  0x00007fffe124c929: mov     $0xffffff65,%esi
  0x00007fffe124c92e: nop
  0x00007fffe124c92f: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=628}
                                                ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ;   {runtime_call}
  0x00007fffe124c934: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ;   {runtime_call}
  ;; B28: #	B31 &lt;- B7  Freq: 3.37758e-07

  0x00007fffe124c939: mov     %ebx,%r9d
  0x00007fffe124c93c: jmp     0x7fffe124c944
  ;; B29: #	B30 &lt;- B11  Freq: 1.60837e-07

  0x00007fffe124c93e: mov     %r9d,%ebx
  ;; B30: #	B31 &lt;- B29 B18  Freq: 1.68878e-07

  0x00007fffe124c941: mov     %ebx,%r9d
  ;; B31: #	N1 &lt;- B28 B37 B30  Freq: 5.06637e-07

  0x00007fffe124c944: mov     $0xffffffe4,%esi
  0x00007fffe124c949: mov     %rcx,0x8(%rsp)
  0x00007fffe124c94e: mov     %r11d,0x4(%rsp)
  0x00007fffe124c953: mov     %r9d,0x10(%rsp)
  0x00007fffe124c958: mov     %r10d,0x14(%rsp)
  0x00007fffe124c95d: nop
  0x00007fffe124c95e: nop
  0x00007fffe124c95f: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=676}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  0x00007fffe124c964: callq   0x7ffff736b4ea    ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ;   {runtime_call}
  ;; B32: #	B33 &lt;- B15  Freq: 1.60837e-08

  0x00007fffe124c969: mov     %r9d,%ebx
  ;; B33: #	B40 B34 &lt;- B32 B19  Freq: 2.41255e-08

  0x00007fffe124c96c: cmp     $0xffffffff,%r11d
  0x00007fffe124c970: jle     0x7fffe124c9d8    ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)

  ;; B34: #	B35 &lt;- B33  Freq: 2.41254e-08

  ;; B35: #	B25 B36 &lt;- B34 B39 	Loop: B35-B39 inner post of N387 Freq: 3.61881e-08

  0x00007fffe124c972: cmp     %esi,%r11d
  0x00007fffe124c975: jnb     0x7fffe124c8df
  ;; B36: #	B14 B37 &lt;- B35  Freq: 3.61881e-08

  0x00007fffe124c97b: mov     %r8w,0x10(%rcx,%r11,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)

  0x00007fffe124c981: test    %ebx,%ebx
  0x00007fffe124c983: je      0x7fffe124c81f    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)

  ;; B37: #	B31 B38 &lt;- B36  Freq: 1.20627e-08

  0x00007fffe124c989: imull   $0xcccd,%ebx,%r9d
  0x00007fffe124c990: decl    %r11d             ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)

  0x00007fffe124c993: shr     $0x13,%r9d        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)

  0x00007fffe124c997: mov     %r9d,%r13d
  0x00007fffe124c99a: shl     $0x1,%r13d        ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)

  0x00007fffe124c99d: mov     %r9d,%eax
  0x00007fffe124c9a0: shl     $0x3,%eax         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)

  0x00007fffe124c9a3: mov     %eax,%ebp
  0x00007fffe124c9a5: add     %r13d,%ebp
  0x00007fffe124c9a8: mov     %ebx,%r10d
  0x00007fffe124c9ab: sub     %ebp,%r10d        ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)

  0x00007fffe124c9ae: cmp     $0x24,%r10d
  0x00007fffe124c9b2: jnb     0x7fffe124c944
  ;; B38: #	B24 B39 &lt;- B37  Freq: 1.20627e-08

  0x00007fffe124c9b4: movsxd  %eax,%r10
  0x00007fffe124c9b7: movsxd  %ebx,%r8
  0x00007fffe124c9ba: movsxd  %r13d,%rbx
  0x00007fffe124c9bd: add     %rbx,%r10
  0x00007fffe124c9c0: sub     %r10,%r8
  0x00007fffe124c9c3: movzwl  0x10(%rdi,%r8,2),%r8d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)

  0x00007fffe124c9c9: cmp     $0xffffffff,%r11d
  0x00007fffe124c9cd: jle     0x7fffe124c8dc
  ;; B39: #	B35 &lt;- B38  Freq: 1.20627e-08

  0x00007fffe124c9d3: mov     %r9d,%ebx
  0x00007fffe124c9d6: jmp     0x7fffe124c972
  ;; B40: #	B24 &lt;- B33  Freq: 2.41255e-14

  0x00007fffe124c9d8: mov     %ebx,%r9d
  0x00007fffe124c9db: jmpq    0x7fffe124c8dc
  ;; B41: #	N1 &lt;- B4  Freq: 1.01328e-06

  0x00007fffe124c9e0: mov     $0xfffffff6,%esi
  0x00007fffe124c9e5: mov     %r10d,%ebp
  0x00007fffe124c9e8: mov     %r8d,(%rsp)
  0x00007fffe124c9ec: nop
  0x00007fffe124c9ed: nop
  0x00007fffe124c9ee: nop
  0x00007fffe124c9ef: callq   0x7fffe1107820    ; OopMap{off=820}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe124c9f4: callq   0x7ffff736b4ea    ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ;   {runtime_call}
  0x00007fffe124c9f9: hlt
  0x00007fffe124c9fa: hlt
  0x00007fffe124c9fb: hlt
  0x00007fffe124c9fc: hlt
  0x00007fffe124c9fd: hlt
  0x00007fffe124c9fe: hlt
  0x00007fffe124c9ff: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe124ca00: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe124ca05: callq   0x7fffe124ca0a
  0x00007fffe124ca0a: subq    $0x5,(%rsp)
  0x00007fffe124ca0f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124ca14: hlt
  0x00007fffe124ca15: hlt
  0x00007fffe124ca16: hlt
  0x00007fffe124ca17: hlt
<nmethod compile_id='80' compiler='C2' level='4' entry='0x00007fffe124c6c0' size='2424' address='0x00007fffe124c550' relocation_offset='304' insts_offset='368' stub_offset='1200' scopes_data_offset='1240' scopes_pcs_offset='1456' dependencies_offset='2400' nul_chk_table_offset='2408' oops_offset='1224' method='java/lang/Integer getChars (II[C)V' bytes='131' count='8401' backedge_count='5914' iicount='8401' stamp='118.383'/>
<make_not_entrant thread='140736956679936' compile_id='69' compiler='C1' level='3' stamp='118.383'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe123b390:
Code:
Argument 0 is unknown.RIP: 0x7fffe123b4e0 Code size: 0x00000078
[Entry Point]
[Constants]
  # {method} {0x00007ffff4d56d08} &apos;isUnderflow&apos; &apos;()Z&apos; in &apos;java/nio/charset/CoderResult&apos;
  #           [sp+0x20]  (sp of caller)
  ;; N30: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123b4e0: mov     0x8(%rsi),%r10d
  0x00007fffe123b4e4: shl     $0x3,%r10
  0x00007fffe123b4e8: cmp     %r10,%rax
  0x00007fffe123b4eb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123b4f1: nop
  0x00007fffe123b4f2: nop
  0x00007fffe123b4f3: nop
  0x00007fffe123b4f4: nop
  0x00007fffe123b4f5: nop
  0x00007fffe123b4f6: nop
  0x00007fffe123b4f7: nop
  0x00007fffe123b4f8: nop
  0x00007fffe123b4f9: nop
  0x00007fffe123b4fa: nop
  0x00007fffe123b4fb: nop
  0x00007fffe123b4fc: nop
  0x00007fffe123b4fd: nop
  0x00007fffe123b4fe: nop
  0x00007fffe123b4ff: nop
[Verified Entry Point]
  ;; B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123b500: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123b507: push    %rbp
  0x00007fffe123b508: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - java.nio.charset.CoderResult::isUnderflow@-1 (line 120)

  0x00007fffe123b50c: mov     0xc(%rsi),%r11d   ;*getfield type
                                                ; - java.nio.charset.CoderResult::isUnderflow@1 (line 120)

  0x00007fffe123b510: test    %r11d,%r11d
  0x00007fffe123b513: jne     0x7fffe123b526    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)

  ;; B2: #	N30 &lt;- B1  Freq: 1

  0x00007fffe123b515: mov     $0x1,%eax
  0x00007fffe123b51a: add     $0x10,%rsp
  0x00007fffe123b51e: pop     %rbp
  0x00007fffe123b51f: test    %eax,0x16dbfadb(%rip)  ;   {poll_return}
  0x00007fffe123b525: retq
  ;; B3: #	N30 &lt;- B1  Freq: 5e-07

  0x00007fffe123b526: mov     $0xffffff65,%esi
  0x00007fffe123b52b: mov     %r11d,%ebp
  0x00007fffe123b52e: nop
  0x00007fffe123b52f: callq   0x7fffe1107820    ; OopMap{off=84}
                                                ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ;   {runtime_call}
  0x00007fffe123b534: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ;   {runtime_call}
  0x00007fffe123b539: hlt
  0x00007fffe123b53a: hlt
  0x00007fffe123b53b: hlt
  0x00007fffe123b53c: hlt
  0x00007fffe123b53d: hlt
  0x00007fffe123b53e: hlt
  0x00007fffe123b53f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe123b540: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe123b545: callq   0x7fffe123b54a
  0x00007fffe123b54a: subq    $0x5,(%rsp)
  0x00007fffe123b54f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123b554: hlt
  0x00007fffe123b555: hlt
  0x00007fffe123b556: hlt
  0x00007fffe123b557: hlt
<nmethod compile_id='81' compiler='C2' level='4' entry='0x00007fffe123b4e0' size='616' address='0x00007fffe123b390' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='464' scopes_pcs_offset='496' dependencies_offset='608' method='java/nio/charset/CoderResult isUnderflow ()Z' bytes='13' count='33616' iicount='33616' stamp='118.391'/>
<make_not_entrant thread='140736955627264' compile_id='16' compiler='C1' level='2' stamp='118.391'/>
<writer thread='140737327351552'/>
<task_queued compile_id='83' method='java/io/BufferedOutputStream flush ()V' bytes='12' count='25203' iicount='25203' stamp='118.392' comment='tiered' hot_count='25203'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1243a50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1243c00 Code size: 0x000002e0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x50]  (sp of caller)
  ;;  block B5 [0, 0]

  0x00007fffe1243c00: mov     0x8(%rsi),%r10d
  0x00007fffe1243c04: shl     $0x3,%r10
  0x00007fffe1243c08: cmp     %rax,%r10
  0x00007fffe1243c0b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1243c11: nop
  0x00007fffe1243c12: nop
  0x00007fffe1243c13: nop
  0x00007fffe1243c14: nop
  0x00007fffe1243c15: nop
  0x00007fffe1243c16: nop
  0x00007fffe1243c17: nop
  0x00007fffe1243c18: nop
  0x00007fffe1243c19: nop
  0x00007fffe1243c1a: nop
  0x00007fffe1243c1b: nop
  0x00007fffe1243c1c: nop
  0x00007fffe1243c1d: nop
  0x00007fffe1243c1e: nop
  0x00007fffe1243c1f: nop
[Verified Entry Point]
  0x00007fffe1243c20: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1243c27: push    %rbp
  0x00007fffe1243c28: sub     $0x40,%rsp
  0x00007fffe1243c2c: movabs  $0x7ffff4d563c0,%rax
  0x00007fffe1243c36: mov     0x8(%rax),%edx
  0x00007fffe1243c39: add     $0x8,%edx
  0x00007fffe1243c3c: mov     %edx,0x8(%rax)
  0x00007fffe1243c3f: movabs  $0x7ffff4c341c0,%rax  ;   {metadata({method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;)}
  0x00007fffe1243c49: and     $0x3ff8,%edx
  0x00007fffe1243c4f: cmp     $0x0,%edx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0095e80]
  0x00007fffe1243c52: je      0x7fffe1243d56    ;*aload_0
                                                ; - java.nio.ByteBuffer::array@0 (line 1001)

  ;;  block B6 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe1243c58: mov     0x2c(%rsi),%eax
  0x00007fffe1243c5b: push    %r10
  0x00007fffe1243c5d: cmp     0x16b15f7c(%rip),%r12  ;   {external_word}
  0x00007fffe1243c64: je      0x7fffe1243ce1
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1243c6a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1243c6f: sub     $0x80,%rsp
  0x00007fffe1243c76: mov     %rax,0x78(%rsp)
  0x00007fffe1243c7b: mov     %rcx,0x70(%rsp)
  0x00007fffe1243c80: mov     %rdx,0x68(%rsp)
  0x00007fffe1243c85: mov     %rbx,0x60(%rsp)
  0x00007fffe1243c8a: mov     %rbp,0x50(%rsp)
  0x00007fffe1243c8f: mov     %rsi,0x48(%rsp)
  0x00007fffe1243c94: mov     %rdi,0x40(%rsp)
  0x00007fffe1243c99: mov     %r8,0x38(%rsp)
  0x00007fffe1243c9e: mov     %r9,0x30(%rsp)
  0x00007fffe1243ca3: mov     %r10,0x28(%rsp)
  0x00007fffe1243ca8: mov     %r11,0x20(%rsp)
  0x00007fffe1243cad: mov     %r12,0x18(%rsp)
  0x00007fffe1243cb2: mov     %r13,0x10(%rsp)
  0x00007fffe1243cb7: mov     %r14,0x8(%rsp)
  0x00007fffe1243cbc: mov     %r15,(%rsp)
  0x00007fffe1243cc0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1243cca: movabs  $0x7fffe1243c6a,%rsi  ;   {internal_word}
  0x00007fffe1243cd4: mov     %rsp,%rdx
  0x00007fffe1243cd7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1243cdb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1243ce0: hlt
  0x00007fffe1243ce1: pop     %r10              ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)

  0x00007fffe1243ce3: cmp     $0x0,%rax
  ;;   36 branch [EQ] [B1] 
  0x00007fffe1243ce7: je      0x7fffe1243d2e    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)

  ;;  block B2 [15, 19]

  0x00007fffe1243ced: movsbl  0x28(%rsi),%edx   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)

  0x00007fffe1243cf1: cmp     $0x0,%edx
  ;;   46 branch [NE] [B3] 
  0x00007fffe1243cf4: jne     0x7fffe1243d06    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)

  ;;  block B4 [30, 34]

  0x00007fffe1243cfa: add     $0x40,%rsp
  0x00007fffe1243cfe: pop     %rbp
  0x00007fffe1243cff: test    %eax,0x16db73fb(%rip)  ;   {poll_return}
  0x00007fffe1243d05: retq                      ;*areturn
                                                ; - java.nio.ByteBuffer::array@34 (line 1005)

  ;;  block B3 [22, 29]

  ;;   58 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:22]
  0x00007fffe1243d06: nop
  0x00007fffe1243d07: nop
  0x00007fffe1243d08: jmpq    0x7fffe1243d7c    ;   {no_reloc}
  0x00007fffe1243d0d: add     %al,(%rax)
  0x00007fffe1243d0f: add     %al,(%rax)
  0x00007fffe1243d11: add     %ch,%cl
  0x00007fffe1243d13: outsl   (%rsi),%dx
  0x00007fffe1243d14: add     %al,(%rax)
  0x00007fffe1243d16: add     %cl,0xffffffffffffff8b(%rax)
                                                ;*new  ; - java.nio.ByteBuffer::array@22 (line 1004)

  0x00007fffe1243d19: Fatal error: Disassembling failed with error code: 15<nmethod compile_id='17' compiler='C1' level='2' entry='0x00007fffe1243c00' size='1616' address='0x00007fffe1243a50' relocation_offset='304' insts_offset='432' stub_offset='944' scopes_data_offset='1176' scopes_pcs_offset='1288' dependencies_offset='1608' method='java/nio/ByteBuffer array ()[B' bytes='35' count='31518' iicount='31518' stamp='118.399'/>
<writer thread='140737327351552'/>
<task_queued compile_id='84' method='java/io/OutputStream flush ()V' bytes='1' count='25723' iicount='25723' level='1' stamp='118.401' comment='tiered' hot_count='25723'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe123c950:
Code:
Argument 0 is unknown.RIP: 0x7fffe123cae0 Code size: 0x00000290
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47808} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B3 [0, 0]

  0x00007fffe123cae0: mov     0x8(%rsi),%r10d
  0x00007fffe123cae4: shl     $0x3,%r10
  0x00007fffe123cae8: cmp     %rax,%r10
  0x00007fffe123caeb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123caf1: nop
  0x00007fffe123caf2: nop
  0x00007fffe123caf3: nop
  0x00007fffe123caf4: nop
  0x00007fffe123caf5: nop
  0x00007fffe123caf6: nop
  0x00007fffe123caf7: nop
  0x00007fffe123caf8: nop
  0x00007fffe123caf9: nop
  0x00007fffe123cafa: nop
  0x00007fffe123cafb: nop
  0x00007fffe123cafc: nop
  0x00007fffe123cafd: nop
  0x00007fffe123cafe: nop
  0x00007fffe123caff: nop
[Verified Entry Point]
  0x00007fffe123cb00: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123cb07: push    %rbp
  0x00007fffe123cb08: sub     $0x30,%rsp
  0x00007fffe123cb0c: movabs  $0x7ffff4d71038,%rdx
  0x00007fffe123cb16: mov     0x8(%rdx),%eax
  0x00007fffe123cb19: add     $0x8,%eax
  0x00007fffe123cb1c: mov     %eax,0x8(%rdx)
  0x00007fffe123cb1f: movabs  $0x7ffff4c47808,%rdx  ;   {metadata({method} {0x00007ffff4c47808} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;)}
  0x00007fffe123cb29: and     $0x3ff8,%eax
  0x00007fffe123cb2f: cmp     $0x0,%eax
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb00943c0]
  0x00007fffe123cb32: je      0x7fffe123cc16    ;*aload_0
                                                ; - java.io.BufferedWriter::ensureOpen@0 (line 115)

  ;;  block B4 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe123cb38: mov     0x1c(%rsi),%edx
  0x00007fffe123cb3b: push    %r10
  0x00007fffe123cb3d: cmp     0x16b1d09c(%rip),%r12  ;   {external_word}
  0x00007fffe123cb44: je      0x7fffe123cbc1
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123cb4a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123cb4f: sub     $0x80,%rsp
  0x00007fffe123cb56: mov     %rax,0x78(%rsp)
  0x00007fffe123cb5b: mov     %rcx,0x70(%rsp)
  0x00007fffe123cb60: mov     %rdx,0x68(%rsp)
  0x00007fffe123cb65: mov     %rbx,0x60(%rsp)
  0x00007fffe123cb6a: mov     %rbp,0x50(%rsp)
  0x00007fffe123cb6f: mov     %rsi,0x48(%rsp)
  0x00007fffe123cb74: mov     %rdi,0x40(%rsp)
  0x00007fffe123cb79: mov     %r8,0x38(%rsp)
  0x00007fffe123cb7e: mov     %r9,0x30(%rsp)
  0x00007fffe123cb83: mov     %r10,0x28(%rsp)
  0x00007fffe123cb88: mov     %r11,0x20(%rsp)
  0x00007fffe123cb8d: mov     %r12,0x18(%rsp)
  0x00007fffe123cb92: mov     %r13,0x10(%rsp)
  0x00007fffe123cb97: mov     %r14,0x8(%rsp)
  0x00007fffe123cb9c: mov     %r15,(%rsp)
  0x00007fffe123cba0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123cbaa: movabs  $0x7fffe123cb4a,%rsi  ;   {internal_word}
  0x00007fffe123cbb4: mov     %rsp,%rdx
  0x00007fffe123cbb7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123cbbb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123cbc0: hlt
  0x00007fffe123cbc1: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)

  0x00007fffe123cbc3: cmp     $0x0,%rdx
  ;;   36 branch [EQ] [B1] 
  0x00007fffe123cbc7: je      0x7fffe123cbd9    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)

  ;;  block B2 [17, 17]

  0x00007fffe123cbcd: add     $0x30,%rsp
  0x00007fffe123cbd1: pop     %rbp
  0x00007fffe123cbd2: test    %eax,0x16dbe528(%rip)  ;   {poll_return}
  0x00007fffe123cbd8: retq                      ;*return
                                                ; - java.io.BufferedWriter::ensureOpen@17 (line 117)

  ;;  block B1 [7, 16]

  ;;   46 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe123cbd9: nop
  0x00007fffe123cbda: nop
  0x00007fffe123cbdb: nop
  0x00007fffe123cbdc: nop
  0x00007fffe123cbdd: nop
  0x00007fffe123cbde: nop
  0x00007fffe123cbdf: nop
  0x00007fffe123cbe0: jmpq    0x7fffe123cc3c    ;   {no_reloc}
  0x00007fffe123cbe5: add     %al,(%rax)
  0x00007fffe123cbe7: add     %al,(%rax)
  0x00007fffe123cbe9: add     %ch,%cl
  0x00007fffe123cbeb: push    %rdi
  0x00007fffe123cbec: add     %al,(%rax)
  0x00007fffe123cbee: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe123cbf1: pop     %rax
  0x00007fffe123cbf2: xlat    (%rbx)
  0x00007fffe123cbf3: xlat    (%rbx)
  0x00007fffe123cbf5: add     %al,(%rax)
  0x00007fffe123cbf7: add     %al,(%rax)
  0x00007fffe123cbf9: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.BufferedWriter::ensureOpen@13 (line 116)

  0x00007fffe123cbfc: mov     %rax,0x20(%rsp)
  0x00007fffe123cc01: nop
  0x00007fffe123cc02: nop
  0x00007fffe123cc03: nop
  0x00007fffe123cc04: nop
  0x00007fffe123cc05: nop
  0x00007fffe123cc06: nop
  0x00007fffe123cc07: callq   0x7fffe1105e80    ; OopMap{[32]=Oop off=300}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.BufferedWriter::ensureOpen@13 (line 116)
                                                ;   {optimized virtual_call}
  0x00007fffe123cc0c: mov     0x20(%rsp),%rax
  0x00007fffe123cc11: jmpq    0x7fffe123cc7b
  ;; CounterOverflowStub slow case
  0x00007fffe123cc16: mov     %rdx,0x8(%rsp)
  0x00007fffe123cc1b: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe123cc23: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=328}
                                                ;*synchronization entry
                                                ; - java.io.BufferedWriter::ensureOpen@-1 (line 115)
                                                ;   {runtime_call}
  0x00007fffe123cc28: jmpq    0x7fffe123cb38
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe123cc2d: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe123cc37: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe123cc3c: callq   0x7fffe11fc960    ; OopMap{off=353}
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ;   {runtime_call}
  0x00007fffe123cc41: jmp     0x7fffe123cbe0
  0x00007fffe123cc43: nop
  0x00007fffe123cc44: nop
  0x00007fffe123cc45: nop
  ;; NewInstanceStub slow case
  0x00007fffe123cc46: mov     %rdx,%rdx
  0x00007fffe123cc49: callq   0x7fffe11668a0    ; OopMap{off=366}
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ;   {runtime_call}
  0x00007fffe123cc4e: jmp     0x7fffe123cbef
  0x00007fffe123cc50: nop
  0x00007fffe123cc51: nop
  ;; Unwind handler
  0x00007fffe123cc52: mov     0x348(%r15),%rax
  0x00007fffe123cc59: movabs  $0x0,%r10
  0x00007fffe123cc63: mov     %r10,0x348(%r15)
  0x00007fffe123cc6a: movabs  $0x0,%r10
  0x00007fffe123cc74: mov     %r10,0x350(%r15)
  0x00007fffe123cc7b: add     $0x30,%rsp
  0x00007fffe123cc7f: pop     %rbp
  0x00007fffe123cc80: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe123cc85: hlt
  0x00007fffe123cc86: hlt
  0x00007fffe123cc87: hlt
  0x00007fffe123cc88: hlt
  0x00007fffe123cc89: hlt
  0x00007fffe123cc8a: hlt
  0x00007fffe123cc8b: hlt
  0x00007fffe123cc8c: hlt
  0x00007fffe123cc8d: hlt
  0x00007fffe123cc8e: hlt
  0x00007fffe123cc8f: hlt
  0x00007fffe123cc90: hlt
  0x00007fffe123cc91: hlt
  0x00007fffe123cc92: hlt
  0x00007fffe123cc93: hlt
  0x00007fffe123cc94: hlt
  0x00007fffe123cc95: hlt
  0x00007fffe123cc96: hlt
  0x00007fffe123cc97: hlt
  0x00007fffe123cc98: hlt
  0x00007fffe123cc99: hlt
  0x00007fffe123cc9a: hlt
  0x00007fffe123cc9b: hlt
  0x00007fffe123cc9c: hlt
  0x00007fffe123cc9d: hlt
  0x00007fffe123cc9e: hlt
  0x00007fffe123cc9f: hlt
[Stub Code]
  0x00007fffe123cca0: nop                       ;   {no_reloc}
  0x00007fffe123cca1: nop
  0x00007fffe123cca2: nop
  0x00007fffe123cca3: nop
  0x00007fffe123cca4: nop
  0x00007fffe123cca5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe123ccaf: jmpq    0x7fffe123ccaf    ;   {runtime_call}
[Exception Handler]
  0x00007fffe123ccb4: movabs  $0xdead,%rbx
  0x00007fffe123ccbe: movabs  $0xdead,%rcx
  0x00007fffe123ccc8: movabs  $0xdead,%rsi
  0x00007fffe123ccd2: movabs  $0xdead,%rdi
  0x00007fffe123ccdc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe123cce1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123cce6: sub     $0x80,%rsp
  0x00007fffe123cced: mov     %rax,0x78(%rsp)
  0x00007fffe123ccf2: mov     %rcx,0x70(%rsp)
  0x00007fffe123ccf7: mov     %rdx,0x68(%rsp)
  0x00007fffe123ccfc: mov     %rbx,0x60(%rsp)
  0x00007fffe123cd01: mov     %rbp,0x50(%rsp)
  0x00007fffe123cd06: mov     %rsi,0x48(%rsp)
  0x00007fffe123cd0b: mov     %rdi,0x40(%rsp)
  0x00007fffe123cd10: mov     %r8,0x38(%rsp)
  0x00007fffe123cd15: mov     %r9,0x30(%rsp)
  0x00007fffe123cd1a: mov     %r10,0x28(%rsp)
  0x00007fffe123cd1f: mov     %r11,0x20(%rsp)
  0x00007fffe123cd24: mov     %r12,0x18(%rsp)
  0x00007fffe123cd29: mov     %r13,0x10(%rsp)
  0x00007fffe123cd2e: mov     %r14,0x8(%rsp)
  0x00007fffe123cd33: mov     %r15,(%rsp)
  0x00007fffe123cd37: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123cd41: movabs  $0x7fffe123cce1,%rsi  ;   {internal_word}
  0x00007fffe123cd4b: mov     %rsp,%rdx
  0x00007fffe123cd4e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123cd52: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123cd57: hlt
[Deopt Handler Code]
  0x00007fffe123cd58: movabs  $0x7fffe123cd58,%r10  ;   {section_word}
  0x00007fffe123cd62: push    %r10
  0x00007fffe123cd64: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123cd69: hlt
  0x00007fffe123cd6a: hlt
  0x00007fffe123cd6b: hlt
  0x00007fffe123cd6c: hlt
  0x00007fffe123cd6d: hlt
  0x00007fffe123cd6e: hlt
  0x00007fffe123cd6f: hlt
<nmethod compile_id='18' compiler='C1' level='2' entry='0x00007fffe123cae0' size='1336' address='0x00007fffe123c950' relocation_offset='304' insts_offset='400' stub_offset='848' scopes_data_offset='1064' scopes_pcs_offset='1136' dependencies_offset='1328' method='java/io/BufferedWriter ensureOpen ()V' bytes='18' count='27779' iicount='27779' stamp='118.413'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe123a210:
Code:
Argument 0 is unknown.RIP: 0x7fffe123a360 Code size: 0x00000078
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c234e0} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/io/PrintStream&apos;
  #           [sp+0x20]  (sp of caller)
  ;; N29: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123a360: mov     0x8(%rsi),%r10d
  0x00007fffe123a364: shl     $0x3,%r10
  0x00007fffe123a368: cmp     %r10,%rax
  0x00007fffe123a36b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123a371: nop
  0x00007fffe123a372: nop
  0x00007fffe123a373: nop
  0x00007fffe123a374: nop
  0x00007fffe123a375: nop
  0x00007fffe123a376: nop
  0x00007fffe123a377: nop
  0x00007fffe123a378: nop
  0x00007fffe123a379: nop
  0x00007fffe123a37a: nop
  0x00007fffe123a37b: nop
  0x00007fffe123a37c: nop
  0x00007fffe123a37d: nop
  0x00007fffe123a37e: nop
  0x00007fffe123a37f: nop
[Verified Entry Point]
  ;; B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123a380: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123a387: push    %rbp
  0x00007fffe123a388: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - java.io.PrintStream::ensureOpen@-1 (line 324)

  0x00007fffe123a38c: mov     0xc(%rsi),%r11d   ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)

  0x00007fffe123a390: test    %r11d,%r11d
  0x00007fffe123a393: je      0x7fffe123a3a1    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)

  ;; B2: #	N29 &lt;- B1  Freq: 1

  0x00007fffe123a395: add     $0x10,%rsp
  0x00007fffe123a399: pop     %rbp
  0x00007fffe123a39a: test    %eax,0x16dc0c60(%rip)  ;   {poll_return}
  0x00007fffe123a3a0: retq
  ;; B3: #	N29 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe123a3a1: mov     $0xffffff65,%esi
  0x00007fffe123a3a6: mov     %r11d,%ebp
  0x00007fffe123a3a9: nop
  0x00007fffe123a3aa: nop
  0x00007fffe123a3ab: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop off=80}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ;   {runtime_call}
  0x00007fffe123a3b0: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ;   {runtime_call}
  0x00007fffe123a3b5: hlt
  0x00007fffe123a3b6: hlt
  0x00007fffe123a3b7: hlt
  0x00007fffe123a3b8: hlt
  0x00007fffe123a3b9: hlt
  0x00007fffe123a3ba: hlt
  0x00007fffe123a3bb: hlt
  0x00007fffe123a3bc: hlt
  0x00007fffe123a3bd: hlt
  0x00007fffe123a3be: hlt
  0x00007fffe123a3bf: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe123a3c0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe123a3c5: callq   0x7fffe123a3ca
  0x00007fffe123a3ca: subq    $0x5,(%rsp)
  0x00007fffe123a3cf: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123a3d4: hlt
  0x00007fffe123a3d5: hlt
  0x00007fffe123a3d6: hlt
  0x00007fffe123a3d7: hlt
<nmethod compile_id='82' compiler='C2' level='4' entry='0x00007fffe123a360' size='616' address='0x00007fffe123a210' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='464' scopes_pcs_offset='496' dependencies_offset='608' method='java/io/PrintStream ensureOpen ()V' bytes='18' count='35992' iicount='35992' stamp='118.421'/>
<make_not_entrant thread='140736956679936' compile_id='19' compiler='C1' level='2' stamp='118.421'/>
<writer thread='140737327351552'/>
<task_queued compile_id='85' method='java/nio/ByteBuffer array ()[B' bytes='35' count='33055' iicount='33055' stamp='118.431' comment='tiered' hot_count='33055'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1238690:
Code:
Argument 0 is unknown.RIP: 0x7fffe1238800 Code size: 0x00000138
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c19438} &apos;flush&apos; &apos;()V&apos; in &apos;java/io/OutputStream&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1238800: mov     0x8(%rsi),%r10d
  0x00007fffe1238804: shl     $0x3,%r10
  0x00007fffe1238808: cmp     %rax,%r10
  0x00007fffe123880b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1238811: nop
  0x00007fffe1238812: nop
  0x00007fffe1238813: nop
  0x00007fffe1238814: nop
  0x00007fffe1238815: nop
  0x00007fffe1238816: nop
  0x00007fffe1238817: nop
  0x00007fffe1238818: nop
  0x00007fffe1238819: nop
  0x00007fffe123881a: nop
  0x00007fffe123881b: nop
  0x00007fffe123881c: nop
  0x00007fffe123881d: nop
  0x00007fffe123881e: nop
  0x00007fffe123881f: nop
[Verified Entry Point]
  0x00007fffe1238820: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1238827: push    %rbp
  0x00007fffe1238828: sub     $0x30,%rsp        ;*return
                                                ; - java.io.OutputStream::flush@0 (line 139)

  ;;  block B0 [0, 0]

  0x00007fffe123882c: add     $0x30,%rsp
  0x00007fffe1238830: pop     %rbp
  0x00007fffe1238831: test    %eax,0x16dc28c9(%rip)  ;   {poll_return}
  0x00007fffe1238837: retq
  0x00007fffe1238838: nop
  0x00007fffe1238839: nop
  ;; Unwind handler
  0x00007fffe123883a: mov     0x348(%r15),%rax
  0x00007fffe1238841: movabs  $0x0,%r10
  0x00007fffe123884b: mov     %r10,0x348(%r15)
  0x00007fffe1238852: movabs  $0x0,%r10
  0x00007fffe123885c: mov     %r10,0x350(%r15)
  0x00007fffe1238863: add     $0x30,%rsp
  0x00007fffe1238867: pop     %rbp
  0x00007fffe1238868: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe123886d: hlt
  0x00007fffe123886e: hlt
  0x00007fffe123886f: hlt
  0x00007fffe1238870: hlt
  0x00007fffe1238871: hlt
  0x00007fffe1238872: hlt
  0x00007fffe1238873: hlt
  0x00007fffe1238874: hlt
  0x00007fffe1238875: hlt
  0x00007fffe1238876: hlt
  0x00007fffe1238877: hlt
  0x00007fffe1238878: hlt
  0x00007fffe1238879: hlt
  0x00007fffe123887a: hlt
  0x00007fffe123887b: hlt
  0x00007fffe123887c: hlt
  0x00007fffe123887d: hlt
  0x00007fffe123887e: hlt
  0x00007fffe123887f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1238880: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe123888a: movabs  $0xdead,%rcx
  0x00007fffe1238894: movabs  $0xdead,%rsi
  0x00007fffe123889e: movabs  $0xdead,%rdi
  0x00007fffe12388a8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12388ad: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12388b2: sub     $0x80,%rsp
  0x00007fffe12388b9: mov     %rax,0x78(%rsp)
  0x00007fffe12388be: mov     %rcx,0x70(%rsp)
  0x00007fffe12388c3: mov     %rdx,0x68(%rsp)
  0x00007fffe12388c8: mov     %rbx,0x60(%rsp)
  0x00007fffe12388cd: mov     %rbp,0x50(%rsp)
  0x00007fffe12388d2: mov     %rsi,0x48(%rsp)
  0x00007fffe12388d7: mov     %rdi,0x40(%rsp)
  0x00007fffe12388dc: mov     %r8,0x38(%rsp)
  0x00007fffe12388e1: mov     %r9,0x30(%rsp)
  0x00007fffe12388e6: mov     %r10,0x28(%rsp)
  0x00007fffe12388eb: mov     %r11,0x20(%rsp)
  0x00007fffe12388f0: mov     %r12,0x18(%rsp)
  0x00007fffe12388f5: mov     %r13,0x10(%rsp)
  0x00007fffe12388fa: mov     %r14,0x8(%rsp)
  0x00007fffe12388ff: mov     %r15,(%rsp)
  0x00007fffe1238903: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe123890d: movabs  $0x7fffe12388ad,%rsi  ;   {internal_word}
  0x00007fffe1238917: mov     %rsp,%rdx
  0x00007fffe123891a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123891e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1238923: hlt
[Deopt Handler Code]
  0x00007fffe1238924: movabs  $0x7fffe1238924,%r10  ;   {section_word}
  0x00007fffe123892e: push    %r10
  0x00007fffe1238930: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1238935: hlt
  0x00007fffe1238936: hlt
  0x00007fffe1238937: hlt
<nmethod compile_id='84' compiler='C1' level='1' entry='0x00007fffe1238800' size='752' address='0x00007fffe1238690' relocation_offset='304' insts_offset='368' stub_offset='496' scopes_data_offset='688' scopes_pcs_offset='696' dependencies_offset='744' method='java/io/OutputStream flush ()V' bytes='1' count='28771' iicount='28771' stamp='118.446'/>
<make_not_entrant thread='140736954574592' compile_id='22' compiler='C1' level='2' stamp='118.446'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1247c50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1247dc0 Code size: 0x00000138
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c341c0} &apos;array&apos; &apos;()[B&apos; in &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x30]  (sp of caller)
  ;; N48: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1247dc0: mov     0x8(%rsi),%r10d
  0x00007fffe1247dc4: shl     $0x3,%r10
  0x00007fffe1247dc8: cmp     %r10,%rax
  0x00007fffe1247dcb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1247dd1: nop
  0x00007fffe1247dd2: nop
  0x00007fffe1247dd3: nop
  0x00007fffe1247dd4: nop
  0x00007fffe1247dd5: nop
  0x00007fffe1247dd6: nop
  0x00007fffe1247dd7: nop
  0x00007fffe1247dd8: nop
  0x00007fffe1247dd9: nop
  0x00007fffe1247dda: nop
  0x00007fffe1247ddb: nop
  0x00007fffe1247ddc: nop
  0x00007fffe1247ddd: nop
  0x00007fffe1247dde: nop
  0x00007fffe1247ddf: nop
[Verified Entry Point]
  ;; B1: #	B4 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1247de0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1247de7: push    %rbp
  0x00007fffe1247de8: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.nio.ByteBuffer::array@-1 (line 1001)

  0x00007fffe1247dec: mov     0x2c(%rsi),%r11d  ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)

  0x00007fffe1247df0: test    %r11d,%r11d
  0x00007fffe1247df3: je      0x7fffe1247e9c    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)

  ;; B2: #	B5 B3 &lt;- B1  Freq: 1

  0x00007fffe1247df9: movzbl  0x28(%rsi),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)

  0x00007fffe1247dfd: test    %ebp,%ebp
  0x00007fffe1247dff: jne     0x7fffe1247eb5    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)

  ;; B3: #	N48 &lt;- B2  Freq: 0.999999

  0x00007fffe1247e05: mov     %r11,%rax
  0x00007fffe1247e08: push    %r10
  0x00007fffe1247e0a: cmp     0x16b11dcf(%rip),%r12  ;   {external_word}
  0x00007fffe1247e11: je      0x7fffe1247e8e
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1247e17: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1247e1c: sub     $0x80,%rsp
  0x00007fffe1247e23: mov     %rax,0x78(%rsp)
  0x00007fffe1247e28: mov     %rcx,0x70(%rsp)
  0x00007fffe1247e2d: mov     %rdx,0x68(%rsp)
  0x00007fffe1247e32: mov     %rbx,0x60(%rsp)
  0x00007fffe1247e37: mov     %rbp,0x50(%rsp)
  0x00007fffe1247e3c: mov     %rsi,0x48(%rsp)
  0x00007fffe1247e41: mov     %rdi,0x40(%rsp)
  0x00007fffe1247e46: mov     %r8,0x38(%rsp)
  0x00007fffe1247e4b: mov     %r9,0x30(%rsp)
  0x00007fffe1247e50: mov     %r10,0x28(%rsp)
  0x00007fffe1247e55: mov     %r11,0x20(%rsp)
  0x00007fffe1247e5a: mov     %r12,0x18(%rsp)
  0x00007fffe1247e5f: mov     %r13,0x10(%rsp)
  0x00007fffe1247e64: mov     %r14,0x8(%rsp)
  0x00007fffe1247e69: mov     %r15,(%rsp)
  0x00007fffe1247e6d: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1247e77: movabs  $0x7fffe1247e17,%rsi  ;   {internal_word}
  0x00007fffe1247e81: mov     %rsp,%rdx
  0x00007fffe1247e84: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1247e88: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1247e8d: hlt
  0x00007fffe1247e8e: pop     %r10              ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)

  0x00007fffe1247e90: add     $0x20,%rsp
  0x00007fffe1247e94: pop     %rbp
  0x00007fffe1247e95: test    %eax,0x16db3165(%rip)  ;   {poll_return}
  0x00007fffe1247e9b: retq
  ;; B4: #	N48 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe1247e9c: mov     %rsi,%rbp
  0x00007fffe1247e9f: mov     %r11d,(%rsp)
  0x00007fffe1247ea3: mov     $0xffffff65,%esi
  0x00007fffe1247ea8: nop
  0x00007fffe1247ea9: nop
  0x00007fffe1247eaa: nop
  0x00007fffe1247eab: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop off=240}
                                                ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ;   {runtime_call}
  0x00007fffe1247eb0: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ;   {runtime_call}
  ;; B5: #	N48 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe1247eb5: mov     %rsi,(%rsp)
  0x00007fffe1247eb9: mov     $0xffffff65,%esi
  0x00007fffe1247ebe: nop
  0x00007fffe1247ebf: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=260}
                                                ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ;   {runtime_call}
  0x00007fffe1247ec4: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ;   {runtime_call}
  0x00007fffe1247ec9: hlt
  0x00007fffe1247eca: hlt
  0x00007fffe1247ecb: hlt
  0x00007fffe1247ecc: hlt
  0x00007fffe1247ecd: hlt
  0x00007fffe1247ece: hlt
  0x00007fffe1247ecf: hlt
  0x00007fffe1247ed0: hlt
  0x00007fffe1247ed1: hlt
  0x00007fffe1247ed2: hlt
  0x00007fffe1247ed3: hlt
  0x00007fffe1247ed4: hlt
  0x00007fffe1247ed5: hlt
  0x00007fffe1247ed6: hlt
  0x00007fffe1247ed7: hlt
  0x00007fffe1247ed8: hlt
  0x00007fffe1247ed9: hlt
  0x00007fffe1247eda: hlt
  0x00007fffe1247edb: hlt
  0x00007fffe1247edc: hlt
  0x00007fffe1247edd: hlt
  0x00007fffe1247ede: hlt
  0x00007fffe1247edf: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1247ee0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1247ee5: callq   0x7fffe1247eea
  0x00007fffe1247eea: subq    $0x5,(%rsp)
  0x00007fffe1247eef: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1247ef4: hlt
  0x00007fffe1247ef5: hlt
  0x00007fffe1247ef6: hlt
  0x00007fffe1247ef7: hlt
<nmethod compile_id='85' compiler='C2' level='4' entry='0x00007fffe1247dc0' size='952' address='0x00007fffe1247c50' relocation_offset='304' insts_offset='368' stub_offset='656' scopes_data_offset='688' scopes_pcs_offset='752' dependencies_offset='944' method='java/nio/ByteBuffer array ()[B' bytes='35' count='33658' iicount='33658' stamp='118.456'/>
<make_not_entrant thread='140736956679936' compile_id='17' compiler='C1' level='2' stamp='118.456'/>
<writer thread='140737327351552'/>
<task_queued compile_id='86' method='java/io/BufferedWriter ensureOpen ()V' bytes='18' count='29315' iicount='29315' stamp='118.456' comment='tiered' hot_count='29315'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe123c090:
Code:
Argument 0 is unknown.RIP: 0x7fffe123c220 Code size: 0x00000428
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c27410} &apos;flush&apos; &apos;()V&apos; in &apos;java/io/BufferedOutputStream&apos;
  #           [sp+0x40]  (sp of caller)
  ;; N329: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123c220: mov     0x8(%rsi),%r10d
  0x00007fffe123c224: shl     $0x3,%r10
  0x00007fffe123c228: cmp     %r10,%rax
  0x00007fffe123c22b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123c231: nop
  0x00007fffe123c232: nop
  0x00007fffe123c233: nop
  0x00007fffe123c234: nop
  0x00007fffe123c235: nop
  0x00007fffe123c236: nop
  0x00007fffe123c237: nop
  0x00007fffe123c238: nop
  0x00007fffe123c239: nop
  0x00007fffe123c23a: nop
  0x00007fffe123c23b: nop
  0x00007fffe123c23c: nop
  0x00007fffe123c23d: nop
  0x00007fffe123c23e: nop
  0x00007fffe123c23f: nop
[Verified Entry Point]
  ;; B1: #	B14 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123c240: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123c247: push    %rbp
  0x00007fffe123c248: sub     $0x30,%rsp
  0x00007fffe123c24c: mov     %rsi,(%rsp)
  0x00007fffe123c250: mov     (%rsi),%rax
  0x00007fffe123c253: mov     %rax,%r10
  0x00007fffe123c256: and     $0x7,%r10
  0x00007fffe123c25a: cmp     $0x5,%r10
  0x00007fffe123c25e: jne     0x7fffe123c3be
  ;; B2: #	B16 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe123c264: mov     $0x2000524d,%r10d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe123c26a: shl     $0x3,%r10
  0x00007fffe123c26e: mov     0xb0(%r10),%r10
  0x00007fffe123c275: mov     %r10,%r11
  0x00007fffe123c278: or      %r15,%r11
  0x00007fffe123c27b: mov     %r11,%r8
  0x00007fffe123c27e: xor     %rax,%r8
  0x00007fffe123c281: test    $0xffffffffffffff87,%r8
  0x00007fffe123c288: jne     0x7fffe123c425    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)

  ;; B3: #	B6 B4 &lt;- B15 B14 B2 B20  Freq: 1

  0x00007fffe123c28e: mov     (%rsp),%r10
  0x00007fffe123c292: mov     0x10(%r10),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c296: mov     0xc(%r10),%r10d   ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c29a: test    %r8d,%r8d
  0x00007fffe123c29d: jnle    0x7fffe123c2bd    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  ;; B4: #	B10 B5 &lt;- B3  Freq: 0.333376

  0x00007fffe123c29f: test    %r10d,%r10d
  0x00007fffe123c2a2: jne     0x7fffe123c385
  ;; B5: #	N329 &lt;- B9 B4  Freq: 1.01326e-06

  0x00007fffe123c2a8: mov     $0xfffffff6,%esi
  0x00007fffe123c2ad: mov     (%rsp),%rbp
  0x00007fffe123c2b1: nop
  0x00007fffe123c2b2: nop
  0x00007fffe123c2b3: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=152}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ;   {runtime_call}
  0x00007fffe123c2b8: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ;   {runtime_call}
  ;; B6: #	B29 B7 &lt;- B3  Freq: 0.666624

  0x00007fffe123c2bd: mov     (%rsp),%r11
  0x00007fffe123c2c1: mov     0x14(%r11),%ebp   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c2c5: mov     0x8(%r10),%r11d   ; implicit exception: dispatches to 0x00007fffe123c5ed
  ;; B7: #	B24 B8 &lt;- B6  Freq: 0.666624

  0x00007fffe123c2c9: cmp     $0x20004f38,%r11d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe123c2d0: jne     0x7fffe123c50b    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  ;; B8: #	B25 B9 &lt;- B7  Freq: 0.666623

  0x00007fffe123c2d6: mov     %rbp,%rdx
  0x00007fffe123c2d9: push    %r10
  0x00007fffe123c2db: cmp     0x16b1d8fe(%rip),%r12  ;   {external_word}
  0x00007fffe123c2e2: je      0x7fffe123c35f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe123c2e8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe123c2ed: sub     $0x80,%rsp
  0x00007fffe123c2f4: mov     %rax,0x78(%rsp)
  0x00007fffe123c2f9: mov     %rcx,0x70(%rsp)
  0x00007fffe123c2fe: mov     %rdx,0x68(%rsp)
  0x00007fffe123c303: mov     %rbx,0x60(%rsp)
  0x00007fffe123c308: mov     %rbp,0x50(%rsp)
  0x00007fffe123c30d: mov     %rsi,0x48(%rsp)
  0x00007fffe123c312: mov     %rdi,0x40(%rsp)
  0x00007fffe123c317: mov     %r8,0x38(%rsp)
  0x00007fffe123c31c: mov     %r9,0x30(%rsp)
  0x00007fffe123c321: mov     %r10,0x28(%rsp)
  0x00007fffe123c326: mov     %r11,0x20(%rsp)
  0x00007fffe123c32b: mov     %r12,0x18(%rsp)
  0x00007fffe123c330: mov     %r13,0x10(%rsp)
  0x00007fffe123c335: mov     %r14,0x8(%rsp)
  0x00007fffe123c33a: mov     %r15,(%rsp)
  0x00007fffe123c33e: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe123c348: movabs  $0x7fffe123c2e8,%rsi  ;   {internal_word}
  0x00007fffe123c352: mov     %rsp,%rdx
  0x00007fffe123c355: and     $0xfffffffffffffff0,%rsp
  0x00007fffe123c359: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe123c35e: hlt
  0x00007fffe123c35f: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c361: mov     %r10,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c364: movzbl  0xc(%rsi),%r9d    ;*getfield append
                                                ; - java.io.FileOutputStream::write@5 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c369: xor     %ecx,%ecx
  0x00007fffe123c36b: mov     (%rsp),%rbp
  0x00007fffe123c36f: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop off=340}
                                                ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ;   {optimized virtual_call}
  ;; B9: #	B5 B10 &lt;- B8  Freq: 0.66661

  0x00007fffe123c374: mov     %r12d,0x10(%rbp)  ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  0x00007fffe123c378: mov     0xc(%rbp),%r10d   ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)

  0x00007fffe123c37c: test    %r10d,%r10d
  0x00007fffe123c37f: je      0x7fffe123c2a8    ;*return
                                                ; - java.io.BufferedOutputStream::flushBuffer@28 (line 85)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)

  ;; B10: #	B21 B11 &lt;- B9 B4  Freq: 0.999984

  0x00007fffe123c385: mov     0x8(%r10),%r8d
  0x00007fffe123c389: cmp     $0x20004f38,%r8d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe123c390: jne     0x7fffe123c450
  ;; B11: #	B22 B12 &lt;- B10  Freq: 0.999983

  0x00007fffe123c396: mov     $0x7,%r10d
  0x00007fffe123c39c: mov     (%rsp),%r11
  0x00007fffe123c3a0: and     (%r11),%r10
  0x00007fffe123c3a3: cmp     $0x5,%r10
  0x00007fffe123c3a7: jne     0x7fffe123c465
  ;; B12: #	N329 &lt;- B23 B22 B11  Freq: 0.999983

  0x00007fffe123c3ad: add     $0x30,%rsp
  0x00007fffe123c3b1: pop     %rbp
  0x00007fffe123c3b2: test    %eax,0x16dbec48(%rip)  ;   {poll_return}
  0x00007fffe123c3b8: retq
  ;; B13: #	B14 &lt;- B16  Freq: 9.99999e-13

  0x00007fffe123c3b9: lock cmpxchg %r10,(%rsi)
  ;; B14: #	B3 B15 &lt;- B1 B13  Freq: 1e-06

  0x00007fffe123c3be: lea     0x20(%rsp),%rbx
  0x00007fffe123c3c3: mov     (%rsi),%rax
  0x00007fffe123c3c6: test    $0x2,%rax
  0x00007fffe123c3cc: jne     0x7fffe123c3f2
  0x00007fffe123c3ce: or      $0x1,%rax
  0x00007fffe123c3d2: mov     %rax,(%rbx)
  0x00007fffe123c3d5: lock cmpxchg %rbx,(%rsi)
  0x00007fffe123c3da: je      0x7fffe123c40b
  0x00007fffe123c3e0: sub     %rsp,%rax
  0x00007fffe123c3e3: and     $0xfffffffffffff007,%rax
  0x00007fffe123c3ea: mov     %rax,(%rbx)
  0x00007fffe123c3ed: jmpq    0x7fffe123c40b
  0x00007fffe123c3f2: movq    $0x3,(%rbx)
  0x00007fffe123c3f9: mov     %rax,%rbx
  0x00007fffe123c3fc: mov     0x16(%rbx),%rax
  0x00007fffe123c400: test    %rax,%rax
  0x00007fffe123c403: jne     0x7fffe123c40b
  0x00007fffe123c405: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe123c40b: je      0x7fffe123c28e
  ;; B15: #	B3 &lt;- B19 B14  Freq: 2e-12

  0x00007fffe123c411: lea     0x20(%rsp),%rdx
  0x00007fffe123c416: mov     %rsi,%rbp
  0x00007fffe123c419: nop
  0x00007fffe123c41a: nop
  0x00007fffe123c41b: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=Oop off=512}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ;   {runtime_call}
  0x00007fffe123c420: jmpq    0x7fffe123c28e
  ;; B16: #	B13 B17 &lt;- B2  Freq: 9.99999e-07

  0x00007fffe123c425: test    $0x7,%r8
  0x00007fffe123c42c: jne     0x7fffe123c3b9
  ;; B17: #	B19 B18 &lt;- B16  Freq: 9.99998e-07

  0x00007fffe123c42e: test    $0x300,%r8
  0x00007fffe123c435: jne     0x7fffe123c444
  ;; B18: #	B19 &lt;- B17  Freq: 9.99997e-07

  0x00007fffe123c437: and     $0x37f,%rax
  0x00007fffe123c43e: mov     %rax,%r11
  0x00007fffe123c441: or      %r15,%r11
  ;; B19: #	B15 B20 &lt;- B18 B17  Freq: 9.99998e-07

  0x00007fffe123c444: lock cmpxchg %r11,(%rsi)
  0x00007fffe123c449: jne     0x7fffe123c411
  ;; B20: #	B3 &lt;- B19  Freq: 9.99997e-07

  0x00007fffe123c44b: jmpq    0x7fffe123c28e
  ;; B21: #	N329 &lt;- B10  Freq: 9.99984e-07

  0x00007fffe123c450: mov     $0xffffffde,%esi
  0x00007fffe123c455: mov     %r10d,%ebp
  0x00007fffe123c458: nop
  0x00007fffe123c459: nop
  0x00007fffe123c45a: nop
  0x00007fffe123c45b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop off=576}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ;   {runtime_call}
  0x00007fffe123c460: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ;   {runtime_call}
  ;; B22: #	B12 B23 &lt;- B11  Freq: 9.99983e-07

  0x00007fffe123c465: lea     0x20(%rsp),%rax
  0x00007fffe123c46a: cmpq    $0x0,(%rax)
  0x00007fffe123c471: je      0x7fffe123c4eb
  0x00007fffe123c477: mov     (%r11),%r10
  0x00007fffe123c47a: test    $0x2,%r10
  0x00007fffe123c481: je      0x7fffe123c4e3
  0x00007fffe123c483: mov     0x16(%r10),%rax
  0x00007fffe123c487: xor     %r15,%rax
  0x00007fffe123c48a: or      0x26(%r10),%rax
  0x00007fffe123c48e: jne     0x7fffe123c4eb
  0x00007fffe123c490: mov     0x36(%r10),%rax
  0x00007fffe123c494: or      0x3e(%r10),%rax
  0x00007fffe123c498: jne     0x7fffe123c4a4
  0x00007fffe123c49a: movq    $0x0,0x16(%r10)
  0x00007fffe123c4a2: jmp     0x7fffe123c4eb
  0x00007fffe123c4a4: cmpq    $0x0,0x46(%r10)
  0x00007fffe123c4ac: je      0x7fffe123c4d7
  0x00007fffe123c4ae: movq    $0x0,0x16(%r10)
  0x00007fffe123c4b6: lock addl $0x0,(%rsp)
  0x00007fffe123c4bb: cmpq    $0x0,0x46(%r10)
  0x00007fffe123c4c3: jne     0x7fffe123c4dc
  0x00007fffe123c4c5: movabs  $0x0,%rax
  0x00007fffe123c4cf: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe123c4d5: jne     0x7fffe123c4dc
  0x00007fffe123c4d7: or      $0x1,%eax
  0x00007fffe123c4da: jmp     0x7fffe123c4eb
  0x00007fffe123c4dc: test    $0x0,%eax
  0x00007fffe123c4e1: jmp     0x7fffe123c4eb
  0x00007fffe123c4e3: mov     (%rax),%r10
  0x00007fffe123c4e6: lock cmpxchg %r10,(%r11)
  0x00007fffe123c4eb: je      0x7fffe123c3ad
  ;; B23: #	B12 &lt;- B22  Freq: 9.99983e-13

  0x00007fffe123c4f1: mov     %r11,%rdi
  0x00007fffe123c4f4: lea     0x20(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)

  0x00007fffe123c4f9: movabs  $0x7ffff744655c,%r10
  0x00007fffe123c503: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)

  0x00007fffe123c506: jmpq    0x7fffe123c3ad
  ;; B24: #	N329 &lt;- B7  Freq: 6.66624e-07

  0x00007fffe123c50b: mov     $0xffffffde,%esi
  0x00007fffe123c510: mov     %r10d,0x18(%rsp)
  0x00007fffe123c515: mov     %r8d,0x1c(%rsp)
  0x00007fffe123c51a: nop
  0x00007fffe123c51b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop off=768}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ;   {runtime_call}
  0x00007fffe123c520: callq   0x7ffff736b4ea    ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ;   {runtime_call}
  ;; B25: #	B27 B26 &lt;- B8  Freq: 6.66623e-06

  0x00007fffe123c525: mov     %rax,%rbx
  0x00007fffe123c528: mov     $0x7,%r10d
  0x00007fffe123c52e: and     0x0(%rbp),%r10
  0x00007fffe123c532: cmp     $0x5,%r10
  0x00007fffe123c536: jne     0x7fffe123c545
  ;; B26: #	N329 &lt;- B28 B27 B25  Freq: 6.66623e-06

  0x00007fffe123c538: mov     %rbx,%rsi
  0x00007fffe123c53b: add     $0x30,%rsp
  0x00007fffe123c53f: pop     %rbp
  0x00007fffe123c540: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B27: #	B26 B28 &lt;- B25  Freq: 6.66623e-12

  0x00007fffe123c545: lea     0x20(%rsp),%rax
  0x00007fffe123c54a: cmpq    $0x0,(%rax)
  0x00007fffe123c551: je      0x7fffe123c5cd
  0x00007fffe123c557: mov     0x0(%rbp),%r10
  0x00007fffe123c55b: test    $0x2,%r10
  0x00007fffe123c562: je      0x7fffe123c5c4
  0x00007fffe123c564: mov     0x16(%r10),%rax
  0x00007fffe123c568: xor     %r15,%rax
  0x00007fffe123c56b: or      0x26(%r10),%rax
  0x00007fffe123c56f: jne     0x7fffe123c5cd
  0x00007fffe123c571: mov     0x36(%r10),%rax
  0x00007fffe123c575: or      0x3e(%r10),%rax
  0x00007fffe123c579: jne     0x7fffe123c585
  0x00007fffe123c57b: movq    $0x0,0x16(%r10)
  0x00007fffe123c583: jmp     0x7fffe123c5cd
  0x00007fffe123c585: cmpq    $0x0,0x46(%r10)
  0x00007fffe123c58d: je      0x7fffe123c5b8
  0x00007fffe123c58f: movq    $0x0,0x16(%r10)
  0x00007fffe123c597: lock addl $0x0,(%rsp)
  0x00007fffe123c59c: cmpq    $0x0,0x46(%r10)
  0x00007fffe123c5a4: jne     0x7fffe123c5bd
  0x00007fffe123c5a6: movabs  $0x0,%rax
  0x00007fffe123c5b0: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe123c5b6: jne     0x7fffe123c5bd
  0x00007fffe123c5b8: or      $0x1,%eax
  0x00007fffe123c5bb: jmp     0x7fffe123c5cd
  0x00007fffe123c5bd: test    $0x0,%eax
  0x00007fffe123c5c2: jmp     0x7fffe123c5cd
  0x00007fffe123c5c4: mov     (%rax),%r10
  0x00007fffe123c5c7: lock cmpxchg %r10,0x0(%rbp)
  0x00007fffe123c5cd: je      0x7fffe123c538
  ;; B28: #	B26 &lt;- B27  Freq: 6.66623e-18

  0x00007fffe123c5d3: mov     %rbp,%rdi
  0x00007fffe123c5d6: lea     0x20(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)

  0x00007fffe123c5db: movabs  $0x7ffff744655c,%r10
  0x00007fffe123c5e5: callq   %r10
  0x00007fffe123c5e8: jmpq    0x7fffe123c538
  ;; B29: #	N329 &lt;- B6  Freq: 6.75476e-07

  0x00007fffe123c5ed: mov     $0xfffffff6,%esi
  0x00007fffe123c5f2: mov     %r8d,0x8(%rsp)
  0x00007fffe123c5f7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop off=988}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ;   {runtime_call}
  0x00007fffe123c5fc: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ;   {runtime_call}
  0x00007fffe123c601: hlt
  0x00007fffe123c602: hlt
  0x00007fffe123c603: hlt
  0x00007fffe123c604: hlt
  0x00007fffe123c605: hlt
  0x00007fffe123c606: hlt
  0x00007fffe123c607: hlt
  0x00007fffe123c608: hlt
  0x00007fffe123c609: hlt
  0x00007fffe123c60a: hlt
  0x00007fffe123c60b: hlt
  0x00007fffe123c60c: hlt
  0x00007fffe123c60d: hlt
  0x00007fffe123c60e: hlt
  0x00007fffe123c60f: hlt
  0x00007fffe123c610: hlt
  0x00007fffe123c611: hlt
  0x00007fffe123c612: hlt
  0x00007fffe123c613: hlt
  0x00007fffe123c614: hlt
  0x00007fffe123c615: hlt
  0x00007fffe123c616: hlt
  0x00007fffe123c617: hlt
  0x00007fffe123c618: hlt
  0x00007fffe123c619: hlt
  0x00007fffe123c61a: hlt
  0x00007fffe123c61b: hlt
  0x00007fffe123c61c: hlt
  0x00007fffe123c61d: hlt
  0x00007fffe123c61e: hlt
  0x00007fffe123c61f: hlt
[Stub Code]
  0x00007fffe123c620: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe123c62a: jmpq    0x7fffe123c62a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe123c62f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe123c634: callq   0x7fffe123c639
  0x00007fffe123c639: subq    $0x5,(%rsp)
  0x00007fffe123c63e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123c643: hlt
  0x00007fffe123c644: hlt
  0x00007fffe123c645: hlt
  0x00007fffe123c646: hlt
  0x00007fffe123c647: hlt
<nmethod compile_id='83' compiler='C2' level='4' entry='0x00007fffe123c220' size='2192' address='0x00007fffe123c090' relocation_offset='304' insts_offset='400' stub_offset='1424' scopes_data_offset='1504' scopes_pcs_offset='1712' dependencies_offset='2144' handler_table_offset='2152' nul_chk_table_offset='2176' method='java/io/BufferedOutputStream flush ()V' bytes='12' count='32395' iicount='32395' stamp='118.493'/>
<make_not_entrant thread='140736955627264' compile_id='20' compiler='C1' level='2' stamp='118.493'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe124cf10:
Code:
Argument 0 is unknown.RIP: 0x7fffe124d060 Code size: 0x00000078
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47808} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;
  #           [sp+0x20]  (sp of caller)
  ;; N29: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124d060: mov     0x8(%rsi),%r10d
  0x00007fffe124d064: shl     $0x3,%r10
  0x00007fffe124d068: cmp     %r10,%rax
  0x00007fffe124d06b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124d071: nop
  0x00007fffe124d072: nop
  0x00007fffe124d073: nop
  0x00007fffe124d074: nop
  0x00007fffe124d075: nop
  0x00007fffe124d076: nop
  0x00007fffe124d077: nop
  0x00007fffe124d078: nop
  0x00007fffe124d079: nop
  0x00007fffe124d07a: nop
  0x00007fffe124d07b: nop
  0x00007fffe124d07c: nop
  0x00007fffe124d07d: nop
  0x00007fffe124d07e: nop
  0x00007fffe124d07f: nop
[Verified Entry Point]
  ;; B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124d080: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124d087: push    %rbp
  0x00007fffe124d088: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - java.io.BufferedWriter::ensureOpen@-1 (line 115)

  0x00007fffe124d08c: mov     0x1c(%rsi),%r11d  ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)

  0x00007fffe124d090: test    %r11d,%r11d
  0x00007fffe124d093: je      0x7fffe124d0a1    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)

  ;; B2: #	N29 &lt;- B1  Freq: 1

  0x00007fffe124d095: add     $0x10,%rsp
  0x00007fffe124d099: pop     %rbp
  0x00007fffe124d09a: test    %eax,0x16dadf60(%rip)  ;   {poll_return}
  0x00007fffe124d0a0: retq
  ;; B3: #	N29 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe124d0a1: mov     $0xffffff65,%esi
  0x00007fffe124d0a6: mov     %r11d,%ebp
  0x00007fffe124d0a9: nop
  0x00007fffe124d0aa: nop
  0x00007fffe124d0ab: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop off=80}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ;   {runtime_call}
  0x00007fffe124d0b0: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ;   {runtime_call}
  0x00007fffe124d0b5: hlt
  0x00007fffe124d0b6: hlt
  0x00007fffe124d0b7: hlt
  0x00007fffe124d0b8: hlt
  0x00007fffe124d0b9: hlt
  0x00007fffe124d0ba: hlt
  0x00007fffe124d0bb: hlt
  0x00007fffe124d0bc: hlt
  0x00007fffe124d0bd: hlt
  0x00007fffe124d0be: hlt
  0x00007fffe124d0bf: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe124d0c0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe124d0c5: callq   0x7fffe124d0ca
  0x00007fffe124d0ca: subq    $0x5,(%rsp)
  0x00007fffe124d0cf: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124d0d4: hlt
  0x00007fffe124d0d5: hlt
  0x00007fffe124d0d6: hlt
  0x00007fffe124d0d7: hlt
<nmethod compile_id='86' compiler='C2' level='4' entry='0x00007fffe124d060' size='616' address='0x00007fffe124cf10' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='464' scopes_pcs_offset='496' dependencies_offset='608' method='java/io/BufferedWriter ensureOpen ()V' bytes='18' count='32331' iicount='32332' stamp='118.504'/>
<make_not_entrant thread='140736956679936' compile_id='18' compiler='C1' level='2' stamp='118.504'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe124b010:
Code:
Argument 0 is unknown.RIP: 0x7fffe124b2e0 Code size: 0x00000ad0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b55fe0} &apos;&lt;init&gt;&apos; &apos;(IIII)V&apos; in &apos;java/nio/Buffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/Buffer&apos;
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  # parm2:    r8        = int
  # parm3:    r9        = int
  #           [sp+0xc0]  (sp of caller)
  ;;  block B39 [0, 0]

  0x00007fffe124b2e0: mov     0x8(%rsi),%r10d
  0x00007fffe124b2e4: shl     $0x3,%r10
  0x00007fffe124b2e8: cmp     %rax,%r10
  0x00007fffe124b2eb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124b2f1: nop
  0x00007fffe124b2f2: nop
  0x00007fffe124b2f3: nop
  0x00007fffe124b2f4: nop
  0x00007fffe124b2f5: nop
  0x00007fffe124b2f6: nop
  0x00007fffe124b2f7: nop
  0x00007fffe124b2f8: nop
  0x00007fffe124b2f9: nop
  0x00007fffe124b2fa: nop
  0x00007fffe124b2fb: nop
  0x00007fffe124b2fc: nop
  0x00007fffe124b2fd: nop
  0x00007fffe124b2fe: nop
  0x00007fffe124b2ff: nop
[Verified Entry Point]
  0x00007fffe124b300: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124b307: push    %rbp
  0x00007fffe124b308: sub     $0xb0,%rsp
  0x00007fffe124b30f: mov     %edx,0x64(%rsp)
  0x00007fffe124b313: mov     %ecx,0x60(%rsp)
  0x00007fffe124b317: movabs  $0x7ffff4c3a948,%rdi
  0x00007fffe124b321: mov     0x8(%rdi),%ebx
  0x00007fffe124b324: add     $0x8,%ebx
  0x00007fffe124b327: mov     %ebx,0x8(%rdi)
  0x00007fffe124b32a: movabs  $0x7ffff4b55fe0,%rdi  ;   {metadata({method} {0x00007ffff4b55fe0} &apos;&lt;init&gt;&apos; &apos;(IIII)V&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe124b334: and     $0x3ff8,%ebx
  0x00007fffe124b33a: cmp     $0x0,%ebx
  ;;   28 branch [EQ] [CounterOverflowStub: 0x00007fffb0061950]
  0x00007fffe124b33d: je      0x7fffe124bb09    ;*aload_0
                                                ; - java.nio.Buffer::&lt;init&gt;@0 (line 197)

  ;;  block B40 [0, 0]

  ;;  block B0 [0, 16]

  0x00007fffe124b343: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::&lt;init&gt;@6 (line 185)

  0x00007fffe124b34a: movl    $0x0,0x18(%rsi)   ;*putfield position
                                                ; - java.nio.Buffer::&lt;init&gt;@11 (line 186)

  0x00007fffe124b351: cmp     $0x0,%r9d
  ;;   46 branch [LT] [B1] 
  0x00007fffe124b355: jl      0x7fffe124b76e    ;*ifge
                                                ; - java.nio.Buffer::&lt;init&gt;@16 (line 198)

  ;;  block B2 [47, 66]

  0x00007fffe124b35b: mov     %r9d,0x20(%rsi)   ;*putfield capacity
                                                ; - java.nio.Buffer::&lt;init&gt;@50 (line 200)

  0x00007fffe124b35f: mov     %r8,%rdx
  0x00007fffe124b362: mov     %rsi,%rbx
  0x00007fffe124b365: mov     %rbx,%rsi         ;*invokevirtual limit
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)

  0x00007fffe124b368: mov     %rbx,0x68(%rsp)
  0x00007fffe124b36d: nop
  0x00007fffe124b36e: nop
  0x00007fffe124b36f: callq   0x7fffe1105e80    ; OopMap{[104]=Oop off=148}
                                                ;*invokevirtual limit
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {optimized virtual_call}
  0x00007fffe124b374: mov     0x60(%rsp),%edx
  0x00007fffe124b378: mov     0x68(%rsp),%rsi   ;*invokevirtual position
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)

  0x00007fffe124b37d: nop
  0x00007fffe124b37e: nop
  0x00007fffe124b37f: callq   0x7fffe1105e80    ; OopMap{[104]=Oop off=164}
                                                ;*invokevirtual position
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {optimized virtual_call}
  0x00007fffe124b384: mov     0x64(%rsp),%edx
  0x00007fffe124b388: cmp     $0x0,%edx
  ;;   72 branch [LT] [B4] 
  0x00007fffe124b38b: jl      0x7fffe124b3a3    ;*iflt
                                                ; - java.nio.Buffer::&lt;init&gt;@66 (line 203)

  ;;  block B3 [69, 71]

  0x00007fffe124b391: cmp     0x60(%rsp),%edx
  ;;   84 branch [GT] [B5] 
  0x00007fffe124b395: jnle    0x7fffe124b3b2    ;*if_icmple
                                                ; - java.nio.Buffer::&lt;init&gt;@71 (line 204)

  ;;  block B6 [115, 120]

  0x00007fffe124b39b: mov     0x68(%rsp),%rsi
  0x00007fffe124b3a0: mov     %edx,0xc(%rsi)    ;*putfield mark
                                                ; - java.nio.Buffer::&lt;init&gt;@117 (line 207)

  ;;  block B4 [120, 120]

  0x00007fffe124b3a3: add     $0xb0,%rsp
  0x00007fffe124b3aa: pop     %rbp
  0x00007fffe124b3ab: test    %eax,0x16dafd4f(%rip)  ;   {poll_return}
  0x00007fffe124b3b1: retq                      ;*return
                                                ; - java.nio.Buffer::&lt;init&gt;@120 (line 209)

  ;;  block B5 [74, 114]

  ;;  100 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:74]
  0x00007fffe124b3b2: nop
  0x00007fffe124b3b3: nop
  0x00007fffe124b3b4: nop
  0x00007fffe124b3b5: nop
  0x00007fffe124b3b6: nop
  0x00007fffe124b3b7: nop
  0x00007fffe124b3b8: jmpq    0x7fffe124bb2f    ;   {no_reloc}
  0x00007fffe124b3bd: add     %al,(%rax)
  0x00007fffe124b3bf: add     %al,(%rax)
  0x00007fffe124b3c1: add     %cl,0xffffffffffffff8b(%rcx)
  0x00007fffe124b3c4: jo      0x7fffe124b40f
  0x00007fffe124b3c7: lea     0x20(%rax),%edi
  0x00007fffe124b3ca: cmp     0x80(%r15),%rdi
  0x00007fffe124b3d1: jnbe    0x7fffe124bb39
  0x00007fffe124b3d7: mov     %rdi,0x70(%r15)
  0x00007fffe124b3db: mov     0xb0(%rdx),%rcx
  0x00007fffe124b3e2: mov     %rcx,(%rax)
  0x00007fffe124b3e5: mov     %rdx,%rcx
  0x00007fffe124b3e8: shr     $0x3,%rcx
  0x00007fffe124b3ec: mov     %ecx,0x8(%rax)
  0x00007fffe124b3ef: xor     %rcx,%rcx
  0x00007fffe124b3f2: mov     %ecx,0xc(%rax)
  0x00007fffe124b3f5: xor     %rcx,%rcx
  0x00007fffe124b3f8: mov     %rcx,0x10(%rax)
  0x00007fffe124b3fc: mov     %rcx,0x18(%rax)   ;*new  ; - java.nio.Buffer::&lt;init&gt;@74 (line 205)

  ;;  106 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:78]
  0x00007fffe124b400: jmpq    0x7fffe124bb55    ;   {no_reloc}
  0x00007fffe124b405: add     %al,(%rax)
  0x00007fffe124b407: add     %al,(%rax)
  0x00007fffe124b409: add     %cl,0xffffffffffffff89(%rax)
  0x00007fffe124b40c: and     $0x78,%al
  0x00007fffe124b40f: mov     0x70(%r15),%rax
  0x00007fffe124b413: lea     0x18(%rax),%rdi
  0x00007fffe124b417: cmp     0x80(%r15),%rdi
  0x00007fffe124b41e: jnbe    0x7fffe124bb5f
  0x00007fffe124b424: mov     %rdi,0x70(%r15)
  0x00007fffe124b428: mov     0xb0(%rdx),%rcx
  0x00007fffe124b42f: mov     %rcx,(%rax)
  0x00007fffe124b432: mov     %rdx,%rcx
  0x00007fffe124b435: shr     $0x3,%rcx
  0x00007fffe124b439: mov     %ecx,0x8(%rax)
  0x00007fffe124b43c: xor     %rcx,%rcx
  0x00007fffe124b43f: mov     %ecx,0xc(%rax)
  0x00007fffe124b442: xor     %rcx,%rcx
  0x00007fffe124b445: mov     %rcx,0x10(%rax)   ;*new  ; - java.nio.Buffer::&lt;init&gt;@78 (line 205)

  0x00007fffe124b449: mov     $0x10,%ebx
  0x00007fffe124b44e: movabs  $0x100000220,%rdx  ;   {metadata({type array char})}
  0x00007fffe124b458: mov     %rax,%r13
  0x00007fffe124b45b: movsxd  %ebx,%rbx
  0x00007fffe124b45e: mov     %rbx,%rdi
  0x00007fffe124b461: cmp     $0xffffff,%rbx
  0x00007fffe124b468: jnbe    0x7fffe124bb6c
  0x00007fffe124b46e: movabs  $0x17,%rsi
  0x00007fffe124b478: lea     (%rsi,%rbx,2),%rsi
  0x00007fffe124b47c: and     $0xfffffffffffffff8,%rsi
  0x00007fffe124b480: mov     0x70(%r15),%rax
  0x00007fffe124b484: lea     (%rax,%rsi),%rsi
  0x00007fffe124b488: cmp     0x80(%r15),%rsi
  0x00007fffe124b48f: jnbe    0x7fffe124bb6c
  0x00007fffe124b495: mov     %rsi,0x70(%r15)
  0x00007fffe124b499: sub     %rax,%rsi
  0x00007fffe124b49c: movq    $0x1,(%rax)
  0x00007fffe124b4a3: mov     %rdx,%rcx
  0x00007fffe124b4a6: shr     $0x3,%rcx
  0x00007fffe124b4aa: mov     %ecx,0x8(%rax)
  0x00007fffe124b4ad: mov     %ebx,0xc(%rax)
  0x00007fffe124b4b0: sub     $0x10,%rsi
  0x00007fffe124b4b4: je      0x7fffe124b54f
  0x00007fffe124b4ba: test    $0x7,%rsi
  0x00007fffe124b4c1: je      0x7fffe124b53e
  0x00007fffe124b4c7: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124b4cc: sub     $0x80,%rsp
  0x00007fffe124b4d3: mov     %rax,0x78(%rsp)
  0x00007fffe124b4d8: mov     %rcx,0x70(%rsp)
  0x00007fffe124b4dd: mov     %rdx,0x68(%rsp)
  0x00007fffe124b4e2: mov     %rbx,0x60(%rsp)
  0x00007fffe124b4e7: mov     %rbp,0x50(%rsp)
  0x00007fffe124b4ec: mov     %rsi,0x48(%rsp)
  0x00007fffe124b4f1: mov     %rdi,0x40(%rsp)
  0x00007fffe124b4f6: mov     %r8,0x38(%rsp)
  0x00007fffe124b4fb: mov     %r9,0x30(%rsp)
  0x00007fffe124b500: mov     %r10,0x28(%rsp)
  0x00007fffe124b505: mov     %r11,0x20(%rsp)
  0x00007fffe124b50a: mov     %r12,0x18(%rsp)
  0x00007fffe124b50f: mov     %r13,0x10(%rsp)
  0x00007fffe124b514: mov     %r14,0x8(%rsp)
  0x00007fffe124b519: mov     %r15,(%rsp)
  0x00007fffe124b51d: movabs  $0x7ffff762a5d0,%rdi  ;   {external_word}
  0x00007fffe124b527: movabs  $0x7fffe124b4c7,%rsi  ;   {internal_word}
  0x00007fffe124b531: mov     %rsp,%rdx
  0x00007fffe124b534: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124b538: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124b53d: hlt
  0x00007fffe124b53e: xor     %rbx,%rbx
  0x00007fffe124b541: shr     $0x3,%rsi
  0x00007fffe124b545: mov     %rbx,0x8(%rax,%rsi,8)
  0x00007fffe124b54a: decq    %rsi
  0x00007fffe124b54d: jne     0x7fffe124b545    ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - java.nio.Buffer::&lt;init&gt;@82 (line 205)

  0x00007fffe124b54f: mov     %rax,%r10
  0x00007fffe124b552: push    %r10
  0x00007fffe124b554: cmp     0x16b0e685(%rip),%r12  ;   {external_word}
  0x00007fffe124b55b: je      0x7fffe124b5d8
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe124b561: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124b566: sub     $0x80,%rsp
  0x00007fffe124b56d: mov     %rax,0x78(%rsp)
  0x00007fffe124b572: mov     %rcx,0x70(%rsp)
  0x00007fffe124b577: mov     %rdx,0x68(%rsp)
  0x00007fffe124b57c: mov     %rbx,0x60(%rsp)
  0x00007fffe124b581: mov     %rbp,0x50(%rsp)
  0x00007fffe124b586: mov     %rsi,0x48(%rsp)
  0x00007fffe124b58b: mov     %rdi,0x40(%rsp)
  0x00007fffe124b590: mov     %r8,0x38(%rsp)
  0x00007fffe124b595: mov     %r9,0x30(%rsp)
  0x00007fffe124b59a: mov     %r10,0x28(%rsp)
  0x00007fffe124b59f: mov     %r11,0x20(%rsp)
  0x00007fffe124b5a4: mov     %r12,0x18(%rsp)
  0x00007fffe124b5a9: mov     %r13,0x10(%rsp)
  0x00007fffe124b5ae: mov     %r14,0x8(%rsp)
  0x00007fffe124b5b3: mov     %r15,(%rsp)
  0x00007fffe124b5b7: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe124b5c1: movabs  $0x7fffe124b561,%rsi  ;   {internal_word}
  0x00007fffe124b5cb: mov     %rsp,%rdx
  0x00007fffe124b5ce: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124b5d2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124b5d7: hlt
  0x00007fffe124b5d8: pop     %r10
  0x00007fffe124b5da: mov     %r10d,0x10(%r13)
  0x00007fffe124b5de: mov     %r13,%rax
  0x00007fffe124b5e1: shr     $0x9,%rax
  0x00007fffe124b5e5: movabs  $0x7ffff591e000,%rdx
  0x00007fffe124b5ef: movb    $0x0,(%rax,%rdx)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@8 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - java.nio.Buffer::&lt;init&gt;@82 (line 205)

  0x00007fffe124b5f3: movabs  $0xd7401fc0,%rdx  ;   {oop(&quot;mark &gt; position: (&quot;)}
  0x00007fffe124b5fd: mov     %r13,%rsi         ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@87 (line 205)

  0x00007fffe124b600: mov     %r13,0x70(%rsp)
  0x00007fffe124b605: nop
  0x00007fffe124b606: nop
  0x00007fffe124b607: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [120]=Oop off=812}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@87 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b60c: mov     0x64(%rsp),%edx
  0x00007fffe124b610: mov     0x70(%rsp),%rsi   ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.nio.Buffer::&lt;init&gt;@91 (line 205)

  0x00007fffe124b615: nop
  0x00007fffe124b616: nop
  0x00007fffe124b617: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [120]=Oop off=828}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.nio.Buffer::&lt;init&gt;@91 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b61c: movabs  $0xd7402010,%rdx  ;   {oop(&quot; &gt; &quot;)}
  0x00007fffe124b626: mov     0x70(%rsp),%rsi   ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@96 (line 205)

  0x00007fffe124b62b: nop
  0x00007fffe124b62c: nop
  0x00007fffe124b62d: nop
  0x00007fffe124b62e: nop
  0x00007fffe124b62f: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [120]=Oop off=852}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@96 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b634: mov     0x60(%rsp),%edx
  0x00007fffe124b638: mov     0x70(%rsp),%rsi   ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.nio.Buffer::&lt;init&gt;@100 (line 205)

  0x00007fffe124b63d: nop
  0x00007fffe124b63e: nop
  0x00007fffe124b63f: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [120]=Oop off=868}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.nio.Buffer::&lt;init&gt;@100 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b644: movabs  $0xd7402040,%rdx  ;   {oop(&quot;)&quot;)}
  0x00007fffe124b64e: mov     0x70(%rsp),%rsi   ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@105 (line 205)

  0x00007fffe124b653: nop
  0x00007fffe124b654: nop
  0x00007fffe124b655: nop
  0x00007fffe124b656: nop
  0x00007fffe124b657: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [120]=Oop off=892}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@105 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b65c: movabs  $0x100001798,%rdx  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe124b666: mov     0x70(%r15),%rax
  0x00007fffe124b66a: lea     0x18(%rax),%rdi
  0x00007fffe124b66e: cmp     0x80(%r15),%rdi
  0x00007fffe124b675: jnbe    0x7fffe124bb76
  0x00007fffe124b67b: mov     %rdi,0x70(%r15)
  0x00007fffe124b67f: mov     0xb0(%rdx),%rcx
  0x00007fffe124b686: mov     %rcx,(%rax)
  0x00007fffe124b689: mov     %rdx,%rcx
  0x00007fffe124b68c: shr     $0x3,%rcx
  0x00007fffe124b690: mov     %ecx,0x8(%rax)
  0x00007fffe124b693: xor     %rcx,%rcx
  0x00007fffe124b696: mov     %ecx,0xc(%rax)
  0x00007fffe124b699: xor     %rcx,%rcx
  0x00007fffe124b69c: mov     %rcx,0x10(%rax)   ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@108 (line 205)

  0x00007fffe124b6a0: mov     0x70(%rsp),%rdx
  0x00007fffe124b6a5: mov     0x10(%rdx),%ecx
  0x00007fffe124b6a8: push    %r10
  0x00007fffe124b6aa: cmp     0x16b0e52f(%rip),%r12  ;   {external_word}
  0x00007fffe124b6b1: je      0x7fffe124b72e
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124b6b7: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124b6bc: sub     $0x80,%rsp
  0x00007fffe124b6c3: mov     %rax,0x78(%rsp)
  0x00007fffe124b6c8: mov     %rcx,0x70(%rsp)
  0x00007fffe124b6cd: mov     %rdx,0x68(%rsp)
  0x00007fffe124b6d2: mov     %rbx,0x60(%rsp)
  0x00007fffe124b6d7: mov     %rbp,0x50(%rsp)
  0x00007fffe124b6dc: mov     %rsi,0x48(%rsp)
  0x00007fffe124b6e1: mov     %rdi,0x40(%rsp)
  0x00007fffe124b6e6: mov     %r8,0x38(%rsp)
  0x00007fffe124b6eb: mov     %r9,0x30(%rsp)
  0x00007fffe124b6f0: mov     %r10,0x28(%rsp)
  0x00007fffe124b6f5: mov     %r11,0x20(%rsp)
  0x00007fffe124b6fa: mov     %r12,0x18(%rsp)
  0x00007fffe124b6ff: mov     %r13,0x10(%rsp)
  0x00007fffe124b704: mov     %r14,0x8(%rsp)
  0x00007fffe124b709: mov     %r15,(%rsp)
  0x00007fffe124b70d: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124b717: movabs  $0x7fffe124b6b7,%rsi  ;   {internal_word}
  0x00007fffe124b721: mov     %rsp,%rdx
  0x00007fffe124b724: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124b728: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124b72d: hlt
  0x00007fffe124b72e: pop     %r10              ;*getfield value
                                                ; - java.lang.StringBuilder::toString@5 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@108 (line 205)

  0x00007fffe124b730: mov     0xc(%rdx),%r8d    ;*getfield count
                                                ; - java.lang.StringBuilder::toString@10 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@108 (line 205)

  0x00007fffe124b734: mov     %rcx,%rdx
  0x00007fffe124b737: mov     $0x0,%ecx
  0x00007fffe124b73c: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@108 (line 205)

  0x00007fffe124b73f: mov     %rax,0x80(%rsp)
  0x00007fffe124b747: callq   0x7fffe1105e80    ; OopMap{[120]=Oop [128]=Oop off=1132}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@108 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b74c: mov     0x80(%rsp),%rdx
  0x00007fffe124b754: mov     0x78(%rsp),%rsi   ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::&lt;init&gt;@111 (line 205)

  0x00007fffe124b759: nop
  0x00007fffe124b75a: nop
  0x00007fffe124b75b: nop
  0x00007fffe124b75c: nop
  0x00007fffe124b75d: nop
  0x00007fffe124b75e: nop
  0x00007fffe124b75f: callq   0x7fffe1105e80    ; OopMap{[120]=Oop off=1156}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::&lt;init&gt;@111 (line 205)
                                                ;   {optimized virtual_call}
  0x00007fffe124b764: mov     0x78(%rsp),%rax
  0x00007fffe124b769: jmpq    0x7fffe124bc11    ;*athrow
                                                ; - java.nio.Buffer::&lt;init&gt;@114 (line 205)

  ;;  block B1 [19, 46]

  0x00007fffe124b76e: mov     %r9d,0x88(%rsp)
  ;;  202 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:19]
  0x00007fffe124b776: nop
  0x00007fffe124b777: nop
  0x00007fffe124b778: jmpq    0x7fffe124bb92    ;   {no_reloc}
  0x00007fffe124b77d: add     %al,(%rax)
  0x00007fffe124b77f: add     %al,(%rax)
  0x00007fffe124b781: add     %cl,0xffffffffffffff8b(%rcx)
  0x00007fffe124b784: jo      0x7fffe124b7cf
  0x00007fffe124b787: lea     0x20(%rax),%edi
  0x00007fffe124b78a: cmp     0x80(%r15),%rdi
  0x00007fffe124b791: jnbe    0x7fffe124bb9c
  0x00007fffe124b797: mov     %rdi,0x70(%r15)
  0x00007fffe124b79b: mov     0xb0(%rdx),%rcx
  0x00007fffe124b7a2: mov     %rcx,(%rax)
  0x00007fffe124b7a5: mov     %rdx,%rcx
  0x00007fffe124b7a8: shr     $0x3,%rcx
  0x00007fffe124b7ac: mov     %ecx,0x8(%rax)
  0x00007fffe124b7af: xor     %rcx,%rcx
  0x00007fffe124b7b2: mov     %ecx,0xc(%rax)
  0x00007fffe124b7b5: xor     %rcx,%rcx
  0x00007fffe124b7b8: mov     %rcx,0x10(%rax)
  0x00007fffe124b7bc: mov     %rcx,0x18(%rax)   ;*new  ; - java.nio.Buffer::&lt;init&gt;@19 (line 199)

  ;;  208 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:23]
  0x00007fffe124b7c0: jmpq    0x7fffe124bbb8    ;   {no_reloc}
  0x00007fffe124b7c5: add     %al,(%rax)
  0x00007fffe124b7c7: add     %al,(%rax)
  0x00007fffe124b7c9: add     %cl,0xffffffffffffff89(%rax)
  0x00007fffe124b7cc: test    %ah,(%rax,%rbx,4)
  0x00007fffe124b7cf: add     %al,(%rax)
  0x00007fffe124b7d1: add     %cl,0xffffffffffffff8b(%rcx)
  0x00007fffe124b7d4: jo      0x7fffe124b81f
  0x00007fffe124b7d7: lea     0x18(%rax),%edi
  0x00007fffe124b7da: cmp     0x80(%r15),%rdi
  0x00007fffe124b7e1: jnbe    0x7fffe124bbc2
  0x00007fffe124b7e7: mov     %rdi,0x70(%r15)
  0x00007fffe124b7eb: mov     0xb0(%rdx),%rcx
  0x00007fffe124b7f2: mov     %rcx,(%rax)
  0x00007fffe124b7f5: mov     %rdx,%rcx
  0x00007fffe124b7f8: shr     $0x3,%rcx
  0x00007fffe124b7fc: mov     %ecx,0x8(%rax)
  0x00007fffe124b7ff: xor     %rcx,%rcx
  0x00007fffe124b802: mov     %ecx,0xc(%rax)
  0x00007fffe124b805: xor     %rcx,%rcx
  0x00007fffe124b808: mov     %rcx,0x10(%rax)   ;*new  ; - java.nio.Buffer::&lt;init&gt;@23 (line 199)

  0x00007fffe124b80c: mov     $0x10,%ebx
  0x00007fffe124b811: movabs  $0x100000220,%rdx  ;   {metadata({type array char})}
  0x00007fffe124b81b: mov     %rax,%r11
  0x00007fffe124b81e: movsxd  %ebx,%rbx
  0x00007fffe124b821: mov     %rbx,%rdi
  0x00007fffe124b824: cmp     $0xffffff,%rbx
  0x00007fffe124b82b: jnbe    0x7fffe124bbcf
  0x00007fffe124b831: movabs  $0x17,%rsi
  0x00007fffe124b83b: lea     (%rsi,%rbx,2),%rsi
  0x00007fffe124b83f: and     $0xfffffffffffffff8,%rsi
  0x00007fffe124b843: mov     0x70(%r15),%rax
  0x00007fffe124b847: lea     (%rax,%rsi),%rsi
  0x00007fffe124b84b: cmp     0x80(%r15),%rsi
  0x00007fffe124b852: jnbe    0x7fffe124bbcf
  0x00007fffe124b858: mov     %rsi,0x70(%r15)
  0x00007fffe124b85c: sub     %rax,%rsi
  0x00007fffe124b85f: movq    $0x1,(%rax)
  0x00007fffe124b866: mov     %rdx,%rcx
  0x00007fffe124b869: shr     $0x3,%rcx
  0x00007fffe124b86d: mov     %ecx,0x8(%rax)
  0x00007fffe124b870: mov     %ebx,0xc(%rax)
  0x00007fffe124b873: sub     $0x10,%rsi
  0x00007fffe124b877: je      0x7fffe124b912
  0x00007fffe124b87d: test    $0x7,%rsi
  0x00007fffe124b884: je      0x7fffe124b901
  0x00007fffe124b88a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124b88f: sub     $0x80,%rsp
  0x00007fffe124b896: mov     %rax,0x78(%rsp)
  0x00007fffe124b89b: mov     %rcx,0x70(%rsp)
  0x00007fffe124b8a0: mov     %rdx,0x68(%rsp)
  0x00007fffe124b8a5: mov     %rbx,0x60(%rsp)
  0x00007fffe124b8aa: mov     %rbp,0x50(%rsp)
  0x00007fffe124b8af: mov     %rsi,0x48(%rsp)
  0x00007fffe124b8b4: mov     %rdi,0x40(%rsp)
  0x00007fffe124b8b9: mov     %r8,0x38(%rsp)
  0x00007fffe124b8be: mov     %r9,0x30(%rsp)
  0x00007fffe124b8c3: mov     %r10,0x28(%rsp)
  0x00007fffe124b8c8: mov     %r11,0x20(%rsp)
  0x00007fffe124b8cd: mov     %r12,0x18(%rsp)
  0x00007fffe124b8d2: mov     %r13,0x10(%rsp)
  0x00007fffe124b8d7: mov     %r14,0x8(%rsp)
  0x00007fffe124b8dc: mov     %r15,(%rsp)
  0x00007fffe124b8e0: movabs  $0x7ffff762a5d0,%rdi  ;   {external_word}
  0x00007fffe124b8ea: movabs  $0x7fffe124b88a,%rsi  ;   {internal_word}
  0x00007fffe124b8f4: mov     %rsp,%rdx
  0x00007fffe124b8f7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124b8fb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124b900: hlt
  0x00007fffe124b901: xor     %rbx,%rbx
  0x00007fffe124b904: shr     $0x3,%rsi
  0x00007fffe124b908: mov     %rbx,0x8(%rax,%rsi,8)
  0x00007fffe124b90d: decq    %rsi
  0x00007fffe124b910: jne     0x7fffe124b908    ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - java.nio.Buffer::&lt;init&gt;@27 (line 199)

  0x00007fffe124b912: mov     %rax,%r10
  0x00007fffe124b915: push    %r10
  0x00007fffe124b917: cmp     0x16b0e2c2(%rip),%r12  ;   {external_word}
  0x00007fffe124b91e: je      0x7fffe124b99b
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe124b924: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124b929: sub     $0x80,%rsp
  0x00007fffe124b930: mov     %rax,0x78(%rsp)
  0x00007fffe124b935: mov     %rcx,0x70(%rsp)
  0x00007fffe124b93a: mov     %rdx,0x68(%rsp)
  0x00007fffe124b93f: mov     %rbx,0x60(%rsp)
  0x00007fffe124b944: mov     %rbp,0x50(%rsp)
  0x00007fffe124b949: mov     %rsi,0x48(%rsp)
  0x00007fffe124b94e: mov     %rdi,0x40(%rsp)
  0x00007fffe124b953: mov     %r8,0x38(%rsp)
  0x00007fffe124b958: mov     %r9,0x30(%rsp)
  0x00007fffe124b95d: mov     %r10,0x28(%rsp)
  0x00007fffe124b962: mov     %r11,0x20(%rsp)
  0x00007fffe124b967: mov     %r12,0x18(%rsp)
  0x00007fffe124b96c: mov     %r13,0x10(%rsp)
  0x00007fffe124b971: mov     %r14,0x8(%rsp)
  0x00007fffe124b976: mov     %r15,(%rsp)
  0x00007fffe124b97a: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe124b984: movabs  $0x7fffe124b924,%rsi  ;   {internal_word}
  0x00007fffe124b98e: mov     %rsp,%rdx
  0x00007fffe124b991: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124b995: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124b99a: hlt
  0x00007fffe124b99b: pop     %r10
  0x00007fffe124b99d: mov     %r10d,0x10(%r11)
  0x00007fffe124b9a1: mov     %r11,%rax
  0x00007fffe124b9a4: shr     $0x9,%rax
  0x00007fffe124b9a8: movabs  $0x7ffff591e000,%rdx
  0x00007fffe124b9b2: movb    $0x0,(%rax,%rdx)  ;*putfield value
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@8 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - java.nio.Buffer::&lt;init&gt;@27 (line 199)

  0x00007fffe124b9b6: movabs  $0xd7401f70,%rdx  ;   {oop(&quot;Negative capacity: &quot;)}
  0x00007fffe124b9c0: mov     %r11,%rsi         ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@32 (line 199)

  0x00007fffe124b9c3: mov     %r11,0x90(%rsp)
  0x00007fffe124b9cb: nop
  0x00007fffe124b9cc: nop
  0x00007fffe124b9cd: nop
  0x00007fffe124b9ce: nop
  0x00007fffe124b9cf: callq   0x7fffe1105e80    ; OopMap{[144]=Oop [152]=Oop off=1780}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 136)
                                                ; - java.nio.Buffer::&lt;init&gt;@32 (line 199)
                                                ;   {optimized virtual_call}
  0x00007fffe124b9d4: mov     0x88(%rsp),%edx
  0x00007fffe124b9db: mov     0x90(%rsp),%rsi   ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.nio.Buffer::&lt;init&gt;@37 (line 199)

  0x00007fffe124b9e3: nop
  0x00007fffe124b9e4: nop
  0x00007fffe124b9e5: nop
  0x00007fffe124b9e6: nop
  0x00007fffe124b9e7: callq   0x7fffe1105e80    ; OopMap{[144]=Oop [152]=Oop off=1804}
                                                ;*invokespecial append
                                                ; - java.lang.StringBuilder::append@2 (line 208)
                                                ; - java.nio.Buffer::&lt;init&gt;@37 (line 199)
                                                ;   {optimized virtual_call}
  0x00007fffe124b9ec: movabs  $0x100001798,%rdx  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe124b9f6: mov     0x70(%r15),%rax
  0x00007fffe124b9fa: lea     0x18(%rax),%rdi
  0x00007fffe124b9fe: cmp     0x80(%r15),%rdi
  0x00007fffe124ba05: jnbe    0x7fffe124bbd9
  0x00007fffe124ba0b: mov     %rdi,0x70(%r15)
  0x00007fffe124ba0f: mov     0xb0(%rdx),%rcx
  0x00007fffe124ba16: mov     %rcx,(%rax)
  0x00007fffe124ba19: mov     %rdx,%rcx
  0x00007fffe124ba1c: shr     $0x3,%rcx
  0x00007fffe124ba20: mov     %ecx,0x8(%rax)
  0x00007fffe124ba23: xor     %rcx,%rcx
  0x00007fffe124ba26: mov     %ecx,0xc(%rax)
  0x00007fffe124ba29: xor     %rcx,%rcx
  0x00007fffe124ba2c: mov     %rcx,0x10(%rax)   ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@40 (line 199)

  0x00007fffe124ba30: mov     0x90(%rsp),%rdx
  0x00007fffe124ba38: mov     0x10(%rdx),%ecx
  0x00007fffe124ba3b: push    %r10
  0x00007fffe124ba3d: cmp     0x16b0e19c(%rip),%r12  ;   {external_word}
  0x00007fffe124ba44: je      0x7fffe124bac1
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124ba4a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124ba4f: sub     $0x80,%rsp
  0x00007fffe124ba56: mov     %rax,0x78(%rsp)
  0x00007fffe124ba5b: mov     %rcx,0x70(%rsp)
  0x00007fffe124ba60: mov     %rdx,0x68(%rsp)
  0x00007fffe124ba65: mov     %rbx,0x60(%rsp)
  0x00007fffe124ba6a: mov     %rbp,0x50(%rsp)
  0x00007fffe124ba6f: mov     %rsi,0x48(%rsp)
  0x00007fffe124ba74: mov     %rdi,0x40(%rsp)
  0x00007fffe124ba79: mov     %r8,0x38(%rsp)
  0x00007fffe124ba7e: mov     %r9,0x30(%rsp)
  0x00007fffe124ba83: mov     %r10,0x28(%rsp)
  0x00007fffe124ba88: mov     %r11,0x20(%rsp)
  0x00007fffe124ba8d: mov     %r12,0x18(%rsp)
  0x00007fffe124ba92: mov     %r13,0x10(%rsp)
  0x00007fffe124ba97: mov     %r14,0x8(%rsp)
  0x00007fffe124ba9c: mov     %r15,(%rsp)
  0x00007fffe124baa0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124baaa: movabs  $0x7fffe124ba4a,%rsi  ;   {internal_word}
  0x00007fffe124bab4: mov     %rsp,%rdx
  0x00007fffe124bab7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124babb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124bac0: hlt
  0x00007fffe124bac1: pop     %r10              ;*getfield value
                                                ; - java.lang.StringBuilder::toString@5 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@40 (line 199)

  0x00007fffe124bac3: mov     0xc(%rdx),%r8d    ;*getfield count
                                                ; - java.lang.StringBuilder::toString@10 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@40 (line 199)

  0x00007fffe124bac7: mov     %rcx,%rdx
  0x00007fffe124baca: mov     $0x0,%ecx
  0x00007fffe124bacf: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@40 (line 199)

  0x00007fffe124bad2: mov     %rax,0xa0(%rsp)
  0x00007fffe124bada: nop
  0x00007fffe124badb: nop
  0x00007fffe124badc: nop
  0x00007fffe124badd: nop
  0x00007fffe124bade: nop
  0x00007fffe124badf: callq   0x7fffe1105e80    ; OopMap{[152]=Oop [160]=Oop off=2052}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.lang.StringBuilder::toString@13 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@40 (line 199)
                                                ;   {optimized virtual_call}
  0x00007fffe124bae4: mov     0xa0(%rsp),%rdx
  0x00007fffe124baec: mov     0x98(%rsp),%rsi   ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::&lt;init&gt;@43 (line 199)

  0x00007fffe124baf4: nop
  0x00007fffe124baf5: nop
  0x00007fffe124baf6: nop
  0x00007fffe124baf7: callq   0x7fffe1105e80    ; OopMap{[152]=Oop off=2076}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::&lt;init&gt;@43 (line 199)
                                                ;   {optimized virtual_call}
  0x00007fffe124bafc: mov     0x98(%rsp),%rax
  0x00007fffe124bb04: jmpq    0x7fffe124bc11
  ;; CounterOverflowStub slow case
  0x00007fffe124bb09: mov     %rdi,0x8(%rsp)
  0x00007fffe124bb0e: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124bb16: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=2107}
                                                ;*synchronization entry
                                                ; - java.nio.Buffer::&lt;init&gt;@-1 (line 197)
                                                ;   {runtime_call}
  0x00007fffe124bb1b: jmpq    0x7fffe124b343
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124bb20: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124bb2a: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124bb2f: callq   0x7fffe11fc960    ; OopMap{off=2132}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@74 (line 205)
                                                ;   {runtime_call}
  0x00007fffe124bb34: jmpq    0x7fffe124b3b8
  ;; NewInstanceStub slow case
  0x00007fffe124bb39: mov     %rdx,%rdx
  0x00007fffe124bb3c: callq   0x7fffe116ad80    ; OopMap{off=2145}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@74 (line 205)
                                                ;   {runtime_call}
  0x00007fffe124bb41: jmpq    0x7fffe124b400
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124bb46: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124bb50: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124bb55: callq   0x7fffe11fc960    ; OopMap{rax=Oop off=2170}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@78 (line 205)
                                                ;   {runtime_call}
  0x00007fffe124bb5a: jmpq    0x7fffe124b400
  ;; NewInstanceStub slow case
  0x00007fffe124bb5f: mov     %rdx,%rdx
  0x00007fffe124bb62: callq   0x7fffe116ad80    ; OopMap{[120]=Oop off=2183}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@78 (line 205)
                                                ;   {runtime_call}
  0x00007fffe124bb67: jmpq    0x7fffe124b449
  ;; NewTypeArrayStub slow case
  0x00007fffe124bb6c: callq   0x7fffe11f8440    ; OopMap{[120]=Oop r13=Oop off=2193}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - java.nio.Buffer::&lt;init&gt;@82 (line 205)
                                                ;   {runtime_call}
  0x00007fffe124bb71: jmpq    0x7fffe124b54f
  ;; NewInstanceStub slow case
  0x00007fffe124bb76: mov     %rdx,%rdx
  0x00007fffe124bb79: callq   0x7fffe116ad80    ; OopMap{[112]=Oop [120]=Oop off=2206}
                                                ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@108 (line 205)
                                                ;   {runtime_call}
  0x00007fffe124bb7e: jmpq    0x7fffe124b6a0
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124bb83: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124bb8d: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124bb92: callq   0x7fffe11fc960    ; OopMap{off=2231}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@19 (line 199)
                                                ;   {runtime_call}
  0x00007fffe124bb97: jmpq    0x7fffe124b778
  ;; NewInstanceStub slow case
  0x00007fffe124bb9c: mov     %rdx,%rdx
  0x00007fffe124bb9f: callq   0x7fffe116ad80    ; OopMap{off=2244}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@19 (line 199)
                                                ;   {runtime_call}
  0x00007fffe124bba4: jmpq    0x7fffe124b7c0
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124bba9: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124bbb3: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124bbb8: callq   0x7fffe11fc960    ; OopMap{rax=Oop off=2269}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@23 (line 199)
                                                ;   {runtime_call}
  0x00007fffe124bbbd: jmpq    0x7fffe124b7c0
  ;; NewInstanceStub slow case
  0x00007fffe124bbc2: mov     %rdx,%rdx
  0x00007fffe124bbc5: callq   0x7fffe116ad80    ; OopMap{[152]=Oop off=2282}
                                                ;*new  ; - java.nio.Buffer::&lt;init&gt;@23 (line 199)
                                                ;   {runtime_call}
  0x00007fffe124bbca: jmpq    0x7fffe124b80c
  ;; NewTypeArrayStub slow case
  0x00007fffe124bbcf: callq   0x7fffe11f8440    ; OopMap{[152]=Oop r11=Oop off=2292}
                                                ;*newarray
                                                ; - java.lang.AbstractStringBuilder::&lt;init&gt;@6 (line 68)
                                                ; - java.lang.StringBuilder::&lt;init&gt;@3 (line 89)
                                                ; - java.nio.Buffer::&lt;init&gt;@27 (line 199)
                                                ;   {runtime_call}
  0x00007fffe124bbd4: jmpq    0x7fffe124b912
  ;; NewInstanceStub slow case
  0x00007fffe124bbd9: mov     %rdx,%rdx
  0x00007fffe124bbdc: callq   0x7fffe116ad80    ; OopMap{[144]=Oop [152]=Oop off=2305}
                                                ;*new  ; - java.lang.StringBuilder::toString@0 (line 407)
                                                ; - java.nio.Buffer::&lt;init&gt;@40 (line 199)
                                                ;   {runtime_call}
  0x00007fffe124bbe1: jmpq    0x7fffe124ba30
  0x00007fffe124bbe6: nop
  0x00007fffe124bbe7: nop
  ;; Unwind handler
  0x00007fffe124bbe8: mov     0x348(%r15),%rax
  0x00007fffe124bbef: movabs  $0x0,%r10
  0x00007fffe124bbf9: mov     %r10,0x348(%r15)
  0x00007fffe124bc00: movabs  $0x0,%r10
  0x00007fffe124bc0a: mov     %r10,0x350(%r15)
  0x00007fffe124bc11: add     $0xb0,%rsp
  0x00007fffe124bc18: pop     %rbp
  0x00007fffe124bc19: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124bc1e: hlt
  0x00007fffe124bc1f: hlt
[Stub Code]
  0x00007fffe124bc20: nop                       ;   {no_reloc}
  0x00007fffe124bc21: nop
  0x00007fffe124bc22: nop
  0x00007fffe124bc23: nop
  0x00007fffe124bc24: nop
  0x00007fffe124bc25: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc2f: jmpq    0x7fffe124bc2f    ;   {runtime_call}
  0x00007fffe124bc34: nop
  0x00007fffe124bc35: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc3f: jmpq    0x7fffe124bc3f    ;   {runtime_call}
  0x00007fffe124bc44: nop
  0x00007fffe124bc45: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc4f: jmpq    0x7fffe124bc4f    ;   {runtime_call}
  0x00007fffe124bc54: nop
  0x00007fffe124bc55: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc5f: jmpq    0x7fffe124bc5f    ;   {runtime_call}
  0x00007fffe124bc64: nop
  0x00007fffe124bc65: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc6f: jmpq    0x7fffe124bc6f    ;   {runtime_call}
  0x00007fffe124bc74: nop
  0x00007fffe124bc75: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc7f: jmpq    0x7fffe124bc7f    ;   {runtime_call}
  0x00007fffe124bc84: nop
  0x00007fffe124bc85: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc8f: jmpq    0x7fffe124bc8f    ;   {runtime_call}
  0x00007fffe124bc94: nop
  0x00007fffe124bc95: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bc9f: jmpq    0x7fffe124bc9f    ;   {runtime_call}
  0x00007fffe124bca4: nop
  0x00007fffe124bca5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bcaf: jmpq    0x7fffe124bcaf    ;   {runtime_call}
  0x00007fffe124bcb4: nop
  0x00007fffe124bcb5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bcbf: jmpq    0x7fffe124bcbf    ;   {runtime_call}
  0x00007fffe124bcc4: nop
  0x00007fffe124bcc5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bccf: jmpq    0x7fffe124bccf    ;   {runtime_call}
  0x00007fffe124bcd4: nop
  0x00007fffe124bcd5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bcdf: jmpq    0x7fffe124bcdf    ;   {runtime_call}
  0x00007fffe124bce4: nop
  0x00007fffe124bce5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124bcef: jmpq    0x7fffe124bcef    ;   {runtime_call}
[Exception Handler]
  0x00007fffe124bcf4: movabs  $0xdead,%rbx
  0x00007fffe124bcfe: movabs  $0xdead,%rcx
  0x00007fffe124bd08: movabs  $0xdead,%rsi
  0x00007fffe124bd12: movabs  $0xdead,%rdi
  0x00007fffe124bd1c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124bd21: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124bd26: sub     $0x80,%rsp
  0x00007fffe124bd2d: mov     %rax,0x78(%rsp)
  0x00007fffe124bd32: mov     %rcx,0x70(%rsp)
  0x00007fffe124bd37: mov     %rdx,0x68(%rsp)
  0x00007fffe124bd3c: mov     %rbx,0x60(%rsp)
  0x00007fffe124bd41: mov     %rbp,0x50(%rsp)
  0x00007fffe124bd46: mov     %rsi,0x48(%rsp)
  0x00007fffe124bd4b: mov     %rdi,0x40(%rsp)
  0x00007fffe124bd50: mov     %r8,0x38(%rsp)
  0x00007fffe124bd55: mov     %r9,0x30(%rsp)
  0x00007fffe124bd5a: mov     %r10,0x28(%rsp)
  0x00007fffe124bd5f: mov     %r11,0x20(%rsp)
  0x00007fffe124bd64: mov     %r12,0x18(%rsp)
  0x00007fffe124bd69: mov     %r13,0x10(%rsp)
  0x00007fffe124bd6e: mov     %r14,0x8(%rsp)
  0x00007fffe124bd73: mov     %r15,(%rsp)
  0x00007fffe124bd77: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124bd81: movabs  $0x7fffe124bd21,%rsi  ;   {internal_word}
  0x00007fffe124bd8b: mov     %rsp,%rdx
  0x00007fffe124bd8e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124bd92: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124bd97: hlt
[Deopt Handler Code]
  0x00007fffe124bd98: movabs  $0x7fffe124bd98,%r10  ;   {section_word}
  0x00007fffe124bda2: push    %r10
  0x00007fffe124bda4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124bda9: hlt
  0x00007fffe124bdaa: hlt
  0x00007fffe124bdab: hlt
  0x00007fffe124bdac: hlt
  0x00007fffe124bdad: hlt
  0x00007fffe124bdae: hlt
  0x00007fffe124bdaf: hlt
<nmethod compile_id='24' compiler='C1' level='2' entry='0x00007fffe124b2e0' size='5368' address='0x00007fffe124b010' relocation_offset='304' insts_offset='720' stub_offset='3088' scopes_data_offset='3544' scopes_pcs_offset='4320' dependencies_offset='5360' method='java/nio/Buffer &lt;init&gt; (IIII)V' bytes='121' count='27329' iicount='27329' stamp='118.602'/>
Decoding compiled method 0x00007fffe12475d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1247740 Code size: 0x00000250
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b563d0} &apos;limit&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/Buffer&apos;
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B8 [0, 0]

  0x00007fffe1247740: mov     0x8(%rsi),%r10d
  0x00007fffe1247744: shl     $0x3,%r10
  0x00007fffe1247748: cmp     %rax,%r10
  0x00007fffe124774b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1247751: nop
  0x00007fffe1247752: nop
  0x00007fffe1247753: nop
  0x00007fffe1247754: nop
  0x00007fffe1247755: nop
  0x00007fffe1247756: nop
  0x00007fffe1247757: nop
  0x00007fffe1247758: nop
  0x00007fffe1247759: nop
  0x00007fffe124775a: nop
  0x00007fffe124775b: nop
  0x00007fffe124775c: nop
  0x00007fffe124775d: nop
  0x00007fffe124775e: nop
  0x00007fffe124775f: nop
[Verified Entry Point]
  0x00007fffe1247760: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1247767: push    %rbp
  0x00007fffe1247768: sub     $0x30,%rsp
  0x00007fffe124776c: movabs  $0x7ffff4c3a968,%rax
  0x00007fffe1247776: mov     0x8(%rax),%edi
  0x00007fffe1247779: add     $0x8,%edi
  0x00007fffe124777c: mov     %edi,0x8(%rax)
  0x00007fffe124777f: movabs  $0x7ffff4b563d0,%rax  ;   {metadata({method} {0x00007ffff4b563d0} &apos;limit&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1247789: and     $0x3ff8,%edi
  0x00007fffe124778f: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb00c1e60]
  0x00007fffe1247792: je      0x7fffe1247846    ;*iload_1
                                                ; - java.nio.Buffer::limit@0 (line 274)

  ;;  block B9 [0, 0]

  ;;  block B0 [0, 5]

  0x00007fffe1247798: mov     0x20(%rsi),%eax   ;*getfield capacity
                                                ; - java.nio.Buffer::limit@2 (line 274)

  0x00007fffe124779b: cmp     %eax,%edx
  ;;   38 branch [GT] [B2] 
  0x00007fffe124779d: jnle    0x7fffe12477de    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)

  ;;  block B1 [8, 9]

  0x00007fffe12477a3: cmp     $0x0,%edx
  ;;   50 branch [LT] [B2] 
  0x00007fffe12477a6: jl      0x7fffe12477de    ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)

  ;;  block B3 [20, 30]

  0x00007fffe12477ac: mov     %edx,0x1c(%rsi)   ;*putfield limit
                                                ; - java.nio.Buffer::limit@22 (line 276)

  0x00007fffe12477af: mov     0x18(%rsi),%eax   ;*getfield position
                                                ; - java.nio.Buffer::limit@26 (line 277)

  0x00007fffe12477b2: cmp     %edx,%eax
  ;;   66 branch [LE] [B5] 
  0x00007fffe12477b4: jle     0x7fffe12477bd    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)

  ;;  block B4 [33, 38]

  0x00007fffe12477ba: mov     %edx,0x18(%rsi)   ;*putfield position
                                                ; - java.nio.Buffer::limit@35 (line 277)

  ;;  block B5 [38, 43]

  0x00007fffe12477bd: mov     0xc(%rsi),%eax    ;*getfield mark
                                                ; - java.nio.Buffer::limit@39 (line 278)

  0x00007fffe12477c0: cmp     %edx,%eax
  ;;   86 branch [LE] [B7] 
  0x00007fffe12477c2: jle     0x7fffe12477cf    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)

  ;;  block B6 [46, 51]

  0x00007fffe12477c8: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::limit@48 (line 278)

  ;;  block B7 [51, 52]

  0x00007fffe12477cf: mov     %rsi,%rax
  0x00007fffe12477d2: add     $0x30,%rsp
  0x00007fffe12477d6: pop     %rbp
  0x00007fffe12477d7: test    %eax,0x16db3923(%rip)  ;   {poll_return}
  0x00007fffe12477dd: retq                      ;*areturn
                                                ; - java.nio.Buffer::limit@52 (line 279)

  ;;  block B2 [12, 19]

  ;;  108 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:12]
  0x00007fffe12477de: nop
  0x00007fffe12477df: nop
  0x00007fffe12477e0: jmpq    0x7fffe124786c    ;   {no_reloc}
  0x00007fffe12477e5: add     %al,(%rax)
  0x00007fffe12477e7: add     %al,(%rax)
  0x00007fffe12477e9: add     %cl,0xffffffffffffff8b(%rcx)
  0x00007fffe12477ec: jo      0x7fffe1247837
  0x00007fffe12477ef: lea     0x20(%rax),%edi
  0x00007fffe12477f2: cmp     0x80(%r15),%rdi
  0x00007fffe12477f9: jnbe    0x7fffe1247876
  0x00007fffe12477ff: mov     %rdi,0x70(%r15)
  0x00007fffe1247803: mov     0xb0(%rdx),%rcx
  0x00007fffe124780a: mov     %rcx,(%rax)
  0x00007fffe124780d: mov     %rdx,%rcx
  0x00007fffe1247810: shr     $0x3,%rcx
  0x00007fffe1247814: mov     %ecx,0x8(%rax)
  0x00007fffe1247817: xor     %rcx,%rcx
  0x00007fffe124781a: mov     %ecx,0xc(%rax)
  0x00007fffe124781d: xor     %rcx,%rcx
  0x00007fffe1247820: mov     %rcx,0x10(%rax)
  0x00007fffe1247824: mov     %rcx,0x18(%rax)   ;*new  ; - java.nio.Buffer::limit@12 (line 275)

  0x00007fffe1247828: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::limit@16 (line 275)

  0x00007fffe124782b: mov     %rax,0x20(%rsp)
  0x00007fffe1247830: nop
  0x00007fffe1247831: nop
  0x00007fffe1247832: nop
  0x00007fffe1247833: nop
  0x00007fffe1247834: nop
  0x00007fffe1247835: nop
  0x00007fffe1247836: nop
  0x00007fffe1247837: callq   0x7fffe1105e80    ; OopMap{[32]=Oop off=252}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::limit@16 (line 275)
                                                ;   {optimized virtual_call}
  0x00007fffe124783c: mov     0x20(%rsp),%rax
  0x00007fffe1247841: jmpq    0x7fffe12478ab
  ;; CounterOverflowStub slow case
  0x00007fffe1247846: mov     %rax,0x8(%rsp)
  0x00007fffe124784b: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1247853: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=280}
                                                ;*synchronization entry
                                                ; - java.nio.Buffer::limit@-1 (line 274)
                                                ;   {runtime_call}
  0x00007fffe1247858: jmpq    0x7fffe1247798
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124785d: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1247867: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124786c: callq   0x7fffe11fc960    ; OopMap{off=305}
                                                ;*new  ; - java.nio.Buffer::limit@12 (line 275)
                                                ;   {runtime_call}
  0x00007fffe1247871: jmpq    0x7fffe12477e0
  ;; NewInstanceStub slow case
  0x00007fffe1247876: mov     %rdx,%rdx
  0x00007fffe1247879: callq   0x7fffe116ad80    ; OopMap{off=318}
                                                ;*new  ; - java.nio.Buffer::limit@12 (line 275)
                                                ;   {runtime_call}
  0x00007fffe124787e: jmp     0x7fffe1247828
  0x00007fffe1247880: nop
  0x00007fffe1247881: nop
  ;; Unwind handler
  0x00007fffe1247882: mov     0x348(%r15),%rax
  0x00007fffe1247889: movabs  $0x0,%r10
  0x00007fffe1247893: mov     %r10,0x348(%r15)
  0x00007fffe124789a: movabs  $0x0,%r10
  0x00007fffe12478a4: mov     %r10,0x350(%r15)
  0x00007fffe12478ab: add     $0x30,%rsp
  0x00007fffe12478af: pop     %rbp
  0x00007fffe12478b0: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe12478b5: hlt
  0x00007fffe12478b6: hlt
  0x00007fffe12478b7: hlt
  0x00007fffe12478b8: hlt
  0x00007fffe12478b9: hlt
  0x00007fffe12478ba: hlt
  0x00007fffe12478bb: hlt
  0x00007fffe12478bc: hlt
  0x00007fffe12478bd: hlt
  0x00007fffe12478be: hlt
  0x00007fffe12478bf: hlt
[Stub Code]
  0x00007fffe12478c0: nop                       ;   {no_reloc}
  0x00007fffe12478c1: nop
  0x00007fffe12478c2: nop
  0x00007fffe12478c3: nop
  0x00007fffe12478c4: nop
  0x00007fffe12478c5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12478cf: jmpq    0x7fffe12478cf    ;   {runtime_call}
[Exception Handler]
  0x00007fffe12478d4: movabs  $0xdead,%rbx
  0x00007fffe12478de: movabs  $0xdead,%rcx
  0x00007fffe12478e8: movabs  $0xdead,%rsi
  0x00007fffe12478f2: movabs  $0xdead,%rdi
  0x00007fffe12478fc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1247901: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1247906: sub     $0x80,%rsp
  0x00007fffe124790d: mov     %rax,0x78(%rsp)
  0x00007fffe1247912: mov     %rcx,0x70(%rsp)
  0x00007fffe1247917: mov     %rdx,0x68(%rsp)
  0x00007fffe124791c: mov     %rbx,0x60(%rsp)
  0x00007fffe1247921: mov     %rbp,0x50(%rsp)
  0x00007fffe1247926: mov     %rsi,0x48(%rsp)
  0x00007fffe124792b: mov     %rdi,0x40(%rsp)
  0x00007fffe1247930: mov     %r8,0x38(%rsp)
  0x00007fffe1247935: mov     %r9,0x30(%rsp)
  0x00007fffe124793a: mov     %r10,0x28(%rsp)
  0x00007fffe124793f: mov     %r11,0x20(%rsp)
  0x00007fffe1247944: mov     %r12,0x18(%rsp)
  0x00007fffe1247949: mov     %r13,0x10(%rsp)
  0x00007fffe124794e: mov     %r14,0x8(%rsp)
  0x00007fffe1247953: mov     %r15,(%rsp)
  0x00007fffe1247957: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1247961: movabs  $0x7fffe1247901,%rsi  ;   {internal_word}
  0x00007fffe124796b: mov     %rsp,%rdx
  0x00007fffe124796e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1247972: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1247977: hlt
[Deopt Handler Code]
  0x00007fffe1247978: movabs  $0x7fffe1247978,%r10  ;   {section_word}
  0x00007fffe1247982: push    %r10
  0x00007fffe1247984: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1247989: hlt
  0x00007fffe124798a: hlt
  0x00007fffe124798b: hlt
  0x00007fffe124798c: hlt
  0x00007fffe124798d: hlt
  0x00007fffe124798e: hlt
  0x00007fffe124798f: hlt
<nmethod compile_id='25' compiler='C1' level='2' entry='0x00007fffe1247740' size='1416' address='0x00007fffe12475d0' relocation_offset='304' insts_offset='368' stub_offset='752' scopes_data_offset='968' scopes_pcs_offset='1088' dependencies_offset='1408' method='java/nio/Buffer limit (I)Ljava/nio/Buffer;' bytes='53' count='28186' iicount='28186' stamp='118.626'/>
Decoding compiled method 0x00007fffe124df90:
Code:
Argument 0 is unknown.RIP: 0x7fffe124e140 Code size: 0x000003c0
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4d51358} &apos;wrap&apos; &apos;([CII)Ljava/nio/CharBuffer;&apos; in &apos;java/nio/CharBuffer&apos;
  # parm0:    rsi:rsi   = &apos;[C&apos;
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0xd0]  (sp of caller)
  ;;  block B6 [0, 0]

  0x00007fffe124e140: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124e147: push    %rbp
  0x00007fffe124e148: sub     $0xc0,%rsp
  0x00007fffe124e14f: mov     %rdx,%r8
  0x00007fffe124e152: mov     %rcx,%r9
  0x00007fffe124e155: movabs  $0x7ffff4d541b0,%rdx
  0x00007fffe124e15f: mov     0x8(%rdx),%edi
  0x00007fffe124e162: add     $0x8,%edi
  0x00007fffe124e165: mov     %edi,0x8(%rdx)
  0x00007fffe124e168: movabs  $0x7ffff4d51358,%rdx  ;   {metadata({method} {0x00007ffff4d51358} &apos;wrap&apos; &apos;([CII)Ljava/nio/CharBuffer;&apos; in &apos;java/nio/CharBuffer&apos;)}
  0x00007fffe124e172: and     $0x3ff8,%edi
  0x00007fffe124e178: cmp     $0x0,%edi
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffa84f7da0]
  0x00007fffe124e17b: je      0x7fffe124e321
  ;;  block B7 [0, 0]

  ;;  block B0 [0, 10]

  0x00007fffe124e181: movabs  $0x100047e88,%rdx  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe124e18b: mov     %rsi,%rbx
  0x00007fffe124e18e: mov     0x70(%r15),%rax
  0x00007fffe124e192: lea     0x30(%rax),%rdi
  0x00007fffe124e196: cmp     0x80(%r15),%rdi
  0x00007fffe124e19d: jnbe    0x7fffe124e338
  0x00007fffe124e1a3: mov     %rdi,0x70(%r15)
  0x00007fffe124e1a7: mov     0xb0(%rdx),%rcx
  0x00007fffe124e1ae: mov     %rcx,(%rax)
  0x00007fffe124e1b1: mov     %rdx,%rcx
  0x00007fffe124e1b4: shr     $0x3,%rcx
  0x00007fffe124e1b8: mov     %ecx,0x8(%rax)
  0x00007fffe124e1bb: xor     %rcx,%rcx
  0x00007fffe124e1be: mov     %ecx,0xc(%rax)
  0x00007fffe124e1c1: xor     %rcx,%rcx
  0x00007fffe124e1c4: mov     %rcx,0x10(%rax)
  0x00007fffe124e1c8: mov     %rcx,0x18(%rax)
  0x00007fffe124e1cc: mov     %rcx,0x20(%rax)
  0x00007fffe124e1d0: mov     %rcx,0x28(%rax)   ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)

  0x00007fffe124e1d4: mov     0xc(%rbx),%esi    ;*arraylength
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@7 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; implicit exception: dispatches to 0x00007fffe124e345
  0x00007fffe124e1d7: add     %r8d,%r9d
  0x00007fffe124e1da: mov     $0xffffffff,%edx
  0x00007fffe124e1df: mov     %r8,%rcx
  0x00007fffe124e1e2: mov     %r9,%r8
  0x00007fffe124e1e5: mov     %rsi,%r9
  0x00007fffe124e1e8: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe124e1eb: mov     %rbx,0xa8(%rsp)
  0x00007fffe124e1f3: mov     %rax,0xa0(%rsp)
  0x00007fffe124e1fb: nop
  0x00007fffe124e1fc: nop
  0x00007fffe124e1fd: nop
  0x00007fffe124e1fe: nop
  0x00007fffe124e1ff: callq   0x7fffe1105e80    ; OopMap{[160]=Oop [168]=Oop off=196}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {optimized virtual_call}
  0x00007fffe124e204: mov     0xa0(%rsp),%rax
  0x00007fffe124e20c: mov     0xa8(%rsp),%rsi
  0x00007fffe124e214: mov     %rsi,%r10
  0x00007fffe124e217: push    %r10
  0x00007fffe124e219: cmp     0x16b0b9c0(%rip),%r12  ;   {external_word}
  0x00007fffe124e220: je      0x7fffe124e29d
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe124e226: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124e22b: sub     $0x80,%rsp
  0x00007fffe124e232: mov     %rax,0x78(%rsp)
  0x00007fffe124e237: mov     %rcx,0x70(%rsp)
  0x00007fffe124e23c: mov     %rdx,0x68(%rsp)
  0x00007fffe124e241: mov     %rbx,0x60(%rsp)
  0x00007fffe124e246: mov     %rbp,0x50(%rsp)
  0x00007fffe124e24b: mov     %rsi,0x48(%rsp)
  0x00007fffe124e250: mov     %rdi,0x40(%rsp)
  0x00007fffe124e255: mov     %r8,0x38(%rsp)
  0x00007fffe124e25a: mov     %r9,0x30(%rsp)
  0x00007fffe124e25f: mov     %r10,0x28(%rsp)
  0x00007fffe124e264: mov     %r11,0x20(%rsp)
  0x00007fffe124e269: mov     %r12,0x18(%rsp)
  0x00007fffe124e26e: mov     %r13,0x10(%rsp)
  0x00007fffe124e273: mov     %r14,0x8(%rsp)
  0x00007fffe124e278: mov     %r15,(%rsp)
  0x00007fffe124e27c: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe124e286: movabs  $0x7fffe124e226,%rsi  ;   {internal_word}
  0x00007fffe124e290: mov     %rsp,%rdx
  0x00007fffe124e293: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124e297: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124e29c: hlt
  0x00007fffe124e29d: pop     %r10
  0x00007fffe124e29f: mov     %r10d,0x2c(%rax)
  0x00007fffe124e2a3: mov     %rax,%rdx
  0x00007fffe124e2a6: shr     $0x9,%rdx
  0x00007fffe124e2aa: movabs  $0x7ffff591e000,%rsi
  0x00007fffe124e2b4: movb    $0x0,(%rdx,%rsi)  ;*putfield hb
                                                ; - java.nio.CharBuffer::&lt;init&gt;@12 (line 282)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe124e2b8: movl    $0x0,0x24(%rax)   ;*putfield offset
                                                ; - java.nio.CharBuffer::&lt;init&gt;@18 (line 283)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe124e2bf: add     $0xc0,%rsp
  0x00007fffe124e2c6: pop     %rbp
  0x00007fffe124e2c7: test    %eax,0x16dace33(%rip)  ;   {poll_return}
  0x00007fffe124e2cd: retq                      ;*areturn
                                                ; - java.nio.CharBuffer::wrap@10 (line 373)

  ;;  block B1 [11, 19]

  0x00007fffe124e2ce: mov     0x348(%r15),%rax
  0x00007fffe124e2d5: xor     %r10,%r10
  0x00007fffe124e2d8: mov     %r10,0x348(%r15)
  0x00007fffe124e2df: xor     %r10,%r10
  0x00007fffe124e2e2: mov     %r10,0x350(%r15)
  ;;   88 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:12]
  0x00007fffe124e2e9: nop
  0x00007fffe124e2ea: nop
  0x00007fffe124e2eb: nop
  0x00007fffe124e2ec: nop
  0x00007fffe124e2ed: nop
  0x00007fffe124e2ee: nop
  0x00007fffe124e2ef: nop
  0x00007fffe124e2f0: jmpq    0x7fffe124e3d0    ;   {no_reloc}
  0x00007fffe124e2f5: add     %al,(%rax)
  0x00007fffe124e2f7: add     %al,(%rax)
  0x00007fffe124e2f9: add     %ch,%cl
  0x00007fffe124e2fb: fildl   (%rax)
  0x00007fffe124e2fd: add     %al,(%rax)        ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)

  0x00007fffe124e2ff: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.CharBuffer::wrap@16 (line 375)

  0x00007fffe124e302: mov     %rax,0xb0(%rsp)
  0x00007fffe124e30a: nop
  0x00007fffe124e30b: nop
  0x00007fffe124e30c: nop
  0x00007fffe124e30d: nop
  0x00007fffe124e30e: nop
  0x00007fffe124e30f: callq   0x7fffe1105e80    ; OopMap{[176]=Oop off=468}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.CharBuffer::wrap@16 (line 375)
                                                ;   {optimized virtual_call}
  0x00007fffe124e314: mov     0xb0(%rsp),%rax
  0x00007fffe124e31c: jmpq    0x7fffe124e412
  ;; CounterOverflowStub slow case
  0x00007fffe124e321: mov     %rdx,0x8(%rsp)
  0x00007fffe124e326: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124e32e: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=499}
                                                ;*synchronization entry
                                                ; - java.nio.CharBuffer::wrap@-1 (line 373)
                                                ;   {runtime_call}
  0x00007fffe124e333: jmpq    0x7fffe124e181
  ;; NewInstanceStub slow case
  0x00007fffe124e338: mov     %rdx,%rdx
  0x00007fffe124e33b: callq   0x7fffe116ad80    ; OopMap{rbx=Oop off=512}
                                                ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ;   {runtime_call}
  0x00007fffe124e340: jmpq    0x7fffe124e1d4
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124e345: callq   0x7fffe11670a0    ; OopMap{rbx=Oop rax=Oop off=522}
                                                ;*arraylength
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@7 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe124e34a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124e34f: sub     $0x80,%rsp
  0x00007fffe124e356: mov     %rax,0x78(%rsp)
  0x00007fffe124e35b: mov     %rcx,0x70(%rsp)
  0x00007fffe124e360: mov     %rdx,0x68(%rsp)
  0x00007fffe124e365: mov     %rbx,0x60(%rsp)
  0x00007fffe124e36a: mov     %rbp,0x50(%rsp)
  0x00007fffe124e36f: mov     %rsi,0x48(%rsp)
  0x00007fffe124e374: mov     %rdi,0x40(%rsp)
  0x00007fffe124e379: mov     %r8,0x38(%rsp)
  0x00007fffe124e37e: mov     %r9,0x30(%rsp)
  0x00007fffe124e383: mov     %r10,0x28(%rsp)
  0x00007fffe124e388: mov     %r11,0x20(%rsp)
  0x00007fffe124e38d: mov     %r12,0x18(%rsp)
  0x00007fffe124e392: mov     %r13,0x10(%rsp)
  0x00007fffe124e397: mov     %r14,0x8(%rsp)
  0x00007fffe124e39c: mov     %r15,(%rsp)
  0x00007fffe124e3a0: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124e3aa: movabs  $0x7fffe124e34a,%rsi  ;   {internal_word}
  0x00007fffe124e3b4: mov     %rsp,%rdx
  0x00007fffe124e3b7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124e3bb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124e3c0: hlt
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124e3c1: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124e3cb: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124e3d0: callq   0x7fffe11fc960    ; OopMap{off=661}
                                                ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)
                                                ;   {runtime_call}
  0x00007fffe124e3d5: jmpq    0x7fffe124e2f0
  ;; NewInstanceStub slow case
  0x00007fffe124e3da: mov     %rdx,%rdx
  0x00007fffe124e3dd: callq   0x7fffe11668a0    ; OopMap{off=674}
                                                ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)
                                                ;   {runtime_call}
  0x00007fffe124e3e2: jmpq    0x7fffe124e2ff
  0x00007fffe124e3e7: nop
  0x00007fffe124e3e8: nop
  ;; Unwind handler
  0x00007fffe124e3e9: mov     0x348(%r15),%rax
  0x00007fffe124e3f0: movabs  $0x0,%r10
  0x00007fffe124e3fa: mov     %r10,0x348(%r15)
  0x00007fffe124e401: movabs  $0x0,%r10
  0x00007fffe124e40b: mov     %r10,0x350(%r15)
  0x00007fffe124e412: add     $0xc0,%rsp
  0x00007fffe124e419: pop     %rbp
  0x00007fffe124e41a: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124e41f: hlt
[Stub Code]
  0x00007fffe124e420: nop                       ;   {no_reloc}
  0x00007fffe124e421: nop
  0x00007fffe124e422: nop
  0x00007fffe124e423: nop
  0x00007fffe124e424: nop
  0x00007fffe124e425: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124e42f: jmpq    0x7fffe124e42f    ;   {runtime_call}
  0x00007fffe124e434: nop
  0x00007fffe124e435: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124e43f: jmpq    0x7fffe124e43f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe124e444: movabs  $0xdead,%rbx
  0x00007fffe124e44e: movabs  $0xdead,%rcx
  0x00007fffe124e458: movabs  $0xdead,%rsi
  0x00007fffe124e462: movabs  $0xdead,%rdi
  0x00007fffe124e46c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124e471: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124e476: sub     $0x80,%rsp
  0x00007fffe124e47d: mov     %rax,0x78(%rsp)
  0x00007fffe124e482: mov     %rcx,0x70(%rsp)
  0x00007fffe124e487: mov     %rdx,0x68(%rsp)
  0x00007fffe124e48c: mov     %rbx,0x60(%rsp)
  0x00007fffe124e491: mov     %rbp,0x50(%rsp)
  0x00007fffe124e496: mov     %rsi,0x48(%rsp)
  0x00007fffe124e49b: mov     %rdi,0x40(%rsp)
  0x00007fffe124e4a0: mov     %r8,0x38(%rsp)
  0x00007fffe124e4a5: mov     %r9,0x30(%rsp)
  0x00007fffe124e4aa: mov     %r10,0x28(%rsp)
  0x00007fffe124e4af: mov     %r11,0x20(%rsp)
  0x00007fffe124e4b4: mov     %r12,0x18(%rsp)
  0x00007fffe124e4b9: mov     %r13,0x10(%rsp)
  0x00007fffe124e4be: mov     %r14,0x8(%rsp)
  0x00007fffe124e4c3: mov     %r15,(%rsp)
  0x00007fffe124e4c7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124e4d1: movabs  $0x7fffe124e471,%rsi  ;   {internal_word}
  0x00007fffe124e4db: mov     %rsp,%rdx
  0x00007fffe124e4de: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124e4e2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124e4e7: hlt
[Deopt Handler Code]
  0x00007fffe124e4e8: movabs  $0x7fffe124e4e8,%r10  ;   {section_word}
  0x00007fffe124e4f2: push    %r10
  0x00007fffe124e4f4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124e4f9: hlt
  0x00007fffe124e4fa: hlt
  0x00007fffe124e4fb: hlt
  0x00007fffe124e4fc: hlt
  0x00007fffe124e4fd: hlt
  0x00007fffe124e4fe: hlt
  0x00007fffe124e4ff: hlt
<nmethod compile_id='26' compiler='C1' level='2' entry='0x00007fffe124e140' size='1960' address='0x00007fffe124df90' relocation_offset='304' insts_offset='432' stub_offset='1168' scopes_data_offset='1416' scopes_pcs_offset='1592' dependencies_offset='1864' handler_table_offset='1872' nul_chk_table_offset='1944' method='java/nio/CharBuffer wrap ([CII)Ljava/nio/CharBuffer;' bytes='20' count='28848' iicount='28848' stamp='118.650'/>
<writer thread='140737327351552'/>
<task_queued compile_id='87' method='java/nio/Buffer &lt;init&gt; (IIII)V' bytes='121' count='28865' iicount='28865' stamp='118.650' comment='tiered' hot_count='28865'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe123b9d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe123bb40 Code size: 0x000001b8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b55fe0} &apos;&lt;init&gt;&apos; &apos;(IIII)V&apos; in &apos;java/nio/Buffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/Buffer&apos;
  # parm0:    rdx       = int
  # parm1:    rcx       = int
  # parm2:    r8        = int
  # parm3:    r9        = int
  #           [sp+0x40]  (sp of caller)
  ;; N186: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123bb40: mov     0x8(%rsi),%r10d
  0x00007fffe123bb44: shl     $0x3,%r10
  0x00007fffe123bb48: cmp     %r10,%rax
  0x00007fffe123bb4b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe123bb51: nop
  0x00007fffe123bb52: nop
  0x00007fffe123bb53: nop
  0x00007fffe123bb54: nop
  0x00007fffe123bb55: nop
  0x00007fffe123bb56: nop
  0x00007fffe123bb57: nop
  0x00007fffe123bb58: nop
  0x00007fffe123bb59: nop
  0x00007fffe123bb5a: nop
  0x00007fffe123bb5b: nop
  0x00007fffe123bb5c: nop
  0x00007fffe123bb5d: nop
  0x00007fffe123bb5e: nop
  0x00007fffe123bb5f: nop
[Verified Entry Point]
  ;; B1: #	B10 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe123bb60: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe123bb67: push    %rbp
  0x00007fffe123bb68: sub     $0x30,%rsp        ;*synchronization entry
                                                ; - java.nio.Buffer::&lt;init&gt;@-1 (line 197)

  0x00007fffe123bb6c: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::&lt;init&gt;@6 (line 185)

  0x00007fffe123bb73: mov     %r12d,0x18(%rsi)  ;*putfield position
                                                ; - java.nio.Buffer::&lt;init&gt;@11 (line 186)

  0x00007fffe123bb77: test    %r9d,%r9d
  0x00007fffe123bb7a: jl      0x7fffe123bbcd    ;*ifge
                                                ; - java.nio.Buffer::&lt;init&gt;@16 (line 198)

  ;; B2: #	B11 B3 &lt;- B1  Freq: 1

  0x00007fffe123bb7c: mov     %r9d,0x20(%rsi)   ;*putfield capacity
                                                ; - java.nio.Buffer::&lt;init&gt;@50 (line 200)

  0x00007fffe123bb80: cmp     %r9d,%r8d
  0x00007fffe123bb83: jnle    0x7fffe123bbf1    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)

  ;; B3: #	B12 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe123bb85: test    %r8d,%r8d
  0x00007fffe123bb88: jl      0x7fffe123bc19    ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)

  ;; B4: #	B13 B5 &lt;- B3  Freq: 0.999999

  0x00007fffe123bb8e: mov     %r8d,0x1c(%rsi)   ;*putfield limit
                                                ; - java.nio.Buffer::limit@22 (line 276)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)

  0x00007fffe123bb92: cmp     $0xffffffff,%r8d
  0x00007fffe123bb96: jl      0x7fffe123bc39    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)

  ;; B5: #	B14 B6 &lt;- B4  Freq: 0.999998

  0x00007fffe123bb9c: cmp     %r8d,%ecx
  0x00007fffe123bb9f: jnle    0x7fffe123bc59    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)

  ;; B6: #	B15 B7 &lt;- B5  Freq: 0.999998

  0x00007fffe123bba5: test    %ecx,%ecx
  0x00007fffe123bba7: jl      0x7fffe123bc7d    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)

  ;; B7: #	B16 B8 &lt;- B6  Freq: 0.999997

  0x00007fffe123bbad: cmp     $0xffffffff,%ecx
  0x00007fffe123bbb0: jl      0x7fffe123bc9d    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)

  ;; B8: #	B17 B9 &lt;- B7  Freq: 0.999997

  0x00007fffe123bbb6: mov     %ecx,0x18(%rsi)   ;*putfield position
                                                ; - java.nio.Buffer::position@35 (line 246)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)

  0x00007fffe123bbb9: test    %edx,%edx
  0x00007fffe123bbbb: jnl     0x7fffe123bcbd    ;*iflt
                                                ; - java.nio.Buffer::&lt;init&gt;@66 (line 203)

  ;; B9: #	N186 &lt;- B8  Freq: 0.999996

  0x00007fffe123bbc1: add     $0x30,%rsp
  0x00007fffe123bbc5: pop     %rbp
  0x00007fffe123bbc6: test    %eax,0x16dbf434(%rip)  ;   {poll_return}
  0x00007fffe123bbcc: retq                      ;*invokespecial &lt;init&gt;
                                                ; - java.nio.Buffer::&lt;init&gt;@1 (line 197)

  ;; B10: #	N186 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe123bbcd: mov     %rsi,%rbp
  0x00007fffe123bbd0: mov     %edx,(%rsp)
  0x00007fffe123bbd3: mov     %ecx,0x4(%rsp)
  0x00007fffe123bbd7: mov     %r8d,0x8(%rsp)
  0x00007fffe123bbdc: mov     %r9d,0x10(%rsp)
  0x00007fffe123bbe1: mov     $0xffffff65,%esi
  0x00007fffe123bbe6: nop
  0x00007fffe123bbe7: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=172}
                                                ;*ifge
                                                ; - java.nio.Buffer::&lt;init&gt;@16 (line 198)
                                                ;   {runtime_call}
  0x00007fffe123bbec: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {runtime_call}
  ;; B11: #	N186 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe123bbf1: mov     %edx,(%rsp)
  0x00007fffe123bbf4: mov     %ecx,0x4(%rsp)
  0x00007fffe123bbf8: mov     %rsi,0x8(%rsp)
  0x00007fffe123bbfd: mov     %r8d,0x14(%rsp)
  0x00007fffe123bc02: mov     %r9d,0x18(%rsp)
  0x00007fffe123bc07: mov     $0xffffff65,%esi
  0x00007fffe123bc0c: nop
  0x00007fffe123bc0d: nop
  0x00007fffe123bc0e: nop
  0x00007fffe123bc0f: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=212}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {runtime_call}
  0x00007fffe123bc14: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.Buffer::limit@-1 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {runtime_call}
  ;; B12: #	N186 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe123bc19: mov     %edx,(%rsp)
  0x00007fffe123bc1c: mov     %ecx,0x4(%rsp)
  0x00007fffe123bc20: mov     %rsi,0x8(%rsp)
  0x00007fffe123bc25: mov     %r8d,0x14(%rsp)
  0x00007fffe123bc2a: mov     $0xffffff65,%esi
  0x00007fffe123bc2f: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=244}
                                                ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {runtime_call}
  0x00007fffe123bc34: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {runtime_call}
  ;; B13: #	N186 &lt;- B4  Freq: 4.76836e-07

  0x00007fffe123bc39: mov     %edx,(%rsp)
  0x00007fffe123bc3c: mov     %ecx,0x4(%rsp)
  0x00007fffe123bc40: mov     %rsi,0x8(%rsp)
  0x00007fffe123bc45: mov     %r8d,0x10(%rsp)
  0x00007fffe123bc4a: mov     $0xffffff65,%esi
  0x00007fffe123bc4f: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=276}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ;   {runtime_call}
  0x00007fffe123bc54: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  ;; B14: #	N186 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe123bc59: mov     %edx,(%rsp)
  0x00007fffe123bc5c: mov     %rsi,0x8(%rsp)
  0x00007fffe123bc61: mov     %ecx,0x10(%rsp)
  0x00007fffe123bc65: mov     %ecx,0x14(%rsp)
  0x00007fffe123bc69: mov     %r8d,0x18(%rsp)
  0x00007fffe123bc6e: mov     $0xffffff65,%esi
  0x00007fffe123bc73: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=312}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  0x00007fffe123bc78: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  ;; B15: #	N186 &lt;- B6  Freq: 4.76836e-07

  0x00007fffe123bc7d: mov     %edx,(%rsp)
  0x00007fffe123bc80: mov     %rsi,0x8(%rsp)
  0x00007fffe123bc85: mov     %ecx,0x10(%rsp)
  0x00007fffe123bc89: mov     %ecx,0x14(%rsp)
  0x00007fffe123bc8d: mov     $0xffffff65,%esi
  0x00007fffe123bc92: nop
  0x00007fffe123bc93: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=344}
                                                ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  0x00007fffe123bc98: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  ;; B16: #	N186 &lt;- B7  Freq: 4.76836e-07

  0x00007fffe123bc9d: mov     %edx,(%rsp)
  0x00007fffe123bca0: mov     %rsi,0x8(%rsp)
  0x00007fffe123bca5: mov     %ecx,0x10(%rsp)
  0x00007fffe123bca9: mov     %ecx,0x14(%rsp)
  0x00007fffe123bcad: mov     $0xffffff65,%esi
  0x00007fffe123bcb2: nop
  0x00007fffe123bcb3: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=376}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  0x00007fffe123bcb8: callq   0x7ffff736b4ea    ;*invokevirtual position
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ;   {runtime_call}
  ;; B17: #	N186 &lt;- B8  Freq: 4.76836e-07

  0x00007fffe123bcbd: mov     %rsi,%rbp
  0x00007fffe123bcc0: mov     %ecx,0x4(%rsp)
  0x00007fffe123bcc4: mov     %edx,0x8(%rsp)
  0x00007fffe123bcc8: mov     $0xffffff65,%esi
  0x00007fffe123bccd: nop
  0x00007fffe123bcce: nop
  0x00007fffe123bccf: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=404}
                                                ;*iflt
                                                ; - java.nio.Buffer::&lt;init&gt;@66 (line 203)
                                                ;   {runtime_call}
  0x00007fffe123bcd4: callq   0x7ffff736b4ea    ;*iflt
                                                ; - java.nio.Buffer::&lt;init&gt;@66 (line 203)
                                                ;   {runtime_call}
  0x00007fffe123bcd9: hlt
  0x00007fffe123bcda: hlt
  0x00007fffe123bcdb: hlt
  0x00007fffe123bcdc: hlt
  0x00007fffe123bcdd: hlt
  0x00007fffe123bcde: hlt
  0x00007fffe123bcdf: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe123bce0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe123bce5: callq   0x7fffe123bcea
  0x00007fffe123bcea: subq    $0x5,(%rsp)
  0x00007fffe123bcef: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe123bcf4: hlt
  0x00007fffe123bcf5: hlt
  0x00007fffe123bcf6: hlt
  0x00007fffe123bcf7: hlt
<nmethod compile_id='87' compiler='C2' level='4' entry='0x00007fffe123bb40' size='1648' address='0x00007fffe123b9d0' relocation_offset='304' insts_offset='368' stub_offset='784' scopes_data_offset='840' scopes_pcs_offset='1112' dependencies_offset='1640' method='java/nio/Buffer &lt;init&gt; (IIII)V' bytes='121' count='29723' iicount='29723' stamp='118.680'/>
<make_not_entrant thread='140736955627264' compile_id='24' compiler='C1' level='2' stamp='118.680'/>
<writer thread='140737327351552'/>
<task_queued compile_id='88' method='java/nio/Buffer limit (I)Ljava/nio/Buffer;' bytes='53' count='29723' iicount='29723' stamp='118.680' comment='tiered' hot_count='29723'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe124d950:
Code:
Argument 0 is unknown.RIP: 0x7fffe124db00 Code size: 0x00000330
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c28dc8} &apos;write&apos; &apos;(Ljava/lang/String;)V&apos; in &apos;java/io/Writer&apos;
  # this:     rsi:rsi   = &apos;java/io/Writer&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/String&apos;
  #           [sp+0x50]  (sp of caller)
  ;;  block B3 [0, 0]

  0x00007fffe124db00: mov     0x8(%rsi),%r10d
  0x00007fffe124db04: shl     $0x3,%r10
  0x00007fffe124db08: cmp     %rax,%r10
  0x00007fffe124db0b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124db11: nop
  0x00007fffe124db12: nop
  0x00007fffe124db13: nop
  0x00007fffe124db14: nop
  0x00007fffe124db15: nop
  0x00007fffe124db16: nop
  0x00007fffe124db17: nop
  0x00007fffe124db18: nop
  0x00007fffe124db19: nop
  0x00007fffe124db1a: nop
  0x00007fffe124db1b: nop
  0x00007fffe124db1c: nop
  0x00007fffe124db1d: nop
  0x00007fffe124db1e: nop
  0x00007fffe124db1f: nop
[Verified Entry Point]
  0x00007fffe124db20: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124db27: push    %rbp
  0x00007fffe124db28: sub     $0x40,%rsp
  0x00007fffe124db2c: movabs  $0x7ffff4d70ff8,%rcx
  0x00007fffe124db36: mov     0x8(%rcx),%r8d
  0x00007fffe124db3a: add     $0x8,%r8d
  0x00007fffe124db3e: mov     %r8d,0x8(%rcx)
  0x00007fffe124db42: movabs  $0x7ffff4c28dc8,%rcx  ;   {metadata({method} {0x00007ffff4c28dc8} &apos;write&apos; &apos;(Ljava/lang/String;)V&apos; in &apos;java/io/Writer&apos;)}
  0x00007fffe124db4c: and     $0x3ff8,%r8d
  0x00007fffe124db53: cmp     $0x0,%r8d
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffa80aa570]
  0x00007fffe124db57: je      0x7fffe124dc10    ;*aload_0
                                                ; - java.io.Writer::write@0 (line 157)

  ;;  block B4 [0, 0]

  ;;  block B0 [0, 10]

  0x00007fffe124db5d: mov     0xc(%rdx),%ecx    ; implicit exception: dispatches to 0x00007fffe124dc27
  0x00007fffe124db60: push    %r10
  0x00007fffe124db62: cmp     0x16b0c077(%rip),%r12  ;   {external_word}
  0x00007fffe124db69: je      0x7fffe124dbe6
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124db6f: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124db74: sub     $0x80,%rsp
  0x00007fffe124db7b: mov     %rax,0x78(%rsp)
  0x00007fffe124db80: mov     %rcx,0x70(%rsp)
  0x00007fffe124db85: mov     %rdx,0x68(%rsp)
  0x00007fffe124db8a: mov     %rbx,0x60(%rsp)
  0x00007fffe124db8f: mov     %rbp,0x50(%rsp)
  0x00007fffe124db94: mov     %rsi,0x48(%rsp)
  0x00007fffe124db99: mov     %rdi,0x40(%rsp)
  0x00007fffe124db9e: mov     %r8,0x38(%rsp)
  0x00007fffe124dba3: mov     %r9,0x30(%rsp)
  0x00007fffe124dba8: mov     %r10,0x28(%rsp)
  0x00007fffe124dbad: mov     %r11,0x20(%rsp)
  0x00007fffe124dbb2: mov     %r12,0x18(%rsp)
  0x00007fffe124dbb7: mov     %r13,0x10(%rsp)
  0x00007fffe124dbbc: mov     %r14,0x8(%rsp)
  0x00007fffe124dbc1: mov     %r15,(%rsp)
  0x00007fffe124dbc5: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124dbcf: movabs  $0x7fffe124db6f,%rsi  ;   {internal_word}
  0x00007fffe124dbd9: mov     %rsp,%rdx
  0x00007fffe124dbdc: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124dbe0: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124dbe5: hlt
  0x00007fffe124dbe6: pop     %r10              ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)

  0x00007fffe124dbe8: mov     0xc(%rcx),%r8d    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; implicit exception: dispatches to 0x00007fffe124dca3
  0x00007fffe124dbec: mov     $0x0,%ecx         ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe124dbf1: nop
  0x00007fffe124dbf2: nop
  0x00007fffe124dbf3: nop
  0x00007fffe124dbf4: nop
  0x00007fffe124dbf5: movabs  $0xffffffffffffffff,%rax
  0x00007fffe124dbff: callq   0x7fffe11060c0    ; OopMap{off=260}
                                                ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {virtual_call}
  0x00007fffe124dc04: add     $0x40,%rsp
  0x00007fffe124dc08: pop     %rbp
  0x00007fffe124dc09: test    %eax,0x16dad4f1(%rip)  ;   {poll_return}
  0x00007fffe124dc0f: retq
  ;; CounterOverflowStub slow case
  0x00007fffe124dc10: mov     %rcx,0x8(%rsp)
  0x00007fffe124dc15: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124dc1d: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop off=290}
                                                ;*synchronization entry
                                                ; - java.io.Writer::write@-1 (line 157)
                                                ;   {runtime_call}
  0x00007fffe124dc22: jmpq    0x7fffe124db5d
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124dc27: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop off=300}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ;   {runtime_call}
  0x00007fffe124dc2c: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124dc31: sub     $0x80,%rsp
  0x00007fffe124dc38: mov     %rax,0x78(%rsp)
  0x00007fffe124dc3d: mov     %rcx,0x70(%rsp)
  0x00007fffe124dc42: mov     %rdx,0x68(%rsp)
  0x00007fffe124dc47: mov     %rbx,0x60(%rsp)
  0x00007fffe124dc4c: mov     %rbp,0x50(%rsp)
  0x00007fffe124dc51: mov     %rsi,0x48(%rsp)
  0x00007fffe124dc56: mov     %rdi,0x40(%rsp)
  0x00007fffe124dc5b: mov     %r8,0x38(%rsp)
  0x00007fffe124dc60: mov     %r9,0x30(%rsp)
  0x00007fffe124dc65: mov     %r10,0x28(%rsp)
  0x00007fffe124dc6a: mov     %r11,0x20(%rsp)
  0x00007fffe124dc6f: mov     %r12,0x18(%rsp)
  0x00007fffe124dc74: mov     %r13,0x10(%rsp)
  0x00007fffe124dc79: mov     %r14,0x8(%rsp)
  0x00007fffe124dc7e: mov     %r15,(%rsp)
  0x00007fffe124dc82: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124dc8c: movabs  $0x7fffe124dc2c,%rsi  ;   {internal_word}
  0x00007fffe124dc96: mov     %rsp,%rdx
  0x00007fffe124dc99: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124dc9d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124dca2: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124dca3: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop off=424}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ;   {runtime_call}
  0x00007fffe124dca8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124dcad: sub     $0x80,%rsp
  0x00007fffe124dcb4: mov     %rax,0x78(%rsp)
  0x00007fffe124dcb9: mov     %rcx,0x70(%rsp)
  0x00007fffe124dcbe: mov     %rdx,0x68(%rsp)
  0x00007fffe124dcc3: mov     %rbx,0x60(%rsp)
  0x00007fffe124dcc8: mov     %rbp,0x50(%rsp)
  0x00007fffe124dccd: mov     %rsi,0x48(%rsp)
  0x00007fffe124dcd2: mov     %rdi,0x40(%rsp)
  0x00007fffe124dcd7: mov     %r8,0x38(%rsp)
  0x00007fffe124dcdc: mov     %r9,0x30(%rsp)
  0x00007fffe124dce1: mov     %r10,0x28(%rsp)
  0x00007fffe124dce6: mov     %r11,0x20(%rsp)
  0x00007fffe124dceb: mov     %r12,0x18(%rsp)
  0x00007fffe124dcf0: mov     %r13,0x10(%rsp)
  0x00007fffe124dcf5: mov     %r14,0x8(%rsp)
  0x00007fffe124dcfa: mov     %r15,(%rsp)
  0x00007fffe124dcfe: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124dd08: movabs  $0x7fffe124dca8,%rsi  ;   {internal_word}
  0x00007fffe124dd12: mov     %rsp,%rdx
  0x00007fffe124dd15: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124dd19: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124dd1e: hlt
  0x00007fffe124dd1f: nop
  0x00007fffe124dd20: nop
  ;; Unwind handler
  0x00007fffe124dd21: mov     0x348(%r15),%rax
  0x00007fffe124dd28: movabs  $0x0,%r10
  0x00007fffe124dd32: mov     %r10,0x348(%r15)
  0x00007fffe124dd39: movabs  $0x0,%r10
  0x00007fffe124dd43: mov     %r10,0x350(%r15)
  0x00007fffe124dd4a: add     $0x40,%rsp
  0x00007fffe124dd4e: pop     %rbp
  0x00007fffe124dd4f: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124dd54: hlt
  0x00007fffe124dd55: hlt
  0x00007fffe124dd56: hlt
  0x00007fffe124dd57: hlt
  0x00007fffe124dd58: hlt
  0x00007fffe124dd59: hlt
  0x00007fffe124dd5a: hlt
  0x00007fffe124dd5b: hlt
  0x00007fffe124dd5c: hlt
  0x00007fffe124dd5d: hlt
  0x00007fffe124dd5e: hlt
  0x00007fffe124dd5f: hlt
[Stub Code]
  0x00007fffe124dd60: nop                       ;   {no_reloc}
  0x00007fffe124dd61: nop
  0x00007fffe124dd62: nop
  0x00007fffe124dd63: nop
  0x00007fffe124dd64: nop
  0x00007fffe124dd65: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124dd6f: jmpq    0x7fffe124dd6f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe124dd74: movabs  $0xdead,%rbx
  0x00007fffe124dd7e: movabs  $0xdead,%rcx
  0x00007fffe124dd88: movabs  $0xdead,%rsi
  0x00007fffe124dd92: movabs  $0xdead,%rdi
  0x00007fffe124dd9c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124dda1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124dda6: sub     $0x80,%rsp
  0x00007fffe124ddad: mov     %rax,0x78(%rsp)
  0x00007fffe124ddb2: mov     %rcx,0x70(%rsp)
  0x00007fffe124ddb7: mov     %rdx,0x68(%rsp)
  0x00007fffe124ddbc: mov     %rbx,0x60(%rsp)
  0x00007fffe124ddc1: mov     %rbp,0x50(%rsp)
  0x00007fffe124ddc6: mov     %rsi,0x48(%rsp)
  0x00007fffe124ddcb: mov     %rdi,0x40(%rsp)
  0x00007fffe124ddd0: mov     %r8,0x38(%rsp)
  0x00007fffe124ddd5: mov     %r9,0x30(%rsp)
  0x00007fffe124ddda: mov     %r10,0x28(%rsp)
  0x00007fffe124dddf: mov     %r11,0x20(%rsp)
  0x00007fffe124dde4: mov     %r12,0x18(%rsp)
  0x00007fffe124dde9: mov     %r13,0x10(%rsp)
  0x00007fffe124ddee: mov     %r14,0x8(%rsp)
  0x00007fffe124ddf3: mov     %r15,(%rsp)
  0x00007fffe124ddf7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124de01: movabs  $0x7fffe124dda1,%rsi  ;   {internal_word}
  0x00007fffe124de0b: mov     %rsp,%rdx
  0x00007fffe124de0e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124de12: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124de17: hlt
[Deopt Handler Code]
  0x00007fffe124de18: movabs  $0x7fffe124de18,%r10  ;   {section_word}
  0x00007fffe124de22: push    %r10
  0x00007fffe124de24: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124de29: hlt
  0x00007fffe124de2a: hlt
  0x00007fffe124de2b: hlt
  0x00007fffe124de2c: hlt
  0x00007fffe124de2d: hlt
  0x00007fffe124de2e: hlt
  0x00007fffe124de2f: hlt
<nmethod compile_id='33' compiler='C1' level='2' entry='0x00007fffe124db00' size='1544' address='0x00007fffe124d950' relocation_offset='304' insts_offset='432' stub_offset='1040' scopes_data_offset='1264' scopes_pcs_offset='1352' dependencies_offset='1512' nul_chk_table_offset='1520' method='java/io/Writer write (Ljava/lang/String;)V' bytes='11' count='30381' iicount='30381' stamp='118.698'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe124d510:
Code:
Argument 0 is unknown.RIP: 0x7fffe124d660 Code size: 0x000000f8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b563d0} &apos;limit&apos; &apos;(I)Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/Buffer&apos;
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  ;; N86: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124d660: mov     0x8(%rsi),%r10d
  0x00007fffe124d664: shl     $0x3,%r10
  0x00007fffe124d668: cmp     %r10,%rax
  0x00007fffe124d66b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124d671: nop
  0x00007fffe124d672: nop
  0x00007fffe124d673: nop
  0x00007fffe124d674: nop
  0x00007fffe124d675: nop
  0x00007fffe124d676: nop
  0x00007fffe124d677: nop
  0x00007fffe124d678: nop
  0x00007fffe124d679: nop
  0x00007fffe124d67a: nop
  0x00007fffe124d67b: nop
  0x00007fffe124d67c: nop
  0x00007fffe124d67d: nop
  0x00007fffe124d67e: nop
  0x00007fffe124d67f: nop
[Verified Entry Point]
  ;; B1: #	B6 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124d680: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124d687: push    %rbp
  0x00007fffe124d688: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.nio.Buffer::limit@-1 (line 274)

  0x00007fffe124d68c: mov     %rsi,%r10
  0x00007fffe124d68f: mov     0x20(%rsi),%r11d  ;*getfield capacity
                                                ; - java.nio.Buffer::limit@2 (line 274)

  0x00007fffe124d693: cmp     %r11d,%edx
  0x00007fffe124d696: jnle    0x7fffe124d6bc    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)

  ;; B2: #	B7 B3 &lt;- B1  Freq: 1

  0x00007fffe124d698: test    %edx,%edx
  0x00007fffe124d69a: jl      0x7fffe124d6d9    ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)

  ;; B3: #	B8 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe124d69c: mov     %edx,0x1c(%rsi)   ;*putfield limit
                                                ; - java.nio.Buffer::limit@22 (line 276)

  0x00007fffe124d69f: mov     0x18(%rsi),%ebp   ;*getfield position
                                                ; - java.nio.Buffer::limit@26 (line 277)

  0x00007fffe124d6a2: cmp     %edx,%ebp
  0x00007fffe124d6a4: jnle    0x7fffe124d6f1    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)

  ;; B4: #	B9 B5 &lt;- B3  Freq: 0.999999

  0x00007fffe124d6a6: mov     0xc(%rsi),%ebp    ;*getfield mark
                                                ; - java.nio.Buffer::limit@39 (line 278)

  0x00007fffe124d6a9: cmp     %edx,%ebp
  0x00007fffe124d6ab: jnle    0x7fffe124d709    ;*synchronization entry
                                                ; - java.nio.Buffer::limit@-1 (line 274)

  ;; B5: #	N86 &lt;- B4  Freq: 0.999998

  0x00007fffe124d6ad: mov     %rsi,%rax
  0x00007fffe124d6b0: add     $0x20,%rsp
  0x00007fffe124d6b4: pop     %rbp
  0x00007fffe124d6b5: test    %eax,0x16dad945(%rip)  ;   {poll_return}
  0x00007fffe124d6bb: retq
  ;; B6: #	N86 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe124d6bc: mov     $0xffffff65,%esi
  0x00007fffe124d6c1: mov     %r10,%rbp
  0x00007fffe124d6c4: mov     %edx,0x4(%rsp)
  0x00007fffe124d6c8: mov     %r11d,0x8(%rsp)
  0x00007fffe124d6cd: nop
  0x00007fffe124d6ce: nop
  0x00007fffe124d6cf: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=116}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ;   {runtime_call}
  0x00007fffe124d6d4: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ;   {runtime_call}
  ;; B7: #	N86 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe124d6d9: mov     $0xffffff65,%esi
  0x00007fffe124d6de: mov     %r10,%rbp
  0x00007fffe124d6e1: mov     %edx,0x4(%rsp)
  0x00007fffe124d6e5: nop
  0x00007fffe124d6e6: nop
  0x00007fffe124d6e7: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=140}
                                                ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)
                                                ;   {runtime_call}
  0x00007fffe124d6ec: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)
                                                ;   {runtime_call}
  ;; B8: #	N86 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe124d6f1: mov     $0xffffff65,%esi
  0x00007fffe124d6f6: mov     %r10,(%rsp)
  0x00007fffe124d6fa: mov     %edx,0xc(%rsp)
  0x00007fffe124d6fe: nop
  0x00007fffe124d6ff: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=164}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)
                                                ;   {runtime_call}
  0x00007fffe124d704: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)
                                                ;   {runtime_call}
  ;; B9: #	N86 &lt;- B4  Freq: 4.76836e-07

  0x00007fffe124d709: mov     $0xffffff65,%esi
  0x00007fffe124d70e: mov     %r10,(%rsp)
  0x00007fffe124d712: mov     %edx,0x8(%rsp)
  0x00007fffe124d716: nop
  0x00007fffe124d717: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=188}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ;   {runtime_call}
  0x00007fffe124d71c: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ;   {runtime_call}
  0x00007fffe124d721: hlt
  0x00007fffe124d722: hlt
  0x00007fffe124d723: hlt
  0x00007fffe124d724: hlt
  0x00007fffe124d725: hlt
  0x00007fffe124d726: hlt
  0x00007fffe124d727: hlt
  0x00007fffe124d728: hlt
  0x00007fffe124d729: hlt
  0x00007fffe124d72a: hlt
  0x00007fffe124d72b: hlt
  0x00007fffe124d72c: hlt
  0x00007fffe124d72d: hlt
  0x00007fffe124d72e: hlt
  0x00007fffe124d72f: hlt
  0x00007fffe124d730: hlt
  0x00007fffe124d731: hlt
  0x00007fffe124d732: hlt
  0x00007fffe124d733: hlt
  0x00007fffe124d734: hlt
  0x00007fffe124d735: hlt
  0x00007fffe124d736: hlt
  0x00007fffe124d737: hlt
  0x00007fffe124d738: hlt
  0x00007fffe124d739: hlt
  0x00007fffe124d73a: hlt
  0x00007fffe124d73b: hlt
  0x00007fffe124d73c: hlt
  0x00007fffe124d73d: hlt
  0x00007fffe124d73e: hlt
  0x00007fffe124d73f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe124d740: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe124d745: callq   0x7fffe124d74a
  0x00007fffe124d74a: subq    $0x5,(%rsp)
  0x00007fffe124d74f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124d754: hlt
  0x00007fffe124d755: hlt
  0x00007fffe124d756: hlt
  0x00007fffe124d757: hlt
<nmethod compile_id='88' compiler='C2' level='4' entry='0x00007fffe124d660' size='1024' address='0x00007fffe124d510' relocation_offset='304' insts_offset='336' stub_offset='560' scopes_data_offset='592' scopes_pcs_offset='712' dependencies_offset='1016' method='java/nio/Buffer limit (I)Ljava/nio/Buffer;' bytes='53' count='29723' iicount='29723' stamp='118.706'/>
<make_not_entrant thread='140736956679936' compile_id='25' compiler='C1' level='2' stamp='118.706'/>
<writer thread='140737327351552'/>
<task_queued compile_id='89' method='java/nio/CharBuffer wrap ([CII)Ljava/nio/CharBuffer;' bytes='20' count='30384' iicount='30384' stamp='118.707' comment='tiered' hot_count='30384'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe124ac50:
Code:
Argument 0 is unknown.RIP: 0x7fffe124adc0 Code size: 0x00000198
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56940} &apos;hasRemaining&apos; &apos;()Z&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B4 [0, 0]

  0x00007fffe124adc0: mov     0x8(%rsi),%r10d
  0x00007fffe124adc4: shl     $0x3,%r10
  0x00007fffe124adc8: cmp     %rax,%r10
  0x00007fffe124adcb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124add1: nop
  0x00007fffe124add2: nop
  0x00007fffe124add3: nop
  0x00007fffe124add4: nop
  0x00007fffe124add5: nop
  0x00007fffe124add6: nop
  0x00007fffe124add7: nop
  0x00007fffe124add8: nop
  0x00007fffe124add9: nop
  0x00007fffe124adda: nop
  0x00007fffe124addb: nop
  0x00007fffe124addc: nop
  0x00007fffe124addd: nop
  0x00007fffe124adde: nop
  0x00007fffe124addf: nop
[Verified Entry Point]
  0x00007fffe124ade0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124ade7: push    %rbp
  0x00007fffe124ade8: sub     $0x30,%rsp
  0x00007fffe124adec: movabs  $0x7ffff4d58ae0,%rax
  0x00007fffe124adf6: mov     0x8(%rax),%edi
  0x00007fffe124adf9: add     $0x8,%edi
  0x00007fffe124adfc: mov     %edi,0x8(%rax)
  0x00007fffe124adff: movabs  $0x7ffff4b56940,%rax  ;   {metadata({method} {0x00007ffff4b56940} &apos;hasRemaining&apos; &apos;()Z&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe124ae09: and     $0x3ff8,%edi
  0x00007fffe124ae0f: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb40148a0]
  0x00007fffe124ae12: je      0x7fffe124ae3f    ;*aload_0
                                                ; - java.nio.Buffer::hasRemaining@0 (line 403)

  ;;  block B5 [0, 0]

  ;;  block B0 [0, 16]

  0x00007fffe124ae18: mov     0x18(%rsi),%eax   ;*getfield position
                                                ; - java.nio.Buffer::hasRemaining@1 (line 403)

  0x00007fffe124ae1b: mov     0x1c(%rsi),%esi   ;*getfield limit
                                                ; - java.nio.Buffer::hasRemaining@5 (line 403)

  0x00007fffe124ae1e: cmp     %esi,%eax
  0x00007fffe124ae20: mov     $0x0,%eax
  0x00007fffe124ae25: jnl     0x7fffe124ae30
  0x00007fffe124ae2b: mov     $0x1,%eax
  0x00007fffe124ae30: and     $0x1,%eax
  0x00007fffe124ae33: add     $0x30,%rsp
  0x00007fffe124ae37: pop     %rbp
  0x00007fffe124ae38: test    %eax,0x16db02c2(%rip)  ;   {poll_return}
  0x00007fffe124ae3e: retq
  ;; CounterOverflowStub slow case
  0x00007fffe124ae3f: mov     %rax,0x8(%rsp)
  0x00007fffe124ae44: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124ae4c: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=145}
                                                ;*synchronization entry
                                                ; - java.nio.Buffer::hasRemaining@-1 (line 403)
                                                ;   {runtime_call}
  0x00007fffe124ae51: jmp     0x7fffe124ae18
  0x00007fffe124ae53: nop
  0x00007fffe124ae54: nop
  ;; Unwind handler
  0x00007fffe124ae55: mov     0x348(%r15),%rax
  0x00007fffe124ae5c: movabs  $0x0,%r10
  0x00007fffe124ae66: mov     %r10,0x348(%r15)
  0x00007fffe124ae6d: movabs  $0x0,%r10
  0x00007fffe124ae77: mov     %r10,0x350(%r15)
  0x00007fffe124ae7e: add     $0x30,%rsp
  0x00007fffe124ae82: pop     %rbp
  0x00007fffe124ae83: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124ae88: hlt
  0x00007fffe124ae89: hlt
  0x00007fffe124ae8a: hlt
  0x00007fffe124ae8b: hlt
  0x00007fffe124ae8c: hlt
  0x00007fffe124ae8d: hlt
  0x00007fffe124ae8e: hlt
  0x00007fffe124ae8f: hlt
  0x00007fffe124ae90: hlt
  0x00007fffe124ae91: hlt
  0x00007fffe124ae92: hlt
  0x00007fffe124ae93: hlt
  0x00007fffe124ae94: hlt
  0x00007fffe124ae95: hlt
  0x00007fffe124ae96: hlt
  0x00007fffe124ae97: hlt
  0x00007fffe124ae98: hlt
  0x00007fffe124ae99: hlt
  0x00007fffe124ae9a: hlt
  0x00007fffe124ae9b: hlt
  0x00007fffe124ae9c: hlt
  0x00007fffe124ae9d: hlt
  0x00007fffe124ae9e: hlt
  0x00007fffe124ae9f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe124aea0: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe124aeaa: movabs  $0xdead,%rcx
  0x00007fffe124aeb4: movabs  $0xdead,%rsi
  0x00007fffe124aebe: movabs  $0xdead,%rdi
  0x00007fffe124aec8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124aecd: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124aed2: sub     $0x80,%rsp
  0x00007fffe124aed9: mov     %rax,0x78(%rsp)
  0x00007fffe124aede: mov     %rcx,0x70(%rsp)
  0x00007fffe124aee3: mov     %rdx,0x68(%rsp)
  0x00007fffe124aee8: mov     %rbx,0x60(%rsp)
  0x00007fffe124aeed: mov     %rbp,0x50(%rsp)
  0x00007fffe124aef2: mov     %rsi,0x48(%rsp)
  0x00007fffe124aef7: mov     %rdi,0x40(%rsp)
  0x00007fffe124aefc: mov     %r8,0x38(%rsp)
  0x00007fffe124af01: mov     %r9,0x30(%rsp)
  0x00007fffe124af06: mov     %r10,0x28(%rsp)
  0x00007fffe124af0b: mov     %r11,0x20(%rsp)
  0x00007fffe124af10: mov     %r12,0x18(%rsp)
  0x00007fffe124af15: mov     %r13,0x10(%rsp)
  0x00007fffe124af1a: mov     %r14,0x8(%rsp)
  0x00007fffe124af1f: mov     %r15,(%rsp)
  0x00007fffe124af23: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124af2d: movabs  $0x7fffe124aecd,%rsi  ;   {internal_word}
  0x00007fffe124af37: mov     %rsp,%rdx
  0x00007fffe124af3a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124af3e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124af43: hlt
[Deopt Handler Code]
  0x00007fffe124af44: movabs  $0x7fffe124af44,%r10  ;   {section_word}
  0x00007fffe124af4e: push    %r10
  0x00007fffe124af50: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124af55: hlt
  0x00007fffe124af56: hlt
  0x00007fffe124af57: hlt
<nmethod compile_id='30' compiler='C1' level='2' entry='0x00007fffe124adc0' size='920' address='0x00007fffe124ac50' relocation_offset='304' insts_offset='368' stub_offset='592' scopes_data_offset='784' scopes_pcs_offset='816' dependencies_offset='912' method='java/nio/Buffer hasRemaining ()Z' bytes='17' count='30426' iicount='30426' stamp='118.741'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1248e50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1248fe0 Code size: 0x000002b8
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4d51358} &apos;wrap&apos; &apos;([CII)Ljava/nio/CharBuffer;&apos; in &apos;java/nio/CharBuffer&apos;
  # parm0:    rsi:rsi   = &apos;[C&apos;
  # parm1:    rdx       = int
  # parm2:    rcx       = int
  #           [sp+0x60]  (sp of caller)
  ;; N1: #	B1 &lt;- B19 B13 B14 B21 B15 B16 B17 B18 B22 B10  Freq: 1

  ;; B1: #	B11 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1248fe0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1248fe7: push    %rbp
  0x00007fffe1248fe8: sub     $0x50,%rsp        ;*synchronization entry
                                                ; - java.nio.CharBuffer::wrap@-1 (line 373)

  0x00007fffe1248fec: mov     %ecx,(%rsp)
  0x00007fffe1248fef: mov     %edx,0x20(%rsp)
  0x00007fffe1248ff3: mov     %rsi,%rbp
  0x00007fffe1248ff6: mov     0x70(%r15),%rax
  0x00007fffe1248ffa: mov     %rax,%r10
  0x00007fffe1248ffd: add     $0x30,%r10
  0x00007fffe1249001: cmp     0x80(%r15),%r10
  0x00007fffe1249008: jnb     0x7fffe1249154
  ;; B2: #	B3 &lt;- B1  Freq: 0.9999

  0x00007fffe124900e: mov     %r10,0x70(%r15)
  0x00007fffe1249012: prefetchw 0x100(%r10)
  0x00007fffe124901a: mov     $0x20008fd1,%r10d  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe1249020: shl     $0x3,%r10
  0x00007fffe1249024: mov     0xb0(%r10),%r10
  0x00007fffe124902b: mov     %r10,(%rax)
  0x00007fffe124902e: movl    $0x20008fd1,0x8(%rax)  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe1249035: mov     %r12d,0xc(%rax)
  0x00007fffe1249039: mov     %r12,0x10(%rax)
  0x00007fffe124903d: mov     %r12,0x18(%rax)
  0x00007fffe1249041: mov     %r12,0x20(%rax)
  0x00007fffe1249045: mov     %r12,0x28(%rax)   ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)

  ;; B3: #	B19 B4 &lt;- B12 B2  Freq: 1

  0x00007fffe1249049: mov     %rbp,%r10
  0x00007fffe124904c: mov     0xc(%r10),%r11d   ;*arraylength
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@7 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; implicit exception: dispatches to 0x00007fffe124923d
  ;; B4: #	B13 B5 &lt;- B3  Freq: 0.999999

  0x00007fffe1249050: mov     %r11d,0x20(%rax)  ;*putfield capacity
                                                ; - java.nio.Buffer::&lt;init&gt;@50 (line 200)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe1249054: movl    $0xffffffff,0xc(%rax)  ;*putfield mark
                                                ; - java.nio.Buffer::&lt;init&gt;@6 (line 185)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe124905b: mov     0x20(%rsp),%ebp
  0x00007fffe124905f: add     (%rsp),%ebp       ;*iadd
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@5 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe1249062: cmp     %r11d,%ebp
  0x00007fffe1249065: jnle    0x7fffe1249169    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B5: #	B14 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe124906b: test    %ebp,%ebp
  0x00007fffe124906d: jl      0x7fffe124918d    ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B6: #	B15 B7 &lt;- B5  Freq: 0.999998

  0x00007fffe1249073: mov     %ebp,0x1c(%rax)   ;*putfield limit
                                                ; - java.nio.Buffer::limit@22 (line 276)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe1249076: cmp     $0xffffffff,%ebp
  0x00007fffe1249079: jl      0x7fffe12491ad    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B7: #	B16 B8 &lt;- B6  Freq: 0.999998

  0x00007fffe124907f: mov     0x20(%rsp),%r11d
  0x00007fffe1249084: cmp     %ebp,%r11d
  0x00007fffe1249087: jnle    0x7fffe12491cd    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B8: #	B17 B9 &lt;- B7  Freq: 0.999997

  0x00007fffe124908d: test    %r11d,%r11d
  0x00007fffe1249090: jl      0x7fffe12491ed    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B9: #	B18 B10 &lt;- B8  Freq: 0.999997

  0x00007fffe1249096: cmp     $0xffffffff,%r11d
  0x00007fffe124909a: jl      0x7fffe1249215    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B10: #	N1 &lt;- B9  Freq: 0.999996

  0x00007fffe12490a0: mov     %r11d,0x18(%rax)  ;*putfield position
                                                ; - java.nio.Buffer::position@35 (line 246)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe12490a4: mov     %rax,%r11
  0x00007fffe12490a7: mov     %r10,%r8
  0x00007fffe12490aa: push    %r10
  0x00007fffe12490ac: cmp     0x16b10b2d(%rip),%r12  ;   {external_word}
  0x00007fffe12490b3: je      0x7fffe1249130
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe12490b9: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12490be: sub     $0x80,%rsp
  0x00007fffe12490c5: mov     %rax,0x78(%rsp)
  0x00007fffe12490ca: mov     %rcx,0x70(%rsp)
  0x00007fffe12490cf: mov     %rdx,0x68(%rsp)
  0x00007fffe12490d4: mov     %rbx,0x60(%rsp)
  0x00007fffe12490d9: mov     %rbp,0x50(%rsp)
  0x00007fffe12490de: mov     %rsi,0x48(%rsp)
  0x00007fffe12490e3: mov     %rdi,0x40(%rsp)
  0x00007fffe12490e8: mov     %r8,0x38(%rsp)
  0x00007fffe12490ed: mov     %r9,0x30(%rsp)
  0x00007fffe12490f2: mov     %r10,0x28(%rsp)
  0x00007fffe12490f7: mov     %r11,0x20(%rsp)
  0x00007fffe12490fc: mov     %r12,0x18(%rsp)
  0x00007fffe1249101: mov     %r13,0x10(%rsp)
  0x00007fffe1249106: mov     %r14,0x8(%rsp)
  0x00007fffe124910b: mov     %r15,(%rsp)
  0x00007fffe124910f: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe1249119: movabs  $0x7fffe12490b9,%rsi  ;   {internal_word}
  0x00007fffe1249123: mov     %rsp,%rdx
  0x00007fffe1249126: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124912a: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124912f: hlt
  0x00007fffe1249130: pop     %r10
  0x00007fffe1249132: mov     %r8d,0x2c(%rax)
  0x00007fffe1249136: shr     $0x9,%r11
  0x00007fffe124913a: movabs  $0x7ffff591e000,%r10
  0x00007fffe1249144: mov     %r12l,(%r10,%r11)  ;*synchronization entry
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@-1 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  0x00007fffe1249148: add     $0x50,%rsp
  0x00007fffe124914c: pop     %rbp
  0x00007fffe124914d: test    %eax,0x16db1ead(%rip)  ;   {poll_return}
  0x00007fffe1249153: retq
  ;; B11: #	B20 B12 &lt;- B1  Freq: 0.000100017

  0x00007fffe1249154: movabs  $0x100047e88,%rsi  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe124915e: nop
  0x00007fffe124915f: callq   0x7fffe1106520    ; OopMap{rbp=Oop off=388}
                                                ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ;   {runtime_call}
  ;; B12: #	B3 &lt;- B11  Freq: 0.000100015

  0x00007fffe1249164: jmpq    0x7fffe1249049    ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)

  ;; B13: #	N1 &lt;- B4  Freq: 4.76837e-07

  0x00007fffe1249169: mov     $0xffffff65,%esi
  0x00007fffe124916e: mov     %rax,0x8(%rsp)
  0x00007fffe1249173: mov     %r10,0x10(%rsp)
  0x00007fffe1249178: mov     %rax,0x18(%rsp)
  0x00007fffe124917d: mov     %r11d,0x24(%rsp)
  0x00007fffe1249182: nop
  0x00007fffe1249183: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=Oop off=424}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::limit@5 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe1249188: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.Buffer::limit@-1 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  ;; B14: #	N1 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe124918d: mov     $0xffffff65,%esi
  0x00007fffe1249192: mov     %rax,0x8(%rsp)
  0x00007fffe1249197: mov     %r10,0x10(%rsp)
  0x00007fffe124919c: mov     %rax,0x18(%rsp)
  0x00007fffe12491a1: nop
  0x00007fffe12491a2: nop
  0x00007fffe12491a3: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=Oop off=456}
                                                ;*ifge
                                                ; - java.nio.Buffer::limit@9 (line 274)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe12491a8: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  ;; B15: #	N1 &lt;- B6  Freq: 4.76836e-07

  0x00007fffe12491ad: mov     $0xffffff65,%esi
  0x00007fffe12491b2: mov     %rax,0x8(%rsp)
  0x00007fffe12491b7: mov     %r10,0x10(%rsp)
  0x00007fffe12491bc: mov     %rax,0x18(%rsp)
  0x00007fffe12491c1: nop
  0x00007fffe12491c2: nop
  0x00007fffe12491c3: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=Oop off=488}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe12491c8: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  ;; B16: #	N1 &lt;- B7  Freq: 4.76836e-07

  0x00007fffe12491cd: mov     $0xffffff65,%esi
  0x00007fffe12491d2: mov     %rax,0x8(%rsp)
  0x00007fffe12491d7: mov     %r10,0x10(%rsp)
  0x00007fffe12491dc: mov     %rax,0x18(%rsp)
  0x00007fffe12491e1: nop
  0x00007fffe12491e2: nop
  0x00007fffe12491e3: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=Oop off=520}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe12491e8: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.Buffer::position@-1 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  ;; B17: #	N1 &lt;- B8  Freq: 4.76836e-07

  0x00007fffe12491ed: mov     $0xffffff65,%esi
  0x00007fffe12491f2: mov     %rax,(%rsp)
  0x00007fffe12491f6: mov     %r10,0x8(%rsp)
  0x00007fffe12491fb: mov     %rax,0x10(%rsp)
  0x00007fffe1249200: mov     %r11d,0x1c(%rsp)
  0x00007fffe1249205: mov     %r11d,0x28(%rsp)
  0x00007fffe124920a: nop
  0x00007fffe124920b: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=560}
                                                ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe1249210: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  ;; B18: #	N1 &lt;- B9  Freq: 4.76836e-07

  0x00007fffe1249215: mov     $0xffffff65,%esi
  0x00007fffe124921a: mov     %rax,(%rsp)
  0x00007fffe124921e: mov     %r10,0x8(%rsp)
  0x00007fffe1249223: mov     %rax,0x10(%rsp)
  0x00007fffe1249228: mov     %r11d,0x1c(%rsp)
  0x00007fffe124922d: mov     %r11d,0x28(%rsp)
  0x00007fffe1249232: nop
  0x00007fffe1249233: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=600}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe1249238: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B19: #	N1 &lt;- B3  Freq: 1.01328e-06

  0x00007fffe124923d: mov     $0xfffffff6,%esi
  0x00007fffe1249242: mov     %rax,%rbp
  0x00007fffe1249245: nop
  0x00007fffe1249246: nop
  0x00007fffe1249247: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=620}
                                                ;*arraylength
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@7 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ;   {runtime_call}
  0x00007fffe124924c: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B20: #	B22 B21 &lt;- B11  Freq: 1.00017e-09

  0x00007fffe1249251: mov     0x8(%rax),%r11d
  0x00007fffe1249255: cmp     $0x20005f8c,%r11d  ;   {metadata(&apos;java/lang/IllegalArgumentException&apos;)}
  0x00007fffe124925c: je      0x7fffe124926b    ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)

  ;; B21: #	N1 &lt;- B20  Freq: 1.00016e-09

  0x00007fffe124925e: mov     %rax,%rsi
  0x00007fffe1249261: add     $0x50,%rsp
  0x00007fffe1249265: pop     %rbp
  0x00007fffe1249266: jmpq    0x7fffe11657a0    ;*areturn
                                                ; - java.nio.CharBuffer::wrap@10 (line 373)
                                                ;   {runtime_call}
  ;; B22: #	N1 &lt;- B20  Freq: 1.01345e-15

  0x00007fffe124926b: mov     $0xa,%esi
  0x00007fffe1249270: nop
  0x00007fffe1249271: nop
  0x00007fffe1249272: nop
  0x00007fffe1249273: callq   0x7fffe1107820    ; OopMap{off=664}
                                                ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)
                                                ;   {runtime_call}
  0x00007fffe1249278: callq   0x7ffff736b4ea    ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)
                                                ;   {runtime_call}
  0x00007fffe124927d: hlt
  0x00007fffe124927e: hlt
  0x00007fffe124927f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1249280: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1249285: callq   0x7fffe124928a
  0x00007fffe124928a: subq    $0x5,(%rsp)
  0x00007fffe124928f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1249294: hlt
  0x00007fffe1249295: hlt
  0x00007fffe1249296: hlt
  0x00007fffe1249297: hlt
<nmethod compile_id='89' compiler='C2' level='4' entry='0x00007fffe1248fe0' size='2232' address='0x00007fffe1248e50' relocation_offset='304' insts_offset='400' stub_offset='1072' scopes_data_offset='1168' scopes_pcs_offset='1624' dependencies_offset='2184' handler_table_offset='2192' nul_chk_table_offset='2216' method='java/nio/CharBuffer wrap ([CII)Ljava/nio/CharBuffer;' bytes='20' count='31585' iicount='31585' stamp='118.762'/>
<make_not_entrant thread='140736956679936' compile_id='26' compiler='C1' level='2' stamp='118.762'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1248990:
Code:
Argument 0 is unknown.RIP: 0x7fffe1248b00 Code size: 0x000001f0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2a740} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B3 [0, 0]

  0x00007fffe1248b00: mov     0x8(%rsi),%r10d
  0x00007fffe1248b04: shl     $0x3,%r10
  0x00007fffe1248b08: cmp     %rax,%r10
  0x00007fffe1248b0b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1248b11: nop
  0x00007fffe1248b12: nop
  0x00007fffe1248b13: nop
  0x00007fffe1248b14: nop
  0x00007fffe1248b15: nop
  0x00007fffe1248b16: nop
  0x00007fffe1248b17: nop
  0x00007fffe1248b18: nop
  0x00007fffe1248b19: nop
  0x00007fffe1248b1a: nop
  0x00007fffe1248b1b: nop
  0x00007fffe1248b1c: nop
  0x00007fffe1248b1d: nop
  0x00007fffe1248b1e: nop
  0x00007fffe1248b1f: nop
[Verified Entry Point]
  0x00007fffe1248b20: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1248b27: push    %rbp
  0x00007fffe1248b28: sub     $0x30,%rsp
  0x00007fffe1248b2c: movabs  $0x7ffff4d710d8,%rdx
  0x00007fffe1248b36: mov     0x8(%rdx),%eax
  0x00007fffe1248b39: add     $0x8,%eax
  0x00007fffe1248b3c: mov     %eax,0x8(%rdx)
  0x00007fffe1248b3f: movabs  $0x7ffff4c2a740,%rdx  ;   {metadata({method} {0x00007ffff4c2a740} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;)}
  0x00007fffe1248b49: and     $0x3ff8,%eax
  0x00007fffe1248b4f: cmp     $0x0,%eax
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0073530]
  0x00007fffe1248b52: je      0x7fffe1248bae    ;*aload_0
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@0 (line 44)

  ;;  block B4 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe1248b58: movsbl  0x16(%rsi),%edx   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@1 (line 44)

  0x00007fffe1248b5c: cmp     $0x0,%edx
  ;;   38 branch [EQ] [B1] 
  0x00007fffe1248b5f: je      0x7fffe1248b71    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)

  ;;  block B2 [17, 17]

  0x00007fffe1248b65: add     $0x30,%rsp
  0x00007fffe1248b69: pop     %rbp
  0x00007fffe1248b6a: test    %eax,0x16db2590(%rip)  ;   {poll_return}
  0x00007fffe1248b70: retq                      ;*return
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@17 (line 46)

  ;;  block B1 [7, 16]

  ;;   48 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1248b71: nop
  0x00007fffe1248b72: nop
  0x00007fffe1248b73: nop
  0x00007fffe1248b74: nop
  0x00007fffe1248b75: nop
  0x00007fffe1248b76: nop
  0x00007fffe1248b77: nop
  0x00007fffe1248b78: jmpq    0x7fffe1248bd1    ;   {no_reloc}
  0x00007fffe1248b7d: add     %al,(%rax)
  0x00007fffe1248b7f: add     %al,(%rax)
  0x00007fffe1248b81: add     %ch,%cl
  0x00007fffe1248b83: push    %rsp
  0x00007fffe1248b84: add     %al,(%rax)
  0x00007fffe1248b86: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - sun.nio.cs.StreamEncoder::ensureOpen@7 (line 45)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe1248b89: pop     %rax
  0x00007fffe1248b8a: xlat    (%rbx)
  0x00007fffe1248b8b: xlat    (%rbx)
  0x00007fffe1248b8d: add     %al,(%rax)
  0x00007fffe1248b8f: add     %al,(%rax)
  0x00007fffe1248b91: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@13 (line 45)

  0x00007fffe1248b94: mov     %rax,0x20(%rsp)
  0x00007fffe1248b99: nop
  0x00007fffe1248b9a: nop
  0x00007fffe1248b9b: nop
  0x00007fffe1248b9c: nop
  0x00007fffe1248b9d: nop
  0x00007fffe1248b9e: nop
  0x00007fffe1248b9f: callq   0x7fffe1105e80    ; OopMap{[32]=Oop off=164}
                                                ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@13 (line 45)
                                                ;   {optimized virtual_call}
  0x00007fffe1248ba4: mov     0x20(%rsp),%rax
  0x00007fffe1248ba9: jmpq    0x7fffe1248c10
  ;; CounterOverflowStub slow case
  0x00007fffe1248bae: mov     %rdx,0x8(%rsp)
  0x00007fffe1248bb3: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1248bbb: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=192}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@-1 (line 44)
                                                ;   {runtime_call}
  0x00007fffe1248bc0: jmp     0x7fffe1248b58
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1248bc2: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1248bcc: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1248bd1: callq   0x7fffe11fc960    ; OopMap{off=214}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::ensureOpen@7 (line 45)
                                                ;   {runtime_call}
  0x00007fffe1248bd6: jmp     0x7fffe1248b78
  0x00007fffe1248bd8: nop
  0x00007fffe1248bd9: nop
  0x00007fffe1248bda: nop
  ;; NewInstanceStub slow case
  0x00007fffe1248bdb: mov     %rdx,%rdx
  0x00007fffe1248bde: callq   0x7fffe11668a0    ; OopMap{off=227}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::ensureOpen@7 (line 45)
                                                ;   {runtime_call}
  0x00007fffe1248be3: jmp     0x7fffe1248b87
  0x00007fffe1248be5: nop
  0x00007fffe1248be6: nop
  ;; Unwind handler
  0x00007fffe1248be7: mov     0x348(%r15),%rax
  0x00007fffe1248bee: movabs  $0x0,%r10
  0x00007fffe1248bf8: mov     %r10,0x348(%r15)
  0x00007fffe1248bff: movabs  $0x0,%r10
  0x00007fffe1248c09: mov     %r10,0x350(%r15)
  0x00007fffe1248c10: add     $0x30,%rsp
  0x00007fffe1248c14: pop     %rbp
  0x00007fffe1248c15: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1248c1a: hlt
  0x00007fffe1248c1b: hlt
  0x00007fffe1248c1c: hlt
  0x00007fffe1248c1d: hlt
  0x00007fffe1248c1e: hlt
  0x00007fffe1248c1f: hlt
[Stub Code]
  0x00007fffe1248c20: nop                       ;   {no_reloc}
  0x00007fffe1248c21: nop
  0x00007fffe1248c22: nop
  0x00007fffe1248c23: nop
  0x00007fffe1248c24: nop
  0x00007fffe1248c25: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1248c2f: jmpq    0x7fffe1248c2f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1248c34: movabs  $0xdead,%rbx
  0x00007fffe1248c3e: movabs  $0xdead,%rcx
  0x00007fffe1248c48: movabs  $0xdead,%rsi
  0x00007fffe1248c52: movabs  $0xdead,%rdi
  0x00007fffe1248c5c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1248c61: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1248c66: sub     $0x80,%rsp
  0x00007fffe1248c6d: mov     %rax,0x78(%rsp)
  0x00007fffe1248c72: mov     %rcx,0x70(%rsp)
  0x00007fffe1248c77: mov     %rdx,0x68(%rsp)
  0x00007fffe1248c7c: mov     %rbx,0x60(%rsp)
  0x00007fffe1248c81: mov     %rbp,0x50(%rsp)
  0x00007fffe1248c86: mov     %rsi,0x48(%rsp)
  0x00007fffe1248c8b: mov     %rdi,0x40(%rsp)
  0x00007fffe1248c90: mov     %r8,0x38(%rsp)
  0x00007fffe1248c95: mov     %r9,0x30(%rsp)
  0x00007fffe1248c9a: mov     %r10,0x28(%rsp)
  0x00007fffe1248c9f: mov     %r11,0x20(%rsp)
  0x00007fffe1248ca4: mov     %r12,0x18(%rsp)
  0x00007fffe1248ca9: mov     %r13,0x10(%rsp)
  0x00007fffe1248cae: mov     %r14,0x8(%rsp)
  0x00007fffe1248cb3: mov     %r15,(%rsp)
  0x00007fffe1248cb7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1248cc1: movabs  $0x7fffe1248c61,%rsi  ;   {internal_word}
  0x00007fffe1248ccb: mov     %rsp,%rdx
  0x00007fffe1248cce: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1248cd2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1248cd7: hlt
[Deopt Handler Code]
  0x00007fffe1248cd8: movabs  $0x7fffe1248cd8,%r10  ;   {section_word}
  0x00007fffe1248ce2: push    %r10
  0x00007fffe1248ce4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1248ce9: hlt
  0x00007fffe1248cea: hlt
  0x00007fffe1248ceb: hlt
  0x00007fffe1248cec: hlt
  0x00007fffe1248ced: hlt
  0x00007fffe1248cee: hlt
  0x00007fffe1248cef: hlt
<nmethod compile_id='47' compiler='C1' level='2' entry='0x00007fffe1248b00' size='1144' address='0x00007fffe1248990' relocation_offset='304' insts_offset='368' stub_offset='656' scopes_data_offset='872' scopes_pcs_offset='944' dependencies_offset='1136' method='sun/nio/cs/StreamEncoder ensureOpen ()V' bytes='18' count='31916' iicount='31916' stamp='118.784'/>
<writer thread='140737327351552'/>
<task_queued compile_id='90' method='java/io/Writer write (Ljava/lang/String;)V' bytes='11' count='31917' iicount='31917' stamp='118.784' comment='tiered' hot_count='31917'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1248650:
Code:
Argument 0 is unknown.RIP: 0x7fffe12487c0 Code size: 0x00000138
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2b238} &apos;isOpen&apos; &apos;()Z&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe12487c0: mov     0x8(%rsi),%r10d
  0x00007fffe12487c4: shl     $0x3,%r10
  0x00007fffe12487c8: cmp     %rax,%r10
  0x00007fffe12487cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12487d1: nop
  0x00007fffe12487d2: nop
  0x00007fffe12487d3: nop
  0x00007fffe12487d4: nop
  0x00007fffe12487d5: nop
  0x00007fffe12487d6: nop
  0x00007fffe12487d7: nop
  0x00007fffe12487d8: nop
  0x00007fffe12487d9: nop
  0x00007fffe12487da: nop
  0x00007fffe12487db: nop
  0x00007fffe12487dc: nop
  0x00007fffe12487dd: nop
  0x00007fffe12487de: nop
  0x00007fffe12487df: nop
[Verified Entry Point]
  0x00007fffe12487e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12487e7: push    %rbp
  0x00007fffe12487e8: sub     $0x30,%rsp        ;*aload_0
                                                ; - sun.nio.cs.StreamEncoder::isOpen@0 (line 155)

  ;;  block B0 [0, 4]

  0x00007fffe12487ec: movsbl  0x16(%rsi),%eax   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::isOpen@1 (line 155)

  0x00007fffe12487f0: and     $0x1,%eax
  0x00007fffe12487f3: add     $0x30,%rsp
  0x00007fffe12487f7: pop     %rbp
  0x00007fffe12487f8: test    %eax,0x16db2902(%rip)  ;   {poll_return}
  0x00007fffe12487fe: retq
  0x00007fffe12487ff: nop
  0x00007fffe1248800: nop
  ;; Unwind handler
  0x00007fffe1248801: mov     0x348(%r15),%rax
  0x00007fffe1248808: movabs  $0x0,%r10
  0x00007fffe1248812: mov     %r10,0x348(%r15)
  0x00007fffe1248819: movabs  $0x0,%r10
  0x00007fffe1248823: mov     %r10,0x350(%r15)
  0x00007fffe124882a: add     $0x30,%rsp
  0x00007fffe124882e: pop     %rbp
  0x00007fffe124882f: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1248834: hlt
  0x00007fffe1248835: hlt
  0x00007fffe1248836: hlt
  0x00007fffe1248837: hlt
  0x00007fffe1248838: hlt
  0x00007fffe1248839: hlt
  0x00007fffe124883a: hlt
  0x00007fffe124883b: hlt
  0x00007fffe124883c: hlt
  0x00007fffe124883d: hlt
  0x00007fffe124883e: hlt
  0x00007fffe124883f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1248840: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe124884a: movabs  $0xdead,%rcx
  0x00007fffe1248854: movabs  $0xdead,%rsi
  0x00007fffe124885e: movabs  $0xdead,%rdi
  0x00007fffe1248868: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124886d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1248872: sub     $0x80,%rsp
  0x00007fffe1248879: mov     %rax,0x78(%rsp)
  0x00007fffe124887e: mov     %rcx,0x70(%rsp)
  0x00007fffe1248883: mov     %rdx,0x68(%rsp)
  0x00007fffe1248888: mov     %rbx,0x60(%rsp)
  0x00007fffe124888d: mov     %rbp,0x50(%rsp)
  0x00007fffe1248892: mov     %rsi,0x48(%rsp)
  0x00007fffe1248897: mov     %rdi,0x40(%rsp)
  0x00007fffe124889c: mov     %r8,0x38(%rsp)
  0x00007fffe12488a1: mov     %r9,0x30(%rsp)
  0x00007fffe12488a6: mov     %r10,0x28(%rsp)
  0x00007fffe12488ab: mov     %r11,0x20(%rsp)
  0x00007fffe12488b0: mov     %r12,0x18(%rsp)
  0x00007fffe12488b5: mov     %r13,0x10(%rsp)
  0x00007fffe12488ba: mov     %r14,0x8(%rsp)
  0x00007fffe12488bf: mov     %r15,(%rsp)
  0x00007fffe12488c3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12488cd: movabs  $0x7fffe124886d,%rsi  ;   {internal_word}
  0x00007fffe12488d7: mov     %rsp,%rdx
  0x00007fffe12488da: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12488de: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12488e3: hlt
[Deopt Handler Code]
  0x00007fffe12488e4: movabs  $0x7fffe12488e4,%r10  ;   {section_word}
  0x00007fffe12488ee: push    %r10
  0x00007fffe12488f0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12488f5: hlt
  0x00007fffe12488f6: hlt
  0x00007fffe12488f7: hlt
<nmethod compile_id='15' compiler='C1' level='1' entry='0x00007fffe12487c0' size='776' address='0x00007fffe1248650' relocation_offset='304' insts_offset='368' stub_offset='496' scopes_data_offset='688' scopes_pcs_offset='704' dependencies_offset='768' method='sun/nio/cs/StreamEncoder isOpen ()Z' bytes='5' count='31958' iicount='31958' stamp='118.794'/>
<writer thread='140737327351552'/>
<task_queued compile_id='91' method='java/nio/Buffer hasRemaining ()Z' bytes='17' count='31962' iicount='31962' stamp='118.794' comment='tiered' hot_count='31962'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe124d250:
Code:
Argument 0 is unknown.RIP: 0x7fffe124d3a0 Code size: 0x00000098
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56940} &apos;hasRemaining&apos; &apos;()Z&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x30]  (sp of caller)
  ;; N32: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124d3a0: mov     0x8(%rsi),%r10d
  0x00007fffe124d3a4: shl     $0x3,%r10
  0x00007fffe124d3a8: cmp     %r10,%rax
  0x00007fffe124d3ab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124d3b1: nop
  0x00007fffe124d3b2: nop
  0x00007fffe124d3b3: nop
  0x00007fffe124d3b4: nop
  0x00007fffe124d3b5: nop
  0x00007fffe124d3b6: nop
  0x00007fffe124d3b7: nop
  0x00007fffe124d3b8: nop
  0x00007fffe124d3b9: nop
  0x00007fffe124d3ba: nop
  0x00007fffe124d3bb: nop
  0x00007fffe124d3bc: nop
  0x00007fffe124d3bd: nop
  0x00007fffe124d3be: nop
  0x00007fffe124d3bf: nop
[Verified Entry Point]
  ;; B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124d3c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124d3c7: push    %rbp
  0x00007fffe124d3c8: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.nio.Buffer::hasRemaining@-1 (line 403)

  0x00007fffe124d3cc: mov     0x1c(%rsi),%r10d  ;*getfield limit
                                                ; - java.nio.Buffer::hasRemaining@5 (line 403)

  0x00007fffe124d3d0: mov     0x18(%rsi),%r8d   ;*getfield position
                                                ; - java.nio.Buffer::hasRemaining@1 (line 403)

  0x00007fffe124d3d4: cmp     %r10d,%r8d
  0x00007fffe124d3d7: jnl     0x7fffe124d3ea    ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)

  ;; B2: #	N32 &lt;- B1  Freq: 1

  0x00007fffe124d3d9: mov     $0x1,%eax
  0x00007fffe124d3de: add     $0x20,%rsp
  0x00007fffe124d3e2: pop     %rbp
  0x00007fffe124d3e3: test    %eax,0x16dadc17(%rip)  ;   {poll_return}
  0x00007fffe124d3e9: retq
  ;; B3: #	N32 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe124d3ea: mov     $0xffffff65,%esi
  0x00007fffe124d3ef: mov     %r8d,%ebp
  0x00007fffe124d3f2: mov     %r10d,(%rsp)
  0x00007fffe124d3f6: nop
  0x00007fffe124d3f7: callq   0x7fffe1107820    ; OopMap{off=92}
                                                ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ;   {runtime_call}
  0x00007fffe124d3fc: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ;   {runtime_call}
  0x00007fffe124d401: hlt
  0x00007fffe124d402: hlt
  0x00007fffe124d403: hlt
  0x00007fffe124d404: hlt
  0x00007fffe124d405: hlt
  0x00007fffe124d406: hlt
  0x00007fffe124d407: hlt
  0x00007fffe124d408: hlt
  0x00007fffe124d409: hlt
  0x00007fffe124d40a: hlt
  0x00007fffe124d40b: hlt
  0x00007fffe124d40c: hlt
  0x00007fffe124d40d: hlt
  0x00007fffe124d40e: hlt
  0x00007fffe124d40f: hlt
  0x00007fffe124d410: hlt
  0x00007fffe124d411: hlt
  0x00007fffe124d412: hlt
  0x00007fffe124d413: hlt
  0x00007fffe124d414: hlt
  0x00007fffe124d415: hlt
  0x00007fffe124d416: hlt
  0x00007fffe124d417: hlt
  0x00007fffe124d418: hlt
  0x00007fffe124d419: hlt
  0x00007fffe124d41a: hlt
  0x00007fffe124d41b: hlt
  0x00007fffe124d41c: hlt
  0x00007fffe124d41d: hlt
  0x00007fffe124d41e: hlt
  0x00007fffe124d41f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe124d420: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe124d425: callq   0x7fffe124d42a
  0x00007fffe124d42a: subq    $0x5,(%rsp)
  0x00007fffe124d42f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124d434: hlt
  0x00007fffe124d435: hlt
  0x00007fffe124d436: hlt
  0x00007fffe124d437: hlt
<nmethod compile_id='91' compiler='C2' level='4' entry='0x00007fffe124d3a0' size='672' address='0x00007fffe124d250' relocation_offset='304' insts_offset='336' stub_offset='464' scopes_data_offset='496' scopes_pcs_offset='536' dependencies_offset='664' method='java/nio/Buffer hasRemaining ()Z' bytes='17' count='32419' iicount='32419' stamp='118.809'/>
<make_not_entrant thread='140736956679936' compile_id='30' compiler='C1' level='2' stamp='118.809'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe124a0d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe124a2c0 Code size: 0x00000640
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47910} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;
  #           [sp+0x90]  (sp of caller)
  ;;  block B13 [0, 0]

  0x00007fffe124a2c0: mov     0x8(%rsi),%r10d
  0x00007fffe124a2c4: shl     $0x3,%r10
  0x00007fffe124a2c8: cmp     %rax,%r10
  0x00007fffe124a2cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124a2d1: nop
  0x00007fffe124a2d2: nop
  0x00007fffe124a2d3: nop
  0x00007fffe124a2d4: nop
  0x00007fffe124a2d5: nop
  0x00007fffe124a2d6: nop
  0x00007fffe124a2d7: nop
  0x00007fffe124a2d8: nop
  0x00007fffe124a2d9: nop
  0x00007fffe124a2da: nop
  0x00007fffe124a2db: nop
  0x00007fffe124a2dc: nop
  0x00007fffe124a2dd: nop
  0x00007fffe124a2de: nop
  0x00007fffe124a2df: nop
[Verified Entry Point]
  0x00007fffe124a2e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124a2e7: push    %rbp
  0x00007fffe124a2e8: sub     $0x80,%rsp
  0x00007fffe124a2ef: mov     %rsi,0x48(%rsp)
  0x00007fffe124a2f4: movabs  $0x7ffff4d71078,%rax
  0x00007fffe124a2fe: mov     0x8(%rax),%edx
  0x00007fffe124a301: add     $0x8,%edx
  0x00007fffe124a304: mov     %edx,0x8(%rax)
  0x00007fffe124a307: movabs  $0x7ffff4c47910,%rax  ;   {metadata({method} {0x00007ffff4c47910} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;)}
  0x00007fffe124a311: and     $0x3ff8,%edx
  0x00007fffe124a317: cmp     $0x0,%edx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa813eab0]
  0x00007fffe124a31a: je      0x7fffe124a6e0    ;*aload_0
                                                ; - java.io.BufferedWriter::flushBuffer@0 (line 125)

  ;;  block B14 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe124a320: mov     0x10(%rsi),%edi
  0x00007fffe124a323: push    %r10
  0x00007fffe124a325: cmp     0x16b0f8b4(%rip),%r12  ;   {external_word}
  0x00007fffe124a32c: je      0x7fffe124a3a9
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124a332: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124a337: sub     $0x80,%rsp
  0x00007fffe124a33e: mov     %rax,0x78(%rsp)
  0x00007fffe124a343: mov     %rcx,0x70(%rsp)
  0x00007fffe124a348: mov     %rdx,0x68(%rsp)
  0x00007fffe124a34d: mov     %rbx,0x60(%rsp)
  0x00007fffe124a352: mov     %rbp,0x50(%rsp)
  0x00007fffe124a357: mov     %rsi,0x48(%rsp)
  0x00007fffe124a35c: mov     %rdi,0x40(%rsp)
  0x00007fffe124a361: mov     %r8,0x38(%rsp)
  0x00007fffe124a366: mov     %r9,0x30(%rsp)
  0x00007fffe124a36b: mov     %r10,0x28(%rsp)
  0x00007fffe124a370: mov     %r11,0x20(%rsp)
  0x00007fffe124a375: mov     %r12,0x18(%rsp)
  0x00007fffe124a37a: mov     %r13,0x10(%rsp)
  0x00007fffe124a37f: mov     %r14,0x8(%rsp)
  0x00007fffe124a384: mov     %r15,(%rsp)
  0x00007fffe124a388: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124a392: movabs  $0x7fffe124a332,%rsi  ;   {internal_word}
  0x00007fffe124a39c: mov     %rsp,%rdx
  0x00007fffe124a39f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124a3a3: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124a3a8: hlt
  0x00007fffe124a3a9: pop     %r10              ;*getfield lock
                                                ; - java.io.BufferedWriter::flushBuffer@1 (line 125)

  0x00007fffe124a3ab: mov     %rdi,0x50(%rsp)
  0x00007fffe124a3b0: lea     0x60(%rsp),%rdx
  0x00007fffe124a3b5: mov     %rdi,0x8(%rdx)
  0x00007fffe124a3b9: mov     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe124a6f7
  0x00007fffe124a3bc: mov     %rax,%rcx
  0x00007fffe124a3bf: and     $0x7,%rcx
  0x00007fffe124a3c3: cmp     $0x5,%rcx
  0x00007fffe124a3c7: jne     0x7fffe124a44e
  0x00007fffe124a3cd: mov     0x8(%rdi),%ecx
  0x00007fffe124a3d0: shl     $0x3,%rcx
  0x00007fffe124a3d4: mov     0xb0(%rcx),%rcx
  0x00007fffe124a3db: or      %r15,%rcx
  0x00007fffe124a3de: xor     %rax,%rcx
  0x00007fffe124a3e1: and     $0xffffffffffffff87,%rcx
  0x00007fffe124a3e5: je      0x7fffe124a476
  0x00007fffe124a3eb: test    $0x7,%rcx
  0x00007fffe124a3f2: jne     0x7fffe124a43b
  0x00007fffe124a3f4: test    $0x300,%rcx
  0x00007fffe124a3fb: jne     0x7fffe124a41a
  0x00007fffe124a3fd: and     $0x37f,%rax
  0x00007fffe124a404: mov     %rax,%rcx
  0x00007fffe124a407: or      %r15,%rcx
  0x00007fffe124a40a: lock cmpxchg %rcx,(%rdi)
  0x00007fffe124a40f: jne     0x7fffe124a773
  0x00007fffe124a415: jmpq    0x7fffe124a476
  0x00007fffe124a41a: mov     0x8(%rdi),%ecx
  0x00007fffe124a41d: shl     $0x3,%rcx
  0x00007fffe124a421: mov     0xb0(%rcx),%rcx
  0x00007fffe124a428: or      %r15,%rcx
  0x00007fffe124a42b: lock cmpxchg %rcx,(%rdi)
  0x00007fffe124a430: jne     0x7fffe124a773
  0x00007fffe124a436: jmpq    0x7fffe124a476
  0x00007fffe124a43b: mov     0x8(%rdi),%ecx
  0x00007fffe124a43e: shl     $0x3,%rcx
  0x00007fffe124a442: mov     0xb0(%rcx),%rcx
  0x00007fffe124a449: lock cmpxchg %rcx,(%rdi)
  0x00007fffe124a44e: mov     (%rdi),%rax
  0x00007fffe124a451: or      $0x1,%rax
  0x00007fffe124a455: mov     %rax,(%rdx)
  0x00007fffe124a458: lock cmpxchg %rdx,(%rdi)
  0x00007fffe124a45d: je      0x7fffe124a476
  0x00007fffe124a463: sub     %rsp,%rax
  0x00007fffe124a466: and     $0xfffffffffffff007,%rax
  0x00007fffe124a46d: mov     %rax,(%rdx)
  0x00007fffe124a470: jne     0x7fffe124a773    ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)

  0x00007fffe124a476: mov     0x1c(%rsi),%ebx
  0x00007fffe124a479: push    %r10
  0x00007fffe124a47b: cmp     0x16b0f75e(%rip),%r12  ;   {external_word}
  0x00007fffe124a482: je      0x7fffe124a4ff
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124a488: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124a48d: sub     $0x80,%rsp
  0x00007fffe124a494: mov     %rax,0x78(%rsp)
  0x00007fffe124a499: mov     %rcx,0x70(%rsp)
  0x00007fffe124a49e: mov     %rdx,0x68(%rsp)
  0x00007fffe124a4a3: mov     %rbx,0x60(%rsp)
  0x00007fffe124a4a8: mov     %rbp,0x50(%rsp)
  0x00007fffe124a4ad: mov     %rsi,0x48(%rsp)
  0x00007fffe124a4b2: mov     %rdi,0x40(%rsp)
  0x00007fffe124a4b7: mov     %r8,0x38(%rsp)
  0x00007fffe124a4bc: mov     %r9,0x30(%rsp)
  0x00007fffe124a4c1: mov     %r10,0x28(%rsp)
  0x00007fffe124a4c6: mov     %r11,0x20(%rsp)
  0x00007fffe124a4cb: mov     %r12,0x18(%rsp)
  0x00007fffe124a4d0: mov     %r13,0x10(%rsp)
  0x00007fffe124a4d5: mov     %r14,0x8(%rsp)
  0x00007fffe124a4da: mov     %r15,(%rsp)
  0x00007fffe124a4de: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124a4e8: movabs  $0x7fffe124a488,%rsi  ;   {internal_word}
  0x00007fffe124a4f2: mov     %rsp,%rdx
  0x00007fffe124a4f5: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124a4f9: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124a4fe: hlt
  0x00007fffe124a4ff: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)

  0x00007fffe124a501: cmp     $0x0,%rbx
  ;;   42 branch [EQ] [B11] 
  0x00007fffe124a505: je      0x7fffe124a648    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)

  ;;  block B12 [17, 15]

  0x00007fffe124a50b: mov     0x18(%rsi),%r8d   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::flushBuffer@12 (line 127)

  0x00007fffe124a50f: cmp     $0x0,%r8d
  ;;   52 branch [NE] [B4] 
  0x00007fffe124a513: jne     0x7fffe124a559    ;*ifne
                                                ; - java.io.BufferedWriter::flushBuffer@15 (line 127)

  ;;  block B3 [18, 20]

  0x00007fffe124a519: lea     0x60(%rsp),%rax
  0x00007fffe124a51e: mov     0x8(%rax),%rcx
  0x00007fffe124a522: mov     (%rcx),%rdx
  0x00007fffe124a525: and     $0x7,%rdx
  0x00007fffe124a529: cmp     $0x5,%rdx
  0x00007fffe124a52d: je      0x7fffe124a54a
  0x00007fffe124a533: mov     (%rax),%rdx
  0x00007fffe124a536: test    %rdx,%rdx
  0x00007fffe124a539: je      0x7fffe124a54a
  0x00007fffe124a53f: lock cmpxchg %rdx,(%rcx)
  0x00007fffe124a544: jne     0x7fffe124a786    ;*monitorexit
                                                ; - java.io.BufferedWriter::flushBuffer@19 (line 128)

  0x00007fffe124a54a: add     $0x80,%rsp
  0x00007fffe124a551: pop     %rbp
  0x00007fffe124a552: test    %eax,0x16db0ba8(%rip)  ;   {poll_return}
  0x00007fffe124a558: retq                      ;*return
                                                ; - java.io.BufferedWriter::flushBuffer@20 (line 128)

  ;;  block B4 [21, 52]

  0x00007fffe124a559: mov     0x20(%rsi),%edx
  0x00007fffe124a55c: push    %r10
  0x00007fffe124a55e: cmp     0x16b0f67b(%rip),%r12  ;   {external_word}
  0x00007fffe124a565: je      0x7fffe124a5e2
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124a56b: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124a570: sub     $0x80,%rsp
  0x00007fffe124a577: mov     %rax,0x78(%rsp)
  0x00007fffe124a57c: mov     %rcx,0x70(%rsp)
  0x00007fffe124a581: mov     %rdx,0x68(%rsp)
  0x00007fffe124a586: mov     %rbx,0x60(%rsp)
  0x00007fffe124a58b: mov     %rbp,0x50(%rsp)
  0x00007fffe124a590: mov     %rsi,0x48(%rsp)
  0x00007fffe124a595: mov     %rdi,0x40(%rsp)
  0x00007fffe124a59a: mov     %r8,0x38(%rsp)
  0x00007fffe124a59f: mov     %r9,0x30(%rsp)
  0x00007fffe124a5a4: mov     %r10,0x28(%rsp)
  0x00007fffe124a5a9: mov     %r11,0x20(%rsp)
  0x00007fffe124a5ae: mov     %r12,0x18(%rsp)
  0x00007fffe124a5b3: mov     %r13,0x10(%rsp)
  0x00007fffe124a5b8: mov     %r14,0x8(%rsp)
  0x00007fffe124a5bd: mov     %r15,(%rsp)
  0x00007fffe124a5c1: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124a5cb: movabs  $0x7fffe124a56b,%rsi  ;   {internal_word}
  0x00007fffe124a5d5: mov     %rsp,%rdx
  0x00007fffe124a5d8: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124a5dc: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124a5e1: hlt
  0x00007fffe124a5e2: pop     %r10              ;*getfield cb
                                                ; - java.io.BufferedWriter::flushBuffer@26 (line 129)

  0x00007fffe124a5e4: mov     $0x0,%ecx
  0x00007fffe124a5e9: mov     %rbx,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe124a5ec: nop
  0x00007fffe124a5ed: movabs  $0xffffffffffffffff,%rax
  0x00007fffe124a5f7: callq   0x7fffe11060c0    ; OopMap{[72]=Oop [80]=Oop [104]=Oop off=828}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {virtual_call}
  0x00007fffe124a5fc: mov     0x48(%rsp),%rsi
  0x00007fffe124a601: movl    $0x0,0x18(%rsi)   ;*putfield nextChar
                                                ; - java.io.BufferedWriter::flushBuffer@39 (line 130)

  0x00007fffe124a608: lea     0x60(%rsp),%rax
  0x00007fffe124a60d: mov     0x8(%rax),%rsi
  0x00007fffe124a611: mov     (%rsi),%rdx
  0x00007fffe124a614: and     $0x7,%rdx
  0x00007fffe124a618: cmp     $0x5,%rdx
  0x00007fffe124a61c: je      0x7fffe124a639
  0x00007fffe124a622: mov     (%rax),%rdx
  0x00007fffe124a625: test    %rdx,%rdx
  0x00007fffe124a628: je      0x7fffe124a639
  0x00007fffe124a62e: lock cmpxchg %rdx,(%rsi)
  0x00007fffe124a633: jne     0x7fffe124a799    ;*monitorexit
                                                ; - java.io.BufferedWriter::flushBuffer@43 (line 131)

  0x00007fffe124a639: add     $0x80,%rsp
  0x00007fffe124a640: pop     %rbp
  0x00007fffe124a641: test    %eax,0x16db0ab9(%rip)  ;   {poll_return}
  0x00007fffe124a647: retq                      ;*return
                                                ; - java.io.BufferedWriter::flushBuffer@52 (line 132)

  ;;  block B11 [7, 16]

  ;;   88 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe124a648: jmpq    0x7fffe124a7bb    ;   {no_reloc}
  0x00007fffe124a64d: add     %al,(%rax)
  0x00007fffe124a64f: add     %al,(%rax)
  0x00007fffe124a651: add     %ch,%cl
  0x00007fffe124a653: outsb   (%rsi),%dx
  0x00007fffe124a654: add     %eax,(%rax)
  0x00007fffe124a656: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe124a659: pop     %rax
  0x00007fffe124a65a: xlat    (%rbx)
  0x00007fffe124a65b: xlat    (%rbx)
  0x00007fffe124a65d: add     %al,(%rax)
  0x00007fffe124a65f: add     %al,(%rax)
  0x00007fffe124a661: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.BufferedWriter::ensureOpen@13 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)

  0x00007fffe124a664: mov     %rax,0x58(%rsp)
  0x00007fffe124a669: nop
  0x00007fffe124a66a: nop
  0x00007fffe124a66b: nop
  0x00007fffe124a66c: nop
  0x00007fffe124a66d: nop
  0x00007fffe124a66e: nop
  0x00007fffe124a66f: callq   0x7fffe1105e80    ; OopMap{[72]=Oop [88]=Oop [80]=Oop [104]=Oop off=948}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.BufferedWriter::ensureOpen@13 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)
                                                ;   {optimized virtual_call}
  0x00007fffe124a674: mov     0x58(%rsp),%rax   ; OopMap{[72]=Oop [80]=Oop [104]=Oop rax=Oop off=953}
                                                ;*athrow
                                                ; - java.io.BufferedWriter::ensureOpen@16 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)

  0x00007fffe124a679: movabs  $0x7fffe124a679,%rdx  ;   {section_word}
  0x00007fffe124a683: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe124a688: nop                       ;*athrow
                                                ; - java.io.BufferedWriter::ensureOpen@16 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)

  ;;  block B1 [47, 51]

  0x00007fffe124a689: mov     0x348(%r15),%rax
  0x00007fffe124a690: xor     %r10,%r10
  0x00007fffe124a693: mov     %r10,0x348(%r15)
  0x00007fffe124a69a: xor     %r10,%r10
  0x00007fffe124a69d: mov     %r10,0x350(%r15)
  0x00007fffe124a6a4: mov     %rax,%rsi
  0x00007fffe124a6a7: lea     0x60(%rsp),%rax
  0x00007fffe124a6ac: mov     0x8(%rax),%rbx
  0x00007fffe124a6b0: mov     (%rbx),%rdi
  0x00007fffe124a6b3: and     $0x7,%rdi
  0x00007fffe124a6b7: cmp     $0x5,%rdi
  0x00007fffe124a6bb: je      0x7fffe124a6d8
  0x00007fffe124a6c1: mov     (%rax),%rdi
  0x00007fffe124a6c4: test    %rdi,%rdi
  0x00007fffe124a6c7: je      0x7fffe124a6d8
  0x00007fffe124a6cd: lock cmpxchg %rdi,(%rbx)
  0x00007fffe124a6d2: jne     0x7fffe124a7d2    ;*monitorexit
                                                ; - java.io.BufferedWriter::flushBuffer@49 (line 131)

  0x00007fffe124a6d8: mov     %rsi,%rax
  0x00007fffe124a6db: jmpq    0x7fffe124a810
  ;; CounterOverflowStub slow case
  0x00007fffe124a6e0: mov     %rax,0x8(%rsp)
  0x00007fffe124a6e5: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124a6ed: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [72]=Oop off=1074}
                                                ;*synchronization entry
                                                ; - java.io.BufferedWriter::flushBuffer@-1 (line 125)
                                                ;   {runtime_call}
  0x00007fffe124a6f2: jmpq    0x7fffe124a320
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124a6f7: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [72]=Oop rdi=Oop [80]=Oop off=1084}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)
                                                ;   {runtime_call}
  0x00007fffe124a6fc: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124a701: sub     $0x80,%rsp
  0x00007fffe124a708: mov     %rax,0x78(%rsp)
  0x00007fffe124a70d: mov     %rcx,0x70(%rsp)
  0x00007fffe124a712: mov     %rdx,0x68(%rsp)
  0x00007fffe124a717: mov     %rbx,0x60(%rsp)
  0x00007fffe124a71c: mov     %rbp,0x50(%rsp)
  0x00007fffe124a721: mov     %rsi,0x48(%rsp)
  0x00007fffe124a726: mov     %rdi,0x40(%rsp)
  0x00007fffe124a72b: mov     %r8,0x38(%rsp)
  0x00007fffe124a730: mov     %r9,0x30(%rsp)
  0x00007fffe124a735: mov     %r10,0x28(%rsp)
  0x00007fffe124a73a: mov     %r11,0x20(%rsp)
  0x00007fffe124a73f: mov     %r12,0x18(%rsp)
  0x00007fffe124a744: mov     %r13,0x10(%rsp)
  0x00007fffe124a749: mov     %r14,0x8(%rsp)
  0x00007fffe124a74e: mov     %r15,(%rsp)
  0x00007fffe124a752: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124a75c: movabs  $0x7fffe124a6fc,%rsi  ;   {internal_word}
  0x00007fffe124a766: mov     %rsp,%rdx
  0x00007fffe124a769: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124a76d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124a772: hlt
  ;; MonitorEnterStub slow case
  0x00007fffe124a773: mov     %rdi,0x8(%rsp)
  0x00007fffe124a778: mov     %rdx,(%rsp)
  0x00007fffe124a77c: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [72]=Oop rdi=Oop [80]=Oop [104]=Oop off=1217}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)
                                                ;   {runtime_call}
  0x00007fffe124a781: jmpq    0x7fffe124a476
  ;; MonitorExitStub slow case
  0x00007fffe124a786: lea     0x60(%rsp),%rax
  0x00007fffe124a78b: mov     %rax,(%rsp)
  0x00007fffe124a78f: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124a794: jmpq    0x7fffe124a54a
  ;; MonitorExitStub slow case
  0x00007fffe124a799: lea     0x60(%rsp),%rax
  0x00007fffe124a79e: mov     %rax,(%rsp)
  0x00007fffe124a7a2: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124a7a7: jmpq    0x7fffe124a639
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124a7ac: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124a7b6: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124a7bb: callq   0x7fffe11fc960    ; OopMap{[72]=Oop [80]=Oop [104]=Oop off=1280}
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)
                                                ;   {runtime_call}
  0x00007fffe124a7c0: jmpq    0x7fffe124a648
  ;; NewInstanceStub slow case
  0x00007fffe124a7c5: mov     %rdx,%rdx
  0x00007fffe124a7c8: callq   0x7fffe11668a0    ; OopMap{[72]=Oop [80]=Oop [104]=Oop off=1293}
                                                ;*new  ; - java.io.BufferedWriter::ensureOpen@7 (line 116)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)
                                                ;   {runtime_call}
  0x00007fffe124a7cd: jmpq    0x7fffe124a657
  ;; MonitorExitStub slow case
  0x00007fffe124a7d2: lea     0x60(%rsp),%rax
  0x00007fffe124a7d7: mov     %rax,(%rsp)
  0x00007fffe124a7db: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124a7e0: jmpq    0x7fffe124a6d8
  0x00007fffe124a7e5: nop
  0x00007fffe124a7e6: nop
  ;; Unwind handler
  0x00007fffe124a7e7: mov     0x348(%r15),%rax
  0x00007fffe124a7ee: movabs  $0x0,%r10
  0x00007fffe124a7f8: mov     %r10,0x348(%r15)
  0x00007fffe124a7ff: movabs  $0x0,%r10
  0x00007fffe124a809: mov     %r10,0x350(%r15)
  0x00007fffe124a810: add     $0x80,%rsp
  0x00007fffe124a817: pop     %rbp
  0x00007fffe124a818: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124a81d: hlt
  0x00007fffe124a81e: hlt
  0x00007fffe124a81f: hlt
[Stub Code]
  0x00007fffe124a820: nop                       ;   {no_reloc}
  0x00007fffe124a821: nop
  0x00007fffe124a822: nop
  0x00007fffe124a823: nop
  0x00007fffe124a824: nop
  0x00007fffe124a825: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124a82f: jmpq    0x7fffe124a82f    ;   {runtime_call}
  0x00007fffe124a834: nop
  0x00007fffe124a835: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124a83f: jmpq    0x7fffe124a83f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe124a844: movabs  $0xdead,%rbx
  0x00007fffe124a84e: movabs  $0xdead,%rcx
  0x00007fffe124a858: movabs  $0xdead,%rsi
  0x00007fffe124a862: movabs  $0xdead,%rdi
  0x00007fffe124a86c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124a871: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124a876: sub     $0x80,%rsp
  0x00007fffe124a87d: mov     %rax,0x78(%rsp)
  0x00007fffe124a882: mov     %rcx,0x70(%rsp)
  0x00007fffe124a887: mov     %rdx,0x68(%rsp)
  0x00007fffe124a88c: mov     %rbx,0x60(%rsp)
  0x00007fffe124a891: mov     %rbp,0x50(%rsp)
  0x00007fffe124a896: mov     %rsi,0x48(%rsp)
  0x00007fffe124a89b: mov     %rdi,0x40(%rsp)
  0x00007fffe124a8a0: mov     %r8,0x38(%rsp)
  0x00007fffe124a8a5: mov     %r9,0x30(%rsp)
  0x00007fffe124a8aa: mov     %r10,0x28(%rsp)
  0x00007fffe124a8af: mov     %r11,0x20(%rsp)
  0x00007fffe124a8b4: mov     %r12,0x18(%rsp)
  0x00007fffe124a8b9: mov     %r13,0x10(%rsp)
  0x00007fffe124a8be: mov     %r14,0x8(%rsp)
  0x00007fffe124a8c3: mov     %r15,(%rsp)
  0x00007fffe124a8c7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124a8d1: movabs  $0x7fffe124a871,%rsi  ;   {internal_word}
  0x00007fffe124a8db: mov     %rsp,%rdx
  0x00007fffe124a8de: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124a8e2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124a8e7: hlt
[Deopt Handler Code]
  0x00007fffe124a8e8: movabs  $0x7fffe124a8e8,%r10  ;   {section_word}
  0x00007fffe124a8f2: push    %r10
  0x00007fffe124a8f4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124a8f9: hlt
  0x00007fffe124a8fa: hlt
  0x00007fffe124a8fb: hlt
  0x00007fffe124a8fc: hlt
  0x00007fffe124a8fd: hlt
  0x00007fffe124a8fe: hlt
  0x00007fffe124a8ff: hlt
<nmethod compile_id='43' compiler='C1' level='2' entry='0x00007fffe124a2c0' size='2928' address='0x00007fffe124a0d0' relocation_offset='304' insts_offset='496' stub_offset='1872' scopes_data_offset='2120' scopes_pcs_offset='2336' dependencies_offset='2784' handler_table_offset='2792' nul_chk_table_offset='2912' method='java/io/BufferedWriter flushBuffer ()V' bytes='53' count='33452' iicount='33452' stamp='118.835'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe1251dd0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1251f40 Code size: 0x000005b8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c28dc8} &apos;write&apos; &apos;(Ljava/lang/String;)V&apos; in &apos;java/io/Writer&apos;
  # this:     rsi:rsi   = &apos;java/io/Writer&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/String&apos;
  #           [sp+0x60]  (sp of caller)
  ;; N562: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1251f40: mov     0x8(%rsi),%r10d
  0x00007fffe1251f44: shl     $0x3,%r10
  0x00007fffe1251f48: cmp     %r10,%rax
  0x00007fffe1251f4b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1251f51: nop
  0x00007fffe1251f52: nop
  0x00007fffe1251f53: nop
  0x00007fffe1251f54: nop
  0x00007fffe1251f55: nop
  0x00007fffe1251f56: nop
  0x00007fffe1251f57: nop
  0x00007fffe1251f58: nop
  0x00007fffe1251f59: nop
  0x00007fffe1251f5a: nop
  0x00007fffe1251f5b: nop
  0x00007fffe1251f5c: nop
  0x00007fffe1251f5d: nop
  0x00007fffe1251f5e: nop
  0x00007fffe1251f5f: nop
[Verified Entry Point]
  ;; B1: #	B38 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1251f60: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1251f67: push    %rbp
  0x00007fffe1251f68: sub     $0x50,%rsp        ;*synchronization entry
                                                ; - java.io.Writer::write@-1 (line 157)

  0x00007fffe1251f6c: mov     %rsi,%r8
  0x00007fffe1251f6f: mov     %rdx,0x38(%rsp)
  0x00007fffe1251f74: mov     0xc(%rdx),%r11d   ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; implicit exception: dispatches to 0x00007fffe1252361
  ;; B2: #	B39 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1251f78: mov     0xc(%r11),%r11d   ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; implicit exception: dispatches to 0x00007fffe1252371
  ;; B3: #	B21 B4 &lt;- B2  Freq: 0.999998

  0x00007fffe1251f7c: mov     0x8(%rsi),%r10d
  0x00007fffe1251f80: cmp     $0x20005721,%r10d  ;   {metadata(&apos;java/io/BufferedWriter&apos;)}
  0x00007fffe1251f87: jne     0x7fffe12520c9    ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B4: #	B40 B5 &lt;- B3  Freq: 0.999997

  0x00007fffe1251f8d: mov     %r8,0x20(%rsp)
  0x00007fffe1251f92: mov     0x10(%r8),%r8d
  0x00007fffe1251f96: mov     %r8d,0x28(%rsp)
  0x00007fffe1251f9b: mov     (%r8),%rax        ; implicit exception: dispatches to 0x00007fffe1252381
  ;; B5: #	B23 B6 &lt;- B4  Freq: 0.999996

  0x00007fffe1251f9e: mov     %rax,%r10
  0x00007fffe1251fa1: and     $0x7,%r10
  0x00007fffe1251fa5: mov     %r8,%r13          ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1251fa8: cmp     $0x5,%r10
  0x00007fffe1251fac: jne     0x7fffe12520eb
  ;; B6: #	B25 B7 &lt;- B5  Freq: 0.999995

  0x00007fffe1251fb2: mov     0x8(%r8),%r8d
  0x00007fffe1251fb6: movabs  $0x0,%r10
  0x00007fffe1251fc0: lea     (%r10,%r8,8),%r10
  0x00007fffe1251fc4: mov     0xb0(%r10),%r10
  0x00007fffe1251fcb: mov     %r10,%r8
  0x00007fffe1251fce: or      %r15,%r8
  0x00007fffe1251fd1: mov     %r8,%r9
  0x00007fffe1251fd4: xor     %rax,%r9
  0x00007fffe1251fd7: test    $0xffffffffffffff87,%r9
  0x00007fffe1251fde: jne     0x7fffe1252173    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B7: #	B34 B8 &lt;- B24 B23 B6 B29  Freq: 0.999996

  0x00007fffe1251fe4: mov     0x20(%rsp),%r10
  0x00007fffe1251fe9: mov     0x1c(%r10),%ebp   ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1251fed: test    %ebp,%ebp
  0x00007fffe1251fef: je      0x7fffe1252294    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B8: #	B19 B9 &lt;- B7  Freq: 0.999995

  0x00007fffe1251ff5: test    %r11d,%r11d
  0x00007fffe1251ff8: jle     0x7fffe12520a5    ;*if_icmpge
                                                ; - java.io.BufferedWriter::write@24 (line 224)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B9: #	B35 B10 &lt;- B8  Freq: 0.499998

  0x00007fffe1251ffe: mov     0x18(%r10),%r10d  ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1252002: mov     0x20(%rsp),%r8
  0x00007fffe1252007: mov     0x14(%r8),%ebp
  0x00007fffe125200b: sub     %r10d,%ebp        ;*isub
                                                ; - java.io.BufferedWriter::write@36 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe125200e: cmp     %r11d,%ebp
  0x00007fffe1252011: jl      0x7fffe12522bd    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B10: #	B41 B11 &lt;- B9  Freq: 0.499997

  0x00007fffe1252017: mov     0x38(%rsp),%r8
  0x00007fffe125201c: mov     0xc(%r8),%edi     ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1252020: mov     0xc(%rdi),%r8d    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; implicit exception: dispatches to 0x00007fffe125239d
  ;; B11: #	B36 B12 &lt;- B10  Freq: 0.499997

  0x00007fffe1252024: mov     0x20(%rsp),%r9
  0x00007fffe1252029: mov     0x20(%r9),%ebp    ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe125202d: cmp     %r8d,%r11d
  0x00007fffe1252030: jnle    0x7fffe12522ed    ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B12: #	B42 B13 &lt;- B11  Freq: 0.499997

  0x00007fffe1252036: mov     0xc(%rbp),%r9d    ; implicit exception: dispatches to 0x00007fffe12523c9
  ;; B13: #	B32 B14 &lt;- B12  Freq: 0.499996

  0x00007fffe125203a: mov     %rbp,%rcx         ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe125203d: mov     %rdi,%rdx         ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1252040: test    %r10d,%r10d
  0x00007fffe1252043: jl      0x7fffe125224f
  ;; B14: #	B32 B15 &lt;- B13  Freq: 0.499996

  0x00007fffe1252049: cmp     %r11d,%r8d
  0x00007fffe125204c: jb      0x7fffe125224f
  ;; B15: #	B32 B16 &lt;- B14  Freq: 0.499995

  0x00007fffe1252052: mov     %r11d,%r8d
  0x00007fffe1252055: add     %r10d,%r8d
  0x00007fffe1252058: cmp     %r8d,%r9d
  0x00007fffe125205b: jb      0x7fffe125224f
  ;; B16: #	B17 &lt;- B15  Freq: 0.499995

  0x00007fffe1252061: mov     %r13,%rbx
  0x00007fffe1252064: lea     0x10(%rbp,%r10,2),%rsi
  0x00007fffe1252069: lea     0x10(%rdi),%rdi
  0x00007fffe125206d: mov     %r11d,%r13d
  0x00007fffe1252070: movsxd  %r11d,%rdx
  0x00007fffe1252073: movabs  $0x7fffe1141060,%r10
  0x00007fffe125207d: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B17: #	B37 B18 &lt;- B16 B33  Freq: 0.499996

  0x00007fffe1252080: mov     0x20(%rsp),%r10
  0x00007fffe1252085: mov     0x18(%r10),%r8d   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@75 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1252089: mov     0x14(%r10),%r10d  ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe125208d: add     %r13d,%r8d        ;*iadd
                                                ; - java.io.BufferedWriter::write@80 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1252090: mov     0x20(%rsp),%r11
  0x00007fffe1252095: mov     %r8d,0x18(%r11)   ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe1252099: cmp     %r10d,%r8d
  0x00007fffe125209c: jnl     0x7fffe1252331    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B18: #	B19 &lt;- B17  Freq: 0.499996

  0x00007fffe12520a2: mov     %rbx,%r13
  ;; B19: #	B30 B20 &lt;- B18 B8  Freq: 0.999994

  0x00007fffe12520a5: mov     $0x7,%r10d
  0x00007fffe12520ab: mov     0x28(%rsp),%r11d
  0x00007fffe12520b0: and     (%r11),%r10
  0x00007fffe12520b3: cmp     $0x5,%r10
  0x00007fffe12520b7: jne     0x7fffe12521a7    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)

  ;; B20: #	N562 &lt;- B31 B30 B19  Freq: 0.999994

  0x00007fffe12520bd: add     $0x50,%rsp
  0x00007fffe12520c1: pop     %rbp
  0x00007fffe12520c2: test    %eax,0x16da8f38(%rip)  ;   {poll_return}
  0x00007fffe12520c8: retq
  ;; B21: #	N562 &lt;- B3  Freq: 9.99998e-07

  0x00007fffe12520c9: mov     $0xffffffde,%esi
  0x00007fffe12520ce: mov     %r8,%rbp
  0x00007fffe12520d1: mov     %r11d,0x8(%rsp)
  0x00007fffe12520d6: nop
  0x00007fffe12520d7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [56]=Oop off=412}
                                                ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe12520dc: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B22: #	B23 &lt;- B25  Freq: 9.99995e-13

  0x00007fffe12520e1: mov     0x28(%rsp),%r9d
  0x00007fffe12520e6: lock cmpxchg %r10,(%r9)
  ;; B23: #	B7 B24 &lt;- B5 B22  Freq: 9.99997e-07

  0x00007fffe12520eb: lea     0x40(%rsp),%rbx
  0x00007fffe12520f0: mov     0x0(%r13),%rax
  0x00007fffe12520f4: test    $0x2,%rax
  0x00007fffe12520fa: jne     0x7fffe1252121
  0x00007fffe12520fc: or      $0x1,%rax
  0x00007fffe1252100: mov     %rax,(%rbx)
  0x00007fffe1252103: lock cmpxchg %rbx,0x0(%r13)
  0x00007fffe1252109: je      0x7fffe125213a
  0x00007fffe125210f: sub     %rsp,%rax
  0x00007fffe1252112: and     $0xfffffffffffff007,%rax
  0x00007fffe1252119: mov     %rax,(%rbx)
  0x00007fffe125211c: jmpq    0x7fffe125213a
  0x00007fffe1252121: movq    $0x3,(%rbx)
  0x00007fffe1252128: mov     %rax,%rbx
  0x00007fffe125212b: mov     0x16(%rbx),%rax
  0x00007fffe125212f: test    %rax,%rax
  0x00007fffe1252132: jne     0x7fffe125213a
  0x00007fffe1252134: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe125213a: je      0x7fffe1251fe4
  ;; B24: #	B7 &lt;- B28 B23  Freq: 1.99999e-12

  0x00007fffe1252140: mov     %r13,%rsi
  0x00007fffe1252143: lea     0x40(%rsp),%rdx
  0x00007fffe1252148: mov     0x20(%rsp),%rbp
  0x00007fffe125214d: mov     %r11d,0xc(%rsp)
  0x00007fffe1252152: mov     %r13,0x18(%rsp)
  0x00007fffe1252157: mov     %r13,0x30(%rsp)
  0x00007fffe125215c: nop
  0x00007fffe125215d: nop
  0x00007fffe125215e: nop
  0x00007fffe125215f: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [24]=Oop [32]=Oop [40]=NarrowOop [48]=Oop [56]=Oop off=548}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe1252164: mov     0xc(%rsp),%r11d
  0x00007fffe1252169: mov     0x18(%rsp),%r13
  0x00007fffe125216e: jmpq    0x7fffe1251fe4
  ;; B25: #	B22 B26 &lt;- B6  Freq: 9.99995e-07

  0x00007fffe1252173: test    $0x7,%r9
  0x00007fffe125217a: jne     0x7fffe12520e1
  ;; B26: #	B28 B27 &lt;- B25  Freq: 9.99994e-07

  0x00007fffe1252180: test    $0x300,%r9
  0x00007fffe1252187: jne     0x7fffe1252196
  ;; B27: #	B28 &lt;- B26  Freq: 9.99993e-07

  0x00007fffe1252189: and     $0x37f,%rax
  0x00007fffe1252190: mov     %rax,%r8
  0x00007fffe1252193: or      %r15,%r8
  ;; B28: #	B24 B29 &lt;- B27 B26  Freq: 9.99994e-07

  0x00007fffe1252196: mov     0x28(%rsp),%r10d
  0x00007fffe125219b: lock cmpxchg %r8,(%r10)
  0x00007fffe12521a0: jne     0x7fffe1252140
  ;; B29: #	B7 &lt;- B28  Freq: 9.99993e-07

  0x00007fffe12521a2: jmpq    0x7fffe1251fe4
  ;; B30: #	B20 B31 &lt;- B19  Freq: 9.99994e-07

  0x00007fffe12521a7: lea     0x40(%rsp),%rax
  0x00007fffe12521ac: cmpq    $0x0,(%rax)
  0x00007fffe12521b3: je      0x7fffe125222f
  0x00007fffe12521b9: mov     0x0(%r13),%r10
  0x00007fffe12521bd: test    $0x2,%r10
  0x00007fffe12521c4: je      0x7fffe1252226
  0x00007fffe12521c6: mov     0x16(%r10),%rax
  0x00007fffe12521ca: xor     %r15,%rax
  0x00007fffe12521cd: or      0x26(%r10),%rax
  0x00007fffe12521d1: jne     0x7fffe125222f
  0x00007fffe12521d3: mov     0x36(%r10),%rax
  0x00007fffe12521d7: or      0x3e(%r10),%rax
  0x00007fffe12521db: jne     0x7fffe12521e7
  0x00007fffe12521dd: movq    $0x0,0x16(%r10)
  0x00007fffe12521e5: jmp     0x7fffe125222f
  0x00007fffe12521e7: cmpq    $0x0,0x46(%r10)
  0x00007fffe12521ef: je      0x7fffe125221a
  0x00007fffe12521f1: movq    $0x0,0x16(%r10)
  0x00007fffe12521f9: lock addl $0x0,(%rsp)
  0x00007fffe12521fe: cmpq    $0x0,0x46(%r10)
  0x00007fffe1252206: jne     0x7fffe125221f
  0x00007fffe1252208: movabs  $0x0,%rax
  0x00007fffe1252212: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1252218: jne     0x7fffe125221f
  0x00007fffe125221a: or      $0x1,%eax
  0x00007fffe125221d: jmp     0x7fffe125222f
  0x00007fffe125221f: test    $0x0,%eax
  0x00007fffe1252224: jmp     0x7fffe125222f
  0x00007fffe1252226: mov     (%rax),%r10
  0x00007fffe1252229: lock cmpxchg %r10,0x0(%r13)
  0x00007fffe125222f: je      0x7fffe12520bd
  ;; B31: #	B20 &lt;- B30  Freq: 9.99994e-13

  0x00007fffe1252235: mov     %r13,%rdi
  0x00007fffe1252238: lea     0x40(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe125223d: movabs  $0x7ffff744655c,%r10
  0x00007fffe1252247: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe125224a: jmpq    0x7fffe12520bd
  ;; B32: #	B43 B33 &lt;- B15 B13 B14  Freq: 1.49999e-06

  0x00007fffe125224f: mov     %rdx,%r8
  0x00007fffe1252252: mov     %r13,0x10(%rsp)
  0x00007fffe1252257: mov     %r11d,0x8(%rsp)
  0x00007fffe125225c: pushq   0x20(%rsp)
  0x00007fffe1252261: popq    (%rsp)
  0x00007fffe1252265: mov     0x38(%rsp),%rbp
  0x00007fffe125226a: xor     %edx,%edx
  0x00007fffe125226c: mov     %r8,%rsi
  0x00007fffe125226f: mov     %r10d,%r8d
  0x00007fffe1252272: mov     %r11d,%r9d
  0x00007fffe1252275: nop
  0x00007fffe1252276: nop
  0x00007fffe1252277: callq   0x7fffe1169ba0    ; OopMap{rbp=Oop [0]=Oop [16]=Oop [40]=NarrowOop [56]=Oop off=828}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B33: #	B17 &lt;- B32  Freq: 1.49996e-06

  0x00007fffe125227c: pushq   (%rsp)
  0x00007fffe1252280: popq    0x20(%rsp)
  0x00007fffe1252285: mov     0x8(%rsp),%r13d
  0x00007fffe125228a: mov     0x10(%rsp),%rbx
  0x00007fffe125228f: jmpq    0x7fffe1252080
  ;; B34: #	N562 &lt;- B7  Freq: 4.76835e-07

  0x00007fffe1252294: mov     $0xffffff65,%esi
  0x00007fffe1252299: mov     %r11d,0x10(%rsp)
  0x00007fffe125229e: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12522a3: mov     0x28(%rsp),%eax
  0x00007fffe12522a7: mov     %eax,0x14(%rsp)
  0x00007fffe12522ab: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12522b0: nop
  0x00007fffe12522b1: nop
  0x00007fffe12522b2: nop
  0x00007fffe12522b3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [20]=NarrowOop [32]=Oop [56]=Oop off=888}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe12522b8: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B35: #	N562 &lt;- B9  Freq: 2.38417e-07

  0x00007fffe12522bd: mov     $0xffffff65,%esi
  0x00007fffe12522c2: mov     %r8,(%rsp)
  0x00007fffe12522c6: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12522cb: mov     0x28(%rsp),%eax
  0x00007fffe12522cf: mov     %eax,0x10(%rsp)
  0x00007fffe12522d3: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12522d8: mov     %r11d,0x1c(%rsp)
  0x00007fffe12522dd: mov     %r11d,0x20(%rsp)
  0x00007fffe12522e2: nop
  0x00007fffe12522e3: callq   0x7fffe1107820    ; OopMap{[0]=Oop [16]=NarrowOop [56]=Oop off=936}
                                                ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe12522e8: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B36: #	N562 &lt;- B11  Freq: 2.38417e-07

  0x00007fffe12522ed: mov     $0xffffff65,%esi
  0x00007fffe12522f2: mov     %r9,(%rsp)
  0x00007fffe12522f6: pushq   0x38(%rsp)
  0x00007fffe12522fb: popq    0x8(%rsp)
  0x00007fffe1252300: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1252305: mov     0x28(%rsp),%eax
  0x00007fffe1252309: mov     %eax,0x18(%rsp)
  0x00007fffe125230d: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1252312: mov     %r11d,0x20(%rsp)
  0x00007fffe1252317: mov     %r11d,0x28(%rsp)
  0x00007fffe125231c: mov     %r10d,0x2c(%rsp)
  0x00007fffe1252321: mov     %r8d,0x34(%rsp)
  0x00007fffe1252326: nop
  0x00007fffe1252327: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [24]=NarrowOop off=1004}
                                                ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe125232c: callq   0x7ffff736b4ea    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B37: #	N562 &lt;- B17  Freq: 2.38417e-07

  0x00007fffe1252331: mov     $0xffffff65,%esi
  0x00007fffe1252336: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125233b: mov     0x28(%rsp),%eax
  0x00007fffe125233f: mov     %eax,0x8(%rsp)
  0x00007fffe1252343: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1252348: mov     %r13d,0x10(%rsp)
  0x00007fffe125234d: mov     %r8d,0x14(%rsp)
  0x00007fffe1252352: mov     %r10d,0x18(%rsp)
  0x00007fffe1252357: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [32]=Oop [56]=Oop off=1052}
                                                ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe125235c: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B38: #	N562 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe1252361: mov     $0xfffffff6,%esi
  0x00007fffe1252366: nop
  0x00007fffe1252367: callq   0x7fffe1107820    ; OopMap{off=1068}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ;   {runtime_call}
  0x00007fffe125236c: callq   0x7ffff736b4ea    ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ;   {runtime_call}
  ;; B39: #	N562 &lt;- B2  Freq: 1.01328e-06

  0x00007fffe1252371: mov     $0xfffffff6,%esi
  0x00007fffe1252376: nop
  0x00007fffe1252377: callq   0x7fffe1107820    ; OopMap{off=1084}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ;   {runtime_call}
  0x00007fffe125237c: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ;   {runtime_call}
  ;; B40: #	N562 &lt;- B4  Freq: 1.01328e-06

  0x00007fffe1252381: mov     $0xfffffff6,%esi
  0x00007fffe1252386: mov     0x20(%rsp),%rbp
  0x00007fffe125238b: mov     %r11d,0x8(%rsp)
  0x00007fffe1252390: nop
  0x00007fffe1252391: nop
  0x00007fffe1252392: nop
  0x00007fffe1252393: callq   0x7fffe1107820    ; OopMap{rbp=Oop [56]=Oop off=1112}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe1252398: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B41: #	N562 &lt;- B10  Freq: 5.06637e-07

  0x00007fffe125239d: mov     $0xfffffff6,%esi
  0x00007fffe12523a2: mov     0x20(%rsp),%rbp
  0x00007fffe12523a7: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12523ac: mov     0x28(%rsp),%eax
  0x00007fffe12523b0: mov     %eax,0x8(%rsp)
  0x00007fffe12523b4: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12523b9: mov     %r11d,0x10(%rsp)
  0x00007fffe12523be: nop
  0x00007fffe12523bf: callq   0x7fffe1107820    ; OopMap{rbp=Oop [8]=NarrowOop [56]=Oop off=1156}
                                                ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe12523c4: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B42: #	N562 &lt;- B12  Freq: 5.06636e-07

  0x00007fffe12523c9: mov     $0xfffffff6,%esi
  0x00007fffe12523ce: mov     0x20(%rsp),%rbp
  0x00007fffe12523d3: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12523d8: mov     0x28(%rsp),%eax
  0x00007fffe12523dc: mov     %eax,0x8(%rsp)
  0x00007fffe12523e0: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12523e5: mov     %r11d,0x10(%rsp)
  0x00007fffe12523ea: mov     %edi,0x18(%rsp)
  0x00007fffe12523ee: mov     %r10d,0x1c(%rsp)
  0x00007fffe12523f3: mov     %r11d,0x20(%rsp)
  0x00007fffe12523f8: nop
  0x00007fffe12523f9: nop
  0x00007fffe12523fa: nop
  0x00007fffe12523fb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [8]=NarrowOop [24]=NarrowOop [56]=Oop off=1216}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  0x00007fffe1252400: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ;   {runtime_call}
  ;; B43: #	B45 B44 &lt;- B32  Freq: 1.49999e-11

  0x00007fffe1252405: mov     %rax,%rbx
  0x00007fffe1252408: mov     0x28(%rsp),%r11d
  0x00007fffe125240d: mov     $0x7,%r10d
  0x00007fffe1252413: and     (%r11),%r10
  0x00007fffe1252416: cmp     $0x5,%r10
  0x00007fffe125241a: jne     0x7fffe1252429    ;*synchronization entry
                                                ; - java.io.Writer::write@-1 (line 157)

  ;; B44: #	N562 &lt;- B46 B45 B43  Freq: 1.49999e-11

  0x00007fffe125241c: mov     %rbx,%rsi
  0x00007fffe125241f: add     $0x50,%rsp
  0x00007fffe1252423: pop     %rbp
  0x00007fffe1252424: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B45: #	B44 B46 &lt;- B43  Freq: 1.49999e-17

  0x00007fffe1252429: mov     0x10(%rsp),%r11
  0x00007fffe125242e: lea     0x40(%rsp),%rax
  0x00007fffe1252433: cmpq    $0x0,(%rax)
  0x00007fffe125243a: je      0x7fffe12524b4
  0x00007fffe1252440: mov     (%r11),%r10
  0x00007fffe1252443: test    $0x2,%r10
  0x00007fffe125244a: je      0x7fffe12524ac
  0x00007fffe125244c: mov     0x16(%r10),%rax
  0x00007fffe1252450: xor     %r15,%rax
  0x00007fffe1252453: or      0x26(%r10),%rax
  0x00007fffe1252457: jne     0x7fffe12524b4
  0x00007fffe1252459: mov     0x36(%r10),%rax
  0x00007fffe125245d: or      0x3e(%r10),%rax
  0x00007fffe1252461: jne     0x7fffe125246d
  0x00007fffe1252463: movq    $0x0,0x16(%r10)
  0x00007fffe125246b: jmp     0x7fffe12524b4
  0x00007fffe125246d: cmpq    $0x0,0x46(%r10)
  0x00007fffe1252475: je      0x7fffe12524a0
  0x00007fffe1252477: movq    $0x0,0x16(%r10)
  0x00007fffe125247f: lock addl $0x0,(%rsp)
  0x00007fffe1252484: cmpq    $0x0,0x46(%r10)
  0x00007fffe125248c: jne     0x7fffe12524a5
  0x00007fffe125248e: movabs  $0x0,%rax
  0x00007fffe1252498: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe125249e: jne     0x7fffe12524a5
  0x00007fffe12524a0: or      $0x1,%eax
  0x00007fffe12524a3: jmp     0x7fffe12524b4
  0x00007fffe12524a5: test    $0x0,%eax
  0x00007fffe12524aa: jmp     0x7fffe12524b4
  0x00007fffe12524ac: mov     (%rax),%r10
  0x00007fffe12524af: lock cmpxchg %r10,(%r11)
  0x00007fffe12524b4: je      0x7fffe125241c
  ;; B46: #	B44 &lt;- B45  Freq: 1.49999e-23

  0x00007fffe12524ba: mov     %r11,%rdi
  0x00007fffe12524bd: lea     0x40(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe12524c2: movabs  $0x7ffff744655c,%r10
  0x00007fffe12524cc: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)

  0x00007fffe12524cf: jmpq    0x7fffe125241c
  0x00007fffe12524d4: hlt
  0x00007fffe12524d5: hlt
  0x00007fffe12524d6: hlt
  0x00007fffe12524d7: hlt
  0x00007fffe12524d8: hlt
  0x00007fffe12524d9: hlt
  0x00007fffe12524da: hlt
  0x00007fffe12524db: hlt
  0x00007fffe12524dc: hlt
  0x00007fffe12524dd: hlt
  0x00007fffe12524de: hlt
  0x00007fffe12524df: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe12524e0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe12524e5: callq   0x7fffe12524ea
  0x00007fffe12524ea: subq    $0x5,(%rsp)
  0x00007fffe12524ef: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12524f4: hlt
  0x00007fffe12524f5: hlt
  0x00007fffe12524f6: hlt
  0x00007fffe12524f7: hlt
<nmethod compile_id='90' compiler='C2' level='4' entry='0x00007fffe1251f40' size='3528' address='0x00007fffe1251dd0' relocation_offset='304' insts_offset='368' stub_offset='1808' scopes_data_offset='1888' scopes_pcs_offset='2584' dependencies_offset='3448' handler_table_offset='3456' nul_chk_table_offset='3480' method='java/io/Writer write (Ljava/lang/String;)V' bytes='11' count='33452' iicount='33452' stamp='118.857'/>
<make_not_entrant thread='140736955627264' compile_id='33' compiler='C1' level='2' stamp='118.857'/>
<writer thread='140737327351552'/>
<task_queued compile_id='92' method='sun/nio/cs/StreamEncoder ensureOpen ()V' bytes='18' count='33452' iicount='33452' stamp='118.857' comment='tiered' hot_count='33452'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe12483d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1248520 Code size: 0x00000078
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2a740} &apos;ensureOpen&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x20]  (sp of caller)
  ;; N32: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1248520: mov     0x8(%rsi),%r10d
  0x00007fffe1248524: shl     $0x3,%r10
  0x00007fffe1248528: cmp     %r10,%rax
  0x00007fffe124852b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1248531: nop
  0x00007fffe1248532: nop
  0x00007fffe1248533: nop
  0x00007fffe1248534: nop
  0x00007fffe1248535: nop
  0x00007fffe1248536: nop
  0x00007fffe1248537: nop
  0x00007fffe1248538: nop
  0x00007fffe1248539: nop
  0x00007fffe124853a: nop
  0x00007fffe124853b: nop
  0x00007fffe124853c: nop
  0x00007fffe124853d: nop
  0x00007fffe124853e: nop
  0x00007fffe124853f: nop
[Verified Entry Point]
  ;; B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1248540: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1248547: push    %rbp
  0x00007fffe1248548: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@-1 (line 44)

  0x00007fffe124854c: movzbl  0x16(%rsi),%r11d  ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@1 (line 44)

  0x00007fffe1248551: test    %r11d,%r11d
  0x00007fffe1248554: je      0x7fffe1248562    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)

  ;; B2: #	N32 &lt;- B1  Freq: 1

  0x00007fffe1248556: add     $0x10,%rsp
  0x00007fffe124855a: pop     %rbp
  0x00007fffe124855b: test    %eax,0x16db2a9f(%rip)  ;   {poll_return}
  0x00007fffe1248561: retq
  ;; B3: #	N32 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe1248562: mov     $0xffffff65,%esi
  0x00007fffe1248567: mov     %r11d,%ebp
  0x00007fffe124856a: nop
  0x00007fffe124856b: callq   0x7fffe1107820    ; OopMap{off=80}
                                                ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ;   {runtime_call}
  0x00007fffe1248570: callq   0x7ffff736b4ea    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ;   {runtime_call}
  0x00007fffe1248575: hlt
  0x00007fffe1248576: hlt
  0x00007fffe1248577: hlt
  0x00007fffe1248578: hlt
  0x00007fffe1248579: hlt
  0x00007fffe124857a: hlt
  0x00007fffe124857b: hlt
  0x00007fffe124857c: hlt
  0x00007fffe124857d: hlt
  0x00007fffe124857e: hlt
  0x00007fffe124857f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1248580: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1248585: callq   0x7fffe124858a
  0x00007fffe124858a: subq    $0x5,(%rsp)
  0x00007fffe124858f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1248594: hlt
  0x00007fffe1248595: hlt
  0x00007fffe1248596: hlt
  0x00007fffe1248597: hlt
<nmethod compile_id='92' compiler='C2' level='4' entry='0x00007fffe1248520' size='616' address='0x00007fffe12483d0' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='464' scopes_pcs_offset='496' dependencies_offset='608' method='sun/nio/cs/StreamEncoder ensureOpen ()V' bytes='18' count='34171' iicount='34171' stamp='118.864'/>
<make_not_entrant thread='140736956679936' compile_id='47' compiler='C1' level='2' stamp='118.864'/>
<writer thread='140737327351552'/>
<task_queued compile_id='93' method='java/io/BufferedWriter flushBuffer ()V' bytes='53' count='34988' iicount='34988' stamp='118.878' comment='tiered' hot_count='34988'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1250510:
Code:
Argument 0 is unknown.RIP: 0x7fffe1250800 Code size: 0x00000c80
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c30958} &apos;encode&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;&apos; in &apos;java/nio/charset/CharsetEncoder&apos;
  # this:     rsi:rsi   = &apos;java/nio/charset/CharsetEncoder&apos;
  # parm0:    rdx:rdx   = &apos;java/nio/CharBuffer&apos;
  # parm1:    rcx:rcx   = &apos;java/nio/ByteBuffer&apos;
  # parm2:    r8        = boolean
  #           [sp+0xc0]  (sp of caller)
  ;;  block B90 [0, 0]

  0x00007fffe1250800: mov     0x8(%rsi),%r10d
  0x00007fffe1250804: shl     $0x3,%r10
  0x00007fffe1250808: cmp     %rax,%r10
  0x00007fffe125080b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1250811: nop
  0x00007fffe1250812: nop
  0x00007fffe1250813: nop
  0x00007fffe1250814: nop
  0x00007fffe1250815: nop
  0x00007fffe1250816: nop
  0x00007fffe1250817: nop
  0x00007fffe1250818: nop
  0x00007fffe1250819: nop
  0x00007fffe125081a: nop
  0x00007fffe125081b: nop
  0x00007fffe125081c: nop
  0x00007fffe125081d: nop
  0x00007fffe125081e: nop
  0x00007fffe125081f: nop
[Verified Entry Point]
  0x00007fffe1250820: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1250827: push    %rbp
  0x00007fffe1250828: sub     $0xb0,%rsp
  0x00007fffe125082f: mov     %rsi,0x50(%rsp)
  0x00007fffe1250834: mov     %rdx,0x60(%rsp)
  0x00007fffe1250839: mov     %rcx,0x68(%rsp)
  0x00007fffe125083e: mov     %r8d,0x5c(%rsp)
  0x00007fffe1250843: movabs  $0x7ffff4d562e0,%rdi
  0x00007fffe125084d: mov     0x8(%rdi),%ebx
  0x00007fffe1250850: add     $0x8,%ebx
  0x00007fffe1250853: mov     %ebx,0x8(%rdi)
  0x00007fffe1250856: movabs  $0x7ffff4c30958,%rdi  ;   {metadata({method} {0x00007ffff4c30958} &apos;encode&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;&apos; in &apos;java/nio/charset/CharsetEncoder&apos;)}
  0x00007fffe1250860: and     $0x3ff8,%ebx
  0x00007fffe1250866: cmp     $0x0,%ebx
  ;;   26 branch [EQ] [CounterOverflowStub: 0x00007fffb00a2d00]
  0x00007fffe1250869: je      0x7fffe1250ed1    ;*iload_3
                                                ; - java.nio.charset.CharsetEncoder::encode@0 (line 569)

  ;;  block B91 [0, 0]

  ;;  block B0 [0, 15]

  0x00007fffe125086f: cmp     $0x0,%r8d
  0x00007fffe1250873: mov     $0x1,%edi
  0x00007fffe1250878: je      0x7fffe1250883
  0x00007fffe125087e: mov     $0x2,%edi
  0x00007fffe1250883: mov     0x14(%rsi),%ebx   ;*getfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@12 (line 570)

  0x00007fffe1250886: cmp     $0x0,%ebx
  ;;   46 branch [EQ] [B7] 
  0x00007fffe1250889: je      0x7fffe12508cd    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)

  ;;  block B6 [18, 23]

  0x00007fffe125088f: cmp     $0x1,%ebx
  ;;   58 branch [EQ] [B7] 
  0x00007fffe1250892: je      0x7fffe12508cd    ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)

  ;;  block B8 [26, 27]

  0x00007fffe1250898: cmp     $0x0,%r8d
  ;;   70 branch [EQ] [B10] 
  0x00007fffe125089c: je      0x7fffe12508ab    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@27 (line 570)

  ;;  block B9 [30, 35]

  0x00007fffe12508a2: cmp     $0x2,%ebx
  ;;   82 branch [EQ] [B7] 
  0x00007fffe12508a5: je      0x7fffe12508cd    ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@35 (line 570)

  ;;  block B10 [38, 48]

  0x00007fffe12508ab: mov     %rbx,%rdx
  0x00007fffe12508ae: mov     %rdi,%rcx
  0x00007fffe12508b1: mov     %rsi,%r9
  0x00007fffe12508b4: mov     %r9,%rsi          ;*invokespecial throwIllegalStateException
                                                ; - java.nio.charset.CharsetEncoder::encode@45 (line 572)

  0x00007fffe12508b7: mov     %edi,0x58(%rsp)
  0x00007fffe12508bb: nop
  0x00007fffe12508bc: nop
  0x00007fffe12508bd: nop
  0x00007fffe12508be: nop
  0x00007fffe12508bf: callq   0x7fffe1105e80    ; OopMap{[80]=Oop [104]=Oop [96]=Oop off=196}
                                                ;*invokespecial throwIllegalStateException
                                                ; - java.nio.charset.CharsetEncoder::encode@45 (line 572)
                                                ;   {optimized virtual_call}
  0x00007fffe12508c4: mov     0x58(%rsp),%edi
  0x00007fffe12508c8: mov     0x50(%rsp),%rsi
  ;;  block B7 [48, 54]

  0x00007fffe12508cd: mov     %edi,0x14(%rsi)   ;*putfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@51 (line 573)

  0x00007fffe12508d0: mov     0x68(%rsp),%rcx
  0x00007fffe12508d5: mov     0x60(%rsp),%rdx
  0x00007fffe12508da: nop
  0x00007fffe12508db: nop
  0x00007fffe12508dc: nop
  0x00007fffe12508dd: nop
  0x00007fffe12508de: nop
  0x00007fffe12508df: nop
  ;;  block B11 [54, 94]

  0x00007fffe12508e0: mov     %rdx,%rdi
  0x00007fffe12508e3: mov     %rdi,%rdx
  0x00007fffe12508e6: mov     %rcx,%rbx
  0x00007fffe12508e9: mov     %rbx,%rcx
  0x00007fffe12508ec: mov     %rsi,%rax
  0x00007fffe12508ef: mov     %rax,%rsi         ;*invokevirtual encodeLoop
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  0x00007fffe12508f2: nop
  0x00007fffe12508f3: nop
  0x00007fffe12508f4: nop
  0x00007fffe12508f5: movabs  $0xffffffffffffffff,%rax
  0x00007fffe12508ff: callq   0x7fffe11060c0    ; OopMap{[80]=Oop [104]=Oop [96]=Oop off=260}
                                                ;*invokevirtual encodeLoop
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {virtual_call}
  0x00007fffe1250904: mov     0xc(%rax),%edx    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isOverflow@1 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; implicit exception: dispatches to 0x00007fffe1250ee8
  0x00007fffe1250907: cmp     $0x1,%edx
  0x00007fffe125090a: mov     $0x0,%esi
  0x00007fffe125090f: jne     0x7fffe125091a
  0x00007fffe1250915: mov     $0x1,%esi
  0x00007fffe125091a: and     $0x1,%esi
  0x00007fffe125091d: cmp     $0x0,%esi
  ;;  136 branch [NE] [B14] 
  0x00007fffe1250920: jne     0x7fffe1250de7    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@94 (line 586)

  ;;  block B15 [100, 105]

  0x00007fffe1250926: cmp     $0x0,%edx
  0x00007fffe1250929: mov     $0x0,%edx
  0x00007fffe125092e: jne     0x7fffe1250939
  0x00007fffe1250934: mov     $0x1,%edx
  0x00007fffe1250939: and     $0x1,%edx
  0x00007fffe125093c: cmp     $0x0,%edx
  ;;  152 branch [EQ] [B17] 
  0x00007fffe125093f: je      0x7fffe1250a34    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@105 (line 589)

  ;;  block B16 [108, 109]

  0x00007fffe1250945: mov     0x5c(%rsp),%r8d
  0x00007fffe125094a: cmp     $0x0,%r8d
  ;;  166 branch [EQ] [B19] 
  0x00007fffe125094e: je      0x7fffe1250db0    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@109 (line 590)

  ;;  block B18 [112, 116]

  0x00007fffe1250954: mov     0x60(%rsp),%rdx
  0x00007fffe1250959: mov     0x18(%rdx),%esi   ;*getfield position
                                                ; - java.nio.Buffer::hasRemaining@1 (line 403)
                                                ; - java.nio.charset.CharsetEncoder::encode@113 (line 590)
                                                ; implicit exception: dispatches to 0x00007fffe1250f64
  0x00007fffe125095c: mov     0x1c(%rdx),%edi   ;*getfield limit
                                                ; - java.nio.Buffer::hasRemaining@5 (line 403)
                                                ; - java.nio.charset.CharsetEncoder::encode@113 (line 590)

  0x00007fffe125095f: cmp     %edi,%esi
  0x00007fffe1250961: mov     $0x0,%ebx
  0x00007fffe1250966: jnl     0x7fffe1250971
  0x00007fffe125096c: mov     $0x1,%ebx
  0x00007fffe1250971: and     $0x1,%ebx
  0x00007fffe1250974: cmp     $0x0,%ebx
  ;;  186 branch [EQ] [B19] 
  0x00007fffe1250977: je      0x7fffe1250db0    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@116 (line 590)

  ;;  block B20 [119, 128]

  0x00007fffe125097d: movabs  $0xd73dd7f8,%rbx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe1250987: mov     0x74(%rbx),%ebx
  0x00007fffe125098a: push    %r10
  0x00007fffe125098c: cmp     0x16b0924d(%rip),%r12  ;   {external_word}
  0x00007fffe1250993: je      0x7fffe1250a10
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1250999: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125099e: sub     $0x80,%rsp
  0x00007fffe12509a5: mov     %rax,0x78(%rsp)
  0x00007fffe12509aa: mov     %rcx,0x70(%rsp)
  0x00007fffe12509af: mov     %rdx,0x68(%rsp)
  0x00007fffe12509b4: mov     %rbx,0x60(%rsp)
  0x00007fffe12509b9: mov     %rbp,0x50(%rsp)
  0x00007fffe12509be: mov     %rsi,0x48(%rsp)
  0x00007fffe12509c3: mov     %rdi,0x40(%rsp)
  0x00007fffe12509c8: mov     %r8,0x38(%rsp)
  0x00007fffe12509cd: mov     %r9,0x30(%rsp)
  0x00007fffe12509d2: mov     %r10,0x28(%rsp)
  0x00007fffe12509d7: mov     %r11,0x20(%rsp)
  0x00007fffe12509dc: mov     %r12,0x18(%rsp)
  0x00007fffe12509e1: mov     %r13,0x10(%rsp)
  0x00007fffe12509e6: mov     %r14,0x8(%rsp)
  0x00007fffe12509eb: mov     %r15,(%rsp)
  0x00007fffe12509ef: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12509f9: movabs  $0x7fffe1250999,%rsi  ;   {internal_word}
  0x00007fffe1250a03: mov     %rsp,%rdx
  0x00007fffe1250a06: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1250a0a: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1250a0f: hlt
  0x00007fffe1250a10: pop     %r10              ;*getstatic malformedCache
                                                ; - java.nio.charset.CoderResult::malformedForLength@0 (line 236)
                                                ; - java.nio.charset.CharsetEncoder::encode@123 (line 591)

  0x00007fffe1250a12: cmp     (%rbx),%rax       ; implicit exception: dispatches to 0x00007fffe1250fe0
  0x00007fffe1250a15: sub     %esi,%edi
  0x00007fffe1250a17: cmp     $0x0,%edi
  0x00007fffe1250a1a: mov     $0x0,%esi
  0x00007fffe1250a1f: cmovnle %rdi,%rsi
  0x00007fffe1250a23: mov     %rsi,%rdx
  0x00007fffe1250a26: mov     %rbx,%rsi         ;*invokespecial get
                                                ; - java.nio.charset.CoderResult$Cache::access$200@2 (line 194)
                                                ; - java.nio.charset.CoderResult::malformedForLength@4 (line 236)
                                                ; - java.nio.charset.CharsetEncoder::encode@123 (line 591)

  0x00007fffe1250a29: nop
  0x00007fffe1250a2a: nop
  0x00007fffe1250a2b: nop
  0x00007fffe1250a2c: nop
  0x00007fffe1250a2d: nop
  0x00007fffe1250a2e: nop
  0x00007fffe1250a2f: callq   0x7fffe1105e80    ; OopMap{[80]=Oop [104]=Oop [96]=Oop off=564}
                                                ;*invokespecial get
                                                ; - java.nio.charset.CoderResult$Cache::access$200@2 (line 194)
                                                ; - java.nio.charset.CoderResult::malformedForLength@4 (line 236)
                                                ; - java.nio.charset.CharsetEncoder::encode@123 (line 591)
                                                ;   {optimized virtual_call}
  ;;  block B17 [134, 142]

  0x00007fffe1250a34: mov     0xc(%rax),%edx    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isMalformed@1 (line 149)
                                                ; - java.nio.charset.CharsetEncoder::encode@139 (line 599)
                                                ; implicit exception: dispatches to 0x00007fffe125105c
  0x00007fffe1250a37: cmp     $0x2,%edx
  0x00007fffe1250a3a: mov     $0x0,%ecx
  0x00007fffe1250a3f: jne     0x7fffe1250a4a
  0x00007fffe1250a45: mov     $0x1,%ecx
  0x00007fffe1250a4a: and     $0x1,%ecx
  0x00007fffe1250a4d: cmp     $0x0,%ecx
  0x00007fffe1250a50: mov     0x50(%rsp),%rsi
  ;;  232 branch [EQ] [B22] 
  0x00007fffe1250a55: je      0x7fffe1250aeb    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@142 (line 599)

  ;;  block B21 [145, 151]

  0x00007fffe1250a5b: mov     0x20(%rsi),%edx
  0x00007fffe1250a5e: push    %r10
  0x00007fffe1250a60: cmp     0x16b09179(%rip),%r12  ;   {external_word}
  0x00007fffe1250a67: je      0x7fffe1250ae4
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1250a6d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1250a72: sub     $0x80,%rsp
  0x00007fffe1250a79: mov     %rax,0x78(%rsp)
  0x00007fffe1250a7e: mov     %rcx,0x70(%rsp)
  0x00007fffe1250a83: mov     %rdx,0x68(%rsp)
  0x00007fffe1250a88: mov     %rbx,0x60(%rsp)
  0x00007fffe1250a8d: mov     %rbp,0x50(%rsp)
  0x00007fffe1250a92: mov     %rsi,0x48(%rsp)
  0x00007fffe1250a97: mov     %rdi,0x40(%rsp)
  0x00007fffe1250a9c: mov     %r8,0x38(%rsp)
  0x00007fffe1250aa1: mov     %r9,0x30(%rsp)
  0x00007fffe1250aa6: mov     %r10,0x28(%rsp)
  0x00007fffe1250aab: mov     %r11,0x20(%rsp)
  0x00007fffe1250ab0: mov     %r12,0x18(%rsp)
  0x00007fffe1250ab5: mov     %r13,0x10(%rsp)
  0x00007fffe1250aba: mov     %r14,0x8(%rsp)
  0x00007fffe1250abf: mov     %r15,(%rsp)
  0x00007fffe1250ac3: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1250acd: movabs  $0x7fffe1250a6d,%rsi  ;   {internal_word}
  0x00007fffe1250ad7: mov     %rsp,%rdx
  0x00007fffe1250ada: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1250ade: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1250ae3: hlt
  0x00007fffe1250ae4: pop     %r10              ;*getfield malformedInputAction
                                                ; - java.nio.charset.CharsetEncoder::encode@146 (line 600)

  ;;  242 branch [AL] [B23] 
  0x00007fffe1250ae6: jmpq    0x7fffe1250ba4    ;*goto
                                                ; - java.nio.charset.CharsetEncoder::encode@151 (line 600)

  ;;  block B22 [154, 159]

  0x00007fffe1250aeb: cmp     $0x3,%edx
  0x00007fffe1250aee: mov     $0x0,%edx
  0x00007fffe1250af3: jne     0x7fffe1250afe
  0x00007fffe1250af9: mov     $0x1,%edx
  0x00007fffe1250afe: and     $0x1,%edx
  0x00007fffe1250b01: cmp     $0x0,%edx
  ;;  256 branch [EQ] [B25] 
  0x00007fffe1250b04: je      0x7fffe1250b9a    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@159 (line 601)

  ;;  block B24 [162, 168]

  0x00007fffe1250b0a: mov     0x24(%rsi),%edx
  0x00007fffe1250b0d: push    %r10
  0x00007fffe1250b0f: cmp     0x16b090ca(%rip),%r12  ;   {external_word}
  0x00007fffe1250b16: je      0x7fffe1250b93
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1250b1c: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1250b21: sub     $0x80,%rsp
  0x00007fffe1250b28: mov     %rax,0x78(%rsp)
  0x00007fffe1250b2d: mov     %rcx,0x70(%rsp)
  0x00007fffe1250b32: mov     %rdx,0x68(%rsp)
  0x00007fffe1250b37: mov     %rbx,0x60(%rsp)
  0x00007fffe1250b3c: mov     %rbp,0x50(%rsp)
  0x00007fffe1250b41: mov     %rsi,0x48(%rsp)
  0x00007fffe1250b46: mov     %rdi,0x40(%rsp)
  0x00007fffe1250b4b: mov     %r8,0x38(%rsp)
  0x00007fffe1250b50: mov     %r9,0x30(%rsp)
  0x00007fffe1250b55: mov     %r10,0x28(%rsp)
  0x00007fffe1250b5a: mov     %r11,0x20(%rsp)
  0x00007fffe1250b5f: mov     %r12,0x18(%rsp)
  0x00007fffe1250b64: mov     %r13,0x10(%rsp)
  0x00007fffe1250b69: mov     %r14,0x8(%rsp)
  0x00007fffe1250b6e: mov     %r15,(%rsp)
  0x00007fffe1250b72: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1250b7c: movabs  $0x7fffe1250b1c,%rsi  ;   {internal_word}
  0x00007fffe1250b86: mov     %rsp,%rdx
  0x00007fffe1250b89: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1250b8d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1250b92: hlt
  0x00007fffe1250b93: pop     %r10              ;*getfield unmappableCharacterAction
                                                ; - java.nio.charset.CharsetEncoder::encode@163 (line 602)

  ;;  266 branch [AL] [B23] 
  0x00007fffe1250b95: jmpq    0x7fffe1250ba4    ;*goto
                                                ; - java.nio.charset.CharsetEncoder::encode@168 (line 602)

  ;;  block B25 [171, 174]

  0x00007fffe1250b9a: movabs  $0x0,%rdx         ;*ifne
                                                ; - java.nio.charset.CharsetEncoder::encode@174 (line 604)
                                                ;   {oop(NULL)}
  ;;  block B23 [190, 195]

  0x00007fffe1250ba4: movabs  $0xd73969b0,%r10  ;   {oop(a &apos;java/nio/charset/CodingErrorAction&apos;)}
  0x00007fffe1250bae: cmp     %r10,%rdx
  ;;  278 branch [EQ] [B27] 
  0x00007fffe1250bb1: je      0x7fffe1250dd8    ;*if_acmpne
                                                ; - java.nio.charset.CharsetEncoder::encode@195 (line 606)

  ;;  block B28 [201, 206]

  0x00007fffe1250bb7: movabs  $0xd7396968,%rcx  ;   {oop(a &apos;java/nio/charset/CodingErrorAction&apos;)}
  0x00007fffe1250bc1: cmp     %rcx,%rdx
  ;;  288 branch [EQ] [B29] 
  0x00007fffe1250bc4: je      0x7fffe1250bd4    ;*if_acmpne
                                                ; - java.nio.charset.CharsetEncoder::encode@206 (line 609)

  ;;  block B100 [234, 234]

  0x00007fffe1250bca: mov     %rax,0x78(%rsp)
  ;;  294 branch [AL] [B30] 
  0x00007fffe1250bcf: jmpq    0x7fffe1250cb9    ;*aload
                                                ; - java.nio.charset.CharsetEncoder::encode@234 (line 615)

  ;;  block B29 [209, 218]

  0x00007fffe1250bd4: mov     0x68(%rsp),%rcx
  0x00007fffe1250bd9: mov     0x1c(%rcx),%r8d   ;*getfield limit
                                                ; - java.nio.Buffer::remaining@1 (line 391)
                                                ; - java.nio.charset.CharsetEncoder::encode@210 (line 610)
                                                ; implicit exception: dispatches to 0x00007fffe12510d8
  0x00007fffe1250bdd: mov     0x18(%rcx),%edi   ;*getfield position
                                                ; - java.nio.Buffer::remaining@5 (line 391)
                                                ; - java.nio.charset.CharsetEncoder::encode@210 (line 610)

  0x00007fffe1250be0: mov     0x1c(%rsi),%ebx
  0x00007fffe1250be3: push    %r10
  0x00007fffe1250be5: cmp     0x16b08ff4(%rip),%r12  ;   {external_word}
  0x00007fffe1250bec: je      0x7fffe1250c69
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1250bf2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1250bf7: sub     $0x80,%rsp
  0x00007fffe1250bfe: mov     %rax,0x78(%rsp)
  0x00007fffe1250c03: mov     %rcx,0x70(%rsp)
  0x00007fffe1250c08: mov     %rdx,0x68(%rsp)
  0x00007fffe1250c0d: mov     %rbx,0x60(%rsp)
  0x00007fffe1250c12: mov     %rbp,0x50(%rsp)
  0x00007fffe1250c17: mov     %rsi,0x48(%rsp)
  0x00007fffe1250c1c: mov     %rdi,0x40(%rsp)
  0x00007fffe1250c21: mov     %r8,0x38(%rsp)
  0x00007fffe1250c26: mov     %r9,0x30(%rsp)
  0x00007fffe1250c2b: mov     %r10,0x28(%rsp)
  0x00007fffe1250c30: mov     %r11,0x20(%rsp)
  0x00007fffe1250c35: mov     %r12,0x18(%rsp)
  0x00007fffe1250c3a: mov     %r13,0x10(%rsp)
  0x00007fffe1250c3f: mov     %r14,0x8(%rsp)
  0x00007fffe1250c44: mov     %r15,(%rsp)
  0x00007fffe1250c48: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1250c52: movabs  $0x7fffe1250bf2,%rsi  ;   {internal_word}
  0x00007fffe1250c5c: mov     %rsp,%rdx
  0x00007fffe1250c5f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1250c63: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1250c68: hlt
  0x00007fffe1250c69: pop     %r10              ;*getfield replacement
                                                ; - java.nio.charset.CharsetEncoder::encode@214 (line 610)

  0x00007fffe1250c6b: mov     0xc(%rbx),%r9d    ;*arraylength
                                                ; - java.nio.charset.CharsetEncoder::encode@217 (line 610)
                                                ; implicit exception: dispatches to 0x00007fffe1251154
  0x00007fffe1250c6f: sub     %edi,%r8d
  0x00007fffe1250c72: cmp     $0x0,%r8d
  0x00007fffe1250c76: mov     $0x0,%edi
  0x00007fffe1250c7b: cmovnle %r8,%rdi
  0x00007fffe1250c7f: cmp     %r9d,%edi
  ;;  316 branch [LT] [B31] 
  0x00007fffe1250c82: jl      0x7fffe1250dbf    ;*if_icmpge
                                                ; - java.nio.charset.CharsetEncoder::encode@218 (line 610)

  ;;  block B32 [225, 234]

  0x00007fffe1250c88: mov     %rdx,0x70(%rsp)
  0x00007fffe1250c8d: mov     %rax,0x78(%rsp)
  0x00007fffe1250c92: mov     %rbx,%rdx
  0x00007fffe1250c95: mov     %rcx,%rbx
  0x00007fffe1250c98: mov     $0x0,%ecx
  0x00007fffe1250c9d: mov     %r9,%r8
  0x00007fffe1250ca0: mov     %rbx,%rsi         ;*invokevirtual put
                                                ; - java.nio.ByteBuffer::put@5 (line 867)
                                                ; - java.nio.charset.CharsetEncoder::encode@230 (line 612)

  0x00007fffe1250ca3: nop
  0x00007fffe1250ca4: nop
  0x00007fffe1250ca5: movabs  $0xffffffffffffffff,%rax
  0x00007fffe1250caf: callq   0x7fffe11060c0    ; OopMap{[96]=Oop [80]=Oop [104]=Oop [112]=Oop [120]=Oop off=1204}
                                                ;*invokevirtual put
                                                ; - java.nio.ByteBuffer::put@5 (line 867)
                                                ; - java.nio.charset.CharsetEncoder::encode@230 (line 612)
                                                ;   {virtual_call}
  0x00007fffe1250cb4: mov     0x70(%rsp),%rdx
  ;;  block B30 [234, 239]

  0x00007fffe1250cb9: movabs  $0xd7396920,%r10  ;   {oop(a &apos;java/nio/charset/CodingErrorAction&apos;)}
  0x00007fffe1250cc3: cmp     %r10,%rdx
  ;;  340 branch [EQ] [B34] 
  0x00007fffe1250cc6: je      0x7fffe1250cdf    ;*if_acmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@239 (line 615)

  ;;  block B33 [242, 247]

  0x00007fffe1250ccc: movabs  $0xd7396968,%rsi  ;   {oop(a &apos;java/nio/charset/CodingErrorAction&apos;)}
  0x00007fffe1250cd6: cmp     %rsi,%rdx
  ;;  354 branch [NE] [B35] 
  0x00007fffe1250cd9: jne     0x7fffe1250d6a    ;*if_acmpne
                                                ; - java.nio.charset.CharsetEncoder::encode@247 (line 615)

  ;;  block B34 [250, 4]

  0x00007fffe1250cdf: mov     0x78(%rsp),%rax
  0x00007fffe1250ce4: mov     0x60(%rsp),%rdx
  0x00007fffe1250ce9: mov     0x18(%rdx),%edi   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - java.nio.charset.CharsetEncoder::encode@252 (line 618)
                                                ; implicit exception: dispatches to 0x00007fffe12511d0
  0x00007fffe1250cec: mov     0xc(%rax),%esi    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isError@1 (line 139)
                                                ; - java.nio.charset.CoderResult::length@1 (line 174)
                                                ; - java.nio.charset.CharsetEncoder::encode@257 (line 618)

  0x00007fffe1250cef: cmp     $0x2,%esi
  0x00007fffe1250cf2: mov     $0x0,%esi
  0x00007fffe1250cf7: jl      0x7fffe1250d02
  0x00007fffe1250cfd: mov     $0x1,%esi
  0x00007fffe1250d02: and     $0x1,%esi
  0x00007fffe1250d05: cmp     $0x0,%esi
  ;;  378 branch [EQ] [B83] 
  0x00007fffe1250d08: je      0x7fffe1250df6    ;*ifne
                                                ; - java.nio.charset.CoderResult::length@4 (line 174)
                                                ; - java.nio.charset.CharsetEncoder::encode@257 (line 618)

  ;;  block B84 [15, 265]

  0x00007fffe1250d0e: mov     0x10(%rax),%esi   ;*getfield length
                                                ; - java.nio.charset.CoderResult::length@16 (line 176)
                                                ; - java.nio.charset.CharsetEncoder::encode@257 (line 618)

  0x00007fffe1250d11: add     %edi,%esi
  0x00007fffe1250d13: mov     %rdx,%rdi
  0x00007fffe1250d16: mov     %rsi,%rdx
  0x00007fffe1250d19: mov     %rdi,%rsi         ;*invokevirtual position
                                                ; - java.nio.charset.CharsetEncoder::encode@261 (line 618)

  0x00007fffe1250d1c: nop
  0x00007fffe1250d1d: nop
  0x00007fffe1250d1e: nop
  0x00007fffe1250d1f: callq   0x7fffe1105e80    ; OopMap{[80]=Oop [104]=Oop [96]=Oop off=1316}
                                                ;*invokevirtual position
                                                ; - java.nio.charset.CharsetEncoder::encode@261 (line 618)
                                                ;   {optimized virtual_call}
  0x00007fffe1250d24: movabs  $0x7ffff4d562e0,%rax
  0x00007fffe1250d2e: mov     0xc(%rax),%edx
  0x00007fffe1250d31: add     $0x8,%edx
  0x00007fffe1250d34: mov     %edx,0xc(%rax)
  0x00007fffe1250d37: movabs  $0x7ffff4c30958,%rax  ;   {metadata({method} {0x00007ffff4c30958} &apos;encode&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;&apos; in &apos;java/nio/charset/CharsetEncoder&apos;)}
  0x00007fffe1250d41: and     $0x1fff8,%edx
  0x00007fffe1250d47: cmp     $0x0,%edx
  ;;  412 branch [EQ] [CounterOverflowStub: 0x00007fffa8060270]
  0x00007fffe1250d4a: je      0x7fffe125124c    ; OopMap{[80]=Oop [104]=Oop [96]=Oop off=1360}
                                                ;*goto
                                                ; - java.nio.charset.CharsetEncoder::encode@265 (line 619)

  0x00007fffe1250d50: test    %eax,0x16daa3aa(%rip)  ;   {poll}
  0x00007fffe1250d56: mov     0x68(%rsp),%rcx
  0x00007fffe1250d5b: mov     0x60(%rsp),%rdx
  0x00007fffe1250d60: mov     0x50(%rsp),%rsi
  ;;  418 branch [AL] [B11] 
  0x00007fffe1250d65: jmpq    0x7fffe12508e0    ;*goto
                                                ; - java.nio.charset.CharsetEncoder::encode@265 (line 619)

  ;;  block B35 [268, 282]

  0x00007fffe1250d6a: movabs  $0x7ffff4d562e0,%rax
  0x00007fffe1250d74: mov     0xc(%rax),%edx
  0x00007fffe1250d77: add     $0x8,%edx
  0x00007fffe1250d7a: mov     %edx,0xc(%rax)
  0x00007fffe1250d7d: movabs  $0x7ffff4c30958,%rax  ;   {metadata({method} {0x00007ffff4c30958} &apos;encode&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;&apos; in &apos;java/nio/charset/CharsetEncoder&apos;)}
  0x00007fffe1250d87: and     $0x1fff8,%edx
  0x00007fffe1250d8d: cmp     $0x0,%edx
  ;;  436 branch [EQ] [CounterOverflowStub: 0x00007fffa8060ac0]
  0x00007fffe1250d90: je      0x7fffe1251263    ; OopMap{[80]=Oop [104]=Oop [96]=Oop off=1430}
                                                ;*goto
                                                ; - java.nio.charset.CharsetEncoder::encode@282 (line 623)

  0x00007fffe1250d96: test    %eax,0x16daa364(%rip)  ;   {poll}
  0x00007fffe1250d9c: mov     0x68(%rsp),%rcx
  0x00007fffe1250da1: mov     0x60(%rsp),%rdx
  0x00007fffe1250da6: mov     0x50(%rsp),%rsi
  ;;  442 branch [AL] [B11] 
  0x00007fffe1250dab: jmpq    0x7fffe12508e0    ;*goto
                                                ; - java.nio.charset.CharsetEncoder::encode@282 (line 623)

  ;;  block B19 [131, 133]

  0x00007fffe1250db0: add     $0xb0,%rsp
  0x00007fffe1250db7: pop     %rbp
  0x00007fffe1250db8: test    %eax,0x16daa342(%rip)  ;   {poll_return}
  0x00007fffe1250dbe: retq                      ;*areturn
                                                ; - java.nio.charset.CharsetEncoder::encode@133 (line 594)

  ;;  block B31 [221, 224]

  0x00007fffe1250dbf: movabs  $0xd73dd9f8,%rax  ;   {oop(a &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe1250dc9: add     $0xb0,%rsp
  0x00007fffe1250dd0: pop     %rbp
  0x00007fffe1250dd1: test    %eax,0x16daa329(%rip)  ;   {poll_return}
  0x00007fffe1250dd7: retq                      ;*areturn
                                                ; - java.nio.charset.CharsetEncoder::encode@224 (line 611)

  ;;  block B27 [198, 200]

  0x00007fffe1250dd8: add     $0xb0,%rsp
  0x00007fffe1250ddf: pop     %rbp
  0x00007fffe1250de0: test    %eax,0x16daa31a(%rip)  ;   {poll_return}
  0x00007fffe1250de6: retq                      ;*areturn
                                                ; - java.nio.charset.CharsetEncoder::encode@200 (line 607)

  ;;  block B14 [97, 99]

  0x00007fffe1250de7: add     $0xb0,%rsp
  0x00007fffe1250dee: pop     %rbp
  0x00007fffe1250def: test    %eax,0x16daa30b(%rip)  ;   {poll_return}
  0x00007fffe1250df5: retq                      ;*areturn
                                                ; - java.nio.charset.CharsetEncoder::encode@99 (line 587)

  ;;  block B83 [7, 14]

  0x00007fffe1250df6: mov     %edi,0x88(%rsp)
  ;;  478 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1250dfd: nop
  0x00007fffe1250dfe: nop
  0x00007fffe1250dff: nop
  0x00007fffe1250e00: jmpq    0x7fffe1251289    ;   {no_reloc}
  0x00007fffe1250e05: add     %al,(%rax)
  0x00007fffe1250e07: add     %al,(%rax)
  0x00007fffe1250e09: add     %ch,%cl
  0x00007fffe1250e0b: test    %al,(%rax,%rax)
  0x00007fffe1250e0e: add     %cl,0xffffffffffffff8b(%rax)
                                                ;*new  ; - java.nio.charset.CoderResult::length@7 (line 175)
                                                ; - java.nio.charset.CharsetEncoder::encode@257 (line 618)

  0x00007fffe1250e11: Fatal error: Disassembling failed with error code: 15<nmethod compile_id='31' compiler='C1' level='2' entry='0x00007fffe1250800' size='6280' address='0x00007fffe1250510' relocation_offset='304' insts_offset='752' stub_offset='3632' scopes_data_offset='4056' scopes_pcs_offset='4816' dependencies_offset='6160' handler_table_offset='6176' nul_chk_table_offset='6216' method='java/nio/charset/CharsetEncoder encode (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;' bytes='285' count='39406' iicount='39406' stamp='118.943'/>
Decoding compiled method 0x00007fffe1249b90:
Code:
Argument 0 is unknown.RIP: 0x7fffe1249d20 Code size: 0x00000290
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c28198} &apos;write&apos; &apos;([CII)V&apos; in &apos;java/io/OutputStreamWriter&apos;
  # this:     rsi:rsi   = &apos;java/io/OutputStreamWriter&apos;
  # parm0:    rdx:rdx   = &apos;[C&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1249d20: mov     0x8(%rsi),%r10d
  0x00007fffe1249d24: shl     $0x3,%r10
  0x00007fffe1249d28: cmp     %rax,%r10
  0x00007fffe1249d2b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1249d31: nop
  0x00007fffe1249d32: nop
  0x00007fffe1249d33: nop
  0x00007fffe1249d34: nop
  0x00007fffe1249d35: nop
  0x00007fffe1249d36: nop
  0x00007fffe1249d37: nop
  0x00007fffe1249d38: nop
  0x00007fffe1249d39: nop
  0x00007fffe1249d3a: nop
  0x00007fffe1249d3b: nop
  0x00007fffe1249d3c: nop
  0x00007fffe1249d3d: nop
  0x00007fffe1249d3e: nop
  0x00007fffe1249d3f: nop
[Verified Entry Point]
  0x00007fffe1249d40: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1249d47: push    %rbp
  0x00007fffe1249d48: sub     $0x30,%rsp
  0x00007fffe1249d4c: movabs  $0x7ffff4d71098,%rdi
  0x00007fffe1249d56: mov     0x8(%rdi),%ebx
  0x00007fffe1249d59: add     $0x8,%ebx
  0x00007fffe1249d5c: mov     %ebx,0x8(%rdi)
  0x00007fffe1249d5f: movabs  $0x7ffff4c28198,%rdi  ;   {metadata({method} {0x00007ffff4c28198} &apos;write&apos; &apos;([CII)V&apos; in &apos;java/io/OutputStreamWriter&apos;)}
  0x00007fffe1249d69: and     $0x3ff8,%ebx
  0x00007fffe1249d6f: cmp     $0x0,%ebx
  ;;   26 branch [EQ] [CounterOverflowStub: 0x00007fffb0392370]
  0x00007fffe1249d72: je      0x7fffe1249e18    ;*aload_0
                                                ; - java.io.OutputStreamWriter::write@0 (line 207)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 10]

  0x00007fffe1249d78: mov     0x14(%rsi),%esi
  0x00007fffe1249d7b: push    %r10
  0x00007fffe1249d7d: cmp     0x16b0fe5c(%rip),%r12  ;   {external_word}
  0x00007fffe1249d84: je      0x7fffe1249e01
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1249d8a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1249d8f: sub     $0x80,%rsp
  0x00007fffe1249d96: mov     %rax,0x78(%rsp)
  0x00007fffe1249d9b: mov     %rcx,0x70(%rsp)
  0x00007fffe1249da0: mov     %rdx,0x68(%rsp)
  0x00007fffe1249da5: mov     %rbx,0x60(%rsp)
  0x00007fffe1249daa: mov     %rbp,0x50(%rsp)
  0x00007fffe1249daf: mov     %rsi,0x48(%rsp)
  0x00007fffe1249db4: mov     %rdi,0x40(%rsp)
  0x00007fffe1249db9: mov     %r8,0x38(%rsp)
  0x00007fffe1249dbe: mov     %r9,0x30(%rsp)
  0x00007fffe1249dc3: mov     %r10,0x28(%rsp)
  0x00007fffe1249dc8: mov     %r11,0x20(%rsp)
  0x00007fffe1249dcd: mov     %r12,0x18(%rsp)
  0x00007fffe1249dd2: mov     %r13,0x10(%rsp)
  0x00007fffe1249dd7: mov     %r14,0x8(%rsp)
  0x00007fffe1249ddc: mov     %r15,(%rsp)
  0x00007fffe1249de0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1249dea: movabs  $0x7fffe1249d8a,%rsi  ;   {internal_word}
  0x00007fffe1249df4: mov     %rsp,%rdx
  0x00007fffe1249df7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1249dfb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1249e00: hlt
  0x00007fffe1249e01: pop     %r10              ;*getfield se
                                                ; - java.io.OutputStreamWriter::write@1 (line 207)

  0x00007fffe1249e03: cmp     (%rsi),%rax       ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; implicit exception: dispatches to 0x00007fffe1249e2f
  0x00007fffe1249e06: nop
  0x00007fffe1249e07: callq   0x7fffe1105e80    ; OopMap{off=236}
                                                ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {optimized virtual_call}
  0x00007fffe1249e0c: add     $0x30,%rsp
  0x00007fffe1249e10: pop     %rbp
  0x00007fffe1249e11: test    %eax,0x16db12e9(%rip)  ;   {poll_return}
  0x00007fffe1249e17: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1249e18: mov     %rdi,0x8(%rsp)
  0x00007fffe1249e1d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1249e25: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop off=266}
                                                ;*synchronization entry
                                                ; - java.io.OutputStreamWriter::write@-1 (line 207)
                                                ;   {runtime_call}
  0x00007fffe1249e2a: jmpq    0x7fffe1249d78
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1249e2f: callq   0x7fffe11670a0    ; OopMap{rdx=Oop rsi=Oop off=276}
                                                ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe1249e34: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1249e39: sub     $0x80,%rsp
  0x00007fffe1249e40: mov     %rax,0x78(%rsp)
  0x00007fffe1249e45: mov     %rcx,0x70(%rsp)
  0x00007fffe1249e4a: mov     %rdx,0x68(%rsp)
  0x00007fffe1249e4f: mov     %rbx,0x60(%rsp)
  0x00007fffe1249e54: mov     %rbp,0x50(%rsp)
  0x00007fffe1249e59: mov     %rsi,0x48(%rsp)
  0x00007fffe1249e5e: mov     %rdi,0x40(%rsp)
  0x00007fffe1249e63: mov     %r8,0x38(%rsp)
  0x00007fffe1249e68: mov     %r9,0x30(%rsp)
  0x00007fffe1249e6d: mov     %r10,0x28(%rsp)
  0x00007fffe1249e72: mov     %r11,0x20(%rsp)
  0x00007fffe1249e77: mov     %r12,0x18(%rsp)
  0x00007fffe1249e7c: mov     %r13,0x10(%rsp)
  0x00007fffe1249e81: mov     %r14,0x8(%rsp)
  0x00007fffe1249e86: mov     %r15,(%rsp)
  0x00007fffe1249e8a: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1249e94: movabs  $0x7fffe1249e34,%rsi  ;   {internal_word}
  0x00007fffe1249e9e: mov     %rsp,%rdx
  0x00007fffe1249ea1: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1249ea5: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1249eaa: hlt
  0x00007fffe1249eab: nop
  0x00007fffe1249eac: nop
  ;; Unwind handler
  0x00007fffe1249ead: mov     0x348(%r15),%rax
  0x00007fffe1249eb4: movabs  $0x0,%r10
  0x00007fffe1249ebe: mov     %r10,0x348(%r15)
  0x00007fffe1249ec5: movabs  $0x0,%r10
  0x00007fffe1249ecf: mov     %r10,0x350(%r15)
  0x00007fffe1249ed6: add     $0x30,%rsp
  0x00007fffe1249eda: pop     %rbp
  0x00007fffe1249edb: jmpq    0x7fffe1168fe0    ;   {runtime_call}
[Stub Code]
  0x00007fffe1249ee0: nop                       ;   {no_reloc}
  0x00007fffe1249ee1: nop
  0x00007fffe1249ee2: nop
  0x00007fffe1249ee3: nop
  0x00007fffe1249ee4: nop
  0x00007fffe1249ee5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1249eef: jmpq    0x7fffe1249eef    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1249ef4: movabs  $0xdead,%rbx
  0x00007fffe1249efe: movabs  $0xdead,%rcx
  0x00007fffe1249f08: movabs  $0xdead,%rsi
  0x00007fffe1249f12: movabs  $0xdead,%rdi
  0x00007fffe1249f1c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1249f21: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1249f26: sub     $0x80,%rsp
  0x00007fffe1249f2d: mov     %rax,0x78(%rsp)
  0x00007fffe1249f32: mov     %rcx,0x70(%rsp)
  0x00007fffe1249f37: mov     %rdx,0x68(%rsp)
  0x00007fffe1249f3c: mov     %rbx,0x60(%rsp)
  0x00007fffe1249f41: mov     %rbp,0x50(%rsp)
  0x00007fffe1249f46: mov     %rsi,0x48(%rsp)
  0x00007fffe1249f4b: mov     %rdi,0x40(%rsp)
  0x00007fffe1249f50: mov     %r8,0x38(%rsp)
  0x00007fffe1249f55: mov     %r9,0x30(%rsp)
  0x00007fffe1249f5a: mov     %r10,0x28(%rsp)
  0x00007fffe1249f5f: mov     %r11,0x20(%rsp)
  0x00007fffe1249f64: mov     %r12,0x18(%rsp)
  0x00007fffe1249f69: mov     %r13,0x10(%rsp)
  0x00007fffe1249f6e: mov     %r14,0x8(%rsp)
  0x00007fffe1249f73: mov     %r15,(%rsp)
  0x00007fffe1249f77: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1249f81: movabs  $0x7fffe1249f21,%rsi  ;   {internal_word}
  0x00007fffe1249f8b: mov     %rsp,%rdx
  0x00007fffe1249f8e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1249f92: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1249f97: hlt
[Deopt Handler Code]
  0x00007fffe1249f98: movabs  $0x7fffe1249f98,%r10  ;   {section_word}
  0x00007fffe1249fa2: push    %r10
  0x00007fffe1249fa4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1249fa9: hlt
  0x00007fffe1249faa: hlt
  0x00007fffe1249fab: hlt
  0x00007fffe1249fac: hlt
  0x00007fffe1249fad: hlt
  0x00007fffe1249fae: hlt
  0x00007fffe1249faf: hlt
<nmethod compile_id='45' compiler='C1' level='2' entry='0x00007fffe1249d20' size='1280' address='0x00007fffe1249b90' relocation_offset='304' insts_offset='400' stub_offset='848' scopes_data_offset='1072' scopes_pcs_offset='1128' dependencies_offset='1256' nul_chk_table_offset='1264' method='java/io/OutputStreamWriter write ([CII)V' bytes='11' count='40361' iicount='40361' stamp='118.965'/>
Decoding compiled method 0x00007fffe1249750:
Code:
Argument 0 is unknown.RIP: 0x7fffe12498c0 Code size: 0x00000198
[Entry Point]
[Constants]
  # {method} {0x00007ffff4d56dc8} &apos;isOverflow&apos; &apos;()Z&apos; in &apos;java/nio/charset/CoderResult&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B4 [0, 0]

  0x00007fffe12498c0: mov     0x8(%rsi),%r10d
  0x00007fffe12498c4: shl     $0x3,%r10
  0x00007fffe12498c8: cmp     %rax,%r10
  0x00007fffe12498cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12498d1: nop
  0x00007fffe12498d2: nop
  0x00007fffe12498d3: nop
  0x00007fffe12498d4: nop
  0x00007fffe12498d5: nop
  0x00007fffe12498d6: nop
  0x00007fffe12498d7: nop
  0x00007fffe12498d8: nop
  0x00007fffe12498d9: nop
  0x00007fffe12498da: nop
  0x00007fffe12498db: nop
  0x00007fffe12498dc: nop
  0x00007fffe12498dd: nop
  0x00007fffe12498de: nop
  0x00007fffe12498df: nop
[Verified Entry Point]
  0x00007fffe12498e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12498e7: push    %rbp
  0x00007fffe12498e8: sub     $0x30,%rsp
  0x00007fffe12498ec: movabs  $0x7ffff4d58aa0,%rax
  0x00007fffe12498f6: mov     0x8(%rax),%edi
  0x00007fffe12498f9: add     $0x8,%edi
  0x00007fffe12498fc: mov     %edi,0x8(%rax)
  0x00007fffe12498ff: movabs  $0x7ffff4d56dc8,%rax  ;   {metadata({method} {0x00007ffff4d56dc8} &apos;isOverflow&apos; &apos;()Z&apos; in &apos;java/nio/charset/CoderResult&apos;)}
  0x00007fffe1249909: and     $0x3ff8,%edi
  0x00007fffe124990f: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa8068f90]
  0x00007fffe1249912: je      0x7fffe124993d    ;*aload_0
                                                ; - java.nio.charset.CoderResult::isOverflow@0 (line 129)

  ;;  block B5 [0, 0]

  ;;  block B0 [0, 13]

  0x00007fffe1249918: mov     0xc(%rsi),%eax    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isOverflow@1 (line 129)

  0x00007fffe124991b: cmp     $0x1,%eax
  0x00007fffe124991e: mov     $0x0,%eax
  0x00007fffe1249923: jne     0x7fffe124992e
  0x00007fffe1249929: mov     $0x1,%eax
  0x00007fffe124992e: and     $0x1,%eax
  0x00007fffe1249931: add     $0x30,%rsp
  0x00007fffe1249935: pop     %rbp
  0x00007fffe1249936: test    %eax,0x16db17c4(%rip)  ;   {poll_return}
  0x00007fffe124993c: retq
  ;; CounterOverflowStub slow case
  0x00007fffe124993d: mov     %rax,0x8(%rsp)
  0x00007fffe1249942: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124994a: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=143}
                                                ;*synchronization entry
                                                ; - java.nio.charset.CoderResult::isOverflow@-1 (line 129)
                                                ;   {runtime_call}
  0x00007fffe124994f: jmp     0x7fffe1249918
  0x00007fffe1249951: nop
  0x00007fffe1249952: nop
  ;; Unwind handler
  0x00007fffe1249953: mov     0x348(%r15),%rax
  0x00007fffe124995a: movabs  $0x0,%r10
  0x00007fffe1249964: mov     %r10,0x348(%r15)
  0x00007fffe124996b: movabs  $0x0,%r10
  0x00007fffe1249975: mov     %r10,0x350(%r15)
  0x00007fffe124997c: add     $0x30,%rsp
  0x00007fffe1249980: pop     %rbp
  0x00007fffe1249981: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1249986: hlt
  0x00007fffe1249987: hlt
  0x00007fffe1249988: hlt
  0x00007fffe1249989: hlt
  0x00007fffe124998a: hlt
  0x00007fffe124998b: hlt
  0x00007fffe124998c: hlt
  0x00007fffe124998d: hlt
  0x00007fffe124998e: hlt
  0x00007fffe124998f: hlt
  0x00007fffe1249990: hlt
  0x00007fffe1249991: hlt
  0x00007fffe1249992: hlt
  0x00007fffe1249993: hlt
  0x00007fffe1249994: hlt
  0x00007fffe1249995: hlt
  0x00007fffe1249996: hlt
  0x00007fffe1249997: hlt
  0x00007fffe1249998: hlt
  0x00007fffe1249999: hlt
  0x00007fffe124999a: hlt
  0x00007fffe124999b: hlt
  0x00007fffe124999c: hlt
  0x00007fffe124999d: hlt
  0x00007fffe124999e: hlt
  0x00007fffe124999f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe12499a0: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe12499aa: movabs  $0xdead,%rcx
  0x00007fffe12499b4: movabs  $0xdead,%rsi
  0x00007fffe12499be: movabs  $0xdead,%rdi
  0x00007fffe12499c8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12499cd: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12499d2: sub     $0x80,%rsp
  0x00007fffe12499d9: mov     %rax,0x78(%rsp)
  0x00007fffe12499de: mov     %rcx,0x70(%rsp)
  0x00007fffe12499e3: mov     %rdx,0x68(%rsp)
  0x00007fffe12499e8: mov     %rbx,0x60(%rsp)
  0x00007fffe12499ed: mov     %rbp,0x50(%rsp)
  0x00007fffe12499f2: mov     %rsi,0x48(%rsp)
  0x00007fffe12499f7: mov     %rdi,0x40(%rsp)
  0x00007fffe12499fc: mov     %r8,0x38(%rsp)
  0x00007fffe1249a01: mov     %r9,0x30(%rsp)
  0x00007fffe1249a06: mov     %r10,0x28(%rsp)
  0x00007fffe1249a0b: mov     %r11,0x20(%rsp)
  0x00007fffe1249a10: mov     %r12,0x18(%rsp)
  0x00007fffe1249a15: mov     %r13,0x10(%rsp)
  0x00007fffe1249a1a: mov     %r14,0x8(%rsp)
  0x00007fffe1249a1f: mov     %r15,(%rsp)
  0x00007fffe1249a23: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1249a2d: movabs  $0x7fffe12499cd,%rsi  ;   {internal_word}
  0x00007fffe1249a37: mov     %rsp,%rdx
  0x00007fffe1249a3a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1249a3e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1249a43: hlt
[Deopt Handler Code]
  0x00007fffe1249a44: movabs  $0x7fffe1249a44,%r10  ;   {section_word}
  0x00007fffe1249a4e: push    %r10
  0x00007fffe1249a50: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1249a55: hlt
  0x00007fffe1249a56: hlt
  0x00007fffe1249a57: hlt
<nmethod compile_id='40' compiler='C1' level='2' entry='0x00007fffe12498c0' size='896' address='0x00007fffe1249750' relocation_offset='304' insts_offset='368' stub_offset='592' scopes_data_offset='784' scopes_pcs_offset='808' dependencies_offset='888' method='java/nio/charset/CoderResult isOverflow ()Z' bytes='14' count='39407' iicount='39407' stamp='118.985'/>
<writer thread='140737327351552'/>
<task_queued compile_id='94' method='java/nio/charset/CharsetEncoder encode (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;' bytes='285' count='40943' iicount='40943' stamp='118.985' comment='tiered' hot_count='40943'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe124fcd0:
Code:
Argument 0 is unknown.RIP: 0x7fffe124fea0 Code size: 0x00000440
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2e590} &apos;encodeLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;
  # this:     rsi:rsi   = &apos;sun/nio/cs/UTF_8$Encoder&apos;
  # parm0:    rdx:rdx   = &apos;java/nio/CharBuffer&apos;
  # parm1:    rcx:rcx   = &apos;java/nio/ByteBuffer&apos;
  #           [sp+0x50]  (sp of caller)
  ;;  block B16 [0, 0]

  0x00007fffe124fea0: mov     0x8(%rsi),%r10d
  0x00007fffe124fea4: shl     $0x3,%r10
  0x00007fffe124fea8: cmp     %rax,%r10
  0x00007fffe124feab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124feb1: nop
  0x00007fffe124feb2: nop
  0x00007fffe124feb3: nop
  0x00007fffe124feb4: nop
  0x00007fffe124feb5: nop
  0x00007fffe124feb6: nop
  0x00007fffe124feb7: nop
  0x00007fffe124feb8: nop
  0x00007fffe124feb9: nop
  0x00007fffe124feba: nop
  0x00007fffe124febb: nop
  0x00007fffe124febc: nop
  0x00007fffe124febd: nop
  0x00007fffe124febe: nop
  0x00007fffe124febf: nop
[Verified Entry Point]
  0x00007fffe124fec0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124fec7: push    %rbp
  0x00007fffe124fec8: sub     $0x40,%rsp
  0x00007fffe124fecc: movabs  $0x7ffff4d56300,%rdi
  0x00007fffe124fed6: mov     0x8(%rdi),%ebx
  0x00007fffe124fed9: add     $0x8,%ebx
  0x00007fffe124fedc: mov     %ebx,0x8(%rdi)
  0x00007fffe124fedf: movabs  $0x7ffff4c2e590,%rdi  ;   {metadata({method} {0x00007ffff4c2e590} &apos;encodeLoop&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos; in &apos;sun/nio/cs/UTF_8$Encoder&apos;)}
  0x00007fffe124fee9: and     $0x3ff8,%ebx
  0x00007fffe124feef: cmp     $0x0,%ebx
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffa82dd4a0]
  0x00007fffe124fef2: je      0x7fffe12500a8    ;*aload_1
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@0 (line 690)

  ;;  block B17 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe124fef8: mov     0x2c(%rdx),%edi   ; implicit exception: dispatches to 0x00007fffe12500bf
  0x00007fffe124fefb: push    %r10
  0x00007fffe124fefd: cmp     0x16b09cdc(%rip),%r12  ;   {external_word}
  0x00007fffe124ff04: je      0x7fffe124ff81
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124ff0a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124ff0f: sub     $0x80,%rsp
  0x00007fffe124ff16: mov     %rax,0x78(%rsp)
  0x00007fffe124ff1b: mov     %rcx,0x70(%rsp)
  0x00007fffe124ff20: mov     %rdx,0x68(%rsp)
  0x00007fffe124ff25: mov     %rbx,0x60(%rsp)
  0x00007fffe124ff2a: mov     %rbp,0x50(%rsp)
  0x00007fffe124ff2f: mov     %rsi,0x48(%rsp)
  0x00007fffe124ff34: mov     %rdi,0x40(%rsp)
  0x00007fffe124ff39: mov     %r8,0x38(%rsp)
  0x00007fffe124ff3e: mov     %r9,0x30(%rsp)
  0x00007fffe124ff43: mov     %r10,0x28(%rsp)
  0x00007fffe124ff48: mov     %r11,0x20(%rsp)
  0x00007fffe124ff4d: mov     %r12,0x18(%rsp)
  0x00007fffe124ff52: mov     %r13,0x10(%rsp)
  0x00007fffe124ff57: mov     %r14,0x8(%rsp)
  0x00007fffe124ff5c: mov     %r15,(%rsp)
  0x00007fffe124ff60: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124ff6a: movabs  $0x7fffe124ff0a,%rsi  ;   {internal_word}
  0x00007fffe124ff74: mov     %rsp,%rdx
  0x00007fffe124ff77: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124ff7b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124ff80: hlt
  0x00007fffe124ff81: pop     %r10              ;*getfield hb
                                                ; - java.nio.CharBuffer::hasArray@1 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)

  0x00007fffe124ff83: cmp     $0x0,%rdi
  ;;   40 branch [EQ] [B7] 
  0x00007fffe124ff87: je      0x7fffe124ffa9    ;*ifnull
                                                ; - java.nio.CharBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)

  ;;  block B6 [7, 11]

  0x00007fffe124ff8d: movsbl  0x28(%rdx),%edi   ;*getfield isReadOnly
                                                ; - java.nio.CharBuffer::hasArray@8 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)

  0x00007fffe124ff91: cmp     $0x0,%edi
  0x00007fffe124ff94: mov     $0x0,%edi
  0x00007fffe124ff99: jne     0x7fffe124ffa4
  0x00007fffe124ff9f: mov     $0x1,%edi
  ;;   54 branch [AL] [B9] 
  0x00007fffe124ffa4: jmpq    0x7fffe124ffae    ;*ifne
                                                ; - java.nio.CharBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)

  ;;  block B7 [18, 19]

  0x00007fffe124ffa9: mov     $0x0,%edi         ;*ireturn
                                                ; - java.nio.CharBuffer::hasArray@19 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)

  ;;  block B9 [19, 4]

  0x00007fffe124ffae: and     $0x1,%edi
  0x00007fffe124ffb1: cmp     $0x0,%edi
  ;;   70 branch [EQ] [B2] 
  0x00007fffe124ffb4: je      0x7fffe125007c    ;*ifeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@4 (line 690)

  ;;  block B1 [7, 4]

  0x00007fffe124ffba: mov     0x2c(%rcx),%edi   ; implicit exception: dispatches to 0x00007fffe125013b
  0x00007fffe124ffbd: push    %r10
  0x00007fffe124ffbf: cmp     0x16b09c1a(%rip),%r12  ;   {external_word}
  0x00007fffe124ffc6: je      0x7fffe1250043
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124ffcc: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124ffd1: sub     $0x80,%rsp
  0x00007fffe124ffd8: mov     %rax,0x78(%rsp)
  0x00007fffe124ffdd: mov     %rcx,0x70(%rsp)
  0x00007fffe124ffe2: mov     %rdx,0x68(%rsp)
  0x00007fffe124ffe7: mov     %rbx,0x60(%rsp)
  0x00007fffe124ffec: mov     %rbp,0x50(%rsp)
  0x00007fffe124fff1: mov     %rsi,0x48(%rsp)
  0x00007fffe124fff6: mov     %rdi,0x40(%rsp)
  0x00007fffe124fffb: mov     %r8,0x38(%rsp)
  0x00007fffe1250000: mov     %r9,0x30(%rsp)
  0x00007fffe1250005: mov     %r10,0x28(%rsp)
  0x00007fffe125000a: mov     %r11,0x20(%rsp)
  0x00007fffe125000f: mov     %r12,0x18(%rsp)
  0x00007fffe1250014: mov     %r13,0x10(%rsp)
  0x00007fffe1250019: mov     %r14,0x8(%rsp)
  0x00007fffe125001e: mov     %r15,(%rsp)
  0x00007fffe1250022: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125002c: movabs  $0x7fffe124ffcc,%rsi  ;   {internal_word}
  0x00007fffe1250036: mov     %rsp,%rdx
  0x00007fffe1250039: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125003d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1250042: hlt
  0x00007fffe1250043: pop     %r10              ;*getfield hb
                                                ; - java.nio.ByteBuffer::hasArray@1 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)

  0x00007fffe1250045: cmp     $0x0,%rdi
  ;;   84 branch [EQ] [B13] 
  0x00007fffe1250049: je      0x7fffe125006b    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)

  ;;  block B12 [7, 11]

  0x00007fffe125004f: movsbl  0x28(%rcx),%edi   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::hasArray@8 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)

  0x00007fffe1250053: cmp     $0x0,%edi
  0x00007fffe1250056: mov     $0x0,%edi
  0x00007fffe125005b: jne     0x7fffe1250066
  0x00007fffe1250061: mov     $0x1,%edi
  ;;   98 branch [AL] [B15] 
  0x00007fffe1250066: jmpq    0x7fffe1250070    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)

  ;;  block B13 [18, 19]

  0x00007fffe125006b: mov     $0x0,%edi         ;*ireturn
                                                ; - java.nio.ByteBuffer::hasArray@19 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)

  ;;  block B15 [19, 11]

  0x00007fffe1250070: and     $0x1,%edi
  0x00007fffe1250073: cmp     $0x0,%edi
  ;;  114 branch [NE] [B3] 
  0x00007fffe1250076: jne     0x7fffe1250090    ;*ifeq
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@11 (line 690)

  ;;  block B2 [21, 27]

  0x00007fffe125007c: nop
  0x00007fffe125007d: nop
  0x00007fffe125007e: nop
  0x00007fffe125007f: callq   0x7fffe1105e80    ; OopMap{off=484}
                                                ;*invokespecial encodeBufferLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@24 (line 693)
                                                ;   {optimized virtual_call}
  0x00007fffe1250084: add     $0x40,%rsp
  0x00007fffe1250088: pop     %rbp
  0x00007fffe1250089: test    %eax,0x16dab071(%rip)  ;   {poll_return}
  0x00007fffe125008f: retq                      ;*areturn
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@27 (line 693)

  ;;  block B3 [14, 20]

  0x00007fffe1250090: nop
  0x00007fffe1250091: nop
  0x00007fffe1250092: nop
  0x00007fffe1250093: nop
  0x00007fffe1250094: nop
  0x00007fffe1250095: nop
  0x00007fffe1250096: nop
  0x00007fffe1250097: callq   0x7fffe1105e80    ; OopMap{off=508}
                                                ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ;   {optimized virtual_call}
  0x00007fffe125009c: add     $0x40,%rsp
  0x00007fffe12500a0: pop     %rbp
  0x00007fffe12500a1: test    %eax,0x16dab059(%rip)  ;   {poll_return}
  0x00007fffe12500a7: retq
  ;; CounterOverflowStub slow case
  0x00007fffe12500a8: mov     %rdi,0x8(%rsp)
  0x00007fffe12500ad: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12500b5: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop rcx=Oop off=538}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@-1 (line 690)
                                                ;   {runtime_call}
  0x00007fffe12500ba: jmpq    0x7fffe124fef8
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12500bf: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop rcx=Oop off=548}
                                                ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ;   {runtime_call}
  0x00007fffe12500c4: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12500c9: sub     $0x80,%rsp
  0x00007fffe12500d0: mov     %rax,0x78(%rsp)
  0x00007fffe12500d5: mov     %rcx,0x70(%rsp)
  0x00007fffe12500da: mov     %rdx,0x68(%rsp)
  0x00007fffe12500df: mov     %rbx,0x60(%rsp)
  0x00007fffe12500e4: mov     %rbp,0x50(%rsp)
  0x00007fffe12500e9: mov     %rsi,0x48(%rsp)
  0x00007fffe12500ee: mov     %rdi,0x40(%rsp)
  0x00007fffe12500f3: mov     %r8,0x38(%rsp)
  0x00007fffe12500f8: mov     %r9,0x30(%rsp)
  0x00007fffe12500fd: mov     %r10,0x28(%rsp)
  0x00007fffe1250102: mov     %r11,0x20(%rsp)
  0x00007fffe1250107: mov     %r12,0x18(%rsp)
  0x00007fffe125010c: mov     %r13,0x10(%rsp)
  0x00007fffe1250111: mov     %r14,0x8(%rsp)
  0x00007fffe1250116: mov     %r15,(%rsp)
  0x00007fffe125011a: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1250124: movabs  $0x7fffe12500c4,%rsi  ;   {internal_word}
  0x00007fffe125012e: mov     %rsp,%rdx
  0x00007fffe1250131: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1250135: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125013a: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125013b: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop rcx=Oop off=672}
                                                ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ;   {runtime_call}
  0x00007fffe1250140: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1250145: sub     $0x80,%rsp
  0x00007fffe125014c: mov     %rax,0x78(%rsp)
  0x00007fffe1250151: mov     %rcx,0x70(%rsp)
  0x00007fffe1250156: mov     %rdx,0x68(%rsp)
  0x00007fffe125015b: mov     %rbx,0x60(%rsp)
  0x00007fffe1250160: mov     %rbp,0x50(%rsp)
  0x00007fffe1250165: mov     %rsi,0x48(%rsp)
  0x00007fffe125016a: mov     %rdi,0x40(%rsp)
  0x00007fffe125016f: mov     %r8,0x38(%rsp)
  0x00007fffe1250174: mov     %r9,0x30(%rsp)
  0x00007fffe1250179: mov     %r10,0x28(%rsp)
  0x00007fffe125017e: mov     %r11,0x20(%rsp)
  0x00007fffe1250183: mov     %r12,0x18(%rsp)
  0x00007fffe1250188: mov     %r13,0x10(%rsp)
  0x00007fffe125018d: mov     %r14,0x8(%rsp)
  0x00007fffe1250192: mov     %r15,(%rsp)
  0x00007fffe1250196: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12501a0: movabs  $0x7fffe1250140,%rsi  ;   {internal_word}
  0x00007fffe12501aa: mov     %rsp,%rdx
  0x00007fffe12501ad: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12501b1: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12501b6: hlt
  0x00007fffe12501b7: nop
  0x00007fffe12501b8: nop
  ;; Unwind handler
  0x00007fffe12501b9: mov     0x348(%r15),%rax
  0x00007fffe12501c0: movabs  $0x0,%r10
  0x00007fffe12501ca: mov     %r10,0x348(%r15)
  0x00007fffe12501d1: movabs  $0x0,%r10
  0x00007fffe12501db: mov     %r10,0x350(%r15)
  0x00007fffe12501e2: add     $0x40,%rsp
  0x00007fffe12501e6: pop     %rbp
  0x00007fffe12501e7: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe12501ec: hlt
  0x00007fffe12501ed: hlt
  0x00007fffe12501ee: hlt
  0x00007fffe12501ef: hlt
  0x00007fffe12501f0: hlt
  0x00007fffe12501f1: hlt
  0x00007fffe12501f2: hlt
  0x00007fffe12501f3: hlt
  0x00007fffe12501f4: hlt
  0x00007fffe12501f5: hlt
  0x00007fffe12501f6: hlt
  0x00007fffe12501f7: hlt
  0x00007fffe12501f8: hlt
  0x00007fffe12501f9: hlt
  0x00007fffe12501fa: hlt
  0x00007fffe12501fb: hlt
  0x00007fffe12501fc: hlt
  0x00007fffe12501fd: hlt
  0x00007fffe12501fe: hlt
  0x00007fffe12501ff: hlt
[Stub Code]
  0x00007fffe1250200: nop                       ;   {no_reloc}
  0x00007fffe1250201: nop
  0x00007fffe1250202: nop
  0x00007fffe1250203: nop
  0x00007fffe1250204: nop
  0x00007fffe1250205: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125020f: jmpq    0x7fffe125020f    ;   {runtime_call}
  0x00007fffe1250214: nop
  0x00007fffe1250215: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125021f: jmpq    0x7fffe125021f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1250224: movabs  $0xdead,%rbx
  0x00007fffe125022e: movabs  $0xdead,%rcx
  0x00007fffe1250238: movabs  $0xdead,%rsi
  0x00007fffe1250242: movabs  $0xdead,%rdi
  0x00007fffe125024c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1250251: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1250256: sub     $0x80,%rsp
  0x00007fffe125025d: mov     %rax,0x78(%rsp)
  0x00007fffe1250262: mov     %rcx,0x70(%rsp)
  0x00007fffe1250267: mov     %rdx,0x68(%rsp)
  0x00007fffe125026c: mov     %rbx,0x60(%rsp)
  0x00007fffe1250271: mov     %rbp,0x50(%rsp)
  0x00007fffe1250276: mov     %rsi,0x48(%rsp)
  0x00007fffe125027b: mov     %rdi,0x40(%rsp)
  0x00007fffe1250280: mov     %r8,0x38(%rsp)
  0x00007fffe1250285: mov     %r9,0x30(%rsp)
  0x00007fffe125028a: mov     %r10,0x28(%rsp)
  0x00007fffe125028f: mov     %r11,0x20(%rsp)
  0x00007fffe1250294: mov     %r12,0x18(%rsp)
  0x00007fffe1250299: mov     %r13,0x10(%rsp)
  0x00007fffe125029e: mov     %r14,0x8(%rsp)
  0x00007fffe12502a3: mov     %r15,(%rsp)
  0x00007fffe12502a7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12502b1: movabs  $0x7fffe1250251,%rsi  ;   {internal_word}
  0x00007fffe12502bb: mov     %rsp,%rdx
  0x00007fffe12502be: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12502c2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12502c7: hlt
[Deopt Handler Code]
  0x00007fffe12502c8: movabs  $0x7fffe12502c8,%r10  ;   {section_word}
  0x00007fffe12502d2: push    %r10
  0x00007fffe12502d4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12502d9: hlt
  0x00007fffe12502da: hlt
  0x00007fffe12502db: hlt
  0x00007fffe12502dc: hlt
  0x00007fffe12502dd: hlt
  0x00007fffe12502de: hlt
  0x00007fffe12502df: hlt
<nmethod compile_id='32' compiler='C1' level='2' entry='0x00007fffe124fea0' size='2088' address='0x00007fffe124fcd0' relocation_offset='304' insts_offset='464' stub_offset='1328' scopes_data_offset='1576' scopes_pcs_offset='1720' dependencies_offset='2056' nul_chk_table_offset='2064' method='sun/nio/cs/UTF_8$Encoder encodeLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='28' count='41899' iicount='41899' stamp='119.018'/>
<writer thread='140737327351552'/>
<task_queued compile_id='95' method='java/io/OutputStreamWriter write ([CII)V' bytes='11' count='41897' iicount='41897' stamp='119.018' comment='tiered' hot_count='41897'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1256550:
Code:
Argument 0 is unknown.RIP: 0x7fffe1256720 Code size: 0x00000d68
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47910} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;
  #           [sp+0x90]  (sp of caller)
  ;; N1319: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1256720: mov     0x8(%rsi),%r10d
  0x00007fffe1256724: shl     $0x3,%r10
  0x00007fffe1256728: cmp     %r10,%rax
  0x00007fffe125672b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1256731: nop
  0x00007fffe1256732: nop
  0x00007fffe1256733: nop
  0x00007fffe1256734: nop
  0x00007fffe1256735: nop
  0x00007fffe1256736: nop
  0x00007fffe1256737: nop
  0x00007fffe1256738: nop
  0x00007fffe1256739: nop
  0x00007fffe125673a: nop
  0x00007fffe125673b: nop
  0x00007fffe125673c: nop
  0x00007fffe125673d: nop
  0x00007fffe125673e: nop
  0x00007fffe125673f: nop
[Verified Entry Point]
  ;; B1: #	B72 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1256740: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1256747: push    %rbp
  0x00007fffe1256748: sub     $0x80,%rsp        ;*synchronization entry
                                                ; - java.io.BufferedWriter::flushBuffer@-1 (line 125)

  0x00007fffe125674f: mov     %rsi,0x38(%rsp)
  0x00007fffe1256754: mov     0x10(%rsi),%r10d
  0x00007fffe1256758: mov     %r10d,0x1c(%rsp)
  0x00007fffe125675d: mov     (%r10),%rax       ; implicit exception: dispatches to 0x00007fffe12570ac
  ;; B2: #	B37 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1256760: mov     %rax,%r10
  0x00007fffe1256763: and     $0x7,%r10
  0x00007fffe1256767: mov     0x1c(%rsp),%r8d
  0x00007fffe125676c: mov     %r8,%r13          ;*getfield lock
                                                ; - java.io.BufferedWriter::flushBuffer@1 (line 125)

  0x00007fffe125676f: cmp     $0x5,%r10
  0x00007fffe1256773: jne     0x7fffe1256a66
  ;; B3: #	B40 B4 &lt;- B2  Freq: 0.999998

  0x00007fffe1256779: mov     %r8d,%r10d
  0x00007fffe125677c: mov     0x8(%r10),%r11d
  0x00007fffe1256780: movabs  $0x0,%r10
  0x00007fffe125678a: lea     (%r10,%r11,8),%r10
  0x00007fffe125678e: mov     0xb0(%r10),%r10
  0x00007fffe1256795: mov     %r10,%r11
  0x00007fffe1256798: or      %r15,%r11
  0x00007fffe125679b: mov     %r11,%r8
  0x00007fffe125679e: xor     %rax,%r8
  0x00007fffe12567a1: test    $0xffffffffffffff87,%r8
  0x00007fffe12567a8: jne     0x7fffe1256b15    ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)

  ;; B4: #	B79 B5 &lt;- B38 B37 B3 B44  Freq: 0.999999

  0x00007fffe12567ae: mov     0x38(%rsp),%r10
  0x00007fffe12567b3: mov     0x1c(%r10),%r10d  ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)

  0x00007fffe12567b7: mov     0x8(%r10),%r11d   ; implicit exception: dispatches to 0x00007fffe12571ed
  ;; B5: #	B60 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe12567bb: mov     0x38(%rsp),%r8
  0x00007fffe12567c0: mov     0x18(%r8),%r8d    ;*getfield nextChar
                                                ; - java.io.BufferedWriter::flushBuffer@12 (line 127)

  0x00007fffe12567c4: test    %r8d,%r8d
  0x00007fffe12567c7: je      0x7fffe1256e41    ;*ifne
                                                ; - java.io.BufferedWriter::flushBuffer@15 (line 127)

  ;; B6: #	B39 B7 &lt;- B5  Freq: 0.999998

  0x00007fffe12567cd: mov     0x38(%rsp),%r9
  0x00007fffe12567d2: mov     0x20(%r9),%edi    ;*getfield cb
                                                ; - java.io.BufferedWriter::flushBuffer@26 (line 129)

  0x00007fffe12567d6: cmp     $0x200052fa,%r11d  ;   {metadata(&apos;java/io/OutputStreamWriter&apos;)}
  0x00007fffe12567dd: jne     0x7fffe1256ae2    ;*invokevirtual write
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B7: #	B73 B8 &lt;- B6  Freq: 0.999997

  0x00007fffe12567e3: mov     0x14(%r10),%r10d  ;*getfield se
                                                ; - java.io.OutputStreamWriter::write@1 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12567e7: mov     0x10(%r10),%r9d   ; implicit exception: dispatches to 0x00007fffe12570c1
  ;; B8: #	B74 B9 &lt;- B7  Freq: 0.999996

  0x00007fffe12567eb: mov     (%r9),%rax        ; implicit exception: dispatches to 0x00007fffe12570f1
  ;; B9: #	B46 B10 &lt;- B8  Freq: 0.999995

  0x00007fffe12567ee: mov     %rax,%r11
  0x00007fffe12567f1: and     $0x7,%r11
  0x00007fffe12567f5: mov     %r9,%rcx          ;*getfield lock
                                                ; - sun.nio.cs.StreamEncoder::write@1 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12567f8: mov     %r10,%rdx         ;*getfield se
                                                ; - java.io.OutputStreamWriter::write@1 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12567fb: cmp     $0x5,%r11
  0x00007fffe12567ff: jne     0x7fffe1256b52
  ;; B10: #	B48 B11 &lt;- B9  Freq: 0.999994

  0x00007fffe1256805: mov     0x8(%r9),%r11d
  0x00007fffe1256809: shl     $0x3,%r11
  0x00007fffe125680d: mov     0xb0(%r11),%r11
  0x00007fffe1256814: mov     %r11,%rbx
  0x00007fffe1256817: or      %r15,%rbx
  0x00007fffe125681a: mov     %rbx,%rsi
  0x00007fffe125681d: xor     %rax,%rsi
  0x00007fffe1256820: test    $0xffffffffffffff87,%rsi
  0x00007fffe1256827: jne     0x7fffe1256c0b    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B11: #	B61 B12 &lt;- B47 B46 B10 B52  Freq: 0.999995

  0x00007fffe125682d: movzbl  0x16(%r10),%ebp   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@1 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1256832: test    %ebp,%ebp
  0x00007fffe1256834: je      0x7fffe1256e6d    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B12: #	B75 B13 &lt;- B11  Freq: 0.999995

  0x00007fffe125683a: mov     0xc(%rdi),%r11d   ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ; implicit exception: dispatches to 0x00007fffe1257125
  ;; B13: #	B57 B14 &lt;- B12  Freq: 0.999994

  0x00007fffe125683e: test    %r8d,%r8d
  0x00007fffe1256841: jl      0x7fffe1256d94    ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@23 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B14: #	B62 B15 &lt;- B13  Freq: 0.999993

  0x00007fffe1256847: cmp     %r11d,%r8d
  0x00007fffe125684a: jnle    0x7fffe1256ea1    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@31 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B15: #	B34 B16 &lt;- B14  Freq: 0.999993

  0x00007fffe1256850: mov     0x70(%r15),%rax
  0x00007fffe1256854: mov     %rax,%rbx
  0x00007fffe1256857: add     $0x30,%rbx
  0x00007fffe125685b: cmp     0x80(%r15),%rbx
  0x00007fffe1256862: jnb     0x7fffe12569e1
  ;; B16: #	B17 &lt;- B15  Freq: 0.999893

  0x00007fffe1256868: mov     %rbx,0x70(%r15)
  0x00007fffe125686c: prefetchw 0x100(%rbx)
  0x00007fffe1256873: mov     $0x20008fd1,%esi  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe1256878: movabs  $0x0,%rbx
  0x00007fffe1256882: lea     (%rbx,%rsi,8),%rbx
  0x00007fffe1256886: mov     0xb0(%rbx),%rbx
  0x00007fffe125688d: mov     %rbx,(%rax)
  0x00007fffe1256890: movl    $0x20008fd1,0x8(%rax)  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe1256897: mov     %r12,0x10(%rax)
  0x00007fffe125689b: mov     %r12d,0x18(%rax)
  0x00007fffe125689f: mov     %r12d,0x24(%rax)
  0x00007fffe12568a3: mov     %r12,0x28(%rax)   ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B17: #	B63 B18 &lt;- B35 B16  Freq: 0.999993

  0x00007fffe12568a7: movl    $0xffffffff,0xc(%rax)  ;*putfield mark
                                                ; - java.nio.Buffer::&lt;init&gt;@6 (line 185)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568ae: mov     %r8d,0x1c(%rax)   ;*putfield limit
                                                ; - java.nio.Buffer::limit@22 (line 276)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568b2: mov     %r11d,0x20(%rax)
  0x00007fffe12568b6: mov     %rax,%r11         ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568b9: cmp     $0xffffffff,%r8d
  0x00007fffe12568bd: jl      0x7fffe1256ed9    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B18: #	B64 B19 &lt;- B17  Freq: 0.999992

  0x00007fffe12568c3: mov     %edi,0x2c(%r11)
  0x00007fffe12568c7: mov     %r11,%rbx
  0x00007fffe12568ca: shr     $0x9,%rbx
  0x00007fffe12568ce: movabs  $0x7ffff591e000,%rdi
  0x00007fffe12568d8: mov     %r12l,(%rdi,%rbx)  ;*synchronization entry
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@-1 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568dc: movzbl  0x17(%r10),%ebp   ;*getfield haveLeftoverChar
                                                ; - sun.nio.cs.StreamEncoder::implWrite@9 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568e1: test    %ebp,%ebp
  0x00007fffe12568e3: jne     0x7fffe1256f1d    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::implWrite@12 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B19: #	B65 B20 &lt;- B18  Freq: 0.999992

  0x00007fffe12568e9: test    %r8d,%r8d
  0x00007fffe12568ec: jle     0x7fffe1256f4d    ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@24 (line 270)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B20: #	B76 B21 &lt;- B19  Freq: 0.999991

  0x00007fffe12568f2: mov     0x20(%r10),%edi   ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implWrite@37 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568f6: mov     0x1c(%r10),%r8d   ;*getfield encoder
                                                ; - sun.nio.cs.StreamEncoder::implWrite@31 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe12568fa: mov     0x14(%r8),%ebp    ;*getfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@12 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ; implicit exception: dispatches to 0x00007fffe1257155
  ;; B21: #	B66 B22 &lt;- B20  Freq: 0.99999

  0x00007fffe12568fe: test    %ebp,%ebp
  0x00007fffe1256900: je      0x7fffe1256f81    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B22: #	B67 B23 &lt;- B21  Freq: 0.99999

  0x00007fffe1256906: cmp     $0x1,%ebp
  0x00007fffe1256909: jne     0x7fffe1256fbd    ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B23: #	B77 B24 &lt;- B22  Freq: 0.999989

  0x00007fffe125690f: movl    $0x1,0x14(%r8)    ;*putfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@51 (line 573)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1256917: mov     0x2c(%rdi),%ebp   ;*getfield hb
                                                ; - java.nio.ByteBuffer::hasArray@1 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ; implicit exception: dispatches to 0x00007fffe1257185
  ;; B24: #	B68 B25 &lt;- B23  Freq: 0.999988

  0x00007fffe125691a: test    %ebp,%ebp
  0x00007fffe125691c: je      0x7fffe1256ff9    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B25: #	B58 B26 &lt;- B24  Freq: 0.999988

  0x00007fffe1256922: movzbl  0x28(%rdi),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::hasArray@8 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1256926: test    %ebp,%ebp
  0x00007fffe1256928: jne     0x7fffe1256dc9    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B26: #	B71 B27 &lt;- B25  Freq: 0.999987

  0x00007fffe125692e: mov     %r11,0x30(%rsp)
  0x00007fffe1256933: mov     %rdx,(%rsp)
  0x00007fffe1256937: mov     %rcx,0x28(%rsp)
  0x00007fffe125693c: mov     %r9d,0x20(%rsp)
  0x00007fffe1256941: mov     %r10d,0x10(%rsp)
  0x00007fffe1256946: mov     %r13,0x8(%rsp)    ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe125694b: mov     %rdi,%r10         ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implWrite@37 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe125694e: mov     %r10,0x40(%rsp)
  0x00007fffe1256953: mov     %edi,0x14(%rsp)
  0x00007fffe1256957: mov     %r8,%rbp          ;*getfield encoder
                                                ; - sun.nio.cs.StreamEncoder::implWrite@31 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe125695a: mov     %r8d,0x18(%rsp)
  0x00007fffe125695f: mov     %rbp,%rsi
  0x00007fffe1256962: mov     %r11,%rdx
  0x00007fffe1256965: mov     %r10,%rcx
  0x00007fffe1256968: nop
  0x00007fffe1256969: nop
  0x00007fffe125696a: nop
  0x00007fffe125696b: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [24]=NarrowOop [28]=NarrowOop [32]=NarrowOop [40]=Oop [48]=Oop [56]=Oop [64]=Oop off=592}
                                                ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {optimized virtual_call}
  ;; B27: #	B78 B28 &lt;- B26  Freq: 0.999967

  0x00007fffe1256970: mov     0xc(%rax),%ebp    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isOverflow@1 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ; implicit exception: dispatches to 0x00007fffe12571bd
  ;; B28: #	B69 B29 &lt;- B27  Freq: 0.999966

  0x00007fffe1256973: cmp     $0x1,%ebp
  0x00007fffe1256976: je      0x7fffe1257045    ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B29: #	B59 B30 &lt;- B28  Freq: 0.999966

  0x00007fffe125697c: test    %ebp,%ebp
  0x00007fffe125697e: jne     0x7fffe1256e11    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B30: #	B70 B31 &lt;- B29  Freq: 0.999965

  0x00007fffe1256984: mov     0x30(%rsp),%r10
  0x00007fffe1256989: mov     0x1c(%r10),%ebp
  0x00007fffe125698d: sub     0x18(%r10),%ebp   ;*isub
                                                ; - java.nio.Buffer::remaining@8 (line 391)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@84 (line 274)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1256991: test    %ebp,%ebp
  0x00007fffe1256993: jnle    0x7fffe1257075
  ;; B31: #	B53 B32 &lt;- B30  Freq: 0.999965

  0x00007fffe1256999: mov     $0x7,%r10d
  0x00007fffe125699f: mov     0x20(%rsp),%r11d
  0x00007fffe12569a4: and     (%r11),%r10
  0x00007fffe12569a7: cmp     $0x5,%r10
  0x00007fffe12569ab: jne     0x7fffe1256c3e    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@65 (line 126)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B32: #	B55 B33 &lt;- B54 B53 B31  Freq: 0.999965

  0x00007fffe12569b1: mov     0x38(%rsp),%r10
  0x00007fffe12569b6: mov     %r12d,0x18(%r10)
  0x00007fffe12569ba: mov     0x1c(%rsp),%r11d
  0x00007fffe12569bf: mov     $0x7,%r10d
  0x00007fffe12569c5: and     (%r11),%r10
  0x00007fffe12569c8: cmp     $0x5,%r10
  0x00007fffe12569cc: jne     0x7fffe1256ce9    ;*synchronization entry
                                                ; - java.io.BufferedWriter::flushBuffer@-1 (line 125)

  ;; B33: #	N1319 &lt;- B56 B55 B32  Freq: 0.999965

  0x00007fffe12569d2: add     $0x80,%rsp
  0x00007fffe12569d9: pop     %rbp
  0x00007fffe12569da: test    %eax,0x16da4620(%rip)  ;   {poll_return}
  0x00007fffe12569e0: retq
  ;; B34: #	B81 B35 &lt;- B15  Freq: 0.000100016

  0x00007fffe12569e1: mov     %r11d,0x24(%rsp)
  0x00007fffe12569e6: mov     %rdx,0x30(%rsp)
  0x00007fffe12569eb: mov     %rcx,0x28(%rsp)
  0x00007fffe12569f0: mov     %r9d,0x20(%rsp)
  0x00007fffe12569f5: mov     %r10d,0x18(%rsp)
  0x00007fffe12569fa: mov     %r8d,0x10(%rsp)
  0x00007fffe12569ff: mov     %r13,0x8(%rsp)
  0x00007fffe1256a04: pushq   0x38(%rsp)
  0x00007fffe1256a09: popq    (%rsp)
  0x00007fffe1256a0d: mov     %rdi,%rbp         ;*getfield cb
                                                ; - java.io.BufferedWriter::flushBuffer@26 (line 129)

  0x00007fffe1256a10: mov     %edi,0x14(%rsp)
  0x00007fffe1256a14: movabs  $0x100047e88,%rsi  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe1256a1e: nop
  0x00007fffe1256a1f: callq   0x7fffe1106520    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [20]=NarrowOop [24]=NarrowOop [28]=NarrowOop [32]=NarrowOop [40]=Oop [48]=Oop off=772}
                                                ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B35: #	B17 &lt;- B34  Freq: 0.000100014

  0x00007fffe1256a24: pushq   (%rsp)
  0x00007fffe1256a28: popq    0x38(%rsp)
  0x00007fffe1256a2d: mov     0x8(%rsp),%rbx
  0x00007fffe1256a32: mov     0x10(%rsp),%r8d
  0x00007fffe1256a37: mov     0x14(%rsp),%edi
  0x00007fffe1256a3b: mov     0x18(%rsp),%r10d
  0x00007fffe1256a40: mov     0x20(%rsp),%r9d
  0x00007fffe1256a45: mov     0x28(%rsp),%rcx
  0x00007fffe1256a4a: mov     0x30(%rsp),%rdx
  0x00007fffe1256a4f: mov     0x24(%rsp),%r11d
  0x00007fffe1256a54: mov     %rbx,%r13
  0x00007fffe1256a57: jmpq    0x7fffe12568a7
  ;; B36: #	B37 &lt;- B40  Freq: 9.99998e-13

  0x00007fffe1256a5c: mov     0x1c(%rsp),%r11d
  0x00007fffe1256a61: lock cmpxchg %r10,(%r11)
  ;; B37: #	B4 B38 &lt;- B2 B36  Freq: 1e-06

  0x00007fffe1256a66: lea     0x60(%rsp),%rbx
  0x00007fffe1256a6b: mov     0x0(%r13),%rax
  0x00007fffe1256a6f: test    $0x2,%rax
  0x00007fffe1256a75: jne     0x7fffe1256a9c
  0x00007fffe1256a77: or      $0x1,%rax
  0x00007fffe1256a7b: mov     %rax,(%rbx)
  0x00007fffe1256a7e: lock cmpxchg %rbx,0x0(%r13)
  0x00007fffe1256a84: je      0x7fffe1256ab5
  0x00007fffe1256a8a: sub     %rsp,%rax
  0x00007fffe1256a8d: and     $0xfffffffffffff007,%rax
  0x00007fffe1256a94: mov     %rax,(%rbx)
  0x00007fffe1256a97: jmpq    0x7fffe1256ab5
  0x00007fffe1256a9c: movq    $0x3,(%rbx)
  0x00007fffe1256aa3: mov     %rax,%rbx
  0x00007fffe1256aa6: mov     0x16(%rbx),%rax
  0x00007fffe1256aaa: test    %rax,%rax
  0x00007fffe1256aad: jne     0x7fffe1256ab5
  0x00007fffe1256aaf: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1256ab5: je      0x7fffe12567ae
  ;; B38: #	B4 &lt;- B43 B37  Freq: 2e-12

  0x00007fffe1256abb: mov     %r13,%rsi
  0x00007fffe1256abe: lea     0x60(%rsp),%rdx
  0x00007fffe1256ac3: mov     0x38(%rsp),%rbp
  0x00007fffe1256ac8: mov     %r13,0x8(%rsp)
  0x00007fffe1256acd: mov     %r13,0x10(%rsp)
  0x00007fffe1256ad2: nop
  0x00007fffe1256ad3: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop [56]=Oop off=952}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)
                                                ;   {runtime_call}
  0x00007fffe1256ad8: mov     0x8(%rsp),%r13
  0x00007fffe1256add: jmpq    0x7fffe12567ae
  ;; B39: #	N1319 &lt;- B6  Freq: 9.99998e-07

  0x00007fffe1256ae2: mov     $0xffffffde,%esi
  0x00007fffe1256ae7: mov     %r9,%rbp
  0x00007fffe1256aea: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256aef: mov     0x1c(%rsp),%eax
  0x00007fffe1256af3: mov     %eax,(%rsp)
  0x00007fffe1256af6: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256afb: mov     %r10d,0x8(%rsp)
  0x00007fffe1256b00: mov     %edi,0xc(%rsp)
  0x00007fffe1256b04: mov     %r8d,0x10(%rsp)
  0x00007fffe1256b09: nop
  0x00007fffe1256b0a: nop
  0x00007fffe1256b0b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop [8]=NarrowOop [12]=NarrowOop off=1008}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256b10: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B40: #	B36 B41 &lt;- B3  Freq: 9.99998e-07

  0x00007fffe1256b15: test    $0x7,%r8
  0x00007fffe1256b1c: jne     0x7fffe1256a5c
  ;; B41: #	B43 B42 &lt;- B40  Freq: 9.99997e-07

  0x00007fffe1256b22: test    $0x300,%r8
  0x00007fffe1256b29: jne     0x7fffe1256b38
  ;; B42: #	B43 &lt;- B41  Freq: 9.99996e-07

  0x00007fffe1256b2b: and     $0x37f,%rax
  0x00007fffe1256b32: mov     %rax,%r11
  0x00007fffe1256b35: or      %r15,%r11
  ;; B43: #	B38 B44 &lt;- B42 B41  Freq: 9.99997e-07

  0x00007fffe1256b38: mov     0x1c(%rsp),%r8d
  0x00007fffe1256b3d: lock cmpxchg %r11,(%r8)
  0x00007fffe1256b42: jne     0x7fffe1256abb
  ;; B44: #	B4 &lt;- B43  Freq: 9.99996e-07

  0x00007fffe1256b48: jmpq    0x7fffe12567ae
  ;; B45: #	B46 &lt;- B48  Freq: 9.99994e-13

  0x00007fffe1256b4d: lock cmpxchg %r11,(%r9)
  ;; B46: #	B11 B47 &lt;- B9 B45  Freq: 9.99996e-07

  0x00007fffe1256b52: lea     0x68(%rsp),%rbx
  0x00007fffe1256b57: mov     (%rcx),%rax
  0x00007fffe1256b5a: test    $0x2,%rax
  0x00007fffe1256b60: jne     0x7fffe1256b86
  0x00007fffe1256b62: or      $0x1,%rax
  0x00007fffe1256b66: mov     %rax,(%rbx)
  0x00007fffe1256b69: lock cmpxchg %rbx,(%rcx)
  0x00007fffe1256b6e: je      0x7fffe1256b9f
  0x00007fffe1256b74: sub     %rsp,%rax
  0x00007fffe1256b77: and     $0xfffffffffffff007,%rax
  0x00007fffe1256b7e: mov     %rax,(%rbx)
  0x00007fffe1256b81: jmpq    0x7fffe1256b9f
  0x00007fffe1256b86: movq    $0x3,(%rbx)
  0x00007fffe1256b8d: mov     %rax,%rbx
  0x00007fffe1256b90: mov     0x16(%rbx),%rax
  0x00007fffe1256b94: test    %rax,%rax
  0x00007fffe1256b97: jne     0x7fffe1256b9f
  0x00007fffe1256b99: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1256b9f: je      0x7fffe125682d
  ;; B47: #	B11 &lt;- B51 B46  Freq: 1.99999e-12

  0x00007fffe1256ba5: mov     %rdx,0x28(%rsp)
  0x00007fffe1256baa: mov     %rcx,0x20(%rsp)
  0x00007fffe1256baf: mov     %r9d,0x18(%rsp)
  0x00007fffe1256bb4: mov     %r10d,0x14(%rsp)
  0x00007fffe1256bb9: mov     %edi,0x10(%rsp)
  0x00007fffe1256bbd: mov     %r8d,0x4(%rsp)
  0x00007fffe1256bc2: mov     %r13,0x8(%rsp)
  0x00007fffe1256bc7: mov     0x38(%rsp),%rbp
  0x00007fffe1256bcc: mov     %rcx,%rsi
  0x00007fffe1256bcf: lea     0x68(%rsp),%rdx
  0x00007fffe1256bd4: nop
  0x00007fffe1256bd5: nop
  0x00007fffe1256bd6: nop
  0x00007fffe1256bd7: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [20]=NarrowOop [24]=NarrowOop [28]=NarrowOop [32]=Oop [40]=Oop off=1212}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256bdc: mov     %rbp,0x38(%rsp)
  0x00007fffe1256be1: mov     0x8(%rsp),%r11
  0x00007fffe1256be6: mov     0x4(%rsp),%r8d
  0x00007fffe1256beb: mov     0x10(%rsp),%edi
  0x00007fffe1256bef: mov     0x14(%rsp),%r10d
  0x00007fffe1256bf4: mov     0x18(%rsp),%r9d
  0x00007fffe1256bf9: mov     0x20(%rsp),%rcx
  0x00007fffe1256bfe: mov     0x28(%rsp),%rdx
  0x00007fffe1256c03: mov     %r11,%r13
  0x00007fffe1256c06: jmpq    0x7fffe125682d
  ;; B48: #	B45 B49 &lt;- B10  Freq: 9.99994e-07

  0x00007fffe1256c0b: test    $0x7,%rsi
  0x00007fffe1256c12: jne     0x7fffe1256b4d
  ;; B49: #	B51 B50 &lt;- B48  Freq: 9.99993e-07

  0x00007fffe1256c18: test    $0x300,%rsi
  0x00007fffe1256c1f: jne     0x7fffe1256c2e
  ;; B50: #	B51 &lt;- B49  Freq: 9.99992e-07

  0x00007fffe1256c21: and     $0x37f,%rax
  0x00007fffe1256c28: mov     %rax,%rbx
  0x00007fffe1256c2b: or      %r15,%rbx
  ;; B51: #	B47 B52 &lt;- B50 B49  Freq: 9.99993e-07

  0x00007fffe1256c2e: lock cmpxchg %rbx,(%r9)
  0x00007fffe1256c33: jne     0x7fffe1256ba5
  ;; B52: #	B11 &lt;- B51  Freq: 9.99992e-07

  0x00007fffe1256c39: jmpq    0x7fffe125682d
  ;; B53: #	B32 B54 &lt;- B31  Freq: 9.99965e-07

  0x00007fffe1256c3e: mov     0x28(%rsp),%r11
  0x00007fffe1256c43: lea     0x68(%rsp),%rax
  0x00007fffe1256c48: cmpq    $0x0,(%rax)
  0x00007fffe1256c4f: je      0x7fffe1256cc9
  0x00007fffe1256c55: mov     (%r11),%r10
  0x00007fffe1256c58: test    $0x2,%r10
  0x00007fffe1256c5f: je      0x7fffe1256cc1
  0x00007fffe1256c61: mov     0x16(%r10),%rax
  0x00007fffe1256c65: xor     %r15,%rax
  0x00007fffe1256c68: or      0x26(%r10),%rax
  0x00007fffe1256c6c: jne     0x7fffe1256cc9
  0x00007fffe1256c6e: mov     0x36(%r10),%rax
  0x00007fffe1256c72: or      0x3e(%r10),%rax
  0x00007fffe1256c76: jne     0x7fffe1256c82
  0x00007fffe1256c78: movq    $0x0,0x16(%r10)
  0x00007fffe1256c80: jmp     0x7fffe1256cc9
  0x00007fffe1256c82: cmpq    $0x0,0x46(%r10)
  0x00007fffe1256c8a: je      0x7fffe1256cb5
  0x00007fffe1256c8c: movq    $0x0,0x16(%r10)
  0x00007fffe1256c94: lock addl $0x0,(%rsp)
  0x00007fffe1256c99: cmpq    $0x0,0x46(%r10)
  0x00007fffe1256ca1: jne     0x7fffe1256cba
  0x00007fffe1256ca3: movabs  $0x0,%rax
  0x00007fffe1256cad: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1256cb3: jne     0x7fffe1256cba
  0x00007fffe1256cb5: or      $0x1,%eax
  0x00007fffe1256cb8: jmp     0x7fffe1256cc9
  0x00007fffe1256cba: test    $0x0,%eax
  0x00007fffe1256cbf: jmp     0x7fffe1256cc9
  0x00007fffe1256cc1: mov     (%rax),%r10
  0x00007fffe1256cc4: lock cmpxchg %r10,(%r11)
  0x00007fffe1256cc9: je      0x7fffe12569b1
  ;; B54: #	B32 &lt;- B53  Freq: 9.99965e-13

  0x00007fffe1256ccf: mov     %r11,%rdi
  0x00007fffe1256cd2: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1256cd7: movabs  $0x7ffff744655c,%r10
  0x00007fffe1256ce1: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@65 (line 126)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1256ce4: jmpq    0x7fffe12569b1
  ;; B55: #	B33 B56 &lt;- B32  Freq: 9.99965e-07

  0x00007fffe1256ce9: mov     0x8(%rsp),%r11
  0x00007fffe1256cee: lea     0x60(%rsp),%rax
  0x00007fffe1256cf3: cmpq    $0x0,(%rax)
  0x00007fffe1256cfa: je      0x7fffe1256d74
  0x00007fffe1256d00: mov     (%r11),%r10
  0x00007fffe1256d03: test    $0x2,%r10
  0x00007fffe1256d0a: je      0x7fffe1256d6c
  0x00007fffe1256d0c: mov     0x16(%r10),%rax
  0x00007fffe1256d10: xor     %r15,%rax
  0x00007fffe1256d13: or      0x26(%r10),%rax
  0x00007fffe1256d17: jne     0x7fffe1256d74
  0x00007fffe1256d19: mov     0x36(%r10),%rax
  0x00007fffe1256d1d: or      0x3e(%r10),%rax
  0x00007fffe1256d21: jne     0x7fffe1256d2d
  0x00007fffe1256d23: movq    $0x0,0x16(%r10)
  0x00007fffe1256d2b: jmp     0x7fffe1256d74
  0x00007fffe1256d2d: cmpq    $0x0,0x46(%r10)
  0x00007fffe1256d35: je      0x7fffe1256d60
  0x00007fffe1256d37: movq    $0x0,0x16(%r10)
  0x00007fffe1256d3f: lock addl $0x0,(%rsp)
  0x00007fffe1256d44: cmpq    $0x0,0x46(%r10)
  0x00007fffe1256d4c: jne     0x7fffe1256d65
  0x00007fffe1256d4e: movabs  $0x0,%rax
  0x00007fffe1256d58: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1256d5e: jne     0x7fffe1256d65
  0x00007fffe1256d60: or      $0x1,%eax
  0x00007fffe1256d63: jmp     0x7fffe1256d74
  0x00007fffe1256d65: test    $0x0,%eax
  0x00007fffe1256d6a: jmp     0x7fffe1256d74
  0x00007fffe1256d6c: mov     (%rax),%r10
  0x00007fffe1256d6f: lock cmpxchg %r10,(%r11)
  0x00007fffe1256d74: je      0x7fffe12569d2
  ;; B56: #	B33 &lt;- B55  Freq: 9.99965e-13

  0x00007fffe1256d7a: mov     %r11,%rdi
  0x00007fffe1256d7d: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)

  0x00007fffe1256d82: movabs  $0x7ffff744655c,%r10
  0x00007fffe1256d8c: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::flushBuffer@43 (line 131)

  0x00007fffe1256d8f: jmpq    0x7fffe12569d2
  ;; B57: #	N1319 &lt;- B13  Freq: 4.99997e-07

  0x00007fffe1256d94: mov     $0xffffff65,%esi
  0x00007fffe1256d99: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256d9e: mov     0x1c(%rsp),%eax
  0x00007fffe1256da2: mov     %eax,(%rsp)
  0x00007fffe1256da5: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256daa: mov     %r10d,0x8(%rsp)
  0x00007fffe1256daf: mov     %edi,0xc(%rsp)
  0x00007fffe1256db3: mov     %r8d,0x18(%rsp)
  0x00007fffe1256db8: mov     %r9d,0x1c(%rsp)
  0x00007fffe1256dbd: nop
  0x00007fffe1256dbe: nop
  0x00007fffe1256dbf: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=NarrowOop [12]=NarrowOop [28]=NarrowOop [56]=Oop off=1700}
                                                ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@23 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256dc4: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B58: #	N1319 &lt;- B25  Freq: 4.99994e-07

  0x00007fffe1256dc9: mov     $0xffffff65,%esi
  0x00007fffe1256dce: pushq   0x38(%rsp)
  0x00007fffe1256dd3: popq    (%rsp)
  0x00007fffe1256dd7: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256ddc: mov     0x1c(%rsp),%eax
  0x00007fffe1256de0: mov     %eax,0x8(%rsp)
  0x00007fffe1256de4: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256de9: mov     %r9d,0x14(%rsp)
  0x00007fffe1256dee: mov     %r10d,0x18(%rsp)
  0x00007fffe1256df3: mov     %r11,0x28(%rsp)
  0x00007fffe1256df8: mov     %r8d,0x34(%rsp)
  0x00007fffe1256dfd: mov     %r11,0x38(%rsp)
  0x00007fffe1256e02: mov     %edi,0x40(%rsp)
  0x00007fffe1256e06: nop
  0x00007fffe1256e07: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=NarrowOop [20]=NarrowOop [24]=NarrowOop [40]=Oop [52]=NarrowOop [56]=Oop [64]=NarrowOop off=1772}
                                                ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256e0c: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B59: #	N1319 &lt;- B29  Freq: 4.99983e-07

  0x00007fffe1256e11: mov     $0xffffff65,%esi
  0x00007fffe1256e16: pushq   0x38(%rsp)
  0x00007fffe1256e1b: popq    (%rsp)
  0x00007fffe1256e1f: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256e24: mov     0x1c(%rsp),%eax
  0x00007fffe1256e28: mov     %eax,0x8(%rsp)
  0x00007fffe1256e2c: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256e31: mov     %rax,0x38(%rsp)
  0x00007fffe1256e36: nop
  0x00007fffe1256e37: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=NarrowOop [16]=NarrowOop [20]=NarrowOop [24]=NarrowOop [32]=NarrowOop [48]=Oop [56]=Oop off=1820}
                                                ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256e3c: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B60: #	N1319 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe1256e41: mov     $0xffffff65,%esi
  0x00007fffe1256e46: mov     0x38(%rsp),%rbp
  0x00007fffe1256e4b: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256e50: mov     0x1c(%rsp),%eax
  0x00007fffe1256e54: mov     %eax,(%rsp)
  0x00007fffe1256e57: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256e5c: mov     %r8d,0x8(%rsp)
  0x00007fffe1256e61: nop
  0x00007fffe1256e62: nop
  0x00007fffe1256e63: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop off=1864}
                                                ;*ifne
                                                ; - java.io.BufferedWriter::flushBuffer@15 (line 127)
                                                ;   {runtime_call}
  0x00007fffe1256e68: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.io.BufferedWriter::flushBuffer@15 (line 127)
                                                ;   {runtime_call}
  ;; B61: #	N1319 &lt;- B11  Freq: 4.76835e-07

  0x00007fffe1256e6d: mov     $0xffffff65,%esi
  0x00007fffe1256e72: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256e77: mov     0x1c(%rsp),%eax
  0x00007fffe1256e7b: mov     %eax,0x8(%rsp)
  0x00007fffe1256e7f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256e84: mov     %r10d,0x10(%rsp)
  0x00007fffe1256e89: mov     %edi,0x14(%rsp)
  0x00007fffe1256e8d: mov     %r8d,0x18(%rsp)
  0x00007fffe1256e92: mov     %r9d,0x20(%rsp)
  0x00007fffe1256e97: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [16]=NarrowOop [20]=NarrowOop [32]=NarrowOop [56]=Oop off=1916}
                                                ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256e9c: callq   0x7ffff736b4ea    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B62: #	N1319 &lt;- B14  Freq: 4.76834e-07

  0x00007fffe1256ea1: mov     $0xffffff65,%esi
  0x00007fffe1256ea6: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256eab: mov     0x1c(%rsp),%eax
  0x00007fffe1256eaf: mov     %eax,(%rsp)
  0x00007fffe1256eb2: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256eb7: mov     %r10d,0x8(%rsp)
  0x00007fffe1256ebc: mov     %edi,0xc(%rsp)
  0x00007fffe1256ec0: mov     %r8d,0x18(%rsp)
  0x00007fffe1256ec5: mov     %r11d,0x1c(%rsp)
  0x00007fffe1256eca: mov     %r9d,0x20(%rsp)
  0x00007fffe1256ecf: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=NarrowOop [12]=NarrowOop [32]=NarrowOop [56]=Oop off=1972}
                                                ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@31 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256ed4: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B63: #	N1319 &lt;- B17  Freq: 4.76834e-07

  0x00007fffe1256ed9: mov     $0xffffff65,%esi
  0x00007fffe1256ede: mov     0x38(%rsp),%rbp
  0x00007fffe1256ee3: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256ee8: mov     0x1c(%rsp),%eax
  0x00007fffe1256eec: mov     %eax,(%rsp)
  0x00007fffe1256eef: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256ef4: mov     %r9d,0xc(%rsp)
  0x00007fffe1256ef9: mov     %r10d,0x10(%rsp)
  0x00007fffe1256efe: mov     %r11,0x20(%rsp)
  0x00007fffe1256f03: mov     %edi,0x14(%rsp)
  0x00007fffe1256f07: mov     %r11,0x28(%rsp)
  0x00007fffe1256f0c: mov     %r8d,0x38(%rsp)
  0x00007fffe1256f11: nop
  0x00007fffe1256f12: nop
  0x00007fffe1256f13: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop off=2040}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256f18: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B64: #	N1319 &lt;- B18  Freq: 4.76833e-07

  0x00007fffe1256f1d: mov     $0xffffff65,%esi
  0x00007fffe1256f22: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256f27: mov     0x1c(%rsp),%eax
  0x00007fffe1256f2b: mov     %eax,0x8(%rsp)
  0x00007fffe1256f2f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256f34: mov     %r9d,0x14(%rsp)
  0x00007fffe1256f39: mov     %r10d,0x18(%rsp)
  0x00007fffe1256f3e: mov     %r11,0x20(%rsp)
  0x00007fffe1256f43: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [20]=NarrowOop [24]=NarrowOop [32]=Oop [56]=Oop off=2088}
                                                ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::implWrite@12 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256f48: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::implWrite@12 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B65: #	N1319 &lt;- B19  Freq: 4.76833e-07

  0x00007fffe1256f4d: mov     $0xffffff65,%esi
  0x00007fffe1256f52: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256f57: mov     0x1c(%rsp),%eax
  0x00007fffe1256f5b: mov     %eax,(%rsp)
  0x00007fffe1256f5e: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256f63: mov     %r9d,0xc(%rsp)
  0x00007fffe1256f68: mov     %r10d,0x10(%rsp)
  0x00007fffe1256f6d: mov     %r11,0x18(%rsp)
  0x00007fffe1256f72: mov     %r8d,0x14(%rsp)
  0x00007fffe1256f77: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [12]=NarrowOop [16]=NarrowOop [24]=Oop [56]=Oop off=2140}
                                                ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@24 (line 270)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256f7c: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@24 (line 270)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B66: #	N1319 &lt;- B21  Freq: 4.76832e-07

  0x00007fffe1256f81: mov     $0xffffff65,%esi
  0x00007fffe1256f86: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256f8b: mov     0x1c(%rsp),%eax
  0x00007fffe1256f8f: mov     %eax,0x8(%rsp)
  0x00007fffe1256f93: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256f98: mov     %r9d,0x14(%rsp)
  0x00007fffe1256f9d: mov     %r10d,0x18(%rsp)
  0x00007fffe1256fa2: mov     %r8d,0x1c(%rsp)
  0x00007fffe1256fa7: mov     %r11,0x28(%rsp)
  0x00007fffe1256fac: mov     %edi,0x30(%rsp)
  0x00007fffe1256fb0: nop
  0x00007fffe1256fb1: nop
  0x00007fffe1256fb2: nop
  0x00007fffe1256fb3: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [20]=NarrowOop [24]=NarrowOop [28]=NarrowOop [40]=Oop [48]=NarrowOop [56]=Oop off=2200}
                                                ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256fb8: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B67: #	N1319 &lt;- B22  Freq: 4.76832e-07

  0x00007fffe1256fbd: mov     $0xffffff65,%esi
  0x00007fffe1256fc2: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1256fc7: mov     0x1c(%rsp),%eax
  0x00007fffe1256fcb: mov     %eax,0x8(%rsp)
  0x00007fffe1256fcf: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1256fd4: mov     %r9d,0x14(%rsp)
  0x00007fffe1256fd9: mov     %r10d,0x18(%rsp)
  0x00007fffe1256fde: mov     %r8d,0x1c(%rsp)
  0x00007fffe1256fe3: mov     %r11,0x28(%rsp)
  0x00007fffe1256fe8: mov     %edi,0x30(%rsp)
  0x00007fffe1256fec: nop
  0x00007fffe1256fed: nop
  0x00007fffe1256fee: nop
  0x00007fffe1256fef: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [20]=NarrowOop [24]=NarrowOop [28]=NarrowOop [40]=Oop [48]=NarrowOop [56]=Oop off=2260}
                                                ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1256ff4: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B68: #	N1319 &lt;- B24  Freq: 4.76832e-07

  0x00007fffe1256ff9: mov     $0xffffff65,%esi
  0x00007fffe1256ffe: pushq   0x38(%rsp)
  0x00007fffe1257003: popq    (%rsp)
  0x00007fffe1257007: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125700c: mov     0x1c(%rsp),%eax
  0x00007fffe1257010: mov     %eax,0x8(%rsp)
  0x00007fffe1257014: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1257019: mov     %r9d,0x14(%rsp)
  0x00007fffe125701e: mov     %r10d,0x18(%rsp)
  0x00007fffe1257023: mov     %r11,0x28(%rsp)
  0x00007fffe1257028: mov     %r8d,0x34(%rsp)
  0x00007fffe125702d: mov     %r11,0x38(%rsp)
  0x00007fffe1257032: mov     %edi,0x40(%rsp)
  0x00007fffe1257036: mov     %edi,0x44(%rsp)
  0x00007fffe125703a: nop
  0x00007fffe125703b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [8]=NarrowOop [20]=NarrowOop [24]=NarrowOop [40]=Oop [52]=NarrowOop [56]=Oop [64]=NarrowOop [68]=NarrowOop off=2336}
                                                ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257040: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B69: #	N1319 &lt;- B28  Freq: 4.76821e-07

  0x00007fffe1257045: mov     $0xffffff65,%esi
  0x00007fffe125704a: pushq   0x38(%rsp)
  0x00007fffe125704f: popq    (%rsp)
  0x00007fffe1257053: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1257058: mov     0x1c(%rsp),%eax
  0x00007fffe125705c: mov     %eax,0x8(%rsp)
  0x00007fffe1257060: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1257065: mov     %rax,0x38(%rsp)
  0x00007fffe125706a: nop
  0x00007fffe125706b: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=NarrowOop [16]=NarrowOop [20]=NarrowOop [24]=NarrowOop [32]=NarrowOop [48]=Oop [56]=Oop off=2384}
                                                ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257070: callq   0x7ffff736b4ea    ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B70: #	N1319 &lt;- B30  Freq: 4.76821e-07

  0x00007fffe1257075: mov     $0xffffff65,%esi
  0x00007fffe125707a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125707f: mov     0x1c(%rsp),%eax
  0x00007fffe1257083: mov     %eax,0x8(%rsp)
  0x00007fffe1257087: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125708c: mov     0x20(%rsp),%r11d
  0x00007fffe1257091: mov     %r11d,0x18(%rsp)
  0x00007fffe1257096: nop
  0x00007fffe1257097: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [16]=NarrowOop [24]=NarrowOop [48]=Oop [56]=Oop off=2428}
                                                ;*ifle
                                                ; - java.nio.Buffer::remaining@11 (line 392)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@84 (line 274)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe125709c: callq   0x7ffff736b4ea    ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B71: #	B80 B92 B91 &lt;- B26  Freq: 9.99987e-06

  0x00007fffe12570a1: mov     %rax,%rsi
  0x00007fffe12570a4: nop
  0x00007fffe12570a5: nop
  0x00007fffe12570a6: nop
  0x00007fffe12570a7: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [16]=NarrowOop [28]=NarrowOop [32]=NarrowOop [40]=Oop [48]=Oop [56]=Oop [64]=Oop off=2444}
                                                ;*invokevirtual encodeLoop
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B72: #	N1319 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe12570ac: mov     $0xfffffff6,%esi
  0x00007fffe12570b1: mov     0x38(%rsp),%rbp
  0x00007fffe12570b6: nop
  0x00007fffe12570b7: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2460}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)
                                                ;   {runtime_call}
  0x00007fffe12570bc: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)
                                                ;   {runtime_call}
  ;; B73: #	N1319 &lt;- B7  Freq: 1.01328e-06

  0x00007fffe12570c1: mov     $0xfffffff6,%esi
  0x00007fffe12570c6: mov     0x38(%rsp),%rbp
  0x00007fffe12570cb: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12570d0: mov     0x1c(%rsp),%eax
  0x00007fffe12570d4: mov     %eax,(%rsp)
  0x00007fffe12570d7: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12570dc: mov     %edi,0x8(%rsp)
  0x00007fffe12570e0: mov     %r8d,0xc(%rsp)
  0x00007fffe12570e5: nop
  0x00007fffe12570e6: nop
  0x00007fffe12570e7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop [8]=NarrowOop off=2508}
                                                ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe12570ec: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B74: #	N1319 &lt;- B8  Freq: 1.01327e-06

  0x00007fffe12570f1: mov     $0xfffffff6,%esi
  0x00007fffe12570f6: mov     0x38(%rsp),%rbp
  0x00007fffe12570fb: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1257100: mov     0x1c(%rsp),%eax
  0x00007fffe1257104: mov     %eax,(%rsp)
  0x00007fffe1257107: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125710c: mov     %r10d,0x8(%rsp)
  0x00007fffe1257111: mov     %edi,0xc(%rsp)
  0x00007fffe1257115: mov     %r8d,0x10(%rsp)
  0x00007fffe125711a: nop
  0x00007fffe125711b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop [8]=NarrowOop [12]=NarrowOop off=2560}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257120: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B75: #	N1319 &lt;- B12  Freq: 1.01327e-06

  0x00007fffe1257125: mov     $0xfffffff6,%esi
  0x00007fffe125712a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125712f: mov     0x1c(%rsp),%eax
  0x00007fffe1257133: mov     %eax,(%rsp)
  0x00007fffe1257136: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125713b: mov     %r10d,0x8(%rsp)
  0x00007fffe1257140: mov     %r8d,0xc(%rsp)
  0x00007fffe1257145: mov     %r9d,0x14(%rsp)
  0x00007fffe125714a: nop
  0x00007fffe125714b: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=NarrowOop [20]=NarrowOop [56]=Oop off=2608}
                                                ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257150: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B76: #	N1319 &lt;- B20  Freq: 1.01327e-06

  0x00007fffe1257155: mov     $0xfffffff6,%esi
  0x00007fffe125715a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125715f: mov     0x1c(%rsp),%eax
  0x00007fffe1257163: mov     %eax,(%rsp)
  0x00007fffe1257166: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125716b: mov     %r9d,0xc(%rsp)
  0x00007fffe1257170: mov     %r11,0x10(%rsp)
  0x00007fffe1257175: mov     %edi,0x18(%rsp)
  0x00007fffe1257179: nop
  0x00007fffe125717a: nop
  0x00007fffe125717b: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [12]=NarrowOop [16]=Oop [24]=NarrowOop [56]=Oop off=2656}
                                                ;*invokevirtual encode
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257180: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B77: #	N1319 &lt;- B23  Freq: 1.01327e-06

  0x00007fffe1257185: mov     $0xfffffff6,%esi
  0x00007fffe125718a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125718f: mov     0x1c(%rsp),%eax
  0x00007fffe1257193: mov     %eax,(%rsp)
  0x00007fffe1257196: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125719b: mov     %r9d,0xc(%rsp)
  0x00007fffe12571a0: mov     %r10d,0x10(%rsp)
  0x00007fffe12571a5: mov     %r8d,0x14(%rsp)
  0x00007fffe12571aa: mov     %r11,0x20(%rsp)
  0x00007fffe12571af: mov     %edi,0x28(%rsp)
  0x00007fffe12571b3: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop [32]=Oop [40]=NarrowOop [56]=Oop off=2712}
                                                ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe12571b8: callq   0x7ffff736b4ea    ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B78: #	N1319 &lt;- B27  Freq: 1.01325e-06

  0x00007fffe12571bd: mov     $0xfffffff6,%esi
  0x00007fffe12571c2: mov     0x1c(%rsp),%r10d
  0x00007fffe12571c7: mov     %r10d,0x4(%rsp)
  0x00007fffe12571cc: mov     0x20(%rsp),%r10d
  0x00007fffe12571d1: mov     %r10d,0xc(%rsp)
  0x00007fffe12571d6: mov     0x30(%rsp),%r10
  0x00007fffe12571db: mov     %r10,0x28(%rsp)
  0x00007fffe12571e0: nop
  0x00007fffe12571e1: nop
  0x00007fffe12571e2: nop
  0x00007fffe12571e3: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop [24]=NarrowOop [28]=NarrowOop [40]=Oop [48]=Oop [56]=Oop off=2760}
                                                ;*invokevirtual isOverflow
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe12571e8: callq   0x7ffff736b4ea    ;*invokevirtual isOverflow
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B79: #	N1319 &lt;- B4  Freq: 4.76837e-07

  0x00007fffe12571ed: mov     $0xffffff65,%esi
  0x00007fffe12571f2: mov     0x38(%rsp),%rbp
  0x00007fffe12571f7: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12571fc: mov     0x1c(%rsp),%eax
  0x00007fffe1257200: mov     %eax,(%rsp)
  0x00007fffe1257203: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1257208: mov     %r10d,0x8(%rsp)
  0x00007fffe125720d: nop
  0x00007fffe125720e: nop
  0x00007fffe125720f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=NarrowOop [8]=NarrowOop off=2804}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::flushBuffer@8 (line 126)
                                                ;   {runtime_call}
  0x00007fffe1257214: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B80: #	B83 &lt;- B71  Freq: 9.99987e-11

  0x00007fffe1257219: mov     %rax,%rbx
  0x00007fffe125721c: jmp     0x7fffe1257232
  ;; B81: #	B90 B82 &lt;- B34  Freq: 1.00016e-09

  0x00007fffe125721e: mov     0x8(%rax),%r10d
  0x00007fffe1257222: cmp     $0x20005f8c,%r10d  ;   {metadata(&apos;java/lang/IllegalArgumentException&apos;)}
  0x00007fffe1257229: je      0x7fffe12573c8    ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B82: #	B83 &lt;- B81  Freq: 1.00016e-09

  0x00007fffe125722f: mov     %rax,%rbx
  ;; B83: #	B86 B84 &lt;- B82 B80  Freq: 1.10016e-09

  0x00007fffe1257232: mov     $0x7,%r10d
  0x00007fffe1257238: mov     0x20(%rsp),%r11d
  0x00007fffe125723d: and     (%r11),%r10
  0x00007fffe1257240: cmp     $0x5,%r10
  0x00007fffe1257244: jne     0x7fffe125726e
  ;; B84: #	B88 B85 &lt;- B87 B86 B83  Freq: 1.10016e-09

  0x00007fffe1257246: mov     0x1c(%rsp),%r11d
  0x00007fffe125724b: mov     $0x7,%r10d
  0x00007fffe1257251: and     (%r11),%r10
  0x00007fffe1257254: cmp     $0x5,%r10
  0x00007fffe1257258: jne     0x7fffe125731b    ;*monitorexit
                                                ; - java.io.BufferedWriter::flushBuffer@49 (line 131)

  ;; B85: #	N1319 &lt;- B89 B88 B84  Freq: 1.10016e-09

  0x00007fffe125725e: mov     %rbx,%rsi
  0x00007fffe1257261: add     $0x80,%rsp
  0x00007fffe1257268: pop     %rbp
  0x00007fffe1257269: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B86: #	B84 B87 &lt;- B83  Freq: 1.10016e-15

  0x00007fffe125726e: mov     0x28(%rsp),%r11
  0x00007fffe1257273: lea     0x68(%rsp),%rax
  0x00007fffe1257278: cmpq    $0x0,(%rax)
  0x00007fffe125727f: je      0x7fffe12572f9
  0x00007fffe1257285: mov     (%r11),%r10
  0x00007fffe1257288: test    $0x2,%r10
  0x00007fffe125728f: je      0x7fffe12572f1
  0x00007fffe1257291: mov     0x16(%r10),%rax
  0x00007fffe1257295: xor     %r15,%rax
  0x00007fffe1257298: or      0x26(%r10),%rax
  0x00007fffe125729c: jne     0x7fffe12572f9
  0x00007fffe125729e: mov     0x36(%r10),%rax
  0x00007fffe12572a2: or      0x3e(%r10),%rax
  0x00007fffe12572a6: jne     0x7fffe12572b2
  0x00007fffe12572a8: movq    $0x0,0x16(%r10)
  0x00007fffe12572b0: jmp     0x7fffe12572f9
  0x00007fffe12572b2: cmpq    $0x0,0x46(%r10)
  0x00007fffe12572ba: je      0x7fffe12572e5
  0x00007fffe12572bc: movq    $0x0,0x16(%r10)
  0x00007fffe12572c4: lock addl $0x0,(%rsp)
  0x00007fffe12572c9: cmpq    $0x0,0x46(%r10)
  0x00007fffe12572d1: jne     0x7fffe12572ea
  0x00007fffe12572d3: movabs  $0x0,%rax
  0x00007fffe12572dd: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12572e3: jne     0x7fffe12572ea
  0x00007fffe12572e5: or      $0x1,%eax
  0x00007fffe12572e8: jmp     0x7fffe12572f9
  0x00007fffe12572ea: test    $0x0,%eax
  0x00007fffe12572ef: jmp     0x7fffe12572f9
  0x00007fffe12572f1: mov     (%rax),%r10
  0x00007fffe12572f4: lock cmpxchg %r10,(%r11)
  0x00007fffe12572f9: je      0x7fffe1257246
  ;; B87: #	B84 &lt;- B86  Freq: 1.10016e-21

  0x00007fffe12572ff: mov     0x28(%rsp),%rdi
  0x00007fffe1257304: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1257309: movabs  $0x7ffff744655c,%r10
  0x00007fffe1257313: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@73 (line 126)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  0x00007fffe1257316: jmpq    0x7fffe1257246
  ;; B88: #	B85 B89 &lt;- B84  Freq: 1.10016e-15

  0x00007fffe125731b: mov     0x8(%rsp),%r11
  0x00007fffe1257320: lea     0x60(%rsp),%rax
  0x00007fffe1257325: cmpq    $0x0,(%rax)
  0x00007fffe125732c: je      0x7fffe12573a6
  0x00007fffe1257332: mov     (%r11),%r10
  0x00007fffe1257335: test    $0x2,%r10
  0x00007fffe125733c: je      0x7fffe125739e
  0x00007fffe125733e: mov     0x16(%r10),%rax
  0x00007fffe1257342: xor     %r15,%rax
  0x00007fffe1257345: or      0x26(%r10),%rax
  0x00007fffe1257349: jne     0x7fffe12573a6
  0x00007fffe125734b: mov     0x36(%r10),%rax
  0x00007fffe125734f: or      0x3e(%r10),%rax
  0x00007fffe1257353: jne     0x7fffe125735f
  0x00007fffe1257355: movq    $0x0,0x16(%r10)
  0x00007fffe125735d: jmp     0x7fffe12573a6
  0x00007fffe125735f: cmpq    $0x0,0x46(%r10)
  0x00007fffe1257367: je      0x7fffe1257392
  0x00007fffe1257369: movq    $0x0,0x16(%r10)
  0x00007fffe1257371: lock addl $0x0,(%rsp)
  0x00007fffe1257376: cmpq    $0x0,0x46(%r10)
  0x00007fffe125737e: jne     0x7fffe1257397
  0x00007fffe1257380: movabs  $0x0,%rax
  0x00007fffe125738a: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1257390: jne     0x7fffe1257397
  0x00007fffe1257392: or      $0x1,%eax
  0x00007fffe1257395: jmp     0x7fffe12573a6
  0x00007fffe1257397: test    $0x0,%eax
  0x00007fffe125739c: jmp     0x7fffe12573a6
  0x00007fffe125739e: mov     (%rax),%r10
  0x00007fffe12573a1: lock cmpxchg %r10,(%r11)
  0x00007fffe12573a6: je      0x7fffe125725e
  ;; B89: #	B85 &lt;- B88  Freq: 1.10016e-21

  0x00007fffe12573ac: mov     0x8(%rsp),%rdi
  0x00007fffe12573b1: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::flushBuffer@6 (line 125)

  0x00007fffe12573b6: movabs  $0x7ffff744655c,%r10
  0x00007fffe12573c0: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::flushBuffer@49 (line 131)

  0x00007fffe12573c3: jmpq    0x7fffe125725e    ;*areturn
                                                ; - java.nio.CharBuffer::wrap@10 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)

  ;; B90: #	N1319 &lt;- B81  Freq: 1.01344e-15

  0x00007fffe12573c8: mov     $0xa,%esi
  0x00007fffe12573cd: mov     (%rsp),%rbp
  0x00007fffe12573d1: mov     0x1c(%rsp),%r11d
  0x00007fffe12573d6: mov     %r11d,%r10d
  0x00007fffe12573d9: mov     %r10d,0x4(%rsp)
  0x00007fffe12573de: mov     0x20(%rsp),%r11d
  0x00007fffe12573e3: mov     %r11d,0xc(%rsp)
  0x00007fffe12573e8: nop
  0x00007fffe12573e9: nop
  0x00007fffe12573ea: nop
  0x00007fffe12573eb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [24]=NarrowOop [28]=NarrowOop [32]=NarrowOop off=3280}
                                                ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe12573f0: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B91: #	N1319 &lt;- B71  Freq: 9.99987e-11

  0x00007fffe12573f5: mov     $0xffffffbd,%esi
  0x00007fffe12573fa: mov     0x1c(%rsp),%r11d
  0x00007fffe12573ff: mov     %r11d,0x4(%rsp)
  0x00007fffe1257404: mov     0x20(%rsp),%r11d
  0x00007fffe1257409: mov     %r11d,0xc(%rsp)
  0x00007fffe125740e: mov     %rax,0x20(%rsp)
  0x00007fffe1257413: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [12]=NarrowOop [16]=NarrowOop [32]=Oop [48]=Oop [56]=Oop off=3320}
                                                ;*astore
                                                ; - java.nio.charset.CharsetEncoder::encode@65 (line 580)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257418: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  ;; B92: #	N1319 &lt;- B71  Freq: 9.99987e-11

  0x00007fffe125741d: mov     $0xffffffbd,%esi
  0x00007fffe1257422: mov     0x1c(%rsp),%r8d
  0x00007fffe1257427: mov     %r8d,0x4(%rsp)
  0x00007fffe125742c: mov     0x20(%rsp),%r8d
  0x00007fffe1257431: mov     %r8d,0xc(%rsp)
  0x00007fffe1257436: mov     %rax,0x20(%rsp)
  0x00007fffe125743b: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [12]=NarrowOop [16]=NarrowOop [32]=Oop [48]=Oop [56]=Oop off=3360}
                                                ;*astore
                                                ; - java.nio.charset.CharsetEncoder::encode@77 (line 582)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257440: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; - java.io.BufferedWriter::flushBuffer@34 (line 129)
                                                ;   {runtime_call}
  0x00007fffe1257445: hlt
  0x00007fffe1257446: hlt
  0x00007fffe1257447: hlt
  0x00007fffe1257448: hlt
  0x00007fffe1257449: hlt
  0x00007fffe125744a: hlt
  0x00007fffe125744b: hlt
  0x00007fffe125744c: hlt
  0x00007fffe125744d: hlt
  0x00007fffe125744e: hlt
  0x00007fffe125744f: hlt
  0x00007fffe1257450: hlt
  0x00007fffe1257451: hlt
  0x00007fffe1257452: hlt
  0x00007fffe1257453: hlt
  0x00007fffe1257454: hlt
  0x00007fffe1257455: hlt
  0x00007fffe1257456: hlt
  0x00007fffe1257457: hlt
  0x00007fffe1257458: hlt
  0x00007fffe1257459: hlt
  0x00007fffe125745a: hlt
  0x00007fffe125745b: hlt
  0x00007fffe125745c: hlt
  0x00007fffe125745d: hlt
  0x00007fffe125745e: hlt
  0x00007fffe125745f: hlt
[Stub Code]
  0x00007fffe1257460: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe125746a: jmpq    0x7fffe125746a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe125746f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe1257474: callq   0x7fffe1257479
  0x00007fffe1257479: subq    $0x5,(%rsp)
  0x00007fffe125747e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1257483: hlt
  0x00007fffe1257484: hlt
  0x00007fffe1257485: hlt
  0x00007fffe1257486: hlt
  0x00007fffe1257487: hlt
<nmethod compile_id='93' compiler='C2' level='4' entry='0x00007fffe1256720' size='8384' address='0x00007fffe1256550' relocation_offset='304' insts_offset='464' stub_offset='3856' scopes_data_offset='4088' scopes_pcs_offset='6352' dependencies_offset='8192' handler_table_offset='8216' nul_chk_table_offset='8312' method='java/io/BufferedWriter flushBuffer ()V' bytes='53' count='43432' iicount='43432' stamp='119.093'/>
<make_not_entrant thread='140736956679936' compile_id='43' compiler='C1' level='2' stamp='119.094'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe1255b50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1255ce0 Code size: 0x00000248
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c30958} &apos;encode&apos; &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;&apos; in &apos;java/nio/charset/CharsetEncoder&apos;
  # this:     rsi:rsi   = &apos;java/nio/charset/CharsetEncoder&apos;
  # parm0:    rdx:rdx   = &apos;java/nio/CharBuffer&apos;
  # parm1:    rcx:rcx   = &apos;java/nio/ByteBuffer&apos;
  # parm2:    r8        = boolean
  #           [sp+0x60]  (sp of caller)
  ;; N327: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1255ce0: mov     0x8(%rsi),%r10d
  0x00007fffe1255ce4: shl     $0x3,%r10
  0x00007fffe1255ce8: cmp     %r10,%rax
  0x00007fffe1255ceb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1255cf1: nop
  0x00007fffe1255cf2: nop
  0x00007fffe1255cf3: nop
  0x00007fffe1255cf4: nop
  0x00007fffe1255cf5: nop
  0x00007fffe1255cf6: nop
  0x00007fffe1255cf7: nop
  0x00007fffe1255cf8: nop
  0x00007fffe1255cf9: nop
  0x00007fffe1255cfa: nop
  0x00007fffe1255cfb: nop
  0x00007fffe1255cfc: nop
  0x00007fffe1255cfd: nop
  0x00007fffe1255cfe: nop
  0x00007fffe1255cff: nop
[Verified Entry Point]
  ;; B1: #	B18 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1255d00: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1255d07: push    %rbp
  0x00007fffe1255d08: sub     $0x50,%rsp        ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)

  0x00007fffe1255d0c: mov     %rsi,(%rsp)
  0x00007fffe1255d10: test    %r8d,%r8d
  0x00007fffe1255d13: jne     0x7fffe1255dc1    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@1 (line 569)

  ;; B2: #	B19 B3 &lt;- B1  Freq: 1

  0x00007fffe1255d19: mov     0x14(%rsi),%ebp   ;*getfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@12 (line 570)

  0x00007fffe1255d1c: test    %ebp,%ebp
  0x00007fffe1255d1e: je      0x7fffe1255de5    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)

  ;; B3: #	B20 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe1255d24: cmp     $0x1,%ebp
  0x00007fffe1255d27: jne     0x7fffe1255e01    ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)

  ;; B4: #	B25 B5 &lt;- B3  Freq: 0.999999

  0x00007fffe1255d2d: movl    $0x1,0x14(%rsi)   ;*putfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@51 (line 573)

  0x00007fffe1255d34: mov     %rdx,0x8(%rsp)
  0x00007fffe1255d39: mov     0x2c(%rdx),%ebp   ;*getfield hb
                                                ; - java.nio.CharBuffer::hasArray@1 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; implicit exception: dispatches to 0x00007fffe1255e6c
  ;; B5: #	B21 B6 &lt;- B4  Freq: 0.999998

  0x00007fffe1255d3c: test    %ebp,%ebp
  0x00007fffe1255d3e: je      0x7fffe1255e1d    ;*ifnull
                                                ; - java.nio.CharBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  ;; B6: #	B15 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe1255d44: movzbl  0x28(%rdx),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.CharBuffer::hasArray@8 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  0x00007fffe1255d48: test    %ebp,%ebp
  0x00007fffe1255d4a: jne     0x7fffe1255d88    ;*ifne
                                                ; - java.nio.CharBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  ;; B7: #	B26 B8 &lt;- B6  Freq: 0.999997

  0x00007fffe1255d4c: mov     %rcx,0x10(%rsp)
  0x00007fffe1255d51: mov     0x2c(%rcx),%ebp   ;*getfield hb
                                                ; - java.nio.ByteBuffer::hasArray@1 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; implicit exception: dispatches to 0x00007fffe1255e89
  ;; B8: #	B22 B9 &lt;- B7  Freq: 0.999996

  0x00007fffe1255d54: test    %ebp,%ebp
  0x00007fffe1255d56: je      0x7fffe1255e31    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  ;; B9: #	B16 B10 &lt;- B8  Freq: 0.999995

  0x00007fffe1255d5c: movzbl  0x28(%rcx),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::hasArray@8 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  0x00007fffe1255d60: test    %ebp,%ebp
  0x00007fffe1255d62: jne     0x7fffe1255d9d    ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  ;; B10: #	B24 B11 &lt;- B9  Freq: 0.999995

  0x00007fffe1255d64: nop
  0x00007fffe1255d65: nop
  0x00007fffe1255d66: nop
  0x00007fffe1255d67: callq   0x7fffe1105e80    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=140}
                                                ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {optimized virtual_call}
  ;; B11: #	B27 B12 &lt;- B10  Freq: 0.999975

  0x00007fffe1255d6c: mov     0xc(%rax),%ebp    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isOverflow@1 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; implicit exception: dispatches to 0x00007fffe1255ea1
  ;; B12: #	B23 B13 &lt;- B11  Freq: 0.999974

  0x00007fffe1255d6f: cmp     $0x1,%ebp
  0x00007fffe1255d72: je      0x7fffe1255e41    ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)

  ;; B13: #	B17 B14 &lt;- B12  Freq: 0.999973

  0x00007fffe1255d78: test    %ebp,%ebp
  0x00007fffe1255d7a: jne     0x7fffe1255dad    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)

  ;; B14: #	N327 &lt;- B13  Freq: 0.999973

  0x00007fffe1255d7c: add     $0x50,%rsp
  0x00007fffe1255d80: pop     %rbp
  0x00007fffe1255d81: test    %eax,0x16da5279(%rip)  ;   {poll_return}
  0x00007fffe1255d87: retq                      ;*ifne
                                                ; - java.nio.CharBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)

  ;; B15: #	N327 &lt;- B6  Freq: 4.99999e-07

  0x00007fffe1255d88: mov     $0xffffff65,%esi
  0x00007fffe1255d8d: mov     %rcx,0x28(%rsp)
  0x00007fffe1255d92: nop
  0x00007fffe1255d93: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [40]=Oop off=184}
                                                ;*ifne
                                                ; - java.nio.CharBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  0x00007fffe1255d98: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B16: #	N327 &lt;- B9  Freq: 4.99998e-07

  0x00007fffe1255d9d: mov     $0xffffff65,%esi
  0x00007fffe1255da2: nop
  0x00007fffe1255da3: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=200}
                                                ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  0x00007fffe1255da8: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B17: #	N327 &lt;- B13  Freq: 4.99987e-07

  0x00007fffe1255dad: mov     $0xffffff65,%esi
  0x00007fffe1255db2: mov     %rax,0x18(%rsp)
  0x00007fffe1255db7: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=Oop off=220}
                                                ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ;   {runtime_call}
  0x00007fffe1255dbc: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ;   {runtime_call}
  ;; B18: #	N327 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe1255dc1: mov     $0xffffff65,%esi
  0x00007fffe1255dc6: mov     (%rsp),%rbp
  0x00007fffe1255dca: mov     %rdx,(%rsp)
  0x00007fffe1255dce: mov     %rcx,0x8(%rsp)
  0x00007fffe1255dd3: mov     %r8d,0x14(%rsp)
  0x00007fffe1255dd8: nop
  0x00007fffe1255dd9: nop
  0x00007fffe1255dda: nop
  0x00007fffe1255ddb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [8]=Oop off=256}
                                                ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@1 (line 569)
                                                ;   {runtime_call}
  0x00007fffe1255de0: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@1 (line 569)
                                                ;   {runtime_call}
  ;; B19: #	N327 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe1255de5: mov     $0xffffff65,%esi
  0x00007fffe1255dea: mov     %rdx,0x8(%rsp)
  0x00007fffe1255def: mov     %rcx,0x10(%rsp)
  0x00007fffe1255df4: nop
  0x00007fffe1255df5: nop
  0x00007fffe1255df6: nop
  0x00007fffe1255df7: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=284}
                                                ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ;   {runtime_call}
  0x00007fffe1255dfc: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ;   {runtime_call}
  ;; B20: #	N327 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe1255e01: mov     $0xffffff65,%esi
  0x00007fffe1255e06: mov     %rdx,0x8(%rsp)
  0x00007fffe1255e0b: mov     %rcx,0x10(%rsp)
  0x00007fffe1255e10: nop
  0x00007fffe1255e11: nop
  0x00007fffe1255e12: nop
  0x00007fffe1255e13: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=312}
                                                ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)
                                                ;   {runtime_call}
  0x00007fffe1255e18: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.CharBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B21: #	N327 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe1255e1d: mov     $0xffffff65,%esi
  0x00007fffe1255e22: mov     %rcx,0x28(%rsp)
  0x00007fffe1255e27: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [40]=Oop off=332}
                                                ;*ifnull
                                                ; - java.nio.CharBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  0x00007fffe1255e2c: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B22: #	N327 &lt;- B8  Freq: 4.76835e-07

  0x00007fffe1255e31: mov     $0xffffff65,%esi
  0x00007fffe1255e36: nop
  0x00007fffe1255e37: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [16]=Oop off=348}
                                                ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  0x00007fffe1255e3c: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B23: #	N327 &lt;- B12  Freq: 4.76825e-07

  0x00007fffe1255e41: mov     $0xffffff65,%esi
  0x00007fffe1255e46: mov     %rax,0x18(%rsp)
  0x00007fffe1255e4b: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=Oop off=368}
                                                ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ;   {runtime_call}
  0x00007fffe1255e50: callq   0x7ffff736b4ea    ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B24: #	B28 B30 B29 &lt;- B10  Freq: 9.99995e-06

  0x00007fffe1255e55: mov     (%rsp),%rbp
  0x00007fffe1255e59: pushq   0x8(%rsp)
  0x00007fffe1255e5e: popq    (%rsp)
  0x00007fffe1255e62: mov     %rax,%rsi
  0x00007fffe1255e65: nop
  0x00007fffe1255e66: nop
  0x00007fffe1255e67: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [0]=Oop [16]=Oop off=396}
                                                ;*invokevirtual encodeLoop
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B25: #	N327 &lt;- B4  Freq: 1.01328e-06

  0x00007fffe1255e6c: mov     $0xfffffff6,%esi
  0x00007fffe1255e71: mov     (%rsp),%rbp
  0x00007fffe1255e75: mov     %rdx,(%rsp)
  0x00007fffe1255e79: mov     %rcx,0x8(%rsp)
  0x00007fffe1255e7e: nop
  0x00007fffe1255e7f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [8]=Oop off=420}
                                                ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@1 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  0x00007fffe1255e84: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B26: #	N327 &lt;- B7  Freq: 1.01328e-06

  0x00007fffe1255e89: mov     $0xfffffff6,%esi
  0x00007fffe1255e8e: mov     (%rsp),%rbp
  0x00007fffe1255e92: mov     %rdx,(%rsp)
  0x00007fffe1255e96: nop
  0x00007fffe1255e97: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [16]=Oop off=444}
                                                ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  0x00007fffe1255e9c: callq   0x7ffff736b4ea    ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ;   {runtime_call}
  ;; B27: #	N327 &lt;- B11  Freq: 1.01325e-06

  0x00007fffe1255ea1: mov     $0xfffffff6,%esi
  0x00007fffe1255ea6: mov     (%rsp),%rbp
  0x00007fffe1255eaa: pushq   0x8(%rsp)
  0x00007fffe1255eaf: popq    (%rsp)
  0x00007fffe1255eb3: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [16]=Oop off=472}
                                                ;*invokevirtual isOverflow
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ;   {runtime_call}
  0x00007fffe1255eb8: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B28: #	N327 &lt;- B24  Freq: 9.99995e-11

  0x00007fffe1255ebd: mov     %rax,%rsi
  0x00007fffe1255ec0: add     $0x50,%rsp
  0x00007fffe1255ec4: pop     %rbp
  0x00007fffe1255ec5: jmpq    0x7fffe11657a0    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ;   {runtime_call}
  ;; B29: #	N327 &lt;- B24  Freq: 9.99995e-11

  0x00007fffe1255eca: mov     $0xffffffbd,%esi
  0x00007fffe1255ecf: mov     %rax,%rbp
  0x00007fffe1255ed2: nop
  0x00007fffe1255ed3: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=504}
                                                ;*astore
                                                ; - java.nio.charset.CharsetEncoder::encode@77 (line 582)
                                                ;   {runtime_call}
  0x00007fffe1255ed8: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ;   {runtime_call}
  ;; B30: #	N327 &lt;- B24  Freq: 9.99995e-11

  0x00007fffe1255edd: mov     $0xffffffbd,%esi
  0x00007fffe1255ee2: mov     %rax,%rbp
  0x00007fffe1255ee5: nop
  0x00007fffe1255ee6: nop
  0x00007fffe1255ee7: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=524}
                                                ;*astore
                                                ; - java.nio.charset.CharsetEncoder::encode@65 (line 580)
                                                ;   {runtime_call}
  0x00007fffe1255eec: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ;   {runtime_call}
  0x00007fffe1255ef1: hlt
  0x00007fffe1255ef2: hlt
  0x00007fffe1255ef3: hlt
  0x00007fffe1255ef4: hlt
  0x00007fffe1255ef5: hlt
  0x00007fffe1255ef6: hlt
  0x00007fffe1255ef7: hlt
  0x00007fffe1255ef8: hlt
  0x00007fffe1255ef9: hlt
  0x00007fffe1255efa: hlt
  0x00007fffe1255efb: hlt
  0x00007fffe1255efc: hlt
  0x00007fffe1255efd: hlt
  0x00007fffe1255efe: hlt
  0x00007fffe1255eff: hlt
[Stub Code]
  0x00007fffe1255f00: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe1255f0a: jmpq    0x7fffe1255f0a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1255f0f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe1255f14: callq   0x7fffe1255f19
  0x00007fffe1255f19: subq    $0x5,(%rsp)
  0x00007fffe1255f1e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1255f23: hlt
  0x00007fffe1255f24: hlt
  0x00007fffe1255f25: hlt
  0x00007fffe1255f26: hlt
  0x00007fffe1255f27: hlt
<nmethod compile_id='94' compiler='C2' level='4' entry='0x00007fffe1255ce0' size='2488' address='0x00007fffe1255b50' relocation_offset='304' insts_offset='400' stub_offset='944' scopes_data_offset='1064' scopes_pcs_offset='1584' dependencies_offset='2368' handler_table_offset='2384' nul_chk_table_offset='2456' method='java/nio/charset/CharsetEncoder encode (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;' bytes='285' count='43435' iicount='43435' stamp='119.112'/>
<make_not_entrant thread='140736955627264' compile_id='31' compiler='C1' level='2' stamp='119.112'/>
<writer thread='140737327351552'/>
<task_queued compile_id='96' method='sun/nio/cs/UTF_8$Encoder encodeLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='28' count='43435' iicount='43435' stamp='119.112' comment='tiered' hot_count='43435'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe124ef90:
Code:
Argument 0 is unknown.RIP: 0x7fffe124f180 Code size: 0x00000650
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2aea0} &apos;write&apos; &apos;([CII)V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  # this:     rsi:rsi   = &apos;sun/nio/cs/StreamEncoder&apos;
  # parm0:    rdx:rdx   = &apos;[C&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0xa0]  (sp of caller)
  ;;  block B19 [0, 0]

  0x00007fffe124f180: mov     0x8(%rsi),%r10d
  0x00007fffe124f184: shl     $0x3,%r10
  0x00007fffe124f188: cmp     %rax,%r10
  0x00007fffe124f18b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124f191: nop
  0x00007fffe124f192: nop
  0x00007fffe124f193: nop
  0x00007fffe124f194: nop
  0x00007fffe124f195: nop
  0x00007fffe124f196: nop
  0x00007fffe124f197: nop
  0x00007fffe124f198: nop
  0x00007fffe124f199: nop
  0x00007fffe124f19a: nop
  0x00007fffe124f19b: nop
  0x00007fffe124f19c: nop
  0x00007fffe124f19d: nop
  0x00007fffe124f19e: nop
  0x00007fffe124f19f: nop
[Verified Entry Point]
  0x00007fffe124f1a0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124f1a7: push    %rbp
  0x00007fffe124f1a8: sub     $0x90,%rsp
  0x00007fffe124f1af: movabs  $0x7ffff4d710b8,%rax
  0x00007fffe124f1b9: mov     0x8(%rax),%edi
  0x00007fffe124f1bc: add     $0x8,%edi
  0x00007fffe124f1bf: mov     %edi,0x8(%rax)
  0x00007fffe124f1c2: movabs  $0x7ffff4c2aea0,%rax  ;   {metadata({method} {0x00007ffff4c2aea0} &apos;write&apos; &apos;([CII)V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;)}
  0x00007fffe124f1cc: and     $0x3ff8,%edi
  0x00007fffe124f1d2: cmp     $0x0,%edi
  ;;   26 branch [EQ] [CounterOverflowStub: 0x00007fffa82e2310]
  0x00007fffe124f1d5: je      0x7fffe124f4f0    ;*aload_0
                                                ; - sun.nio.cs.StreamEncoder::write@0 (line 117)

  ;;  block B20 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe124f1db: mov     0x10(%rsi),%edi
  0x00007fffe124f1de: push    %r10
  0x00007fffe124f1e0: cmp     0x16b0a9f9(%rip),%r12  ;   {external_word}
  0x00007fffe124f1e7: je      0x7fffe124f264
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124f1ed: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124f1f2: sub     $0x80,%rsp
  0x00007fffe124f1f9: mov     %rax,0x78(%rsp)
  0x00007fffe124f1fe: mov     %rcx,0x70(%rsp)
  0x00007fffe124f203: mov     %rdx,0x68(%rsp)
  0x00007fffe124f208: mov     %rbx,0x60(%rsp)
  0x00007fffe124f20d: mov     %rbp,0x50(%rsp)
  0x00007fffe124f212: mov     %rsi,0x48(%rsp)
  0x00007fffe124f217: mov     %rdi,0x40(%rsp)
  0x00007fffe124f21c: mov     %r8,0x38(%rsp)
  0x00007fffe124f221: mov     %r9,0x30(%rsp)
  0x00007fffe124f226: mov     %r10,0x28(%rsp)
  0x00007fffe124f22b: mov     %r11,0x20(%rsp)
  0x00007fffe124f230: mov     %r12,0x18(%rsp)
  0x00007fffe124f235: mov     %r13,0x10(%rsp)
  0x00007fffe124f23a: mov     %r14,0x8(%rsp)
  0x00007fffe124f23f: mov     %r15,(%rsp)
  0x00007fffe124f243: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124f24d: movabs  $0x7fffe124f1ed,%rsi  ;   {internal_word}
  0x00007fffe124f257: mov     %rsp,%rdx
  0x00007fffe124f25a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124f25e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124f263: hlt
  0x00007fffe124f264: pop     %r10              ;*getfield lock
                                                ; - sun.nio.cs.StreamEncoder::write@1 (line 117)

  0x00007fffe124f266: mov     %rdi,0x48(%rsp)
  0x00007fffe124f26b: lea     0x78(%rsp),%rbx
  0x00007fffe124f270: mov     %rdi,0x8(%rbx)
  0x00007fffe124f274: mov     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe124f507
  0x00007fffe124f277: mov     %rax,%r9
  0x00007fffe124f27a: and     $0x7,%r9
  0x00007fffe124f27e: cmp     $0x5,%r9
  0x00007fffe124f282: jne     0x7fffe124f30c
  0x00007fffe124f288: mov     0x8(%rdi),%r9d
  0x00007fffe124f28c: shl     $0x3,%r9
  0x00007fffe124f290: mov     0xb0(%r9),%r9
  0x00007fffe124f297: or      %r15,%r9
  0x00007fffe124f29a: xor     %rax,%r9
  0x00007fffe124f29d: and     $0xffffffffffffff87,%r9
  0x00007fffe124f2a1: je      0x7fffe124f334
  0x00007fffe124f2a7: test    $0x7,%r9
  0x00007fffe124f2ae: jne     0x7fffe124f2f8
  0x00007fffe124f2b0: test    $0x300,%r9
  0x00007fffe124f2b7: jne     0x7fffe124f2d6
  0x00007fffe124f2b9: and     $0x37f,%rax
  0x00007fffe124f2c0: mov     %rax,%r9
  0x00007fffe124f2c3: or      %r15,%r9
  0x00007fffe124f2c6: lock cmpxchg %r9,(%rdi)
  0x00007fffe124f2cb: jne     0x7fffe124f583
  0x00007fffe124f2d1: jmpq    0x7fffe124f334
  0x00007fffe124f2d6: mov     0x8(%rdi),%r9d
  0x00007fffe124f2da: shl     $0x3,%r9
  0x00007fffe124f2de: mov     0xb0(%r9),%r9
  0x00007fffe124f2e5: or      %r15,%r9
  0x00007fffe124f2e8: lock cmpxchg %r9,(%rdi)
  0x00007fffe124f2ed: jne     0x7fffe124f583
  0x00007fffe124f2f3: jmpq    0x7fffe124f334
  0x00007fffe124f2f8: mov     0x8(%rdi),%r9d
  0x00007fffe124f2fc: shl     $0x3,%r9
  0x00007fffe124f300: mov     0xb0(%r9),%r9
  0x00007fffe124f307: lock cmpxchg %r9,(%rdi)
  0x00007fffe124f30c: mov     (%rdi),%rax
  0x00007fffe124f30f: or      $0x1,%rax
  0x00007fffe124f313: mov     %rax,(%rbx)
  0x00007fffe124f316: lock cmpxchg %rbx,(%rdi)
  0x00007fffe124f31b: je      0x7fffe124f334
  0x00007fffe124f321: sub     %rsp,%rax
  0x00007fffe124f324: and     $0xfffffffffffff007,%rax
  0x00007fffe124f32b: mov     %rax,(%rbx)
  0x00007fffe124f32e: jne     0x7fffe124f583    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)

  0x00007fffe124f334: movsbl  0x16(%rsi),%eax   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@1 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)

  0x00007fffe124f338: cmp     $0x0,%eax
  ;;   50 branch [EQ] [B17] 
  0x00007fffe124f33b: je      0x7fffe124f441    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)

  ;;  block B18 [17, 13]

  0x00007fffe124f341: cmp     $0x0,%ecx
  ;;   58 branch [LT] [B4] 
  0x00007fffe124f344: jl      0x7fffe124f40c    ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@13 (line 119)

  ;;  block B3 [16, 19]

  0x00007fffe124f34a: mov     0xc(%rdx),%eax    ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; implicit exception: dispatches to 0x00007fffe124f596
  0x00007fffe124f34d: cmp     %eax,%ecx
  ;;   72 branch [GT] [B4] 
  0x00007fffe124f34f: jnle    0x7fffe124f40c    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@19 (line 119)

  ;;  block B5 [22, 23]

  0x00007fffe124f355: cmp     $0x0,%r8d
  ;;   84 branch [LT] [B4] 
  0x00007fffe124f359: jl      0x7fffe124f40c    ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@23 (line 119)

  ;;  block B6 [26, 31]

  0x00007fffe124f35f: mov     %rcx,%rbx
  0x00007fffe124f362: add     %r8d,%ebx
  0x00007fffe124f365: cmp     %eax,%ebx
  ;;  100 branch [GT] [B4] 
  0x00007fffe124f367: jnle    0x7fffe124f40c    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@31 (line 119)

  ;;  block B7 [34, 37]

  0x00007fffe124f36d: cmp     $0x0,%ebx
  ;;  112 branch [LT] [B4] 
  0x00007fffe124f370: jl      0x7fffe124f40c    ;*ifge
                                                ; - sun.nio.cs.StreamEncoder::write@37 (line 119)

  ;;  block B8 [48, 49]

  0x00007fffe124f376: cmp     $0x0,%r8d
  ;;  124 branch [NE] [B10] 
  0x00007fffe124f37a: jne     0x7fffe124f3c0    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::write@49 (line 122)

  ;;  block B9 [52, 55]

  0x00007fffe124f380: lea     0x78(%rsp),%rax
  0x00007fffe124f385: mov     0x8(%rax),%rcx
  0x00007fffe124f389: mov     (%rcx),%rdx
  0x00007fffe124f38c: and     $0x7,%rdx
  0x00007fffe124f390: cmp     $0x5,%rdx
  0x00007fffe124f394: je      0x7fffe124f3b1
  0x00007fffe124f39a: mov     (%rax),%rdx
  0x00007fffe124f39d: test    %rdx,%rdx
  0x00007fffe124f3a0: je      0x7fffe124f3b1
  0x00007fffe124f3a6: lock cmpxchg %rdx,(%rcx)
  0x00007fffe124f3ab: jne     0x7fffe124f612    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@54 (line 123)

  0x00007fffe124f3b1: add     $0x90,%rsp
  0x00007fffe124f3b8: pop     %rbp
  0x00007fffe124f3b9: test    %eax,0x16dabd41(%rip)  ;   {poll_return}
  0x00007fffe124f3bf: retq                      ;*return
                                                ; - sun.nio.cs.StreamEncoder::write@55 (line 123)

  ;;  block B10 [56, 77]

  0x00007fffe124f3c0: nop
  0x00007fffe124f3c1: nop
  0x00007fffe124f3c2: nop
  0x00007fffe124f3c3: nop
  0x00007fffe124f3c4: nop
  0x00007fffe124f3c5: nop
  0x00007fffe124f3c6: nop
  0x00007fffe124f3c7: callq   0x7fffe1105e80    ; OopMap{[72]=Oop [128]=Oop off=588}
                                                ;*invokevirtual implWrite
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ;   {optimized virtual_call}
  0x00007fffe124f3cc: lea     0x78(%rsp),%rax
  0x00007fffe124f3d1: mov     0x8(%rax),%rsi
  0x00007fffe124f3d5: mov     (%rsi),%rdx
  0x00007fffe124f3d8: and     $0x7,%rdx
  0x00007fffe124f3dc: cmp     $0x5,%rdx
  0x00007fffe124f3e0: je      0x7fffe124f3fd
  0x00007fffe124f3e6: mov     (%rax),%rdx
  0x00007fffe124f3e9: test    %rdx,%rdx
  0x00007fffe124f3ec: je      0x7fffe124f3fd
  0x00007fffe124f3f2: lock cmpxchg %rdx,(%rsi)
  0x00007fffe124f3f7: jne     0x7fffe124f625    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@65 (line 126)

  0x00007fffe124f3fd: add     $0x90,%rsp
  0x00007fffe124f404: pop     %rbp
  0x00007fffe124f405: test    %eax,0x16dabcf5(%rip)  ;   {poll_return}
  0x00007fffe124f40b: retq                      ;*return
                                                ; - sun.nio.cs.StreamEncoder::write@77 (line 127)

  ;;  block B4 [40, 47]

  ;;  156 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:40]
  0x00007fffe124f40c: nop
  0x00007fffe124f40d: nop
  0x00007fffe124f40e: nop
  0x00007fffe124f40f: nop
  0x00007fffe124f410: jmpq    0x7fffe124f647    ;   {no_reloc}
  0x00007fffe124f415: add     %al,(%rax)
  0x00007fffe124f417: add     %al,(%rax)
  0x00007fffe124f419: add     %ch,%cl
  0x00007fffe124f41b: xor     (%rdx),%al
  0x00007fffe124f41d: add     %al,(%rax)        ;*new  ; - sun.nio.cs.StreamEncoder::write@40 (line 121)

  0x00007fffe124f41f: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::write@44 (line 121)

  0x00007fffe124f422: mov     %rax,0x50(%rsp)
  0x00007fffe124f427: callq   0x7fffe1105e80    ; OopMap{[72]=Oop [80]=Oop [128]=Oop off=684}
                                                ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::write@44 (line 121)
                                                ;   {optimized virtual_call}
  0x00007fffe124f42c: mov     0x50(%rsp),%rax   ; OopMap{[72]=Oop [128]=Oop rax=Oop off=689}
                                                ;*athrow
                                                ; - sun.nio.cs.StreamEncoder::write@47 (line 121)

  0x00007fffe124f431: movabs  $0x7fffe124f431,%rdx  ;   {section_word}
  0x00007fffe124f43b: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe124f440: nop                       ;*athrow
                                                ; - sun.nio.cs.StreamEncoder::write@47 (line 121)

  ;;  block B17 [7, 16]

  0x00007fffe124f441: mov     %r8d,0x74(%rsp)
  0x00007fffe124f446: mov     %ecx,0x70(%rsp)
  0x00007fffe124f44a: mov     %rdx,0x68(%rsp)
  0x00007fffe124f44f: mov     %rsi,0x60(%rsp)
  ;;  174 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe124f454: nop
  0x00007fffe124f455: nop
  0x00007fffe124f456: nop
  0x00007fffe124f457: nop
  0x00007fffe124f458: jmpq    0x7fffe124f66d    ;   {no_reloc}
  0x00007fffe124f45d: add     %al,(%rax)
  0x00007fffe124f45f: add     %al,(%rax)
  0x00007fffe124f461: add     %ch,%cl
  0x00007fffe124f463: adc     %al,(%rdx)
  0x00007fffe124f465: add     %al,(%rax)        ;*new  ; - sun.nio.cs.StreamEncoder::ensureOpen@7 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)

  0x00007fffe124f467: movabs  $0xd74bd758,%rdx  ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe124f471: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@13 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)

  0x00007fffe124f474: mov     %rax,0x58(%rsp)
  0x00007fffe124f479: nop
  0x00007fffe124f47a: nop
  0x00007fffe124f47b: nop
  0x00007fffe124f47c: nop
  0x00007fffe124f47d: nop
  0x00007fffe124f47e: nop
  0x00007fffe124f47f: callq   0x7fffe1105e80    ; OopMap{[96]=Oop [88]=Oop [104]=Oop [72]=Oop [128]=Oop off=772}
                                                ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@13 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ;   {optimized virtual_call}
  0x00007fffe124f484: mov     0x58(%rsp),%rax   ; OopMap{[96]=Oop [104]=Oop [72]=Oop [128]=Oop rax=Oop off=777}
                                                ;*athrow
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@16 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)

  0x00007fffe124f489: movabs  $0x7fffe124f489,%rdx  ;   {section_word}
  0x00007fffe124f493: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe124f498: nop                       ;*athrow
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@16 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)

  ;;  block B1 [69, 76]

  0x00007fffe124f499: mov     0x348(%r15),%rax
  0x00007fffe124f4a0: xor     %r10,%r10
  0x00007fffe124f4a3: mov     %r10,0x348(%r15)
  0x00007fffe124f4aa: xor     %r10,%r10
  0x00007fffe124f4ad: mov     %r10,0x350(%r15)
  0x00007fffe124f4b4: mov     %rax,%rsi
  0x00007fffe124f4b7: lea     0x78(%rsp),%rax
  0x00007fffe124f4bc: mov     0x8(%rax),%rbx
  0x00007fffe124f4c0: mov     (%rbx),%rdi
  0x00007fffe124f4c3: and     $0x7,%rdi
  0x00007fffe124f4c7: cmp     $0x5,%rdi
  0x00007fffe124f4cb: je      0x7fffe124f4e8
  0x00007fffe124f4d1: mov     (%rax),%rdi
  0x00007fffe124f4d4: test    %rdi,%rdi
  0x00007fffe124f4d7: je      0x7fffe124f4e8
  0x00007fffe124f4dd: lock cmpxchg %rdi,(%rbx)
  0x00007fffe124f4e2: jne     0x7fffe124f684    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@73 (line 126)

  0x00007fffe124f4e8: mov     %rsi,%rax
  0x00007fffe124f4eb: jmpq    0x7fffe124f6c2
  ;; CounterOverflowStub slow case
  0x00007fffe124f4f0: mov     %rax,0x8(%rsp)
  0x00007fffe124f4f5: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124f4fd: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop off=898}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::write@-1 (line 117)
                                                ;   {runtime_call}
  0x00007fffe124f502: jmpq    0x7fffe124f1db
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124f507: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop rdi=Oop [72]=Oop off=908}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ;   {runtime_call}
  0x00007fffe124f50c: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124f511: sub     $0x80,%rsp
  0x00007fffe124f518: mov     %rax,0x78(%rsp)
  0x00007fffe124f51d: mov     %rcx,0x70(%rsp)
  0x00007fffe124f522: mov     %rdx,0x68(%rsp)
  0x00007fffe124f527: mov     %rbx,0x60(%rsp)
  0x00007fffe124f52c: mov     %rbp,0x50(%rsp)
  0x00007fffe124f531: mov     %rsi,0x48(%rsp)
  0x00007fffe124f536: mov     %rdi,0x40(%rsp)
  0x00007fffe124f53b: mov     %r8,0x38(%rsp)
  0x00007fffe124f540: mov     %r9,0x30(%rsp)
  0x00007fffe124f545: mov     %r10,0x28(%rsp)
  0x00007fffe124f54a: mov     %r11,0x20(%rsp)
  0x00007fffe124f54f: mov     %r12,0x18(%rsp)
  0x00007fffe124f554: mov     %r13,0x10(%rsp)
  0x00007fffe124f559: mov     %r14,0x8(%rsp)
  0x00007fffe124f55e: mov     %r15,(%rsp)
  0x00007fffe124f562: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124f56c: movabs  $0x7fffe124f50c,%rsi  ;   {internal_word}
  0x00007fffe124f576: mov     %rsp,%rdx
  0x00007fffe124f579: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124f57d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124f582: hlt
  ;; MonitorEnterStub slow case
  0x00007fffe124f583: mov     %rdi,0x8(%rsp)
  0x00007fffe124f588: mov     %rbx,(%rsp)
  0x00007fffe124f58c: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop rdx=Oop rdi=Oop [72]=Oop [128]=Oop off=1041}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ;   {runtime_call}
  0x00007fffe124f591: jmpq    0x7fffe124f334
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124f596: callq   0x7fffe11670a0    ; OopMap{rdi=Oop [72]=Oop rdx=Oop rsi=Oop [128]=Oop off=1051}
                                                ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ;   {runtime_call}
  0x00007fffe124f59b: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124f5a0: sub     $0x80,%rsp
  0x00007fffe124f5a7: mov     %rax,0x78(%rsp)
  0x00007fffe124f5ac: mov     %rcx,0x70(%rsp)
  0x00007fffe124f5b1: mov     %rdx,0x68(%rsp)
  0x00007fffe124f5b6: mov     %rbx,0x60(%rsp)
  0x00007fffe124f5bb: mov     %rbp,0x50(%rsp)
  0x00007fffe124f5c0: mov     %rsi,0x48(%rsp)
  0x00007fffe124f5c5: mov     %rdi,0x40(%rsp)
  0x00007fffe124f5ca: mov     %r8,0x38(%rsp)
  0x00007fffe124f5cf: mov     %r9,0x30(%rsp)
  0x00007fffe124f5d4: mov     %r10,0x28(%rsp)
  0x00007fffe124f5d9: mov     %r11,0x20(%rsp)
  0x00007fffe124f5de: mov     %r12,0x18(%rsp)
  0x00007fffe124f5e3: mov     %r13,0x10(%rsp)
  0x00007fffe124f5e8: mov     %r14,0x8(%rsp)
  0x00007fffe124f5ed: mov     %r15,(%rsp)
  0x00007fffe124f5f1: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124f5fb: movabs  $0x7fffe124f59b,%rsi  ;   {internal_word}
  0x00007fffe124f605: mov     %rsp,%rdx
  0x00007fffe124f608: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124f60c: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124f611: hlt
  ;; MonitorExitStub slow case
  0x00007fffe124f612: lea     0x78(%rsp),%rax
  0x00007fffe124f617: mov     %rax,(%rsp)
  0x00007fffe124f61b: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124f620: jmpq    0x7fffe124f3b1
  ;; MonitorExitStub slow case
  0x00007fffe124f625: lea     0x78(%rsp),%rax
  0x00007fffe124f62a: mov     %rax,(%rsp)
  0x00007fffe124f62e: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124f633: jmpq    0x7fffe124f3fd
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124f638: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124f642: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124f647: callq   0x7fffe11fc960    ; OopMap{[72]=Oop [128]=Oop off=1228}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::write@40 (line 121)
                                                ;   {runtime_call}
  0x00007fffe124f64c: jmpq    0x7fffe124f410
  ;; NewInstanceStub slow case
  0x00007fffe124f651: mov     %rdx,%rdx
  0x00007fffe124f654: callq   0x7fffe11668a0    ; OopMap{[72]=Oop [128]=Oop off=1241}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::write@40 (line 121)
                                                ;   {runtime_call}
  0x00007fffe124f659: jmpq    0x7fffe124f41f
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe124f65e: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe124f668: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe124f66d: callq   0x7fffe11fc960    ; OopMap{[72]=Oop [96]=Oop [104]=Oop [128]=Oop off=1266}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::ensureOpen@7 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ;   {runtime_call}
  0x00007fffe124f672: jmpq    0x7fffe124f458
  ;; NewInstanceStub slow case
  0x00007fffe124f677: mov     %rdx,%rdx
  0x00007fffe124f67a: callq   0x7fffe11668a0    ; OopMap{[72]=Oop [96]=Oop [104]=Oop [128]=Oop off=1279}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::ensureOpen@7 (line 45)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ;   {runtime_call}
  0x00007fffe124f67f: jmpq    0x7fffe124f467
  ;; MonitorExitStub slow case
  0x00007fffe124f684: lea     0x78(%rsp),%rax
  0x00007fffe124f689: mov     %rax,(%rsp)
  0x00007fffe124f68d: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe124f692: jmpq    0x7fffe124f4e8
  0x00007fffe124f697: nop
  0x00007fffe124f698: nop
  ;; Unwind handler
  0x00007fffe124f699: mov     0x348(%r15),%rax
  0x00007fffe124f6a0: movabs  $0x0,%r10
  0x00007fffe124f6aa: mov     %r10,0x348(%r15)
  0x00007fffe124f6b1: movabs  $0x0,%r10
  0x00007fffe124f6bb: mov     %r10,0x350(%r15)
  0x00007fffe124f6c2: add     $0x90,%rsp
  0x00007fffe124f6c9: pop     %rbp
  0x00007fffe124f6ca: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe124f6cf: hlt
  0x00007fffe124f6d0: hlt
  0x00007fffe124f6d1: hlt
  0x00007fffe124f6d2: hlt
  0x00007fffe124f6d3: hlt
  0x00007fffe124f6d4: hlt
  0x00007fffe124f6d5: hlt
  0x00007fffe124f6d6: hlt
  0x00007fffe124f6d7: hlt
  0x00007fffe124f6d8: hlt
  0x00007fffe124f6d9: hlt
  0x00007fffe124f6da: hlt
  0x00007fffe124f6db: hlt
  0x00007fffe124f6dc: hlt
  0x00007fffe124f6dd: hlt
  0x00007fffe124f6de: hlt
  0x00007fffe124f6df: hlt
[Stub Code]
  0x00007fffe124f6e0: nop                       ;   {no_reloc}
  0x00007fffe124f6e1: nop
  0x00007fffe124f6e2: nop
  0x00007fffe124f6e3: nop
  0x00007fffe124f6e4: nop
  0x00007fffe124f6e5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124f6ef: jmpq    0x7fffe124f6ef    ;   {runtime_call}
  0x00007fffe124f6f4: nop
  0x00007fffe124f6f5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124f6ff: jmpq    0x7fffe124f6ff    ;   {runtime_call}
  0x00007fffe124f704: nop
  0x00007fffe124f705: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124f70f: jmpq    0x7fffe124f70f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe124f714: movabs  $0xdead,%rbx
  0x00007fffe124f71e: movabs  $0xdead,%rcx
  0x00007fffe124f728: movabs  $0xdead,%rsi
  0x00007fffe124f732: movabs  $0xdead,%rdi
  0x00007fffe124f73c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124f741: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124f746: sub     $0x80,%rsp
  0x00007fffe124f74d: mov     %rax,0x78(%rsp)
  0x00007fffe124f752: mov     %rcx,0x70(%rsp)
  0x00007fffe124f757: mov     %rdx,0x68(%rsp)
  0x00007fffe124f75c: mov     %rbx,0x60(%rsp)
  0x00007fffe124f761: mov     %rbp,0x50(%rsp)
  0x00007fffe124f766: mov     %rsi,0x48(%rsp)
  0x00007fffe124f76b: mov     %rdi,0x40(%rsp)
  0x00007fffe124f770: mov     %r8,0x38(%rsp)
  0x00007fffe124f775: mov     %r9,0x30(%rsp)
  0x00007fffe124f77a: mov     %r10,0x28(%rsp)
  0x00007fffe124f77f: mov     %r11,0x20(%rsp)
  0x00007fffe124f784: mov     %r12,0x18(%rsp)
  0x00007fffe124f789: mov     %r13,0x10(%rsp)
  0x00007fffe124f78e: mov     %r14,0x8(%rsp)
  0x00007fffe124f793: mov     %r15,(%rsp)
  0x00007fffe124f797: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124f7a1: movabs  $0x7fffe124f741,%rsi  ;   {internal_word}
  0x00007fffe124f7ab: mov     %rsp,%rdx
  0x00007fffe124f7ae: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124f7b2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124f7b7: hlt
[Deopt Handler Code]
  0x00007fffe124f7b8: movabs  $0x7fffe124f7b8,%r10  ;   {section_word}
  0x00007fffe124f7c2: push    %r10
  0x00007fffe124f7c4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124f7c9: hlt
  0x00007fffe124f7ca: hlt
  0x00007fffe124f7cb: hlt
  0x00007fffe124f7cc: hlt
  0x00007fffe124f7cd: hlt
  0x00007fffe124f7ce: hlt
  0x00007fffe124f7cf: hlt
<nmethod compile_id='46' compiler='C1' level='2' entry='0x00007fffe124f180' size='3344' address='0x00007fffe124ef90' relocation_offset='304' insts_offset='496' stub_offset='1872' scopes_data_offset='2136' scopes_pcs_offset='2464' dependencies_offset='3072' handler_table_offset='3080' nul_chk_table_offset='3320' method='sun/nio/cs/StreamEncoder write ([CII)V' bytes='78' count='43432' iicount='43432' stamp='119.129'/>
Decoding compiled method 0x00007fffe124ea90:
Code:
Argument 0 is unknown.RIP: 0x7fffe124ec20 Code size: 0x00000290
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c27ff0} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;java/io/OutputStreamWriter&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe124ec20: mov     0x8(%rsi),%r10d
  0x00007fffe124ec24: shl     $0x3,%r10
  0x00007fffe124ec28: cmp     %rax,%r10
  0x00007fffe124ec2b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124ec31: nop
  0x00007fffe124ec32: nop
  0x00007fffe124ec33: nop
  0x00007fffe124ec34: nop
  0x00007fffe124ec35: nop
  0x00007fffe124ec36: nop
  0x00007fffe124ec37: nop
  0x00007fffe124ec38: nop
  0x00007fffe124ec39: nop
  0x00007fffe124ec3a: nop
  0x00007fffe124ec3b: nop
  0x00007fffe124ec3c: nop
  0x00007fffe124ec3d: nop
  0x00007fffe124ec3e: nop
  0x00007fffe124ec3f: nop
[Verified Entry Point]
  0x00007fffe124ec40: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124ec47: push    %rbp
  0x00007fffe124ec48: sub     $0x30,%rsp
  0x00007fffe124ec4c: movabs  $0x7ffff4d71138,%rdi
  0x00007fffe124ec56: mov     0x8(%rdi),%ebx
  0x00007fffe124ec59: add     $0x8,%ebx
  0x00007fffe124ec5c: mov     %ebx,0x8(%rdi)
  0x00007fffe124ec5f: movabs  $0x7ffff4c27ff0,%rdi  ;   {metadata({method} {0x00007ffff4c27ff0} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;java/io/OutputStreamWriter&apos;)}
  0x00007fffe124ec69: and     $0x3ff8,%ebx
  0x00007fffe124ec6f: cmp     $0x0,%ebx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa81d9cc0]
  0x00007fffe124ec72: je      0x7fffe124ed18    ;*aload_0
                                                ; - java.io.OutputStreamWriter::flushBuffer@0 (line 185)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 7]

  0x00007fffe124ec78: mov     0x14(%rsi),%esi
  0x00007fffe124ec7b: push    %r10
  0x00007fffe124ec7d: cmp     0x16b0af5c(%rip),%r12  ;   {external_word}
  0x00007fffe124ec84: je      0x7fffe124ed01
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe124ec8a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124ec8f: sub     $0x80,%rsp
  0x00007fffe124ec96: mov     %rax,0x78(%rsp)
  0x00007fffe124ec9b: mov     %rcx,0x70(%rsp)
  0x00007fffe124eca0: mov     %rdx,0x68(%rsp)
  0x00007fffe124eca5: mov     %rbx,0x60(%rsp)
  0x00007fffe124ecaa: mov     %rbp,0x50(%rsp)
  0x00007fffe124ecaf: mov     %rsi,0x48(%rsp)
  0x00007fffe124ecb4: mov     %rdi,0x40(%rsp)
  0x00007fffe124ecb9: mov     %r8,0x38(%rsp)
  0x00007fffe124ecbe: mov     %r9,0x30(%rsp)
  0x00007fffe124ecc3: mov     %r10,0x28(%rsp)
  0x00007fffe124ecc8: mov     %r11,0x20(%rsp)
  0x00007fffe124eccd: mov     %r12,0x18(%rsp)
  0x00007fffe124ecd2: mov     %r13,0x10(%rsp)
  0x00007fffe124ecd7: mov     %r14,0x8(%rsp)
  0x00007fffe124ecdc: mov     %r15,(%rsp)
  0x00007fffe124ece0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe124ecea: movabs  $0x7fffe124ec8a,%rsi  ;   {internal_word}
  0x00007fffe124ecf4: mov     %rsp,%rdx
  0x00007fffe124ecf7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124ecfb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124ed00: hlt
  0x00007fffe124ed01: pop     %r10              ;*getfield se
                                                ; - java.io.OutputStreamWriter::flushBuffer@1 (line 185)

  0x00007fffe124ed03: cmp     (%rsi),%rax       ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; implicit exception: dispatches to 0x00007fffe124ed2f
  0x00007fffe124ed06: nop
  0x00007fffe124ed07: callq   0x7fffe1105e80    ; OopMap{off=236}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {optimized virtual_call}
  0x00007fffe124ed0c: add     $0x30,%rsp
  0x00007fffe124ed10: pop     %rbp
  0x00007fffe124ed11: test    %eax,0x16dac3e9(%rip)  ;   {poll_return}
  0x00007fffe124ed17: retq
  ;; CounterOverflowStub slow case
  0x00007fffe124ed18: mov     %rdi,0x8(%rsp)
  0x00007fffe124ed1d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe124ed25: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=266}
                                                ;*synchronization entry
                                                ; - java.io.OutputStreamWriter::flushBuffer@-1 (line 185)
                                                ;   {runtime_call}
  0x00007fffe124ed2a: jmpq    0x7fffe124ec78
  ;; ImplicitNullCheckStub slow case
  0x00007fffe124ed2f: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=276}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe124ed34: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124ed39: sub     $0x80,%rsp
  0x00007fffe124ed40: mov     %rax,0x78(%rsp)
  0x00007fffe124ed45: mov     %rcx,0x70(%rsp)
  0x00007fffe124ed4a: mov     %rdx,0x68(%rsp)
  0x00007fffe124ed4f: mov     %rbx,0x60(%rsp)
  0x00007fffe124ed54: mov     %rbp,0x50(%rsp)
  0x00007fffe124ed59: mov     %rsi,0x48(%rsp)
  0x00007fffe124ed5e: mov     %rdi,0x40(%rsp)
  0x00007fffe124ed63: mov     %r8,0x38(%rsp)
  0x00007fffe124ed68: mov     %r9,0x30(%rsp)
  0x00007fffe124ed6d: mov     %r10,0x28(%rsp)
  0x00007fffe124ed72: mov     %r11,0x20(%rsp)
  0x00007fffe124ed77: mov     %r12,0x18(%rsp)
  0x00007fffe124ed7c: mov     %r13,0x10(%rsp)
  0x00007fffe124ed81: mov     %r14,0x8(%rsp)
  0x00007fffe124ed86: mov     %r15,(%rsp)
  0x00007fffe124ed8a: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124ed94: movabs  $0x7fffe124ed34,%rsi  ;   {internal_word}
  0x00007fffe124ed9e: mov     %rsp,%rdx
  0x00007fffe124eda1: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124eda5: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124edaa: hlt
  0x00007fffe124edab: nop
  0x00007fffe124edac: nop
  ;; Unwind handler
  0x00007fffe124edad: mov     0x348(%r15),%rax
  0x00007fffe124edb4: movabs  $0x0,%r10
  0x00007fffe124edbe: mov     %r10,0x348(%r15)
  0x00007fffe124edc5: movabs  $0x0,%r10
  0x00007fffe124edcf: mov     %r10,0x350(%r15)
  0x00007fffe124edd6: add     $0x30,%rsp
  0x00007fffe124edda: pop     %rbp
  0x00007fffe124eddb: jmpq    0x7fffe1168fe0    ;   {runtime_call}
[Stub Code]
  0x00007fffe124ede0: nop                       ;   {no_reloc}
  0x00007fffe124ede1: nop
  0x00007fffe124ede2: nop
  0x00007fffe124ede3: nop
  0x00007fffe124ede4: nop
  0x00007fffe124ede5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe124edef: jmpq    0x7fffe124edef    ;   {runtime_call}
[Exception Handler]
  0x00007fffe124edf4: movabs  $0xdead,%rbx
  0x00007fffe124edfe: movabs  $0xdead,%rcx
  0x00007fffe124ee08: movabs  $0xdead,%rsi
  0x00007fffe124ee12: movabs  $0xdead,%rdi
  0x00007fffe124ee1c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124ee21: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124ee26: sub     $0x80,%rsp
  0x00007fffe124ee2d: mov     %rax,0x78(%rsp)
  0x00007fffe124ee32: mov     %rcx,0x70(%rsp)
  0x00007fffe124ee37: mov     %rdx,0x68(%rsp)
  0x00007fffe124ee3c: mov     %rbx,0x60(%rsp)
  0x00007fffe124ee41: mov     %rbp,0x50(%rsp)
  0x00007fffe124ee46: mov     %rsi,0x48(%rsp)
  0x00007fffe124ee4b: mov     %rdi,0x40(%rsp)
  0x00007fffe124ee50: mov     %r8,0x38(%rsp)
  0x00007fffe124ee55: mov     %r9,0x30(%rsp)
  0x00007fffe124ee5a: mov     %r10,0x28(%rsp)
  0x00007fffe124ee5f: mov     %r11,0x20(%rsp)
  0x00007fffe124ee64: mov     %r12,0x18(%rsp)
  0x00007fffe124ee69: mov     %r13,0x10(%rsp)
  0x00007fffe124ee6e: mov     %r14,0x8(%rsp)
  0x00007fffe124ee73: mov     %r15,(%rsp)
  0x00007fffe124ee77: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe124ee81: movabs  $0x7fffe124ee21,%rsi  ;   {internal_word}
  0x00007fffe124ee8b: mov     %rsp,%rdx
  0x00007fffe124ee8e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124ee92: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124ee97: hlt
[Deopt Handler Code]
  0x00007fffe124ee98: movabs  $0x7fffe124ee98,%r10  ;   {section_word}
  0x00007fffe124eea2: push    %r10
  0x00007fffe124eea4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124eea9: hlt
  0x00007fffe124eeaa: hlt
  0x00007fffe124eeab: hlt
  0x00007fffe124eeac: hlt
  0x00007fffe124eead: hlt
  0x00007fffe124eeae: hlt
  0x00007fffe124eeaf: hlt
<nmethod compile_id='50' compiler='C1' level='2' entry='0x00007fffe124ec20' size='1264' address='0x00007fffe124ea90' relocation_offset='304' insts_offset='400' stub_offset='848' scopes_data_offset='1072' scopes_pcs_offset='1112' dependencies_offset='1240' nul_chk_table_offset='1248' method='java/io/OutputStreamWriter flushBuffer ()V' bytes='8' count='46624' iicount='46624' stamp='119.150'/>
<sweeper state='finished' traversals='1'  total_blobs='569' nmethods='63' adapters='427' free_code_cache='249213376' stamp='119.150'/>
Decoding compiled method 0x00007fffe1259450:
Code:
Argument 0 is unknown.RIP: 0x7fffe1259640 Code size: 0x000005c0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2ac78} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x80]  (sp of caller)
  ;;  block B17 [0, 0]

  0x00007fffe1259640: mov     0x8(%rsi),%r10d
  0x00007fffe1259644: shl     $0x3,%r10
  0x00007fffe1259648: cmp     %rax,%r10
  0x00007fffe125964b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1259651: nop
  0x00007fffe1259652: nop
  0x00007fffe1259653: nop
  0x00007fffe1259654: nop
  0x00007fffe1259655: nop
  0x00007fffe1259656: nop
  0x00007fffe1259657: nop
  0x00007fffe1259658: nop
  0x00007fffe1259659: nop
  0x00007fffe125965a: nop
  0x00007fffe125965b: nop
  0x00007fffe125965c: nop
  0x00007fffe125965d: nop
  0x00007fffe125965e: nop
  0x00007fffe125965f: nop
[Verified Entry Point]
  0x00007fffe1259660: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1259667: push    %rbp
  0x00007fffe1259668: sub     $0x70,%rsp
  0x00007fffe125966c: movabs  $0x7ffff4d71158,%rax
  0x00007fffe1259676: mov     0x8(%rax),%edi
  0x00007fffe1259679: add     $0x8,%edi
  0x00007fffe125967c: mov     %edi,0x8(%rax)
  0x00007fffe125967f: movabs  $0x7ffff4c2ac78,%rax  ;   {metadata({method} {0x00007ffff4c2ac78} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;)}
  0x00007fffe1259689: and     $0x3ff8,%edi
  0x00007fffe125968f: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa846c200]
  0x00007fffe1259692: je      0x7fffe1259978    ;*aload_0
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@0 (line 102)

  ;;  block B18 [0, 0]

  ;;  block B0 [0, 11]

  0x00007fffe1259698: mov     0x10(%rsi),%edi
  0x00007fffe125969b: push    %r10
  0x00007fffe125969d: cmp     0x16b0053c(%rip),%r12  ;   {external_word}
  0x00007fffe12596a4: je      0x7fffe1259721
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12596aa: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12596af: sub     $0x80,%rsp
  0x00007fffe12596b6: mov     %rax,0x78(%rsp)
  0x00007fffe12596bb: mov     %rcx,0x70(%rsp)
  0x00007fffe12596c0: mov     %rdx,0x68(%rsp)
  0x00007fffe12596c5: mov     %rbx,0x60(%rsp)
  0x00007fffe12596ca: mov     %rbp,0x50(%rsp)
  0x00007fffe12596cf: mov     %rsi,0x48(%rsp)
  0x00007fffe12596d4: mov     %rdi,0x40(%rsp)
  0x00007fffe12596d9: mov     %r8,0x38(%rsp)
  0x00007fffe12596de: mov     %r9,0x30(%rsp)
  0x00007fffe12596e3: mov     %r10,0x28(%rsp)
  0x00007fffe12596e8: mov     %r11,0x20(%rsp)
  0x00007fffe12596ed: mov     %r12,0x18(%rsp)
  0x00007fffe12596f2: mov     %r13,0x10(%rsp)
  0x00007fffe12596f7: mov     %r14,0x8(%rsp)
  0x00007fffe12596fc: mov     %r15,(%rsp)
  0x00007fffe1259700: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125970a: movabs  $0x7fffe12596aa,%rsi  ;   {internal_word}
  0x00007fffe1259714: mov     %rsp,%rdx
  0x00007fffe1259717: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125971b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1259720: hlt
  0x00007fffe1259721: pop     %r10              ;*getfield lock
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@1 (line 102)

  0x00007fffe1259723: mov     %rdi,0x40(%rsp)
  0x00007fffe1259728: lea     0x50(%rsp),%rbx
  0x00007fffe125972d: mov     %rdi,0x8(%rbx)
  0x00007fffe1259731: mov     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe125998f
  0x00007fffe1259734: mov     %rax,%rdx
  0x00007fffe1259737: and     $0x7,%rdx
  0x00007fffe125973b: cmp     $0x5,%rdx
  0x00007fffe125973f: jne     0x7fffe12597c6
  0x00007fffe1259745: mov     0x8(%rdi),%edx
  0x00007fffe1259748: shl     $0x3,%rdx
  0x00007fffe125974c: mov     0xb0(%rdx),%rdx
  0x00007fffe1259753: or      %r15,%rdx
  0x00007fffe1259756: xor     %rax,%rdx
  0x00007fffe1259759: and     $0xffffffffffffff87,%rdx
  0x00007fffe125975d: je      0x7fffe12597ee
  0x00007fffe1259763: test    $0x7,%rdx
  0x00007fffe125976a: jne     0x7fffe12597b3
  0x00007fffe125976c: test    $0x300,%rdx
  0x00007fffe1259773: jne     0x7fffe1259792
  0x00007fffe1259775: and     $0x37f,%rax
  0x00007fffe125977c: mov     %rax,%rdx
  0x00007fffe125977f: or      %r15,%rdx
  0x00007fffe1259782: lock cmpxchg %rdx,(%rdi)
  0x00007fffe1259787: jne     0x7fffe1259a0b
  0x00007fffe125978d: jmpq    0x7fffe12597ee
  0x00007fffe1259792: mov     0x8(%rdi),%edx
  0x00007fffe1259795: shl     $0x3,%rdx
  0x00007fffe1259799: mov     0xb0(%rdx),%rdx
  0x00007fffe12597a0: or      %r15,%rdx
  0x00007fffe12597a3: lock cmpxchg %rdx,(%rdi)
  0x00007fffe12597a8: jne     0x7fffe1259a0b
  0x00007fffe12597ae: jmpq    0x7fffe12597ee
  0x00007fffe12597b3: mov     0x8(%rdi),%edx
  0x00007fffe12597b6: shl     $0x3,%rdx
  0x00007fffe12597ba: mov     0xb0(%rdx),%rdx
  0x00007fffe12597c1: lock cmpxchg %rdx,(%rdi)
  0x00007fffe12597c6: mov     (%rdi),%rax
  0x00007fffe12597c9: or      $0x1,%rax
  0x00007fffe12597cd: mov     %rax,(%rbx)
  0x00007fffe12597d0: lock cmpxchg %rbx,(%rdi)
  0x00007fffe12597d5: je      0x7fffe12597ee
  0x00007fffe12597db: sub     %rsp,%rax
  0x00007fffe12597de: and     $0xfffffffffffff007,%rax
  0x00007fffe12597e5: mov     %rax,(%rbx)
  0x00007fffe12597e8: jne     0x7fffe1259a0b    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)

  0x00007fffe12597ee: movsbl  0x16(%rsi),%ebx   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::isOpen@1 (line 155)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@8 (line 103)

  0x00007fffe12597f2: and     $0x1,%ebx
  0x00007fffe12597f5: cmp     $0x0,%ebx
  ;;   48 branch [EQ] [B4] 
  0x00007fffe12597f8: je      0x7fffe12598d9    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@11 (line 103)

  ;;  block B3 [14, 7]

  0x00007fffe12597fe: mov     0x20(%rsi),%ebx
  0x00007fffe1259801: push    %r10
  0x00007fffe1259803: cmp     0x16b003d6(%rip),%r12  ;   {external_word}
  0x00007fffe125980a: je      0x7fffe1259887
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1259810: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1259815: sub     $0x80,%rsp
  0x00007fffe125981c: mov     %rax,0x78(%rsp)
  0x00007fffe1259821: mov     %rcx,0x70(%rsp)
  0x00007fffe1259826: mov     %rdx,0x68(%rsp)
  0x00007fffe125982b: mov     %rbx,0x60(%rsp)
  0x00007fffe1259830: mov     %rbp,0x50(%rsp)
  0x00007fffe1259835: mov     %rsi,0x48(%rsp)
  0x00007fffe125983a: mov     %rdi,0x40(%rsp)
  0x00007fffe125983f: mov     %r8,0x38(%rsp)
  0x00007fffe1259844: mov     %r9,0x30(%rsp)
  0x00007fffe1259849: mov     %r10,0x28(%rsp)
  0x00007fffe125984e: mov     %r11,0x20(%rsp)
  0x00007fffe1259853: mov     %r12,0x18(%rsp)
  0x00007fffe1259858: mov     %r13,0x10(%rsp)
  0x00007fffe125985d: mov     %r14,0x8(%rsp)
  0x00007fffe1259862: mov     %r15,(%rsp)
  0x00007fffe1259866: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1259870: movabs  $0x7fffe1259810,%rsi  ;   {internal_word}
  0x00007fffe125987a: mov     %rsp,%rdx
  0x00007fffe125987d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1259881: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1259886: hlt
  0x00007fffe1259887: pop     %r10              ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@1 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1259889: mov     0x18(%rbx),%ebx   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; implicit exception: dispatches to 0x00007fffe1259a1e
  0x00007fffe125988c: cmp     $0x0,%ebx
  ;;   60 branch [LE] [B14] 
  0x00007fffe125988f: jle     0x7fffe125989c    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@7 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;;  block B13 [10, 14]

  0x00007fffe1259895: nop
  0x00007fffe1259896: nop
  0x00007fffe1259897: callq   0x7fffe1105e80    ; OopMap{[64]=Oop [88]=Oop off=604}
                                                ;*invokespecial writeBytes
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {optimized virtual_call}
  ;;  block B14 [14, 41]

  0x00007fffe125989c: lea     0x50(%rsp),%rax
  0x00007fffe12598a1: mov     0x8(%rax),%rsi
  0x00007fffe12598a5: mov     (%rsi),%rdx
  0x00007fffe12598a8: and     $0x7,%rdx
  0x00007fffe12598ac: cmp     $0x5,%rdx
  0x00007fffe12598b0: je      0x7fffe12598cd
  0x00007fffe12598b6: mov     (%rax),%rdx
  0x00007fffe12598b9: test    %rdx,%rdx
  0x00007fffe12598bc: je      0x7fffe12598cd
  0x00007fffe12598c2: lock cmpxchg %rdx,(%rsi)
  0x00007fffe12598c7: jne     0x7fffe1259a9a    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@32 (line 107)

  0x00007fffe12598cd: add     $0x70,%rsp
  0x00007fffe12598d1: pop     %rbp
  0x00007fffe12598d2: test    %eax,0x16da1828(%rip)  ;   {poll_return}
  0x00007fffe12598d8: retq                      ;*return
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@41 (line 108)

  ;;  block B4 [21, 30]

  ;;   86 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:21]
  0x00007fffe12598d9: nop
  0x00007fffe12598da: nop
  0x00007fffe12598db: nop
  0x00007fffe12598dc: nop
  0x00007fffe12598dd: nop
  0x00007fffe12598de: nop
  0x00007fffe12598df: nop
  0x00007fffe12598e0: jmpq    0x7fffe1259abc    ;   {no_reloc}
  0x00007fffe12598e5: add     %al,(%rax)
  0x00007fffe12598e7: add     %al,(%rax)
  0x00007fffe12598e9: add     %ch,%cl
  0x00007fffe12598eb: xlat    (%rbx)
  0x00007fffe12598ec: add     %eax,(%rax)
  0x00007fffe12598ee: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - sun.nio.cs.StreamEncoder::flushBuffer@21 (line 106)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe12598f1: pop     %rax
  0x00007fffe12598f2: xlat    (%rbx)
  0x00007fffe12598f3: xlat    (%rbx)
  0x00007fffe12598f5: add     %al,(%rax)
  0x00007fffe12598f7: add     %al,(%rax)
  0x00007fffe12598f9: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@27 (line 106)

  0x00007fffe12598fc: mov     %rax,0x48(%rsp)
  0x00007fffe1259901: nop
  0x00007fffe1259902: nop
  0x00007fffe1259903: nop
  0x00007fffe1259904: nop
  0x00007fffe1259905: nop
  0x00007fffe1259906: nop
  0x00007fffe1259907: callq   0x7fffe1105e80    ; OopMap{[72]=Oop [64]=Oop [88]=Oop off=716}
                                                ;*invokespecial &lt;init&gt;
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@27 (line 106)
                                                ;   {optimized virtual_call}
  0x00007fffe125990c: mov     0x48(%rsp),%rax   ; OopMap{[64]=Oop [88]=Oop rax=Oop off=721}
                                                ;*athrow
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@30 (line 106)

  0x00007fffe1259911: movabs  $0x7fffe1259911,%rdx  ;   {section_word}
  0x00007fffe125991b: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe1259920: nop                       ;*athrow
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@30 (line 106)

  ;;  block B1 [36, 40]

  0x00007fffe1259921: mov     0x348(%r15),%rax
  0x00007fffe1259928: xor     %r10,%r10
  0x00007fffe125992b: mov     %r10,0x348(%r15)
  0x00007fffe1259932: xor     %r10,%r10
  0x00007fffe1259935: mov     %r10,0x350(%r15)
  0x00007fffe125993c: mov     %rax,%rsi
  0x00007fffe125993f: lea     0x50(%rsp),%rax
  0x00007fffe1259944: mov     0x8(%rax),%rbx
  0x00007fffe1259948: mov     (%rbx),%rdi
  0x00007fffe125994b: and     $0x7,%rdi
  0x00007fffe125994f: cmp     $0x5,%rdi
  0x00007fffe1259953: je      0x7fffe1259970
  0x00007fffe1259959: mov     (%rax),%rdi
  0x00007fffe125995c: test    %rdi,%rdi
  0x00007fffe125995f: je      0x7fffe1259970
  0x00007fffe1259965: lock cmpxchg %rdi,(%rbx)
  0x00007fffe125996a: jne     0x7fffe1259ad3    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@38 (line 107)

  0x00007fffe1259970: mov     %rsi,%rax
  0x00007fffe1259973: jmpq    0x7fffe1259b11
  ;; CounterOverflowStub slow case
  0x00007fffe1259978: mov     %rax,0x8(%rsp)
  0x00007fffe125997d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1259985: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=842}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@-1 (line 102)
                                                ;   {runtime_call}
  0x00007fffe125998a: jmpq    0x7fffe1259698
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125998f: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdi=Oop [64]=Oop off=852}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ;   {runtime_call}
  0x00007fffe1259994: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1259999: sub     $0x80,%rsp
  0x00007fffe12599a0: mov     %rax,0x78(%rsp)
  0x00007fffe12599a5: mov     %rcx,0x70(%rsp)
  0x00007fffe12599aa: mov     %rdx,0x68(%rsp)
  0x00007fffe12599af: mov     %rbx,0x60(%rsp)
  0x00007fffe12599b4: mov     %rbp,0x50(%rsp)
  0x00007fffe12599b9: mov     %rsi,0x48(%rsp)
  0x00007fffe12599be: mov     %rdi,0x40(%rsp)
  0x00007fffe12599c3: mov     %r8,0x38(%rsp)
  0x00007fffe12599c8: mov     %r9,0x30(%rsp)
  0x00007fffe12599cd: mov     %r10,0x28(%rsp)
  0x00007fffe12599d2: mov     %r11,0x20(%rsp)
  0x00007fffe12599d7: mov     %r12,0x18(%rsp)
  0x00007fffe12599dc: mov     %r13,0x10(%rsp)
  0x00007fffe12599e1: mov     %r14,0x8(%rsp)
  0x00007fffe12599e6: mov     %r15,(%rsp)
  0x00007fffe12599ea: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12599f4: movabs  $0x7fffe1259994,%rsi  ;   {internal_word}
  0x00007fffe12599fe: mov     %rsp,%rdx
  0x00007fffe1259a01: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1259a05: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1259a0a: hlt
  ;; MonitorEnterStub slow case
  0x00007fffe1259a0b: mov     %rdi,0x8(%rsp)
  0x00007fffe1259a10: mov     %rbx,(%rsp)
  0x00007fffe1259a14: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop rdi=Oop [64]=Oop [88]=Oop off=985}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ;   {runtime_call}
  0x00007fffe1259a19: jmpq    0x7fffe12597ee
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1259a1e: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdi=Oop [64]=Oop [88]=Oop off=995}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1259a23: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1259a28: sub     $0x80,%rsp
  0x00007fffe1259a2f: mov     %rax,0x78(%rsp)
  0x00007fffe1259a34: mov     %rcx,0x70(%rsp)
  0x00007fffe1259a39: mov     %rdx,0x68(%rsp)
  0x00007fffe1259a3e: mov     %rbx,0x60(%rsp)
  0x00007fffe1259a43: mov     %rbp,0x50(%rsp)
  0x00007fffe1259a48: mov     %rsi,0x48(%rsp)
  0x00007fffe1259a4d: mov     %rdi,0x40(%rsp)
  0x00007fffe1259a52: mov     %r8,0x38(%rsp)
  0x00007fffe1259a57: mov     %r9,0x30(%rsp)
  0x00007fffe1259a5c: mov     %r10,0x28(%rsp)
  0x00007fffe1259a61: mov     %r11,0x20(%rsp)
  0x00007fffe1259a66: mov     %r12,0x18(%rsp)
  0x00007fffe1259a6b: mov     %r13,0x10(%rsp)
  0x00007fffe1259a70: mov     %r14,0x8(%rsp)
  0x00007fffe1259a75: mov     %r15,(%rsp)
  0x00007fffe1259a79: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1259a83: movabs  $0x7fffe1259a23,%rsi  ;   {internal_word}
  0x00007fffe1259a8d: mov     %rsp,%rdx
  0x00007fffe1259a90: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1259a94: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1259a99: hlt
  ;; MonitorExitStub slow case
  0x00007fffe1259a9a: lea     0x50(%rsp),%rax
  0x00007fffe1259a9f: mov     %rax,(%rsp)
  0x00007fffe1259aa3: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1259aa8: jmpq    0x7fffe12598cd
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1259aad: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1259ab7: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1259abc: callq   0x7fffe11fc960    ; OopMap{[64]=Oop [88]=Oop off=1153}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::flushBuffer@21 (line 106)
                                                ;   {runtime_call}
  0x00007fffe1259ac1: jmpq    0x7fffe12598e0
  ;; NewInstanceStub slow case
  0x00007fffe1259ac6: mov     %rdx,%rdx
  0x00007fffe1259ac9: callq   0x7fffe11668a0    ; OopMap{[64]=Oop [88]=Oop off=1166}
                                                ;*new  ; - sun.nio.cs.StreamEncoder::flushBuffer@21 (line 106)
                                                ;   {runtime_call}
  0x00007fffe1259ace: jmpq    0x7fffe12598ef
  ;; MonitorExitStub slow case
  0x00007fffe1259ad3: lea     0x50(%rsp),%rax
  0x00007fffe1259ad8: mov     %rax,(%rsp)
  0x00007fffe1259adc: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1259ae1: jmpq    0x7fffe1259970
  0x00007fffe1259ae6: nop
  0x00007fffe1259ae7: nop
  ;; Unwind handler
  0x00007fffe1259ae8: mov     0x348(%r15),%rax
  0x00007fffe1259aef: movabs  $0x0,%r10
  0x00007fffe1259af9: mov     %r10,0x348(%r15)
  0x00007fffe1259b00: movabs  $0x0,%r10
  0x00007fffe1259b0a: mov     %r10,0x350(%r15)
  0x00007fffe1259b11: add     $0x70,%rsp
  0x00007fffe1259b15: pop     %rbp
  0x00007fffe1259b16: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1259b1b: hlt
  0x00007fffe1259b1c: hlt
  0x00007fffe1259b1d: hlt
  0x00007fffe1259b1e: hlt
  0x00007fffe1259b1f: hlt
[Stub Code]
  0x00007fffe1259b20: nop                       ;   {no_reloc}
  0x00007fffe1259b21: nop
  0x00007fffe1259b22: nop
  0x00007fffe1259b23: nop
  0x00007fffe1259b24: nop
  0x00007fffe1259b25: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1259b2f: jmpq    0x7fffe1259b2f    ;   {runtime_call}
  0x00007fffe1259b34: nop
  0x00007fffe1259b35: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1259b3f: jmpq    0x7fffe1259b3f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1259b44: movabs  $0xdead,%rbx
  0x00007fffe1259b4e: movabs  $0xdead,%rcx
  0x00007fffe1259b58: movabs  $0xdead,%rsi
  0x00007fffe1259b62: movabs  $0xdead,%rdi
  0x00007fffe1259b6c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1259b71: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1259b76: sub     $0x80,%rsp
  0x00007fffe1259b7d: mov     %rax,0x78(%rsp)
  0x00007fffe1259b82: mov     %rcx,0x70(%rsp)
  0x00007fffe1259b87: mov     %rdx,0x68(%rsp)
  0x00007fffe1259b8c: mov     %rbx,0x60(%rsp)
  0x00007fffe1259b91: mov     %rbp,0x50(%rsp)
  0x00007fffe1259b96: mov     %rsi,0x48(%rsp)
  0x00007fffe1259b9b: mov     %rdi,0x40(%rsp)
  0x00007fffe1259ba0: mov     %r8,0x38(%rsp)
  0x00007fffe1259ba5: mov     %r9,0x30(%rsp)
  0x00007fffe1259baa: mov     %r10,0x28(%rsp)
  0x00007fffe1259baf: mov     %r11,0x20(%rsp)
  0x00007fffe1259bb4: mov     %r12,0x18(%rsp)
  0x00007fffe1259bb9: mov     %r13,0x10(%rsp)
  0x00007fffe1259bbe: mov     %r14,0x8(%rsp)
  0x00007fffe1259bc3: mov     %r15,(%rsp)
  0x00007fffe1259bc7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1259bd1: movabs  $0x7fffe1259b71,%rsi  ;   {internal_word}
  0x00007fffe1259bdb: mov     %rsp,%rdx
  0x00007fffe1259bde: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1259be2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1259be7: hlt
[Deopt Handler Code]
  0x00007fffe1259be8: movabs  $0x7fffe1259be8,%r10  ;   {section_word}
  0x00007fffe1259bf2: push    %r10
  0x00007fffe1259bf4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1259bf9: hlt
  0x00007fffe1259bfa: hlt
  0x00007fffe1259bfb: hlt
  0x00007fffe1259bfc: hlt
  0x00007fffe1259bfd: hlt
  0x00007fffe1259bfe: hlt
  0x00007fffe1259bff: hlt
<nmethod compile_id='51' compiler='C1' level='2' entry='0x00007fffe1259640' size='2808' address='0x00007fffe1259450' relocation_offset='304' insts_offset='496' stub_offset='1744' scopes_data_offset='2008' scopes_pcs_offset='2232' dependencies_offset='2632' handler_table_offset='2640' nul_chk_table_offset='2784' method='sun/nio/cs/StreamEncoder flushBuffer ()V' bytes='42' count='48160' iicount='48160' stamp='119.171'/>
<writer thread='140737327351552'/>
<task_queued compile_id='97' method='java/io/OutputStreamWriter flushBuffer ()V' bytes='8' count='48161' iicount='48161' stamp='119.171' comment='tiered' hot_count='48161'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1258ed0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1259060 Code size: 0x000002b0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2baf0} &apos;implFlushBuffer&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B5 [0, 0]

  0x00007fffe1259060: mov     0x8(%rsi),%r10d
  0x00007fffe1259064: shl     $0x3,%r10
  0x00007fffe1259068: cmp     %rax,%r10
  0x00007fffe125906b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1259071: nop
  0x00007fffe1259072: nop
  0x00007fffe1259073: nop
  0x00007fffe1259074: nop
  0x00007fffe1259075: nop
  0x00007fffe1259076: nop
  0x00007fffe1259077: nop
  0x00007fffe1259078: nop
  0x00007fffe1259079: nop
  0x00007fffe125907a: nop
  0x00007fffe125907b: nop
  0x00007fffe125907c: nop
  0x00007fffe125907d: nop
  0x00007fffe125907e: nop
  0x00007fffe125907f: nop
[Verified Entry Point]
  0x00007fffe1259080: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1259087: push    %rbp
  0x00007fffe1259088: sub     $0x30,%rsp
  0x00007fffe125908c: movabs  $0x7ffff4d71198,%rdi
  0x00007fffe1259096: mov     0x8(%rdi),%ebx
  0x00007fffe1259099: add     $0x8,%ebx
  0x00007fffe125909c: mov     %ebx,0x8(%rdi)
  0x00007fffe125909f: movabs  $0x7ffff4c2baf0,%rdi  ;   {metadata({method} {0x00007ffff4c2baf0} &apos;implFlushBuffer&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;)}
  0x00007fffe12590a9: and     $0x3ff8,%ebx
  0x00007fffe12590af: cmp     $0x0,%ebx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa81f2b10]
  0x00007fffe12590b2: je      0x7fffe1259160    ;*aload_0
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@0 (line 290)

  ;;  block B6 [0, 0]

  ;;  block B0 [0, 7]

  0x00007fffe12590b8: mov     0x20(%rsi),%edi
  0x00007fffe12590bb: push    %r10
  0x00007fffe12590bd: cmp     0x16b00b1c(%rip),%r12  ;   {external_word}
  0x00007fffe12590c4: je      0x7fffe1259141
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12590ca: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12590cf: sub     $0x80,%rsp
  0x00007fffe12590d6: mov     %rax,0x78(%rsp)
  0x00007fffe12590db: mov     %rcx,0x70(%rsp)
  0x00007fffe12590e0: mov     %rdx,0x68(%rsp)
  0x00007fffe12590e5: mov     %rbx,0x60(%rsp)
  0x00007fffe12590ea: mov     %rbp,0x50(%rsp)
  0x00007fffe12590ef: mov     %rsi,0x48(%rsp)
  0x00007fffe12590f4: mov     %rdi,0x40(%rsp)
  0x00007fffe12590f9: mov     %r8,0x38(%rsp)
  0x00007fffe12590fe: mov     %r9,0x30(%rsp)
  0x00007fffe1259103: mov     %r10,0x28(%rsp)
  0x00007fffe1259108: mov     %r11,0x20(%rsp)
  0x00007fffe125910d: mov     %r12,0x18(%rsp)
  0x00007fffe1259112: mov     %r13,0x10(%rsp)
  0x00007fffe1259117: mov     %r14,0x8(%rsp)
  0x00007fffe125911c: mov     %r15,(%rsp)
  0x00007fffe1259120: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125912a: movabs  $0x7fffe12590ca,%rsi  ;   {internal_word}
  0x00007fffe1259134: mov     %rsp,%rdx
  0x00007fffe1259137: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125913b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1259140: hlt
  0x00007fffe1259141: pop     %r10              ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@1 (line 290)

  0x00007fffe1259143: mov     0x18(%rdi),%edi   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; implicit exception: dispatches to 0x00007fffe1259177
  0x00007fffe1259146: cmp     $0x0,%edi
  ;;   38 branch [LE] [B2] 
  0x00007fffe1259149: jle     0x7fffe1259154    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@7 (line 290)

  ;;  block B1 [10, 14]

  0x00007fffe125914f: callq   0x7fffe1105e80    ; OopMap{off=244}
                                                ;*invokespecial writeBytes
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ;   {optimized virtual_call}
  ;;  block B2 [14, 14]

  0x00007fffe1259154: add     $0x30,%rsp
  0x00007fffe1259158: pop     %rbp
  0x00007fffe1259159: test    %eax,0x16da1fa1(%rip)  ;   {poll_return}
  0x00007fffe125915f: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1259160: mov     %rdi,0x8(%rsp)
  0x00007fffe1259165: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125916d: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=274}
                                                ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@-1 (line 290)
                                                ;   {runtime_call}
  0x00007fffe1259172: jmpq    0x7fffe12590b8
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1259177: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=284}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ;   {runtime_call}
  0x00007fffe125917c: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1259181: sub     $0x80,%rsp
  0x00007fffe1259188: mov     %rax,0x78(%rsp)
  0x00007fffe125918d: mov     %rcx,0x70(%rsp)
  0x00007fffe1259192: mov     %rdx,0x68(%rsp)
  0x00007fffe1259197: mov     %rbx,0x60(%rsp)
  0x00007fffe125919c: mov     %rbp,0x50(%rsp)
  0x00007fffe12591a1: mov     %rsi,0x48(%rsp)
  0x00007fffe12591a6: mov     %rdi,0x40(%rsp)
  0x00007fffe12591ab: mov     %r8,0x38(%rsp)
  0x00007fffe12591b0: mov     %r9,0x30(%rsp)
  0x00007fffe12591b5: mov     %r10,0x28(%rsp)
  0x00007fffe12591ba: mov     %r11,0x20(%rsp)
  0x00007fffe12591bf: mov     %r12,0x18(%rsp)
  0x00007fffe12591c4: mov     %r13,0x10(%rsp)
  0x00007fffe12591c9: mov     %r14,0x8(%rsp)
  0x00007fffe12591ce: mov     %r15,(%rsp)
  0x00007fffe12591d2: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12591dc: movabs  $0x7fffe125917c,%rsi  ;   {internal_word}
  0x00007fffe12591e6: mov     %rsp,%rdx
  0x00007fffe12591e9: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12591ed: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12591f2: hlt
  0x00007fffe12591f3: nop
  0x00007fffe12591f4: nop
  ;; Unwind handler
  0x00007fffe12591f5: mov     0x348(%r15),%rax
  0x00007fffe12591fc: movabs  $0x0,%r10
  0x00007fffe1259206: mov     %r10,0x348(%r15)
  0x00007fffe125920d: movabs  $0x0,%r10
  0x00007fffe1259217: mov     %r10,0x350(%r15)
  0x00007fffe125921e: add     $0x30,%rsp
  0x00007fffe1259222: pop     %rbp
  0x00007fffe1259223: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1259228: hlt
  0x00007fffe1259229: hlt
  0x00007fffe125922a: hlt
  0x00007fffe125922b: hlt
  0x00007fffe125922c: hlt
  0x00007fffe125922d: hlt
  0x00007fffe125922e: hlt
  0x00007fffe125922f: hlt
  0x00007fffe1259230: hlt
  0x00007fffe1259231: hlt
  0x00007fffe1259232: hlt
  0x00007fffe1259233: hlt
  0x00007fffe1259234: hlt
  0x00007fffe1259235: hlt
  0x00007fffe1259236: hlt
  0x00007fffe1259237: hlt
  0x00007fffe1259238: hlt
  0x00007fffe1259239: hlt
  0x00007fffe125923a: hlt
  0x00007fffe125923b: hlt
  0x00007fffe125923c: hlt
  0x00007fffe125923d: hlt
  0x00007fffe125923e: hlt
  0x00007fffe125923f: hlt
[Stub Code]
  0x00007fffe1259240: nop                       ;   {no_reloc}
  0x00007fffe1259241: nop
  0x00007fffe1259242: nop
  0x00007fffe1259243: nop
  0x00007fffe1259244: nop
  0x00007fffe1259245: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125924f: jmpq    0x7fffe125924f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1259254: movabs  $0xdead,%rbx
  0x00007fffe125925e: movabs  $0xdead,%rcx
  0x00007fffe1259268: movabs  $0xdead,%rsi
  0x00007fffe1259272: movabs  $0xdead,%rdi
  0x00007fffe125927c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1259281: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1259286: sub     $0x80,%rsp
  0x00007fffe125928d: mov     %rax,0x78(%rsp)
  0x00007fffe1259292: mov     %rcx,0x70(%rsp)
  0x00007fffe1259297: mov     %rdx,0x68(%rsp)
  0x00007fffe125929c: mov     %rbx,0x60(%rsp)
  0x00007fffe12592a1: mov     %rbp,0x50(%rsp)
  0x00007fffe12592a6: mov     %rsi,0x48(%rsp)
  0x00007fffe12592ab: mov     %rdi,0x40(%rsp)
  0x00007fffe12592b0: mov     %r8,0x38(%rsp)
  0x00007fffe12592b5: mov     %r9,0x30(%rsp)
  0x00007fffe12592ba: mov     %r10,0x28(%rsp)
  0x00007fffe12592bf: mov     %r11,0x20(%rsp)
  0x00007fffe12592c4: mov     %r12,0x18(%rsp)
  0x00007fffe12592c9: mov     %r13,0x10(%rsp)
  0x00007fffe12592ce: mov     %r14,0x8(%rsp)
  0x00007fffe12592d3: mov     %r15,(%rsp)
  0x00007fffe12592d7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12592e1: movabs  $0x7fffe1259281,%rsi  ;   {internal_word}
  0x00007fffe12592eb: mov     %rsp,%rdx
  0x00007fffe12592ee: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12592f2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12592f7: hlt
[Deopt Handler Code]
  0x00007fffe12592f8: movabs  $0x7fffe12592f8,%r10  ;   {section_word}
  0x00007fffe1259302: push    %r10
  0x00007fffe1259304: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1259309: hlt
  0x00007fffe125930a: hlt
  0x00007fffe125930b: hlt
  0x00007fffe125930c: hlt
  0x00007fffe125930d: hlt
  0x00007fffe125930e: hlt
  0x00007fffe125930f: hlt
<nmethod compile_id='52' compiler='C1' level='2' entry='0x00007fffe1259060' size='1336' address='0x00007fffe1258ed0' relocation_offset='304' insts_offset='400' stub_offset='880' scopes_data_offset='1112' scopes_pcs_offset='1168' dependencies_offset='1312' nul_chk_table_offset='1320' method='sun/nio/cs/StreamEncoder implFlushBuffer ()V' bytes='15' count='48161' iicount='48161' stamp='119.189'/>
Decoding compiled method 0x00007fffe1258ad0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1258c40 Code size: 0x00000198
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56628} &apos;clear&apos; &apos;()Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1258c40: mov     0x8(%rsi),%r10d
  0x00007fffe1258c44: shl     $0x3,%r10
  0x00007fffe1258c48: cmp     %rax,%r10
  0x00007fffe1258c4b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1258c51: nop
  0x00007fffe1258c52: nop
  0x00007fffe1258c53: nop
  0x00007fffe1258c54: nop
  0x00007fffe1258c55: nop
  0x00007fffe1258c56: nop
  0x00007fffe1258c57: nop
  0x00007fffe1258c58: nop
  0x00007fffe1258c59: nop
  0x00007fffe1258c5a: nop
  0x00007fffe1258c5b: nop
  0x00007fffe1258c5c: nop
  0x00007fffe1258c5d: nop
  0x00007fffe1258c5e: nop
  0x00007fffe1258c5f: nop
[Verified Entry Point]
  0x00007fffe1258c60: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1258c67: push    %rbp
  0x00007fffe1258c68: sub     $0x30,%rsp
  0x00007fffe1258c6c: movabs  $0x7ffff4d712d8,%rax
  0x00007fffe1258c76: mov     0x8(%rax),%edi
  0x00007fffe1258c79: add     $0x8,%edi
  0x00007fffe1258c7c: mov     %edi,0x8(%rax)
  0x00007fffe1258c7f: movabs  $0x7ffff4b56628,%rax  ;   {metadata({method} {0x00007ffff4b56628} &apos;clear&apos; &apos;()Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe1258c89: and     $0x3ff8,%edi
  0x00007fffe1258c8f: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb41ff210]
  0x00007fffe1258c92: je      0x7fffe1258cbb    ;*aload_0
                                                ; - java.nio.Buffer::clear@0 (line 329)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 19]

  0x00007fffe1258c98: movl    $0x0,0x18(%rsi)   ;*putfield position
                                                ; - java.nio.Buffer::clear@2 (line 329)

  0x00007fffe1258c9f: mov     0x20(%rsi),%eax   ;*getfield capacity
                                                ; - java.nio.Buffer::clear@7 (line 330)

  0x00007fffe1258ca2: mov     %eax,0x1c(%rsi)   ;*putfield limit
                                                ; - java.nio.Buffer::clear@10 (line 330)

  0x00007fffe1258ca5: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::clear@15 (line 331)

  0x00007fffe1258cac: mov     %rsi,%rax
  0x00007fffe1258caf: add     $0x30,%rsp
  0x00007fffe1258cb3: pop     %rbp
  0x00007fffe1258cb4: test    %eax,0x16da2446(%rip)  ;   {poll_return}
  0x00007fffe1258cba: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1258cbb: mov     %rax,0x8(%rsp)
  0x00007fffe1258cc0: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1258cc8: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=141}
                                                ;*synchronization entry
                                                ; - java.nio.Buffer::clear@-1 (line 329)
                                                ;   {runtime_call}
  0x00007fffe1258ccd: jmp     0x7fffe1258c98
  0x00007fffe1258ccf: nop
  0x00007fffe1258cd0: nop
  ;; Unwind handler
  0x00007fffe1258cd1: mov     0x348(%r15),%rax
  0x00007fffe1258cd8: movabs  $0x0,%r10
  0x00007fffe1258ce2: mov     %r10,0x348(%r15)
  0x00007fffe1258ce9: movabs  $0x0,%r10
  0x00007fffe1258cf3: mov     %r10,0x350(%r15)
  0x00007fffe1258cfa: add     $0x30,%rsp
  0x00007fffe1258cfe: pop     %rbp
  0x00007fffe1258cff: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1258d04: hlt
  0x00007fffe1258d05: hlt
  0x00007fffe1258d06: hlt
  0x00007fffe1258d07: hlt
  0x00007fffe1258d08: hlt
  0x00007fffe1258d09: hlt
  0x00007fffe1258d0a: hlt
  0x00007fffe1258d0b: hlt
  0x00007fffe1258d0c: hlt
  0x00007fffe1258d0d: hlt
  0x00007fffe1258d0e: hlt
  0x00007fffe1258d0f: hlt
  0x00007fffe1258d10: hlt
  0x00007fffe1258d11: hlt
  0x00007fffe1258d12: hlt
  0x00007fffe1258d13: hlt
  0x00007fffe1258d14: hlt
  0x00007fffe1258d15: hlt
  0x00007fffe1258d16: hlt
  0x00007fffe1258d17: hlt
  0x00007fffe1258d18: hlt
  0x00007fffe1258d19: hlt
  0x00007fffe1258d1a: hlt
  0x00007fffe1258d1b: hlt
  0x00007fffe1258d1c: hlt
  0x00007fffe1258d1d: hlt
  0x00007fffe1258d1e: hlt
  0x00007fffe1258d1f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1258d20: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe1258d2a: movabs  $0xdead,%rcx
  0x00007fffe1258d34: movabs  $0xdead,%rsi
  0x00007fffe1258d3e: movabs  $0xdead,%rdi
  0x00007fffe1258d48: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1258d4d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1258d52: sub     $0x80,%rsp
  0x00007fffe1258d59: mov     %rax,0x78(%rsp)
  0x00007fffe1258d5e: mov     %rcx,0x70(%rsp)
  0x00007fffe1258d63: mov     %rdx,0x68(%rsp)
  0x00007fffe1258d68: mov     %rbx,0x60(%rsp)
  0x00007fffe1258d6d: mov     %rbp,0x50(%rsp)
  0x00007fffe1258d72: mov     %rsi,0x48(%rsp)
  0x00007fffe1258d77: mov     %rdi,0x40(%rsp)
  0x00007fffe1258d7c: mov     %r8,0x38(%rsp)
  0x00007fffe1258d81: mov     %r9,0x30(%rsp)
  0x00007fffe1258d86: mov     %r10,0x28(%rsp)
  0x00007fffe1258d8b: mov     %r11,0x20(%rsp)
  0x00007fffe1258d90: mov     %r12,0x18(%rsp)
  0x00007fffe1258d95: mov     %r13,0x10(%rsp)
  0x00007fffe1258d9a: mov     %r14,0x8(%rsp)
  0x00007fffe1258d9f: mov     %r15,(%rsp)
  0x00007fffe1258da3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1258dad: movabs  $0x7fffe1258d4d,%rsi  ;   {internal_word}
  0x00007fffe1258db7: mov     %rsp,%rdx
  0x00007fffe1258dba: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1258dbe: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1258dc3: hlt
[Deopt Handler Code]
  0x00007fffe1258dc4: movabs  $0x7fffe1258dc4,%r10  ;   {section_word}
  0x00007fffe1258dce: push    %r10
  0x00007fffe1258dd0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1258dd5: hlt
  0x00007fffe1258dd6: hlt
  0x00007fffe1258dd7: hlt
<nmethod compile_id='61' compiler='C1' level='2' entry='0x00007fffe1258c40' size='968' address='0x00007fffe1258ad0' relocation_offset='304' insts_offset='368' stub_offset='592' scopes_data_offset='784' scopes_pcs_offset='832' dependencies_offset='960' method='java/nio/Buffer clear ()Ljava/nio/Buffer;' bytes='20' count='49696' iicount='49696' stamp='119.200'/>
<writer thread='140737327351552'/>
<task_queued compile_id='98' method='sun/nio/cs/StreamEncoder flushBuffer ()V' bytes='42' count='49697' iicount='49697' stamp='119.206' comment='tiered' hot_count='49697'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe12535d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1253860 Code size: 0x00000820
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2b6d0} &apos;writeBytes&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0xa0]  (sp of caller)
  ;;  block B33 [0, 0]

  0x00007fffe1253860: mov     0x8(%rsi),%r10d
  0x00007fffe1253864: shl     $0x3,%r10
  0x00007fffe1253868: cmp     %rax,%r10
  0x00007fffe125386b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1253871: nop
  0x00007fffe1253872: nop
  0x00007fffe1253873: nop
  0x00007fffe1253874: nop
  0x00007fffe1253875: nop
  0x00007fffe1253876: nop
  0x00007fffe1253877: nop
  0x00007fffe1253878: nop
  0x00007fffe1253879: nop
  0x00007fffe125387a: nop
  0x00007fffe125387b: nop
  0x00007fffe125387c: nop
  0x00007fffe125387d: nop
  0x00007fffe125387e: nop
  0x00007fffe125387f: nop
[Verified Entry Point]
  0x00007fffe1253880: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1253887: push    %rbp
  0x00007fffe1253888: sub     $0x90,%rsp
  0x00007fffe125388f: mov     %rsi,0x48(%rsp)
  0x00007fffe1253894: movabs  $0x7ffff4d711b8,%rdx
  0x00007fffe125389e: mov     0x8(%rdx),%edi
  0x00007fffe12538a1: add     $0x8,%edi
  0x00007fffe12538a4: mov     %edi,0x8(%rdx)
  0x00007fffe12538a7: movabs  $0x7ffff4c2b6d0,%rdx  ;   {metadata({method} {0x00007ffff4c2b6d0} &apos;writeBytes&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;)}
  0x00007fffe12538b1: and     $0x3ff8,%edi
  0x00007fffe12538b7: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb019ef10]
  0x00007fffe12538ba: je      0x7fffe1253cfe    ;*aload_0
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@0 (line 210)

  ;;  block B34 [0, 0]

  ;;  block B0 [0, 57]

  0x00007fffe12538c0: mov     0x20(%rsi),%edi
  0x00007fffe12538c3: push    %r10
  0x00007fffe12538c5: cmp     0x16b06314(%rip),%r12  ;   {external_word}
  0x00007fffe12538cc: je      0x7fffe1253949
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12538d2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12538d7: sub     $0x80,%rsp
  0x00007fffe12538de: mov     %rax,0x78(%rsp)
  0x00007fffe12538e3: mov     %rcx,0x70(%rsp)
  0x00007fffe12538e8: mov     %rdx,0x68(%rsp)
  0x00007fffe12538ed: mov     %rbx,0x60(%rsp)
  0x00007fffe12538f2: mov     %rbp,0x50(%rsp)
  0x00007fffe12538f7: mov     %rsi,0x48(%rsp)
  0x00007fffe12538fc: mov     %rdi,0x40(%rsp)
  0x00007fffe1253901: mov     %r8,0x38(%rsp)
  0x00007fffe1253906: mov     %r9,0x30(%rsp)
  0x00007fffe125390b: mov     %r10,0x28(%rsp)
  0x00007fffe1253910: mov     %r11,0x20(%rsp)
  0x00007fffe1253915: mov     %r12,0x18(%rsp)
  0x00007fffe125391a: mov     %r13,0x10(%rsp)
  0x00007fffe125391f: mov     %r14,0x8(%rsp)
  0x00007fffe1253924: mov     %r15,(%rsp)
  0x00007fffe1253928: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1253932: movabs  $0x7fffe12538d2,%rsi  ;   {internal_word}
  0x00007fffe125393c: mov     %rsp,%rdx
  0x00007fffe125393f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1253943: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1253948: hlt
  0x00007fffe1253949: pop     %r10              ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@1 (line 210)

  0x00007fffe125394b: mov     0x18(%rdi),%edx   ;*getfield position
                                                ; - java.nio.Buffer::flip@2 (line 357)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; implicit exception: dispatches to 0x00007fffe1253d15
  0x00007fffe125394e: mov     %edx,0x1c(%rdi)   ;*putfield limit
                                                ; - java.nio.Buffer::flip@5 (line 357)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)

  0x00007fffe1253951: movl    $0x0,0x18(%rdi)   ;*putfield position
                                                ; - java.nio.Buffer::flip@10 (line 358)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)

  0x00007fffe1253958: movl    $0xffffffff,0xc(%rdi)  ;*putfield mark
                                                ; - java.nio.Buffer::flip@15 (line 359)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)

  0x00007fffe125395f: cmp     $0x0,%edx
  0x00007fffe1253962: mov     $0x0,%ebx
  0x00007fffe1253967: cmovnl  %rdx,%rbx
  0x00007fffe125396b: mov     %ebx,0x40(%rsp)
  0x00007fffe125396f: cmp     $0x0,%ebx
  ;;   48 branch [LE] [B8] 
  0x00007fffe1253972: jle     0x7fffe1253bb1    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@57 (line 216)

  ;;  block B7 [60, 64]

  0x00007fffe1253978: mov     0x28(%rsi),%eax
  0x00007fffe125397b: push    %r10
  0x00007fffe125397d: cmp     0x16b0625c(%rip),%r12  ;   {external_word}
  0x00007fffe1253984: je      0x7fffe1253a01
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125398a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125398f: sub     $0x80,%rsp
  0x00007fffe1253996: mov     %rax,0x78(%rsp)
  0x00007fffe125399b: mov     %rcx,0x70(%rsp)
  0x00007fffe12539a0: mov     %rdx,0x68(%rsp)
  0x00007fffe12539a5: mov     %rbx,0x60(%rsp)
  0x00007fffe12539aa: mov     %rbp,0x50(%rsp)
  0x00007fffe12539af: mov     %rsi,0x48(%rsp)
  0x00007fffe12539b4: mov     %rdi,0x40(%rsp)
  0x00007fffe12539b9: mov     %r8,0x38(%rsp)
  0x00007fffe12539be: mov     %r9,0x30(%rsp)
  0x00007fffe12539c3: mov     %r10,0x28(%rsp)
  0x00007fffe12539c8: mov     %r11,0x20(%rsp)
  0x00007fffe12539cd: mov     %r12,0x18(%rsp)
  0x00007fffe12539d2: mov     %r13,0x10(%rsp)
  0x00007fffe12539d7: mov     %r14,0x8(%rsp)
  0x00007fffe12539dc: mov     %r15,(%rsp)
  0x00007fffe12539e0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12539ea: movabs  $0x7fffe125398a,%rsi  ;   {internal_word}
  0x00007fffe12539f4: mov     %rsp,%rdx
  0x00007fffe12539f7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12539fb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1253a00: hlt
  0x00007fffe1253a01: pop     %r10              ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)

  0x00007fffe1253a03: cmp     $0x0,%rax
  ;;   62 branch [EQ] [B10] 
  0x00007fffe1253a07: je      0x7fffe1253a40    ;*ifnull
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@64 (line 217)

  ;;  block B9 [67, 81]

  0x00007fffe1253a0d: cmp     (%rax),%rax       ; implicit exception: dispatches to 0x00007fffe1253d91
  0x00007fffe1253a10: mov     %rdi,%rdx
  0x00007fffe1253a13: mov     %rax,%rsi         ;*invokeinterface write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@75 (line 218)

  0x00007fffe1253a16: nop
  0x00007fffe1253a17: nop
  0x00007fffe1253a18: nop
  0x00007fffe1253a19: nop
  0x00007fffe1253a1a: nop
  0x00007fffe1253a1b: nop
  0x00007fffe1253a1c: nop
  0x00007fffe1253a1d: movabs  $0xffffffffffffffff,%rax
  0x00007fffe1253a27: callq   0x7fffe11060c0    ; OopMap{[72]=Oop off=460}
                                                ;*invokeinterface write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@75 (line 218)
                                                ;   {virtual_call}
  0x00007fffe1253a2c: cmp     0x40(%rsp),%eax
  0x00007fffe1253a30: mov     0x48(%rsp),%rsi
  ;;   80 branch [EQ] [B8] 
  0x00007fffe1253a35: je      0x7fffe1253bb1
  ;;   82 branch [AL] [B8] 
  0x00007fffe1253a3b: jmpq    0x7fffe1253bb1    ;*if_icmpeq
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@81 (line 218)

  ;;  block B10 [99, 4]

  0x00007fffe1253a40: mov     0x24(%rsi),%ebx
  0x00007fffe1253a43: push    %r10
  0x00007fffe1253a45: cmp     0x16b06194(%rip),%r12  ;   {external_word}
  0x00007fffe1253a4c: je      0x7fffe1253ac9
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1253a52: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1253a57: sub     $0x80,%rsp
  0x00007fffe1253a5e: mov     %rax,0x78(%rsp)
  0x00007fffe1253a63: mov     %rcx,0x70(%rsp)
  0x00007fffe1253a68: mov     %rdx,0x68(%rsp)
  0x00007fffe1253a6d: mov     %rbx,0x60(%rsp)
  0x00007fffe1253a72: mov     %rbp,0x50(%rsp)
  0x00007fffe1253a77: mov     %rsi,0x48(%rsp)
  0x00007fffe1253a7c: mov     %rdi,0x40(%rsp)
  0x00007fffe1253a81: mov     %r8,0x38(%rsp)
  0x00007fffe1253a86: mov     %r9,0x30(%rsp)
  0x00007fffe1253a8b: mov     %r10,0x28(%rsp)
  0x00007fffe1253a90: mov     %r11,0x20(%rsp)
  0x00007fffe1253a95: mov     %r12,0x18(%rsp)
  0x00007fffe1253a9a: mov     %r13,0x10(%rsp)
  0x00007fffe1253a9f: mov     %r14,0x8(%rsp)
  0x00007fffe1253aa4: mov     %r15,(%rsp)
  0x00007fffe1253aa8: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1253ab2: movabs  $0x7fffe1253a52,%rsi  ;   {internal_word}
  0x00007fffe1253abc: mov     %rsp,%rdx
  0x00007fffe1253abf: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1253ac3: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1253ac8: hlt
  0x00007fffe1253ac9: pop     %r10              ;*getfield out
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@100 (line 221)

  0x00007fffe1253acb: mov     %rbx,0x58(%rsp)
  0x00007fffe1253ad0: mov     0x2c(%rdi),%ecx
  0x00007fffe1253ad3: push    %r10
  0x00007fffe1253ad5: cmp     0x16b06104(%rip),%r12  ;   {external_word}
  0x00007fffe1253adc: je      0x7fffe1253b59
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1253ae2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1253ae7: sub     $0x80,%rsp
  0x00007fffe1253aee: mov     %rax,0x78(%rsp)
  0x00007fffe1253af3: mov     %rcx,0x70(%rsp)
  0x00007fffe1253af8: mov     %rdx,0x68(%rsp)
  0x00007fffe1253afd: mov     %rbx,0x60(%rsp)
  0x00007fffe1253b02: mov     %rbp,0x50(%rsp)
  0x00007fffe1253b07: mov     %rsi,0x48(%rsp)
  0x00007fffe1253b0c: mov     %rdi,0x40(%rsp)
  0x00007fffe1253b11: mov     %r8,0x38(%rsp)
  0x00007fffe1253b16: mov     %r9,0x30(%rsp)
  0x00007fffe1253b1b: mov     %r10,0x28(%rsp)
  0x00007fffe1253b20: mov     %r11,0x20(%rsp)
  0x00007fffe1253b25: mov     %r12,0x18(%rsp)
  0x00007fffe1253b2a: mov     %r13,0x10(%rsp)
  0x00007fffe1253b2f: mov     %r14,0x8(%rsp)
  0x00007fffe1253b34: mov     %r15,(%rsp)
  0x00007fffe1253b38: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1253b42: movabs  $0x7fffe1253ae2,%rsi  ;   {internal_word}
  0x00007fffe1253b4c: mov     %rsp,%rdx
  0x00007fffe1253b4f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1253b53: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1253b58: hlt
  0x00007fffe1253b59: pop     %r10              ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  0x00007fffe1253b5b: mov     %rcx,0x60(%rsp)
  0x00007fffe1253b60: cmp     $0x0,%rcx
  ;;   96 branch [EQ] [B21] 
  0x00007fffe1253b64: je      0x7fffe1253cd6    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  ;;  block B22 [15, 19]

  0x00007fffe1253b6a: movsbl  0x28(%rdi),%edx   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  0x00007fffe1253b6e: cmp     $0x0,%edx
  ;;  106 branch [NE] [B23] 
  0x00007fffe1253b71: jne     0x7fffe1253cae    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  ;;  block B24 [30, 4]

  0x00007fffe1253b77: cmp     $0x0,%rcx
  ;;  114 branch [EQ] [B27] 
  0x00007fffe1253b7b: je      0x7fffe1253c86    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::arrayOffset@4 (line 1029)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  ;;  block B28 [15, 19]

  0x00007fffe1253b81: cmp     $0x0,%edx
  ;;  122 branch [NE] [B29] 
  0x00007fffe1253b84: jne     0x7fffe1253c5f    ;*ifeq
                                                ; - java.nio.ByteBuffer::arrayOffset@19 (line 1031)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  ;;  block B30 [30, 123]

  0x00007fffe1253b8a: mov     0x24(%rdi),%r8d   ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  0x00007fffe1253b8e: mov     %rcx,%rdx
  0x00007fffe1253b91: mov     %r8,%rcx
  0x00007fffe1253b94: mov     0x40(%rsp),%r8d
  0x00007fffe1253b99: mov     %rbx,%rsi         ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1253b9c: nop
  0x00007fffe1253b9d: movabs  $0xffffffffffffffff,%rax
  0x00007fffe1253ba7: callq   0x7fffe11060c0    ; OopMap{[72]=Oop off=844}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {virtual_call}
  0x00007fffe1253bac: mov     0x48(%rsp),%rsi
  ;;  block B8 [123, 131]

  0x00007fffe1253bb1: mov     0x20(%rsi),%edx
  0x00007fffe1253bb4: push    %r10
  0x00007fffe1253bb6: cmp     0x16b06023(%rip),%r12  ;   {external_word}
  0x00007fffe1253bbd: je      0x7fffe1253c3a
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1253bc3: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1253bc8: sub     $0x80,%rsp
  0x00007fffe1253bcf: mov     %rax,0x78(%rsp)
  0x00007fffe1253bd4: mov     %rcx,0x70(%rsp)
  0x00007fffe1253bd9: mov     %rdx,0x68(%rsp)
  0x00007fffe1253bde: mov     %rbx,0x60(%rsp)
  0x00007fffe1253be3: mov     %rbp,0x50(%rsp)
  0x00007fffe1253be8: mov     %rsi,0x48(%rsp)
  0x00007fffe1253bed: mov     %rdi,0x40(%rsp)
  0x00007fffe1253bf2: mov     %r8,0x38(%rsp)
  0x00007fffe1253bf7: mov     %r9,0x30(%rsp)
  0x00007fffe1253bfc: mov     %r10,0x28(%rsp)
  0x00007fffe1253c01: mov     %r11,0x20(%rsp)
  0x00007fffe1253c06: mov     %r12,0x18(%rsp)
  0x00007fffe1253c0b: mov     %r13,0x10(%rsp)
  0x00007fffe1253c10: mov     %r14,0x8(%rsp)
  0x00007fffe1253c15: mov     %r15,(%rsp)
  0x00007fffe1253c19: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1253c23: movabs  $0x7fffe1253bc3,%rsi  ;   {internal_word}
  0x00007fffe1253c2d: mov     %rsp,%rdx
  0x00007fffe1253c30: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1253c34: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1253c39: hlt
  0x00007fffe1253c3a: pop     %r10              ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@124 (line 224)

  0x00007fffe1253c3c: movl    $0x0,0x18(%rdx)   ;*putfield position
                                                ; - java.nio.Buffer::clear@2 (line 329)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; implicit exception: dispatches to 0x00007fffe1253e0d
  0x00007fffe1253c43: mov     0x20(%rdx),%eax   ;*getfield capacity
                                                ; - java.nio.Buffer::clear@7 (line 330)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)

  0x00007fffe1253c46: mov     %eax,0x1c(%rdx)   ;*putfield limit
                                                ; - java.nio.Buffer::clear@10 (line 330)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)

  0x00007fffe1253c49: movl    $0xffffffff,0xc(%rdx)  ;*putfield mark
                                                ; - java.nio.Buffer::clear@15 (line 331)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)

  0x00007fffe1253c50: add     $0x90,%rsp
  0x00007fffe1253c57: pop     %rbp
  0x00007fffe1253c58: test    %eax,0x16da74a2(%rip)  ;   {poll_return}
  0x00007fffe1253c5e: retq                      ;*return
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@131 (line 225)

  ;;  block B29 [22, 29]

  ;;  162 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:22]
  0x00007fffe1253c5f: nop
  0x00007fffe1253c60: jmpq    0x7fffe1253e98    ;   {no_reloc}
  0x00007fffe1253c65: add     %al,(%rax)
  0x00007fffe1253c67: add     %al,(%rax)
  0x00007fffe1253c69: add     %ch,%cl
  0x00007fffe1253c6b: xor     (%rdx),%eax
  0x00007fffe1253c6d: add     %al,(%rax)        ;*new  ; - java.nio.ByteBuffer::arrayOffset@22 (line 1032)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  0x00007fffe1253c6f: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.ByteBuffer::arrayOffset@26 (line 1032)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  0x00007fffe1253c72: mov     %rax,0x50(%rsp)
  0x00007fffe1253c77: callq   0x7fffe1105e80    ; OopMap{[72]=Oop [80]=Oop [88]=Oop [96]=Oop off=1052}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.ByteBuffer::arrayOffset@26 (line 1032)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)
                                                ;   {optimized virtual_call}
  0x00007fffe1253c7c: mov     0x50(%rsp),%rax
  0x00007fffe1253c81: jmpq    0x7fffe1253f4c    ;*athrow
                                                ; - java.nio.ByteBuffer::arrayOffset@29 (line 1032)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  ;;  block B27 [7, 14]

  ;;  180 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1253c86: nop
  0x00007fffe1253c87: nop
  0x00007fffe1253c88: jmpq    0x7fffe1253ebe    ;   {no_reloc}
  0x00007fffe1253c8d: add     %al,(%rax)
  0x00007fffe1253c8f: add     %al,(%rax)
  0x00007fffe1253c91: add     %ch,%cl
  0x00007fffe1253c93: xor     %eax,(%rdx)
  0x00007fffe1253c95: add     %al,(%rax)        ;*new  ; - java.nio.ByteBuffer::arrayOffset@7 (line 1030)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  0x00007fffe1253c97: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.ByteBuffer::arrayOffset@11 (line 1030)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  0x00007fffe1253c9a: mov     %rax,0x68(%rsp)
  0x00007fffe1253c9f: callq   0x7fffe1105e80    ; OopMap{[88]=Oop [72]=Oop [104]=Oop [96]=Oop off=1092}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.ByteBuffer::arrayOffset@11 (line 1030)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)
                                                ;   {optimized virtual_call}
  0x00007fffe1253ca4: mov     0x68(%rsp),%rax
  0x00007fffe1253ca9: jmpq    0x7fffe1253f4c    ;*athrow
                                                ; - java.nio.ByteBuffer::arrayOffset@14 (line 1030)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  ;;  block B23 [22, 29]

  ;;  198 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:22]
  0x00007fffe1253cae: nop
  0x00007fffe1253caf: nop
  0x00007fffe1253cb0: jmpq    0x7fffe1253ee4    ;   {no_reloc}
  0x00007fffe1253cb5: add     %al,(%rax)
  0x00007fffe1253cb7: add     %al,(%rax)
  0x00007fffe1253cb9: add     %ch,%cl
  0x00007fffe1253cbb: Fatal error: Disassembling failed with error code: 15<nmethod compile_id='53' compiler='C1' level='2' entry='0x00007fffe1253860' size='4184' address='0x00007fffe12535d0' relocation_offset='304' insts_offset='656' stub_offset='2448' scopes_data_offset='2776' scopes_pcs_offset='3232' dependencies_offset='4144' nul_chk_table_offset='4152' method='sun/nio/cs/StreamEncoder writeBytes ()V' bytes='132' count='51232' iicount='51232' stamp='119.264'/>
<writer thread='140737327351552'/>
<task_queued compile_id='99' method='java/nio/Buffer clear ()Ljava/nio/Buffer;' bytes='20' count='51232' iicount='51232' stamp='119.264' comment='tiered' hot_count='51232'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe125c110:
Code:
Argument 0 is unknown.RIP: 0x7fffe125c300 Code size: 0x00000a48
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c28198} &apos;write&apos; &apos;([CII)V&apos; in &apos;java/io/OutputStreamWriter&apos;
  # this:     rsi:rsi   = &apos;java/io/OutputStreamWriter&apos;
  # parm0:    rdx:rdx   = &apos;[C&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0x60]  (sp of caller)
  ;; N1020: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe125c300: mov     0x8(%rsi),%r10d
  0x00007fffe125c304: shl     $0x3,%r10
  0x00007fffe125c308: cmp     %r10,%rax
  0x00007fffe125c30b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe125c311: nop
  0x00007fffe125c312: nop
  0x00007fffe125c313: nop
  0x00007fffe125c314: nop
  0x00007fffe125c315: nop
  0x00007fffe125c316: nop
  0x00007fffe125c317: nop
  0x00007fffe125c318: nop
  0x00007fffe125c319: nop
  0x00007fffe125c31a: nop
  0x00007fffe125c31b: nop
  0x00007fffe125c31c: nop
  0x00007fffe125c31d: nop
  0x00007fffe125c31e: nop
  0x00007fffe125c31f: nop
[Verified Entry Point]
  ;; B1: #	B65 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe125c320: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125c327: push    %rbp
  0x00007fffe125c328: sub     $0x50,%rsp        ;*synchronization entry
                                                ; - java.io.OutputStreamWriter::write@-1 (line 207)

  0x00007fffe125c32c: mov     %r8d,0x14(%rsp)
  0x00007fffe125c331: mov     %ecx,0x10(%rsp)
  0x00007fffe125c335: mov     %rdx,0x8(%rsp)
  0x00007fffe125c33a: mov     0x14(%rsi),%ecx   ;*getfield se
                                                ; - java.io.OutputStreamWriter::write@1 (line 207)

  0x00007fffe125c33d: mov     0x10(%rcx),%edx   ; implicit exception: dispatches to 0x00007fffe125cad8
  ;; B2: #	B66 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe125c340: mov     (%rdx),%rax       ; implicit exception: dispatches to 0x00007fffe125caed
  ;; B3: #	B36 B4 &lt;- B2  Freq: 0.999998

  0x00007fffe125c343: mov     %rax,%r10
  0x00007fffe125c346: and     $0x7,%r10
  0x00007fffe125c34a: mov     %rdx,%rsi         ;*getfield lock
                                                ; - sun.nio.cs.StreamEncoder::write@1 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c34d: mov     %rcx,%rdi         ;*getfield se
                                                ; - java.io.OutputStreamWriter::write@1 (line 207)

  0x00007fffe125c350: cmp     $0x5,%r10
  0x00007fffe125c354: jne     0x7fffe125c642
  ;; B4: #	B38 B5 &lt;- B3  Freq: 0.999997

  0x00007fffe125c35a: mov     0x8(%rdx),%r10d
  0x00007fffe125c35e: shl     $0x3,%r10
  0x00007fffe125c362: mov     0xb0(%r10),%r10
  0x00007fffe125c369: mov     %r10,%r11
  0x00007fffe125c36c: or      %r15,%r11
  0x00007fffe125c36f: mov     %r11,%r8
  0x00007fffe125c372: xor     %rax,%r8
  0x00007fffe125c375: test    $0xffffffffffffff87,%r8
  0x00007fffe125c37c: jne     0x7fffe125c6c4    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B5: #	B49 B6 &lt;- B37 B36 B4 B42  Freq: 0.999998

  0x00007fffe125c382: movzbl  0x16(%rcx),%ebp   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@1 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c386: test    %ebp,%ebp
  0x00007fffe125c388: je      0x7fffe125c849    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B6: #	B45 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe125c38e: mov     0x10(%rsp),%r11d
  0x00007fffe125c393: test    %r11d,%r11d
  0x00007fffe125c396: jl      0x7fffe125c79e    ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@13 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B7: #	B67 B8 &lt;- B6  Freq: 0.999997

  0x00007fffe125c39c: mov     0x8(%rsp),%r8
  0x00007fffe125c3a1: mov     0xc(%r8),%ebx     ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; implicit exception: dispatches to 0x00007fffe125cb09
  ;; B8: #	B50 B9 &lt;- B7  Freq: 0.999996

  0x00007fffe125c3a5: cmp     %ebx,%r11d
  0x00007fffe125c3a8: jnle    0x7fffe125c885    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@19 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B9: #	B46 B10 &lt;- B8  Freq: 0.999996

  0x00007fffe125c3ae: mov     0x14(%rsp),%r10d
  0x00007fffe125c3b3: test    %r10d,%r10d
  0x00007fffe125c3b6: jl      0x7fffe125c7d5    ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@23 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B10: #	B51 B11 &lt;- B9  Freq: 0.999995

  0x00007fffe125c3bc: mov     %r11d,%r9d
  0x00007fffe125c3bf: add     %r10d,%r9d        ;*iadd
                                                ; - sun.nio.cs.StreamEncoder::write@28 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c3c2: cmp     %ebx,%r9d
  0x00007fffe125c3c5: jnle    0x7fffe125c8b9    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@31 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B11: #	B52 B12 &lt;- B10  Freq: 0.999995

  0x00007fffe125c3cb: test    %r9d,%r9d
  0x00007fffe125c3ce: jl      0x7fffe125c8e5    ;*ifge
                                                ; - sun.nio.cs.StreamEncoder::write@37 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B12: #	B53 B13 &lt;- B11  Freq: 0.999994

  0x00007fffe125c3d4: test    %r10d,%r10d
  0x00007fffe125c3d7: je      0x7fffe125c90d    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::write@49 (line 122)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B13: #	B33 B14 &lt;- B12  Freq: 0.999994

  0x00007fffe125c3dd: mov     0x70(%r15),%rax
  0x00007fffe125c3e1: mov     %rax,%rbp
  0x00007fffe125c3e4: add     $0x30,%rbp
  0x00007fffe125c3e8: cmp     0x80(%r15),%rbp
  0x00007fffe125c3ef: jnb     0x7fffe125c5dd
  ;; B14: #	B15 &lt;- B13  Freq: 0.999894

  0x00007fffe125c3f5: mov     %rbp,0x70(%r15)
  0x00007fffe125c3f9: prefetchw 0x100(%rbp)
  0x00007fffe125c400: mov     $0x20008fd1,%r10d  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe125c406: shl     $0x3,%r10
  0x00007fffe125c40a: mov     0xb0(%r10),%r10
  0x00007fffe125c411: mov     %r10,(%rax)
  0x00007fffe125c414: movl    $0x20008fd1,0x8(%rax)  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe125c41b: mov     %r12,0x10(%rax)
  0x00007fffe125c41f: mov     %r12d,0x18(%rax)
  0x00007fffe125c423: mov     %r12d,0x24(%rax)
  0x00007fffe125c427: mov     %r12,0x28(%rax)   ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B15: #	B54 B16 &lt;- B34 B14  Freq: 0.999994

  0x00007fffe125c42b: movl    $0xffffffff,0xc(%rax)  ;*putfield mark
                                                ; - java.nio.Buffer::&lt;init&gt;@6 (line 185)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c432: mov     %r9d,0x1c(%rax)   ;*putfield limit
                                                ; - java.nio.Buffer::limit@22 (line 276)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c436: mov     %ebx,0x20(%rax)
  0x00007fffe125c439: mov     %rax,%r10         ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c43c: cmp     $0xffffffff,%r9d
  0x00007fffe125c440: jl      0x7fffe125c92d    ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B16: #	B55 B17 &lt;- B15  Freq: 0.999993

  0x00007fffe125c446: cmp     %r9d,%r11d
  0x00007fffe125c449: jnle    0x7fffe125c95d    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B17: #	B56 B18 &lt;- B16  Freq: 0.999993

  0x00007fffe125c44f: cmp     $0xffffffff,%r11d
  0x00007fffe125c453: jl      0x7fffe125c991    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B18: #	B57 B19 &lt;- B17  Freq: 0.999992

  0x00007fffe125c459: mov     %r11d,0x18(%r10)  ;*putfield position
                                                ; - java.nio.Buffer::position@35 (line 246)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c45d: mov     %r10,%rbx
  0x00007fffe125c460: mov     %r8,%rax
  0x00007fffe125c463: push    %r10
  0x00007fffe125c465: cmp     0x16afd774(%rip),%r12  ;   {external_word}
  0x00007fffe125c46c: je      0x7fffe125c4e9
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe125c472: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125c477: sub     $0x80,%rsp
  0x00007fffe125c47e: mov     %rax,0x78(%rsp)
  0x00007fffe125c483: mov     %rcx,0x70(%rsp)
  0x00007fffe125c488: mov     %rdx,0x68(%rsp)
  0x00007fffe125c48d: mov     %rbx,0x60(%rsp)
  0x00007fffe125c492: mov     %rbp,0x50(%rsp)
  0x00007fffe125c497: mov     %rsi,0x48(%rsp)
  0x00007fffe125c49c: mov     %rdi,0x40(%rsp)
  0x00007fffe125c4a1: mov     %r8,0x38(%rsp)
  0x00007fffe125c4a6: mov     %r9,0x30(%rsp)
  0x00007fffe125c4ab: mov     %r10,0x28(%rsp)
  0x00007fffe125c4b0: mov     %r11,0x20(%rsp)
  0x00007fffe125c4b5: mov     %r12,0x18(%rsp)
  0x00007fffe125c4ba: mov     %r13,0x10(%rsp)
  0x00007fffe125c4bf: mov     %r14,0x8(%rsp)
  0x00007fffe125c4c4: mov     %r15,(%rsp)
  0x00007fffe125c4c8: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe125c4d2: movabs  $0x7fffe125c472,%rsi  ;   {internal_word}
  0x00007fffe125c4dc: mov     %rsp,%rdx
  0x00007fffe125c4df: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125c4e3: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125c4e8: hlt
  0x00007fffe125c4e9: pop     %r10
  0x00007fffe125c4eb: mov     %eax,0x2c(%r10)
  0x00007fffe125c4ef: shr     $0x9,%rbx
  0x00007fffe125c4f3: movabs  $0x7ffff591e000,%r8
  0x00007fffe125c4fd: mov     %r12l,(%r8,%rbx)  ;*synchronization entry
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@-1 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c501: movzbl  0x17(%rcx),%ebp   ;*getfield haveLeftoverChar
                                                ; - sun.nio.cs.StreamEncoder::implWrite@9 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c505: test    %ebp,%ebp
  0x00007fffe125c507: jne     0x7fffe125c9c1    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::implWrite@12 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B19: #	B58 B20 &lt;- B18  Freq: 0.999992

  0x00007fffe125c50d: cmp     %r9d,%r11d
  0x00007fffe125c510: jnl     0x7fffe125c9dd    ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@24 (line 270)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B20: #	B68 B21 &lt;- B19  Freq: 0.999991

  0x00007fffe125c516: mov     0x20(%rcx),%r9d   ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implWrite@37 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c51a: mov     0x1c(%rcx),%r11d  ;*getfield encoder
                                                ; - sun.nio.cs.StreamEncoder::implWrite@31 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c51e: mov     0x14(%r11),%ebp   ;*getfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@12 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; implicit exception: dispatches to 0x00007fffe125cb25
  ;; B21: #	B59 B22 &lt;- B20  Freq: 0.99999

  0x00007fffe125c522: test    %ebp,%ebp
  0x00007fffe125c524: je      0x7fffe125ca05    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B22: #	B60 B23 &lt;- B21  Freq: 0.99999

  0x00007fffe125c52a: cmp     $0x1,%ebp
  0x00007fffe125c52d: jne     0x7fffe125ca2d    ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B23: #	B69 B24 &lt;- B22  Freq: 0.999989

  0x00007fffe125c533: movl    $0x1,0x14(%r11)   ;*putfield state
                                                ; - java.nio.charset.CharsetEncoder::encode@51 (line 573)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c53b: mov     0x2c(%r9),%ebp    ;*getfield hb
                                                ; - java.nio.ByteBuffer::hasArray@1 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; implicit exception: dispatches to 0x00007fffe125cb41
  ;; B24: #	B61 B25 &lt;- B23  Freq: 0.999988

  0x00007fffe125c53f: test    %ebp,%ebp
  0x00007fffe125c541: je      0x7fffe125ca55    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B25: #	B47 B26 &lt;- B24  Freq: 0.999988

  0x00007fffe125c547: movzbl  0x28(%r9),%ebp    ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::hasArray@8 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c54c: test    %ebp,%ebp
  0x00007fffe125c54e: jne     0x7fffe125c7f5    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B26: #	B64 B27 &lt;- B25  Freq: 0.999987

  0x00007fffe125c554: mov     %r10,0x20(%rsp)
  0x00007fffe125c559: mov     %rdi,(%rsp)
  0x00007fffe125c55d: mov     %rsi,0x18(%rsp)
  0x00007fffe125c562: mov     %edx,0x10(%rsp)
  0x00007fffe125c566: mov     %ecx,0x8(%rsp)    ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c56a: mov     %r9,%r10          ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implWrite@37 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c56d: mov     %r10,0x28(%rsp)
  0x00007fffe125c572: mov     %r9d,0xc(%rsp)
  0x00007fffe125c577: mov     %r11,%rbp         ;*getfield encoder
                                                ; - sun.nio.cs.StreamEncoder::implWrite@31 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c57a: mov     %r11d,0x14(%rsp)
  0x00007fffe125c57f: mov     %rbp,%rsi
  0x00007fffe125c582: mov     0x20(%rsp),%rdx
  0x00007fffe125c587: mov     %r10,%rcx
  0x00007fffe125c58a: nop
  0x00007fffe125c58b: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=656}
                                                ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {optimized virtual_call}
  ;; B27: #	B70 B28 &lt;- B26  Freq: 0.999967

  0x00007fffe125c590: mov     0xc(%rax),%ebp    ;*getfield type
                                                ; - java.nio.charset.CoderResult::isOverflow@1 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ; implicit exception: dispatches to 0x00007fffe125cb69
  ;; B28: #	B62 B29 &lt;- B27  Freq: 0.999966

  0x00007fffe125c593: cmp     $0x1,%ebp
  0x00007fffe125c596: je      0x7fffe125ca85    ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B29: #	B48 B30 &lt;- B28  Freq: 0.999966

  0x00007fffe125c59c: test    %ebp,%ebp
  0x00007fffe125c59e: jne     0x7fffe125c821    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B30: #	B63 B31 &lt;- B29  Freq: 0.999965

  0x00007fffe125c5a4: mov     0x20(%rsp),%r10
  0x00007fffe125c5a9: mov     0x1c(%r10),%ebp
  0x00007fffe125c5ad: sub     0x18(%r10),%ebp   ;*isub
                                                ; - java.nio.Buffer::remaining@8 (line 391)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@84 (line 274)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c5b1: test    %ebp,%ebp
  0x00007fffe125c5b3: jnle    0x7fffe125caad
  ;; B31: #	B43 B32 &lt;- B30  Freq: 0.999965

  0x00007fffe125c5b9: mov     0x10(%rsp),%r10d
  0x00007fffe125c5be: mov     $0x7,%r11d
  0x00007fffe125c5c4: and     (%r10),%r11
  0x00007fffe125c5c7: cmp     $0x5,%r11
  0x00007fffe125c5cb: jne     0x7fffe125c6f3    ;*synchronization entry
                                                ; - java.io.OutputStreamWriter::write@-1 (line 207)

  ;; B32: #	N1020 &lt;- B44 B43 B31  Freq: 0.999965

  0x00007fffe125c5d1: add     $0x50,%rsp
  0x00007fffe125c5d5: pop     %rbp
  0x00007fffe125c5d6: test    %eax,0x16d9ea24(%rip)  ;   {poll_return}
  0x00007fffe125c5dc: retq
  ;; B33: #	B72 B34 &lt;- B13  Freq: 0.000100016

  0x00007fffe125c5dd: mov     %r9d,0x28(%rsp)
  0x00007fffe125c5e2: mov     %ebx,0x14(%rsp)
  0x00007fffe125c5e6: mov     %rdi,0x20(%rsp)
  0x00007fffe125c5eb: mov     %rsi,0x18(%rsp)
  0x00007fffe125c5f0: mov     %edx,0x10(%rsp)
  0x00007fffe125c5f4: mov     %ecx,0xc(%rsp)
  0x00007fffe125c5f8: mov     %r11d,0x8(%rsp)
  0x00007fffe125c5fd: mov     %r8,(%rsp)
  0x00007fffe125c601: movabs  $0x100047e88,%rsi  ;   {metadata(&apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe125c60b: mov     %r10d,%ebp
  0x00007fffe125c60e: nop
  0x00007fffe125c60f: callq   0x7fffe1106520    ; OopMap{[0]=Oop [12]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop off=788}
                                                ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B34: #	B15 &lt;- B33  Freq: 0.000100014

  0x00007fffe125c614: mov     (%rsp),%r8
  0x00007fffe125c618: mov     0x8(%rsp),%r11d
  0x00007fffe125c61d: mov     0xc(%rsp),%ecx
  0x00007fffe125c621: mov     0x10(%rsp),%edx
  0x00007fffe125c625: mov     0x18(%rsp),%rsi
  0x00007fffe125c62a: mov     0x20(%rsp),%rdi
  0x00007fffe125c62f: mov     0x14(%rsp),%ebx
  0x00007fffe125c633: mov     0x28(%rsp),%r9d
  0x00007fffe125c638: jmpq    0x7fffe125c42b
  ;; B35: #	B36 &lt;- B38  Freq: 9.99997e-13

  0x00007fffe125c63d: lock cmpxchg %r10,(%rdx)
  ;; B36: #	B5 B37 &lt;- B3 B35  Freq: 9.99999e-07

  0x00007fffe125c642: lea     0x40(%rsp),%rbx
  0x00007fffe125c647: mov     (%rsi),%rax
  0x00007fffe125c64a: test    $0x2,%rax
  0x00007fffe125c650: jne     0x7fffe125c676
  0x00007fffe125c652: or      $0x1,%rax
  0x00007fffe125c656: mov     %rax,(%rbx)
  0x00007fffe125c659: lock cmpxchg %rbx,(%rsi)
  0x00007fffe125c65e: je      0x7fffe125c68f
  0x00007fffe125c664: sub     %rsp,%rax
  0x00007fffe125c667: and     $0xfffffffffffff007,%rax
  0x00007fffe125c66e: mov     %rax,(%rbx)
  0x00007fffe125c671: jmpq    0x7fffe125c68f
  0x00007fffe125c676: movq    $0x3,(%rbx)
  0x00007fffe125c67d: mov     %rax,%rbx
  0x00007fffe125c680: mov     0x16(%rbx),%rax
  0x00007fffe125c684: test    %rax,%rax
  0x00007fffe125c687: jne     0x7fffe125c68f
  0x00007fffe125c689: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe125c68f: je      0x7fffe125c382
  ;; B37: #	B5 &lt;- B41 B36  Freq: 1.99999e-12

  0x00007fffe125c695: mov     %rdi,0x20(%rsp)
  0x00007fffe125c69a: mov     %rsi,0x18(%rsp)
  0x00007fffe125c69f: mov     %edx,(%rsp)
  0x00007fffe125c6a2: mov     %ecx,%ebp
  0x00007fffe125c6a4: lea     0x40(%rsp),%rdx
  0x00007fffe125c6a9: nop
  0x00007fffe125c6aa: nop
  0x00007fffe125c6ab: callq   0x7fffe11658a0    ; OopMap{rbp=NarrowOop [0]=NarrowOop [8]=Oop [24]=Oop [32]=Oop off=944}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c6b0: mov     %ebp,%ecx
  0x00007fffe125c6b2: mov     (%rsp),%edx
  0x00007fffe125c6b5: mov     0x18(%rsp),%rsi
  0x00007fffe125c6ba: mov     0x20(%rsp),%rdi
  0x00007fffe125c6bf: jmpq    0x7fffe125c382
  ;; B38: #	B35 B39 &lt;- B4  Freq: 9.99997e-07

  0x00007fffe125c6c4: test    $0x7,%r8
  0x00007fffe125c6cb: jne     0x7fffe125c63d
  ;; B39: #	B41 B40 &lt;- B38  Freq: 9.99996e-07

  0x00007fffe125c6d1: test    $0x300,%r8
  0x00007fffe125c6d8: jne     0x7fffe125c6e7
  ;; B40: #	B41 &lt;- B39  Freq: 9.99995e-07

  0x00007fffe125c6da: and     $0x37f,%rax
  0x00007fffe125c6e1: mov     %rax,%r11
  0x00007fffe125c6e4: or      %r15,%r11
  ;; B41: #	B37 B42 &lt;- B40 B39  Freq: 9.99996e-07

  0x00007fffe125c6e7: lock cmpxchg %r11,(%rdx)
  0x00007fffe125c6ec: jne     0x7fffe125c695
  ;; B42: #	B5 &lt;- B41  Freq: 9.99995e-07

  0x00007fffe125c6ee: jmpq    0x7fffe125c382
  ;; B43: #	B32 B44 &lt;- B31  Freq: 9.99965e-07

  0x00007fffe125c6f3: mov     0x18(%rsp),%r11
  0x00007fffe125c6f8: lea     0x40(%rsp),%rax
  0x00007fffe125c6fd: cmpq    $0x0,(%rax)
  0x00007fffe125c704: je      0x7fffe125c77e
  0x00007fffe125c70a: mov     (%r11),%r10
  0x00007fffe125c70d: test    $0x2,%r10
  0x00007fffe125c714: je      0x7fffe125c776
  0x00007fffe125c716: mov     0x16(%r10),%rax
  0x00007fffe125c71a: xor     %r15,%rax
  0x00007fffe125c71d: or      0x26(%r10),%rax
  0x00007fffe125c721: jne     0x7fffe125c77e
  0x00007fffe125c723: mov     0x36(%r10),%rax
  0x00007fffe125c727: or      0x3e(%r10),%rax
  0x00007fffe125c72b: jne     0x7fffe125c737
  0x00007fffe125c72d: movq    $0x0,0x16(%r10)
  0x00007fffe125c735: jmp     0x7fffe125c77e
  0x00007fffe125c737: cmpq    $0x0,0x46(%r10)
  0x00007fffe125c73f: je      0x7fffe125c76a
  0x00007fffe125c741: movq    $0x0,0x16(%r10)
  0x00007fffe125c749: lock addl $0x0,(%rsp)
  0x00007fffe125c74e: cmpq    $0x0,0x46(%r10)
  0x00007fffe125c756: jne     0x7fffe125c76f
  0x00007fffe125c758: movabs  $0x0,%rax
  0x00007fffe125c762: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe125c768: jne     0x7fffe125c76f
  0x00007fffe125c76a: or      $0x1,%eax
  0x00007fffe125c76d: jmp     0x7fffe125c77e
  0x00007fffe125c76f: test    $0x0,%eax
  0x00007fffe125c774: jmp     0x7fffe125c77e
  0x00007fffe125c776: mov     (%rax),%r10
  0x00007fffe125c779: lock cmpxchg %r10,(%r11)
  0x00007fffe125c77e: je      0x7fffe125c5d1
  ;; B44: #	B32 &lt;- B43  Freq: 9.99965e-13

  0x00007fffe125c784: mov     %r11,%rdi
  0x00007fffe125c787: lea     0x40(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c78c: movabs  $0x7ffff744655c,%r10
  0x00007fffe125c796: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@65 (line 126)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125c799: jmpq    0x7fffe125c5d1
  ;; B45: #	N1020 &lt;- B6  Freq: 4.99999e-07

  0x00007fffe125c79e: mov     $0xffffff65,%esi
  0x00007fffe125c7a3: mov     %ecx,%ebp
  0x00007fffe125c7a5: pushq   0x8(%rsp)
  0x00007fffe125c7aa: popq    (%rsp)
  0x00007fffe125c7ae: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125c7b3: mov     0x14(%rsp),%eax
  0x00007fffe125c7b7: mov     %eax,0xc(%rsp)
  0x00007fffe125c7bb: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125c7c0: mov     %r11d,0x14(%rsp)
  0x00007fffe125c7c5: mov     %edx,0x18(%rsp)
  0x00007fffe125c7c9: nop
  0x00007fffe125c7ca: nop
  0x00007fffe125c7cb: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop off=1232}
                                                ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@13 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c7d0: callq   0x7ffff736b4ea    ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@13 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B46: #	N1020 &lt;- B9  Freq: 4.99998e-07

  0x00007fffe125c7d5: mov     $0xffffff65,%esi
  0x00007fffe125c7da: mov     %ecx,%ebp
  0x00007fffe125c7dc: mov     %r8,(%rsp)
  0x00007fffe125c7e0: mov     %r11d,0x8(%rsp)
  0x00007fffe125c7e5: mov     %edx,0x18(%rsp)
  0x00007fffe125c7e9: nop
  0x00007fffe125c7ea: nop
  0x00007fffe125c7eb: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop off=1264}
                                                ;*iflt
                                                ; - sun.nio.cs.StreamEncoder::write@23 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c7f0: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B47: #	N1020 &lt;- B25  Freq: 4.99994e-07

  0x00007fffe125c7f5: mov     $0xffffff65,%esi
  0x00007fffe125c7fa: mov     %edx,0x4(%rsp)
  0x00007fffe125c7fe: mov     %ecx,0x8(%rsp)
  0x00007fffe125c802: mov     %r10,0x18(%rsp)
  0x00007fffe125c807: mov     %r11d,0x24(%rsp)
  0x00007fffe125c80c: mov     %r10,0x28(%rsp)
  0x00007fffe125c811: mov     %r9d,0x30(%rsp)
  0x00007fffe125c816: nop
  0x00007fffe125c817: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [8]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=NarrowOop off=1308}
                                                ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c81c: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.ByteBuffer::hasArray@11 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B48: #	N1020 &lt;- B29  Freq: 4.99983e-07

  0x00007fffe125c821: mov     $0xffffff65,%esi
  0x00007fffe125c826: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125c82b: mov     0x10(%rsp),%eax
  0x00007fffe125c82f: mov     %eax,(%rsp)
  0x00007fffe125c832: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125c837: mov     %rax,0x28(%rsp)
  0x00007fffe125c83c: nop
  0x00007fffe125c83d: nop
  0x00007fffe125c83e: nop
  0x00007fffe125c83f: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=NarrowOop [12]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop off=1348}
                                                ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c844: callq   0x7ffff736b4ea    ;*ifne
                                                ; - java.nio.charset.CoderResult::isUnderflow@4 (line 120)
                                                ; - java.nio.charset.CharsetEncoder::encode@102 (line 589)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B49: #	N1020 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe125c849: mov     $0xffffff65,%esi
  0x00007fffe125c84e: mov     %ecx,(%rsp)
  0x00007fffe125c851: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125c856: mov     0x10(%rsp),%eax
  0x00007fffe125c85a: mov     %eax,0x4(%rsp)
  0x00007fffe125c85e: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125c863: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125c868: mov     0x14(%rsp),%eax
  0x00007fffe125c86c: mov     %eax,0x10(%rsp)
  0x00007fffe125c870: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125c875: mov     %edx,0x18(%rsp)
  0x00007fffe125c879: nop
  0x00007fffe125c87a: nop
  0x00007fffe125c87b: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=Oop [24]=NarrowOop off=1408}
                                                ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c880: callq   0x7ffff736b4ea    ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::ensureOpen@4 (line 44)
                                                ; - sun.nio.cs.StreamEncoder::write@9 (line 118)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B50: #	N1020 &lt;- B8  Freq: 4.76835e-07

  0x00007fffe125c885: mov     $0xffffff65,%esi
  0x00007fffe125c88a: mov     %ecx,%ebp
  0x00007fffe125c88c: mov     %r8,(%rsp)
  0x00007fffe125c890: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125c895: mov     0x14(%rsp),%eax
  0x00007fffe125c899: mov     %eax,0xc(%rsp)
  0x00007fffe125c89d: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125c8a2: mov     %r11d,0x14(%rsp)
  0x00007fffe125c8a7: mov     %edx,0x18(%rsp)
  0x00007fffe125c8ab: mov     %ebx,0x1c(%rsp)
  0x00007fffe125c8af: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop off=1460}
                                                ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@19 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c8b4: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@19 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B51: #	N1020 &lt;- B10  Freq: 4.76835e-07

  0x00007fffe125c8b9: mov     $0xffffff65,%esi
  0x00007fffe125c8be: mov     %ecx,%ebp
  0x00007fffe125c8c0: mov     %r8,(%rsp)
  0x00007fffe125c8c4: mov     %r11d,0x8(%rsp)
  0x00007fffe125c8c9: mov     %r10d,0xc(%rsp)
  0x00007fffe125c8ce: mov     %edx,0x14(%rsp)
  0x00007fffe125c8d2: mov     %r9d,0x18(%rsp)
  0x00007fffe125c8d7: mov     %ebx,0x1c(%rsp)
  0x00007fffe125c8db: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [20]=NarrowOop off=1504}
                                                ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@31 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c8e0: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::write@31 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B52: #	N1020 &lt;- B11  Freq: 4.76835e-07

  0x00007fffe125c8e5: mov     $0xffffff65,%esi
  0x00007fffe125c8ea: mov     %ecx,%ebp
  0x00007fffe125c8ec: mov     %r8,(%rsp)
  0x00007fffe125c8f0: mov     %r11d,0x8(%rsp)
  0x00007fffe125c8f5: mov     %r10d,0xc(%rsp)
  0x00007fffe125c8fa: mov     %edx,0x14(%rsp)
  0x00007fffe125c8fe: mov     %r9d,0x18(%rsp)
  0x00007fffe125c903: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [20]=NarrowOop off=1544}
                                                ;*ifge
                                                ; - sun.nio.cs.StreamEncoder::write@37 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c908: callq   0x7ffff736b4ea    ;*ifge
                                                ; - sun.nio.cs.StreamEncoder::write@37 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B53: #	N1020 &lt;- B12  Freq: 4.76834e-07

  0x00007fffe125c90d: mov     $0xffffff65,%esi
  0x00007fffe125c912: mov     %ecx,%ebp
  0x00007fffe125c914: mov     %r8,(%rsp)
  0x00007fffe125c918: mov     %r11d,0x8(%rsp)
  0x00007fffe125c91d: mov     %edx,0x18(%rsp)
  0x00007fffe125c921: nop
  0x00007fffe125c922: nop
  0x00007fffe125c923: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop off=1576}
                                                ;*ifne
                                                ; - sun.nio.cs.StreamEncoder::write@49 (line 122)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c928: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::limit@30 (line 277)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B54: #	N1020 &lt;- B15  Freq: 4.76834e-07

  0x00007fffe125c92d: mov     $0xffffff65,%esi
  0x00007fffe125c932: mov     %edx,(%rsp)
  0x00007fffe125c935: mov     %ecx,0x4(%rsp)
  0x00007fffe125c939: mov     %r8,0x8(%rsp)
  0x00007fffe125c93e: mov     %r11d,0x10(%rsp)
  0x00007fffe125c943: mov     %r10,0x20(%rsp)
  0x00007fffe125c948: mov     %r10,0x28(%rsp)
  0x00007fffe125c94d: mov     %r9d,0x14(%rsp)
  0x00007fffe125c952: nop
  0x00007fffe125c953: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [8]=Oop [32]=Oop [40]=Oop off=1624}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::limit@43 (line 278)
                                                ; - java.nio.Buffer::&lt;init&gt;@55 (line 201)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c958: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B55: #	N1020 &lt;- B16  Freq: 4.76834e-07

  0x00007fffe125c95d: mov     $0xffffff65,%esi
  0x00007fffe125c962: mov     %edx,(%rsp)
  0x00007fffe125c965: mov     %ecx,0x4(%rsp)
  0x00007fffe125c969: mov     %r8,0x8(%rsp)
  0x00007fffe125c96e: mov     %r11d,0x14(%rsp)
  0x00007fffe125c973: mov     %r11d,0x18(%rsp)
  0x00007fffe125c978: mov     %r10,0x28(%rsp)
  0x00007fffe125c97d: mov     %r10,0x30(%rsp)
  0x00007fffe125c982: mov     %r9d,0x1c(%rsp)
  0x00007fffe125c987: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [8]=Oop [40]=Oop [48]=Oop off=1676}
                                                ;*if_icmpgt
                                                ; - java.nio.Buffer::position@5 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c98c: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.nio.Buffer::position@9 (line 243)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B56: #	N1020 &lt;- B17  Freq: 4.76834e-07

  0x00007fffe125c991: mov     $0xffffff65,%esi
  0x00007fffe125c996: mov     %edx,(%rsp)
  0x00007fffe125c999: mov     %ecx,0x4(%rsp)
  0x00007fffe125c99d: mov     %r8,0x8(%rsp)
  0x00007fffe125c9a2: mov     %r11d,0x14(%rsp)
  0x00007fffe125c9a7: mov     %r11d,0x18(%rsp)
  0x00007fffe125c9ac: mov     %r10,0x28(%rsp)
  0x00007fffe125c9b1: mov     %r10,0x30(%rsp)
  0x00007fffe125c9b6: nop
  0x00007fffe125c9b7: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [8]=Oop [40]=Oop [48]=Oop off=1724}
                                                ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c9bc: callq   0x7ffff736b4ea    ;*if_icmple
                                                ; - java.nio.Buffer::position@25 (line 245)
                                                ; - java.nio.Buffer::&lt;init&gt;@61 (line 202)
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ; - java.nio.CharBuffer::wrap@7 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B57: #	N1020 &lt;- B18  Freq: 4.76833e-07

  0x00007fffe125c9c1: mov     $0xffffff65,%esi
  0x00007fffe125c9c6: mov     %edx,0x4(%rsp)
  0x00007fffe125c9ca: mov     %ecx,0x8(%rsp)
  0x00007fffe125c9ce: mov     %r10,0x10(%rsp)
  0x00007fffe125c9d3: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [8]=NarrowOop [16]=Oop off=1752}
                                                ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::implWrite@12 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125c9d8: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::implWrite@12 (line 267)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B58: #	N1020 &lt;- B19  Freq: 4.76833e-07

  0x00007fffe125c9dd: mov     $0xffffff65,%esi
  0x00007fffe125c9e2: mov     %edx,(%rsp)
  0x00007fffe125c9e5: mov     %ecx,0x4(%rsp)
  0x00007fffe125c9e9: mov     %r11d,0x8(%rsp)
  0x00007fffe125c9ee: mov     %r10,0x10(%rsp)
  0x00007fffe125c9f3: mov     %r9d,0xc(%rsp)
  0x00007fffe125c9f8: nop
  0x00007fffe125c9f9: nop
  0x00007fffe125c9fa: nop
  0x00007fffe125c9fb: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [16]=Oop off=1792}
                                                ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@24 (line 270)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125ca00: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.nio.Buffer::hasRemaining@8 (line 403)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@24 (line 270)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B59: #	N1020 &lt;- B21  Freq: 4.76832e-07

  0x00007fffe125ca05: mov     $0xffffff65,%esi
  0x00007fffe125ca0a: mov     %edx,0x4(%rsp)
  0x00007fffe125ca0e: mov     %ecx,0x8(%rsp)
  0x00007fffe125ca12: mov     %r11d,0xc(%rsp)
  0x00007fffe125ca17: mov     %r10,0x18(%rsp)
  0x00007fffe125ca1c: mov     %r9d,0x20(%rsp)
  0x00007fffe125ca21: nop
  0x00007fffe125ca22: nop
  0x00007fffe125ca23: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=NarrowOop off=1832}
                                                ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125ca28: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.charset.CharsetEncoder::encode@15 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B60: #	N1020 &lt;- B22  Freq: 4.76832e-07

  0x00007fffe125ca2d: mov     $0xffffff65,%esi
  0x00007fffe125ca32: mov     %edx,0x4(%rsp)
  0x00007fffe125ca36: mov     %ecx,0x8(%rsp)
  0x00007fffe125ca3a: mov     %r11d,0xc(%rsp)
  0x00007fffe125ca3f: mov     %r10,0x18(%rsp)
  0x00007fffe125ca44: mov     %r9d,0x20(%rsp)
  0x00007fffe125ca49: nop
  0x00007fffe125ca4a: nop
  0x00007fffe125ca4b: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=NarrowOop off=1872}
                                                ;*if_icmpeq
                                                ; - java.nio.charset.CharsetEncoder::encode@23 (line 570)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125ca50: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B61: #	N1020 &lt;- B24  Freq: 4.76832e-07

  0x00007fffe125ca55: mov     $0xffffff65,%esi
  0x00007fffe125ca5a: mov     %edx,0x4(%rsp)
  0x00007fffe125ca5e: mov     %ecx,0x8(%rsp)
  0x00007fffe125ca62: mov     %r10,0x18(%rsp)
  0x00007fffe125ca67: mov     %r11d,0x24(%rsp)
  0x00007fffe125ca6c: mov     %r10,0x28(%rsp)
  0x00007fffe125ca71: mov     %r9d,0x30(%rsp)
  0x00007fffe125ca76: mov     %r9d,0x34(%rsp)
  0x00007fffe125ca7b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [8]=NarrowOop [24]=Oop [36]=NarrowOop [40]=Oop [48]=NarrowOop [52]=NarrowOop off=1920}
                                                ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125ca80: callq   0x7ffff736b4ea    ;*ifnull
                                                ; - java.nio.ByteBuffer::hasArray@4 (line 978)
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B62: #	N1020 &lt;- B28  Freq: 4.76821e-07

  0x00007fffe125ca85: mov     $0xffffff65,%esi
  0x00007fffe125ca8a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125ca8f: mov     0x10(%rsp),%eax
  0x00007fffe125ca93: mov     %eax,(%rsp)
  0x00007fffe125ca96: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125ca9b: mov     %rax,0x28(%rsp)
  0x00007fffe125caa0: nop
  0x00007fffe125caa1: nop
  0x00007fffe125caa2: nop
  0x00007fffe125caa3: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=NarrowOop [12]=NarrowOop [20]=NarrowOop [32]=Oop [40]=Oop off=1960}
                                                ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125caa8: callq   0x7ffff736b4ea    ;*if_icmpne
                                                ; - java.nio.charset.CoderResult::isOverflow@5 (line 129)
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B63: #	N1020 &lt;- B30  Freq: 4.76821e-07

  0x00007fffe125caad: mov     $0xffffff65,%esi
  0x00007fffe125cab2: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125cab7: mov     0x10(%rsp),%eax
  0x00007fffe125cabb: mov     %eax,(%rsp)
  0x00007fffe125cabe: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125cac3: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=NarrowOop [32]=Oop off=1992}
                                                ;*ifle
                                                ; - java.nio.Buffer::remaining@11 (line 392)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@84 (line 274)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cac8: callq   0x7ffff736b4ea    ;*invokespecial encodeArrayLoop
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@17 (line 691)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B64: #	B71 B80 B79 &lt;- B26  Freq: 9.99987e-06

  0x00007fffe125cacd: mov     %rax,%rsi
  0x00007fffe125cad0: nop
  0x00007fffe125cad1: nop
  0x00007fffe125cad2: nop
  0x00007fffe125cad3: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [16]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=2008}
                                                ;*invokevirtual encodeLoop
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B65: #	N1020 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe125cad8: mov     $0xfffffff6,%esi
  0x00007fffe125cadd: mov     0x8(%rsp),%rbp
  0x00007fffe125cae2: nop
  0x00007fffe125cae3: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2024}
                                                ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cae8: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B66: #	N1020 &lt;- B2  Freq: 1.01328e-06

  0x00007fffe125caed: mov     $0xfffffff6,%esi
  0x00007fffe125caf2: mov     %ecx,%ebp
  0x00007fffe125caf4: pushq   0x8(%rsp)
  0x00007fffe125caf9: popq    (%rsp)
  0x00007fffe125cafd: nop
  0x00007fffe125cafe: nop
  0x00007fffe125caff: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop off=2052}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cb04: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B67: #	N1020 &lt;- B7  Freq: 1.01328e-06

  0x00007fffe125cb09: mov     $0xfffffff6,%esi
  0x00007fffe125cb0e: mov     %ecx,%ebp
  0x00007fffe125cb10: mov     %r11d,0xc(%rsp)
  0x00007fffe125cb15: mov     %edx,0x10(%rsp)
  0x00007fffe125cb19: nop
  0x00007fffe125cb1a: nop
  0x00007fffe125cb1b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [16]=NarrowOop off=2080}
                                                ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cb20: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - sun.nio.cs.StreamEncoder::write@18 (line 119)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B68: #	N1020 &lt;- B20  Freq: 1.01327e-06

  0x00007fffe125cb25: mov     $0xfffffff6,%esi
  0x00007fffe125cb2a: mov     %edx,(%rsp)
  0x00007fffe125cb2d: mov     %r10,0x8(%rsp)
  0x00007fffe125cb32: mov     %r9d,0x4(%rsp)
  0x00007fffe125cb37: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [8]=Oop off=2108}
                                                ;*invokevirtual encode
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cb3c: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B69: #	N1020 &lt;- B23  Freq: 1.01327e-06

  0x00007fffe125cb41: mov     $0xfffffff6,%esi
  0x00007fffe125cb46: mov     %edx,(%rsp)
  0x00007fffe125cb49: mov     %ecx,0x4(%rsp)
  0x00007fffe125cb4d: mov     %r11d,0x10(%rsp)
  0x00007fffe125cb52: mov     %r10,0x18(%rsp)
  0x00007fffe125cb57: mov     %r9d,0x14(%rsp)
  0x00007fffe125cb5c: nop
  0x00007fffe125cb5d: nop
  0x00007fffe125cb5e: nop
  0x00007fffe125cb5f: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [16]=NarrowOop [20]=NarrowOop [24]=Oop off=2148}
                                                ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cb64: callq   0x7ffff736b4ea    ;*invokevirtual hasArray
                                                ; - sun.nio.cs.UTF_8$Encoder::encodeLoop@8 (line 690)
                                                ; - java.nio.charset.CharsetEncoder::encode@57 (line 579)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B70: #	N1020 &lt;- B27  Freq: 1.01325e-06

  0x00007fffe125cb69: mov     $0xfffffff6,%esi
  0x00007fffe125cb6e: mov     0x10(%rsp),%ebp
  0x00007fffe125cb72: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125cb77: mov     0x8(%rsp),%eax
  0x00007fffe125cb7b: mov     %eax,0x4(%rsp)
  0x00007fffe125cb7f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125cb84: pushq   0x20(%rsp)
  0x00007fffe125cb89: popq    0x18(%rsp)
  0x00007fffe125cb8e: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125cb93: mov     0x14(%rsp),%eax
  0x00007fffe125cb97: mov     %eax,0x8(%rsp)
  0x00007fffe125cb9b: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125cba0: pushq   0x18(%rsp)
  0x00007fffe125cba5: popq    0x10(%rsp)
  0x00007fffe125cbaa: nop
  0x00007fffe125cbab: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [8]=NarrowOop [12]=NarrowOop [16]=Oop [24]=Oop off=2224}
                                                ;*invokevirtual isOverflow
                                                ; - java.nio.charset.CharsetEncoder::encode@91 (line 586)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cbb0: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B71: #	B74 &lt;- B64  Freq: 9.99987e-11

  0x00007fffe125cbb5: mov     %rax,%rbx
  0x00007fffe125cbb8: jmp     0x7fffe125cbce
  ;; B72: #	B78 B73 &lt;- B33  Freq: 1.00016e-09

  0x00007fffe125cbba: mov     0x8(%rax),%r10d
  0x00007fffe125cbbe: cmp     $0x20005f8c,%r10d  ;   {metadata(&apos;java/lang/IllegalArgumentException&apos;)}
  0x00007fffe125cbc5: je      0x7fffe125cc9c    ;*new  ; - java.nio.CharBuffer::wrap@0 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B73: #	B74 &lt;- B72  Freq: 1.00016e-09

  0x00007fffe125cbcb: mov     %rax,%rbx
  ;; B74: #	B76 B75 &lt;- B73 B71  Freq: 1.10016e-09

  0x00007fffe125cbce: mov     0x10(%rsp),%r11d
  0x00007fffe125cbd3: mov     $0x7,%r10d
  0x00007fffe125cbd9: and     (%r11),%r10
  0x00007fffe125cbdc: cmp     $0x5,%r10
  0x00007fffe125cbe0: jne     0x7fffe125cbef    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@73 (line 126)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B75: #	N1020 &lt;- B77 B76 B74  Freq: 1.10016e-09

  0x00007fffe125cbe2: mov     %rbx,%rsi
  0x00007fffe125cbe5: add     $0x50,%rsp
  0x00007fffe125cbe9: pop     %rbp
  0x00007fffe125cbea: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B76: #	B75 B77 &lt;- B74  Freq: 1.10016e-15

  0x00007fffe125cbef: mov     0x18(%rsp),%r11
  0x00007fffe125cbf4: lea     0x40(%rsp),%rax
  0x00007fffe125cbf9: cmpq    $0x0,(%rax)
  0x00007fffe125cc00: je      0x7fffe125cc7a
  0x00007fffe125cc06: mov     (%r11),%r10
  0x00007fffe125cc09: test    $0x2,%r10
  0x00007fffe125cc10: je      0x7fffe125cc72
  0x00007fffe125cc12: mov     0x16(%r10),%rax
  0x00007fffe125cc16: xor     %r15,%rax
  0x00007fffe125cc19: or      0x26(%r10),%rax
  0x00007fffe125cc1d: jne     0x7fffe125cc7a
  0x00007fffe125cc1f: mov     0x36(%r10),%rax
  0x00007fffe125cc23: or      0x3e(%r10),%rax
  0x00007fffe125cc27: jne     0x7fffe125cc33
  0x00007fffe125cc29: movq    $0x0,0x16(%r10)
  0x00007fffe125cc31: jmp     0x7fffe125cc7a
  0x00007fffe125cc33: cmpq    $0x0,0x46(%r10)
  0x00007fffe125cc3b: je      0x7fffe125cc66
  0x00007fffe125cc3d: movq    $0x0,0x16(%r10)
  0x00007fffe125cc45: lock addl $0x0,(%rsp)
  0x00007fffe125cc4a: cmpq    $0x0,0x46(%r10)
  0x00007fffe125cc52: jne     0x7fffe125cc6b
  0x00007fffe125cc54: movabs  $0x0,%rax
  0x00007fffe125cc5e: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe125cc64: jne     0x7fffe125cc6b
  0x00007fffe125cc66: or      $0x1,%eax
  0x00007fffe125cc69: jmp     0x7fffe125cc7a
  0x00007fffe125cc6b: test    $0x0,%eax
  0x00007fffe125cc70: jmp     0x7fffe125cc7a
  0x00007fffe125cc72: mov     (%rax),%r10
  0x00007fffe125cc75: lock cmpxchg %r10,(%r11)
  0x00007fffe125cc7a: je      0x7fffe125cbe2
  ;; B77: #	B75 &lt;- B76  Freq: 1.10016e-21

  0x00007fffe125cc80: mov     0x18(%rsp),%rdi
  0x00007fffe125cc85: lea     0x40(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::write@7 (line 117)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125cc8a: movabs  $0x7ffff744655c,%r10
  0x00007fffe125cc94: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::write@73 (line 126)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  0x00007fffe125cc97: jmpq    0x7fffe125cbe2    ;*areturn
                                                ; - java.nio.CharBuffer::wrap@10 (line 373)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)

  ;; B78: #	N1020 &lt;- B72  Freq: 1.01344e-15

  0x00007fffe125cc9c: mov     $0xa,%esi
  0x00007fffe125cca1: mov     0x10(%rsp),%ebp
  0x00007fffe125cca5: nop
  0x00007fffe125cca6: nop
  0x00007fffe125cca7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [12]=NarrowOop off=2476}
                                                ;*new  ; - java.nio.CharBuffer::wrap@12 (line 375)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@3 (line 265)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125ccac: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B79: #	N1020 &lt;- B64  Freq: 9.99987e-11

  0x00007fffe125ccb1: mov     $0xffffffbd,%esi
  0x00007fffe125ccb6: mov     0x10(%rsp),%ebp
  0x00007fffe125ccba: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125ccbf: mov     0x8(%rsp),%eax
  0x00007fffe125ccc3: mov     %eax,0x4(%rsp)
  0x00007fffe125ccc7: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125cccc: mov     %rax,0x10(%rsp)
  0x00007fffe125ccd1: nop
  0x00007fffe125ccd2: nop
  0x00007fffe125ccd3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [16]=Oop [32]=Oop off=2520}
                                                ;*astore
                                                ; - java.nio.charset.CharsetEncoder::encode@77 (line 582)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125ccd8: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  ;; B80: #	N1020 &lt;- B64  Freq: 9.99987e-11

  0x00007fffe125ccdd: mov     $0xffffffbd,%esi
  0x00007fffe125cce2: mov     0x10(%rsp),%ebp
  0x00007fffe125cce6: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe125cceb: mov     0x8(%rsp),%eax
  0x00007fffe125ccef: mov     %eax,0x4(%rsp)
  0x00007fffe125ccf3: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe125ccf8: mov     %rax,0x10(%rsp)
  0x00007fffe125ccfd: nop
  0x00007fffe125ccfe: nop
  0x00007fffe125ccff: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [16]=Oop [32]=Oop off=2564}
                                                ;*astore
                                                ; - java.nio.charset.CharsetEncoder::encode@65 (line 580)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cd04: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.charset.CharsetEncoder::encode@-1 (line 569)
                                                ; - sun.nio.cs.StreamEncoder::implWrite@41 (line 271)
                                                ; - sun.nio.cs.StreamEncoder::write@60 (line 125)
                                                ; - java.io.OutputStreamWriter::write@7 (line 207)
                                                ;   {runtime_call}
  0x00007fffe125cd09: hlt
  0x00007fffe125cd0a: hlt
  0x00007fffe125cd0b: hlt
  0x00007fffe125cd0c: hlt
  0x00007fffe125cd0d: hlt
  0x00007fffe125cd0e: hlt
  0x00007fffe125cd0f: hlt
  0x00007fffe125cd10: hlt
  0x00007fffe125cd11: hlt
  0x00007fffe125cd12: hlt
  0x00007fffe125cd13: hlt
  0x00007fffe125cd14: hlt
  0x00007fffe125cd15: hlt
  0x00007fffe125cd16: hlt
  0x00007fffe125cd17: hlt
  0x00007fffe125cd18: hlt
  0x00007fffe125cd19: hlt
  0x00007fffe125cd1a: hlt
  0x00007fffe125cd1b: hlt
  0x00007fffe125cd1c: hlt
  0x00007fffe125cd1d: hlt
  0x00007fffe125cd1e: hlt
  0x00007fffe125cd1f: hlt
[Stub Code]
  0x00007fffe125cd20: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe125cd2a: jmpq    0x7fffe125cd2a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe125cd2f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe125cd34: callq   0x7fffe125cd39
  0x00007fffe125cd39: subq    $0x5,(%rsp)
  0x00007fffe125cd3e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125cd43: hlt
  0x00007fffe125cd44: hlt
  0x00007fffe125cd45: hlt
  0x00007fffe125cd46: hlt
  0x00007fffe125cd47: hlt
<nmethod compile_id='95' compiler='C2' level='4' entry='0x00007fffe125c300' size='7192' address='0x00007fffe125c110' relocation_offset='304' insts_offset='496' stub_offset='3088' scopes_data_offset='3304' scopes_pcs_offset='5208' dependencies_offset='7016' handler_table_offset='7040' nul_chk_table_offset='7136' method='java/io/OutputStreamWriter write ([CII)V' bytes='11' count='43432' iicount='43432' stamp='119.317'/>
<make_not_entrant thread='140736955627264' compile_id='45' compiler='C1' level='2' stamp='119.317'/>
<writer thread='140737327351552'/>
<task_queued compile_id='100' method='sun/nio/cs/StreamEncoder writeBytes ()V' bytes='132' count='52769' iicount='52769' stamp='119.319' comment='tiered' hot_count='52769'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1261b90:
Code:
Argument 0 is unknown.RIP: 0x7fffe1261da0 Code size: 0x00001208
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c27ff0} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;java/io/OutputStreamWriter&apos;
  #           [sp+0x90]  (sp of caller)
  ;; N1714: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1261da0: mov     0x8(%rsi),%r10d
  0x00007fffe1261da4: shl     $0x3,%r10
  0x00007fffe1261da8: cmp     %r10,%rax
  0x00007fffe1261dab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1261db1: nop
  0x00007fffe1261db2: nop
  0x00007fffe1261db3: nop
  0x00007fffe1261db4: nop
  0x00007fffe1261db5: nop
  0x00007fffe1261db6: nop
  0x00007fffe1261db7: nop
  0x00007fffe1261db8: nop
  0x00007fffe1261db9: nop
  0x00007fffe1261dba: nop
  0x00007fffe1261dbb: nop
  0x00007fffe1261dbc: nop
  0x00007fffe1261dbd: nop
  0x00007fffe1261dbe: nop
  0x00007fffe1261dbf: nop
[Verified Entry Point]
  ;; B1: #	B106 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1261dc0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1261dc7: push    %rbp
  0x00007fffe1261dc8: sub     $0x80,%rsp        ;*synchronization entry
                                                ; - java.io.OutputStreamWriter::flushBuffer@-1 (line 185)

  0x00007fffe1261dcf: mov     0x14(%rsi),%r10d  ;*getfield se
                                                ; - java.io.OutputStreamWriter::flushBuffer@1 (line 185)

  0x00007fffe1261dd3: mov     %r10d,0x24(%rsp)
  0x00007fffe1261dd8: mov     0x10(%r10),%r11d  ; implicit exception: dispatches to 0x00007fffe1262abb
  ;; B2: #	B107 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1261ddc: mov     %r11d,0x40(%rsp)
  0x00007fffe1261de1: mov     (%r11),%rax       ; implicit exception: dispatches to 0x00007fffe1262acd
  ;; B3: #	B49 B4 &lt;- B2  Freq: 0.999998

  0x00007fffe1261de4: mov     %rax,%r10
  0x00007fffe1261de7: and     $0x7,%r10
  0x00007fffe1261deb: mov     %r11,%r8          ;*getfield lock
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@1 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261dee: mov     0x24(%rsp),%r9d
  0x00007fffe1261df3: mov     %r9,%r11          ;*getfield se
                                                ; - java.io.OutputStreamWriter::flushBuffer@1 (line 185)

  0x00007fffe1261df6: mov     %r11,0x10(%rsp)
  0x00007fffe1261dfb: cmp     $0x5,%r10
  0x00007fffe1261dff: jne     0x7fffe12621e9
  ;; B4: #	B51 B5 &lt;- B3  Freq: 0.999997

  0x00007fffe1261e05: mov     0x40(%rsp),%r10d
  0x00007fffe1261e0a: mov     0x8(%r10),%r11d
  0x00007fffe1261e0e: movabs  $0x0,%r10
  0x00007fffe1261e18: lea     (%r10,%r11,8),%r10
  0x00007fffe1261e1c: mov     0xb0(%r10),%r10
  0x00007fffe1261e23: mov     %r10,%r11
  0x00007fffe1261e26: or      %r15,%r11
  0x00007fffe1261e29: mov     %r11,%r9
  0x00007fffe1261e2c: xor     %rax,%r9
  0x00007fffe1261e2f: test    $0xffffffffffffff87,%r9
  0x00007fffe1261e36: jne     0x7fffe126225d    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B5: #	B100 B6 &lt;- B50 B49 B4 B55  Freq: 0.999998

  0x00007fffe1261e3c: mov     0x24(%rsp),%r11d
  0x00007fffe1261e41: movzbl  0x16(%r11),%ebp   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::isOpen@1 (line 155)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@8 (line 103)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e46: test    %ebp,%ebp
  0x00007fffe1261e48: je      0x7fffe126298d    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@11 (line 103)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B6: #	B108 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe1261e4e: mov     %r11d,%r10d
  0x00007fffe1261e51: mov     0x20(%r10),%ebx   ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@1 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e55: mov     0x18(%rbx),%edx   ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; implicit exception: dispatches to 0x00007fffe1262ae1
  ;; B7: #	B98 B8 &lt;- B6  Freq: 0.999996

  0x00007fffe1261e58: test    %edx,%edx
  0x00007fffe1261e5a: jle     0x7fffe126295d    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@7 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B8: #	B99 B9 &lt;- B7  Freq: 0.999996

  0x00007fffe1261e60: mov     %edx,0x1c(%rbx)   ;*putfield limit
                                                ; - java.nio.Buffer::flip@5 (line 357)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e63: mov     %r12d,0x18(%rbx)  ;*putfield position
                                                ; - java.nio.Buffer::flip@10 (line 358)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e67: movl    $0xffffffff,0xc(%rbx)  ;*putfield mark
                                                ; - java.nio.Buffer::flip@15 (line 359)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e6e: test    %edx,%edx
  0x00007fffe1261e70: jl      0x7fffe1262975    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B9: #	B56 B10 &lt;- B8  Freq: 0.999996

  0x00007fffe1261e76: mov     0x28(%r10),%ebp
  0x00007fffe1261e7a: test    %ebp,%ebp
  0x00007fffe1261e7c: jne     0x7fffe1262291    ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B10: #	B114 B11 &lt;- B9  Freq: 0.999995

  0x00007fffe1261e82: mov     0x2c(%rbx),%r10d  ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e86: vmovd   %r10d,%xmm1
  0x00007fffe1261e8b: mov     %r11d,%r10d
  0x00007fffe1261e8e: mov     0x24(%r10),%ecx   ;*getfield out
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@100 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e92: vmovd   %xmm1,%r11d
  0x00007fffe1261e97: mov     0xc(%r11),%r13d   ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; implicit exception: dispatches to 0x00007fffe1262bad
  ;; B11: #	B101 B12 &lt;- B10  Freq: 0.999994

  0x00007fffe1261e9b: movzbl  0x28(%rbx),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261e9f: test    %ebp,%ebp
  0x00007fffe1261ea1: jne     0x7fffe12629b1    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B12: #	B109 B13 &lt;- B11  Freq: 0.999994

  0x00007fffe1261ea7: mov     0x24(%rbx),%r10d  ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261eab: mov     0x8(%rcx),%r9d    ; implicit exception: dispatches to 0x00007fffe1262af5
  ;; B13: #	B57 B14 &lt;- B12  Freq: 0.999993

  0x00007fffe1261eaf: cmp     $0x200051d4,%r9d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe1261eb6: jne     0x7fffe12622b5
  ;; B14: #	B59 B15 &lt;- B13  Freq: 0.999992

  0x00007fffe1261ebc: mov     %rcx,%r9          ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261ebf: mov     (%r9),%rax
  0x00007fffe1261ec2: mov     %rax,%r11
  0x00007fffe1261ec5: and     $0x7,%r11
  0x00007fffe1261ec9: cmp     $0x5,%r11
  0x00007fffe1261ecd: jne     0x7fffe12622e2
  ;; B15: #	B62 B16 &lt;- B14  Freq: 0.999991

  0x00007fffe1261ed3: mov     $0x200051d4,%r11d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe1261ed9: shl     $0x3,%r11
  0x00007fffe1261edd: mov     0xb0(%r11),%r11
  0x00007fffe1261ee4: mov     %r11,%rcx
  0x00007fffe1261ee7: or      %r15,%rcx
  0x00007fffe1261eea: mov     %rcx,%rbx
  0x00007fffe1261eed: xor     %rax,%rbx
  0x00007fffe1261ef0: test    $0xffffffffffffff87,%rbx
  0x00007fffe1261ef7: jne     0x7fffe12623e9    ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B16: #	B115 B17 &lt;- B60 B59 B15 B66  Freq: 0.999992

  0x00007fffe1261efd: mov     0xc(%r9),%ebp     ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f01: mov     0x8(%rbp),%ecx    ; implicit exception: dispatches to 0x00007fffe1262bd1
  ;; B17: #	B61 B18 &lt;- B16  Freq: 0.999991

  0x00007fffe1261f04: cmp     $0x2000524d,%ecx  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1261f0a: jne     0x7fffe12623ae
  ;; B18: #	B67 B19 &lt;- B17  Freq: 0.99999

  0x00007fffe1261f10: mov     %rbp,%r11         ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f13: mov     (%r11),%rax
  0x00007fffe1261f16: mov     %rax,%rbx
  0x00007fffe1261f19: and     $0x7,%rbx
  0x00007fffe1261f1d: mov     $0x2000524d,%ecx  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1261f22: movabs  $0x0,%rdi
  0x00007fffe1261f2c: lea     (%rdi,%rcx,8),%rdi
  0x00007fffe1261f30: cmp     $0x5,%rbx
  0x00007fffe1261f34: jne     0x7fffe126241c
  ;; B19: #	B70 B20 &lt;- B18  Freq: 0.999989

  0x00007fffe1261f3a: mov     %r10d,%r14d
  0x00007fffe1261f3d: mov     %r8,0x8(%rsp)
  0x00007fffe1261f42: mov     0xb0(%rdi),%r10
  0x00007fffe1261f49: mov     %r10,%r8
  0x00007fffe1261f4c: or      %r15,%r8
  0x00007fffe1261f4f: mov     %r8,%rcx
  0x00007fffe1261f52: xor     %rax,%rcx
  0x00007fffe1261f55: test    $0xffffffffffffff87,%rcx
  0x00007fffe1261f5c: jne     0x7fffe12624f1    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B20: #	B110 B21 &lt;- B69 B68 B19 B74  Freq: 0.99999

  0x00007fffe1261f62: mov     0x14(%r11),%esi   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f66: mov     0xc(%rsi),%ebx    ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; implicit exception: dispatches to 0x00007fffe1262b19
  ;; B21: #	B102 B22 &lt;- B20  Freq: 0.999989

  0x00007fffe1261f69: cmp     %ebx,%edx
  0x00007fffe1261f6b: jnl     0x7fffe12629dd    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B22: #	B103 B23 &lt;- B21  Freq: 0.999989

  0x00007fffe1261f71: mov     0x10(%r11),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@31 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f75: mov     %ebx,%ebp
  0x00007fffe1261f77: sub     %r8d,%ebp         ;*isub
                                                ; - java.io.BufferedOutputStream::write@34 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f7a: cmp     %ebp,%edx
  0x00007fffe1261f7c: jnle    0x7fffe1262a31    ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B23: #	B75 B24 &lt;- B22  Freq: 0.999988

  0x00007fffe1261f82: mov     %rsi,%rcx         ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f85: vmovd   %xmm1,%r10d
  0x00007fffe1261f8a: mov     %r10,%rbp         ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261f8d: test    %r14d,%r14d
  0x00007fffe1261f90: jl      0x7fffe1262524
  ;; B24: #	B75 B25 &lt;- B23  Freq: 0.999987

  0x00007fffe1261f96: test    %r8d,%r8d
  0x00007fffe1261f99: jl      0x7fffe1262524
  ;; B25: #	B75 B26 &lt;- B24  Freq: 0.999986

  0x00007fffe1261f9f: mov     %edx,%r10d
  0x00007fffe1261fa2: add     %r14d,%r10d
  0x00007fffe1261fa5: cmp     %r10d,%r13d
  0x00007fffe1261fa8: jb      0x7fffe1262524
  ;; B26: #	B75 B27 &lt;- B25  Freq: 0.999985

  0x00007fffe1261fae: mov     %edx,%eax
  0x00007fffe1261fb0: add     %r8d,%eax
  0x00007fffe1261fb3: cmp     %eax,%ebx
  0x00007fffe1261fb5: jb      0x7fffe1262524
  ;; B27: #	B28 &lt;- B26  Freq: 0.999984

  0x00007fffe1261fbb: mov     %rdi,0x28(%rsp)
  0x00007fffe1261fc0: mov     %r11,0x18(%rsp)
  0x00007fffe1261fc5: mov     %r9,(%rsp)
  0x00007fffe1261fc9: lea     0x10(%rsi,%r8),%rsi
  0x00007fffe1261fce: vmovd   %xmm1,%r10d
  0x00007fffe1261fd3: lea     0x10(%r10,%r14),%rdi
  0x00007fffe1261fd8: mov     %edx,%ebp
  0x00007fffe1261fda: movsxd  %edx,%rdx
  0x00007fffe1261fdd: movabs  $0x7fffe1140ce0,%r10
  0x00007fffe1261fe7: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B28: #	B77 B29 &lt;- B27 B76  Freq: 0.999988

  0x00007fffe1261fea: mov     0x18(%rsp),%r11
  0x00007fffe1261fef: mov     0x10(%r11),%r10d  ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@58 (line 129)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1261ff3: add     %ebp,%r10d
  0x00007fffe1261ff6: mov     %r10d,0x10(%r11)
  0x00007fffe1261ffa: mov     $0x7,%r10d
  0x00007fffe1262000: and     (%r11),%r10
  0x00007fffe1262003: cmp     $0x5,%r10
  0x00007fffe1262007: jne     0x7fffe126254d    ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B29: #	B104 B30 &lt;- B78 B77 B28  Freq: 0.999988

  0x00007fffe126200d: mov     (%rsp),%r13
  0x00007fffe1262011: movzbl  0x10(%r13),%ebp   ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@20 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262016: test    %ebp,%ebp
  0x00007fffe1262018: je      0x7fffe1262a85    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B30: #	B111 B31 &lt;- B29  Freq: 0.999988

  0x00007fffe126201e: mov     0xc(%r13),%ebp    ;*getfield out
                                                ; - java.io.PrintStream::write@27 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262022: mov     0x8(%rbp),%r10d   ; implicit exception: dispatches to 0x00007fffe1262b49
  ;; B31: #	B79 B32 &lt;- B30  Freq: 0.999987

  0x00007fffe1262026: cmp     $0x2000524d,%r10d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe126202d: jne     0x7fffe12625f5
  ;; B32: #	B81 B33 &lt;- B31  Freq: 0.999986

  0x00007fffe1262033: mov     %rbp,%r9          ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262036: mov     (%r9),%rax
  0x00007fffe1262039: mov     %rax,%r10
  0x00007fffe126203c: and     $0x7,%r10
  0x00007fffe1262040: cmp     $0x5,%r10
  0x00007fffe1262044: jne     0x7fffe1262626
  ;; B33: #	B83 B34 &lt;- B32  Freq: 0.999985

  0x00007fffe126204a: mov     0x28(%rsp),%r10
  0x00007fffe126204f: mov     0xb0(%r10),%r10
  0x00007fffe1262056: mov     %r10,%r11
  0x00007fffe1262059: or      %r15,%r11
  0x00007fffe126205c: mov     %r11,%r8
  0x00007fffe126205f: xor     %rax,%r8
  0x00007fffe1262062: test    $0xffffffffffffff87,%r8
  0x00007fffe1262069: jne     0x7fffe126269c    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B34: #	B37 B35 &lt;- B82 B81 B33 B87  Freq: 0.999986

  0x00007fffe126206f: mov     0x10(%r9),%r8d    ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262073: mov     0xc(%r9),%ecx     ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262077: test    %r8d,%r8d
  0x00007fffe126207a: jnle    0x7fffe1262089    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B35: #	B42 B36 &lt;- B34  Freq: 0.333357

  0x00007fffe126207c: test    %ecx,%ecx
  0x00007fffe126207e: jne     0x7fffe1262163    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B36: #	B96 &lt;- B35  Freq: 3.37783e-07

  0x00007fffe1262084: jmpq    0x7fffe12628ec
  ;; B37: #	B113 B38 &lt;- B34  Freq: 0.666629

  0x00007fffe1262089: mov     0x14(%r9),%ebp    ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe126208d: mov     0x8(%rcx),%r11d   ; implicit exception: dispatches to 0x00007fffe1262b75
  ;; B38: #	B97 B39 &lt;- B37  Freq: 0.666628

  0x00007fffe1262091: cmp     $0x20004f38,%r11d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1262098: jne     0x7fffe1262915    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B39: #	B124 B40 &lt;- B38  Freq: 0.666628

  0x00007fffe126209e: mov     %r9,0x18(%rsp)
  0x00007fffe12620a3: mov     %r13,(%rsp)
  0x00007fffe12620a7: mov     %rbp,%rdx
  0x00007fffe12620aa: push    %r10
  0x00007fffe12620ac: cmp     0x16af7b2d(%rip),%r12  ;   {external_word}
  0x00007fffe12620b3: je      0x7fffe1262130
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12620b9: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12620be: sub     $0x80,%rsp
  0x00007fffe12620c5: mov     %rax,0x78(%rsp)
  0x00007fffe12620ca: mov     %rcx,0x70(%rsp)
  0x00007fffe12620cf: mov     %rdx,0x68(%rsp)
  0x00007fffe12620d4: mov     %rbx,0x60(%rsp)
  0x00007fffe12620d9: mov     %rbp,0x50(%rsp)
  0x00007fffe12620de: mov     %rsi,0x48(%rsp)
  0x00007fffe12620e3: mov     %rdi,0x40(%rsp)
  0x00007fffe12620e8: mov     %r8,0x38(%rsp)
  0x00007fffe12620ed: mov     %r9,0x30(%rsp)
  0x00007fffe12620f2: mov     %r10,0x28(%rsp)
  0x00007fffe12620f7: mov     %r11,0x20(%rsp)
  0x00007fffe12620fc: mov     %r12,0x18(%rsp)
  0x00007fffe1262101: mov     %r13,0x10(%rsp)
  0x00007fffe1262106: mov     %r14,0x8(%rsp)
  0x00007fffe126210b: mov     %r15,(%rsp)
  0x00007fffe126210f: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1262119: movabs  $0x7fffe12620b9,%rsi  ;   {internal_word}
  0x00007fffe1262123: mov     %rsp,%rdx
  0x00007fffe1262126: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126212a: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126212f: hlt
  0x00007fffe1262130: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262132: mov     %rcx,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262135: movzbl  0xc(%rsi),%r9d    ;*getfield append
                                                ; - java.io.FileOutputStream::write@5 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe126213a: xor     %ecx,%ecx
  0x00007fffe126213c: mov     0x18(%rsp),%r10
  0x00007fffe1262141: mov     %r10,%rbp
  0x00007fffe1262144: nop
  0x00007fffe1262145: nop
  0x00007fffe1262146: nop
  0x00007fffe1262147: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [16]=Oop [36]=NarrowOop [64]=NarrowOop off=940}
                                                ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {optimized virtual_call}
  ;; B40: #	B95 B41 &lt;- B39  Freq: 0.666614

  0x00007fffe126214c: mov     %rbp,%r9
  0x00007fffe126214f: mov     %r12d,0x10(%r9)   ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262153: mov     0xc(%r9),%ecx     ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262157: test    %ecx,%ecx
  0x00007fffe1262159: je      0x7fffe12628e8
  ;; B41: #	B42 &lt;- B40  Freq: 0.666614

  0x00007fffe126215f: mov     (%rsp),%r13       ;*return
                                                ; - java.io.BufferedOutputStream::flushBuffer@28 (line 85)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B42: #	B88 B43 &lt;- B41 B35  Freq: 0.99997

  0x00007fffe1262163: mov     0x8(%rcx),%r11d
  0x00007fffe1262167: cmp     $0x20004f38,%r11d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe126216e: jne     0x7fffe12626cb
  ;; B43: #	B89 B44 &lt;- B42  Freq: 0.999969

  0x00007fffe1262174: mov     $0x7,%r10d
  0x00007fffe126217a: and     (%r9),%r10
  0x00007fffe126217d: cmp     $0x5,%r10
  0x00007fffe1262181: jne     0x7fffe12626ed
  ;; B44: #	B91 B45 &lt;- B90 B89 B43  Freq: 0.999969

  0x00007fffe1262187: mov     $0x7,%r10d
  0x00007fffe126218d: and     0x0(%r13),%r10
  0x00007fffe1262191: cmp     $0x5,%r10
  0x00007fffe1262195: jne     0x7fffe1262793    ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B45: #	B112 B46 &lt;- B92 B91 B44  Freq: 0.999969

  0x00007fffe126219b: mov     0x24(%rsp),%r11d
  0x00007fffe12621a0: mov     0x20(%r11),%r11d  ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@124 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12621a4: mov     0x20(%r11),%r10d  ; implicit exception: dispatches to 0x00007fffe1262b65
  ;; B46: #	B93 B47 &lt;- B45  Freq: 0.999968

  0x00007fffe12621a8: mov     %r10d,0x1c(%r11)  ;*putfield limit
                                                ; - java.nio.Buffer::clear@10 (line 330)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12621ac: mov     %r12d,0x18(%r11)  ;*putfield position
                                                ; - java.nio.Buffer::clear@2 (line 329)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12621b0: movl    $0xffffffff,0xc(%r11)
  0x00007fffe12621b8: mov     0x40(%rsp),%r10d
  0x00007fffe12621bd: mov     $0x7,%r11d
  0x00007fffe12621c3: and     (%r10),%r11
  0x00007fffe12621c6: cmp     $0x5,%r11
  0x00007fffe12621ca: jne     0x7fffe126283b    ;*synchronization entry
                                                ; - java.io.OutputStreamWriter::flushBuffer@-1 (line 185)

  ;; B47: #	N1714 &lt;- B94 B93 B46  Freq: 0.999968

  0x00007fffe12621d0: add     $0x80,%rsp
  0x00007fffe12621d7: pop     %rbp
  0x00007fffe12621d8: test    %eax,0x16d98e22(%rip)  ;   {poll_return}
  0x00007fffe12621de: retq
  ;; B48: #	B49 &lt;- B51  Freq: 9.99997e-13

  0x00007fffe12621df: mov     0x40(%rsp),%r11d
  0x00007fffe12621e4: lock cmpxchg %r10,(%r11)
  ;; B49: #	B5 B50 &lt;- B3 B48  Freq: 9.99999e-07

  0x00007fffe12621e9: lea     0x60(%rsp),%rbx
  0x00007fffe12621ee: mov     (%r8),%rax
  0x00007fffe12621f1: test    $0x2,%rax
  0x00007fffe12621f7: jne     0x7fffe126221d
  0x00007fffe12621f9: or      $0x1,%rax
  0x00007fffe12621fd: mov     %rax,(%rbx)
  0x00007fffe1262200: lock cmpxchg %rbx,(%r8)
  0x00007fffe1262205: je      0x7fffe1262236
  0x00007fffe126220b: sub     %rsp,%rax
  0x00007fffe126220e: and     $0xfffffffffffff007,%rax
  0x00007fffe1262215: mov     %rax,(%rbx)
  0x00007fffe1262218: jmpq    0x7fffe1262236
  0x00007fffe126221d: movq    $0x3,(%rbx)
  0x00007fffe1262224: mov     %rax,%rbx
  0x00007fffe1262227: mov     0x16(%rbx),%rax
  0x00007fffe126222b: test    %rax,%rax
  0x00007fffe126222e: jne     0x7fffe1262236
  0x00007fffe1262230: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1262236: je      0x7fffe1261e3c
  ;; B50: #	B5 &lt;- B54 B49  Freq: 1.99999e-12

  0x00007fffe126223c: mov     %r8,0x8(%rsp)
  0x00007fffe1262241: mov     %r8,%rsi
  0x00007fffe1262244: lea     0x60(%rsp),%rdx
  0x00007fffe1262249: nop
  0x00007fffe126224a: nop
  0x00007fffe126224b: callq   0x7fffe11658a0    ; OopMap{[8]=Oop [16]=Oop [36]=NarrowOop [64]=NarrowOop off=1200}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262250: mov     0x8(%rsp),%r10
  0x00007fffe1262255: mov     %r10,%r8
  0x00007fffe1262258: jmpq    0x7fffe1261e3c
  ;; B51: #	B48 B52 &lt;- B4  Freq: 9.99997e-07

  0x00007fffe126225d: test    $0x7,%r9
  0x00007fffe1262264: jne     0x7fffe12621df
  ;; B52: #	B54 B53 &lt;- B51  Freq: 9.99996e-07

  0x00007fffe126226a: test    $0x300,%r9
  0x00007fffe1262271: jne     0x7fffe1262280
  ;; B53: #	B54 &lt;- B52  Freq: 9.99995e-07

  0x00007fffe1262273: and     $0x37f,%rax
  0x00007fffe126227a: mov     %rax,%r11
  0x00007fffe126227d: or      %r15,%r11
  ;; B54: #	B50 B55 &lt;- B53 B52  Freq: 9.99996e-07

  0x00007fffe1262280: mov     0x40(%rsp),%r9d
  0x00007fffe1262285: lock cmpxchg %r11,(%r9)
  0x00007fffe126228a: jne     0x7fffe126223c
  ;; B55: #	B5 &lt;- B54  Freq: 9.99995e-07

  0x00007fffe126228c: jmpq    0x7fffe1261e3c    ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B56: #	N1714 &lt;- B9  Freq: 9.99996e-07

  0x00007fffe1262291: mov     $0xffffffec,%esi
  0x00007fffe1262296: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126229b: mov     0x40(%rsp),%eax
  0x00007fffe126229f: mov     %eax,(%rsp)
  0x00007fffe12622a2: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12622a7: mov     %edx,0xc(%rsp)
  0x00007fffe12622ab: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=NarrowOop [36]=NarrowOop off=1296}
                                                ;*ifnull
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@64 (line 217)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12622b0: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B57: #	N1714 &lt;- B13  Freq: 9.99992e-07

  0x00007fffe12622b5: mov     $0xffffffde,%esi
  0x00007fffe12622ba: mov     0x40(%rsp),%ebp
  0x00007fffe12622be: mov     %ecx,0x8(%rsp)
  0x00007fffe12622c2: mov     %r11d,0xc(%rsp)
  0x00007fffe12622c7: mov     %r10d,0x10(%rsp)
  0x00007fffe12622cc: mov     %edx,0x14(%rsp)
  0x00007fffe12622d0: nop
  0x00007fffe12622d1: nop
  0x00007fffe12622d2: nop
  0x00007fffe12622d3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=NarrowOop [12]=NarrowOop [36]=NarrowOop off=1336}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12622d8: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B58: #	B59 &lt;- B62  Freq: 9.99991e-13

  0x00007fffe12622dd: lock cmpxchg %r11,(%r9)
  ;; B59: #	B16 B60 &lt;- B14 B58  Freq: 9.99993e-07

  0x00007fffe12622e2: lea     0x68(%rsp),%rbx
  0x00007fffe12622e7: mov     (%r9),%rax
  0x00007fffe12622ea: test    $0x2,%rax
  0x00007fffe12622f0: jne     0x7fffe1262316
  0x00007fffe12622f2: or      $0x1,%rax
  0x00007fffe12622f6: mov     %rax,(%rbx)
  0x00007fffe12622f9: lock cmpxchg %rbx,(%r9)
  0x00007fffe12622fe: je      0x7fffe126232f
  0x00007fffe1262304: sub     %rsp,%rax
  0x00007fffe1262307: and     $0xfffffffffffff007,%rax
  0x00007fffe126230e: mov     %rax,(%rbx)
  0x00007fffe1262311: jmpq    0x7fffe126232f
  0x00007fffe1262316: movq    $0x3,(%rbx)
  0x00007fffe126231d: mov     %rax,%rbx
  0x00007fffe1262320: mov     0x16(%rbx),%rax
  0x00007fffe1262324: test    %rax,%rax
  0x00007fffe1262327: jne     0x7fffe126232f
  0x00007fffe1262329: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126232f: je      0x7fffe1261efd
  ;; B60: #	B16 &lt;- B65 B59  Freq: 1.99998e-12

  0x00007fffe1262335: mov     %r9,0x28(%rsp)
  0x00007fffe126233a: mov     %r10d,0x20(%rsp)
  0x00007fffe126233f: mov     %r13d,0x1c(%rsp)
  0x00007fffe1262344: vmovss  %xmm1,0x18(%rsp)
  0x00007fffe126234a: mov     %edx,0x4(%rsp)
  0x00007fffe126234e: mov     %r8,0x8(%rsp)
  0x00007fffe1262353: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262358: mov     0x40(%rsp),%eax
  0x00007fffe126235c: mov     %eax,(%rsp)
  0x00007fffe126235f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262364: mov     %r9,%rsi
  0x00007fffe1262367: lea     0x68(%rsp),%rdx
  0x00007fffe126236c: nop
  0x00007fffe126236d: nop
  0x00007fffe126236e: nop
  0x00007fffe126236f: callq   0x7fffe11658a0    ; OopMap{[0]=NarrowOop [8]=Oop [16]=Oop [24]=NarrowOop [36]=NarrowOop [40]=Oop off=1492}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262374: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262379: mov     (%rsp),%eax
  0x00007fffe126237c: mov     %eax,0x40(%rsp)
  0x00007fffe1262380: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262385: mov     0x8(%rsp),%r10
  0x00007fffe126238a: mov     0x4(%rsp),%edx
  0x00007fffe126238e: vmovss  0x18(%rsp),%xmm1
  0x00007fffe1262394: mov     0x1c(%rsp),%r13d
  0x00007fffe1262399: mov     0x20(%rsp),%r11d
  0x00007fffe126239e: mov     0x28(%rsp),%r9
  0x00007fffe12623a3: mov     %r10,%r8
  0x00007fffe12623a6: mov     %r11d,%r10d
  0x00007fffe12623a9: jmpq    0x7fffe1261efd
  ;; B61: #	N1714 &lt;- B17  Freq: 9.99991e-07

  0x00007fffe12623ae: mov     $0xffffffde,%esi
  0x00007fffe12623b3: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12623b8: mov     0x24(%rsp),%eax
  0x00007fffe12623bc: mov     %eax,0x8(%rsp)
  0x00007fffe12623c0: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12623c5: mov     %r9,0x18(%rsp)
  0x00007fffe12623ca: vmovss  %xmm1,0xc(%rsp)
  0x00007fffe12623d0: mov     %r10d,0x20(%rsp)
  0x00007fffe12623d5: mov     %edx,0x24(%rsp)
  0x00007fffe12623d9: mov     %r9,0x28(%rsp)
  0x00007fffe12623de: nop
  0x00007fffe12623df: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=NarrowOop [12]=NarrowOop [24]=Oop [40]=Oop [64]=NarrowOop off=1604}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12623e4: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B62: #	B58 B63 &lt;- B15  Freq: 9.99991e-07

  0x00007fffe12623e9: test    $0x7,%rbx
  0x00007fffe12623f0: jne     0x7fffe12622dd
  ;; B63: #	B65 B64 &lt;- B62  Freq: 9.9999e-07

  0x00007fffe12623f6: test    $0x300,%rbx
  0x00007fffe12623fd: jne     0x7fffe126240c
  ;; B64: #	B65 &lt;- B63  Freq: 9.99989e-07

  0x00007fffe12623ff: and     $0x37f,%rax
  0x00007fffe1262406: mov     %rax,%rcx
  0x00007fffe1262409: or      %r15,%rcx
  ;; B65: #	B60 B66 &lt;- B64 B63  Freq: 9.9999e-07

  0x00007fffe126240c: lock cmpxchg %rcx,(%r9)
  0x00007fffe1262411: jne     0x7fffe1262335
  ;; B66: #	B16 &lt;- B65  Freq: 9.99989e-07

  0x00007fffe1262417: jmpq    0x7fffe1261efd
  ;; B67: #	B68 &lt;- B18  Freq: 9.9999e-07

  0x00007fffe126241c: mov     %r8,0x8(%rsp)
  0x00007fffe1262421: mov     %r10d,%r14d
  ;; B68: #	B20 B69 &lt;- B67 B105  Freq: 9.99991e-07

  0x00007fffe1262424: lea     0x70(%rsp),%rbx
  0x00007fffe1262429: mov     (%r11),%rax
  0x00007fffe126242c: test    $0x2,%rax
  0x00007fffe1262432: jne     0x7fffe1262458
  0x00007fffe1262434: or      $0x1,%rax
  0x00007fffe1262438: mov     %rax,(%rbx)
  0x00007fffe126243b: lock cmpxchg %rbx,(%r11)
  0x00007fffe1262440: je      0x7fffe1262471
  0x00007fffe1262446: sub     %rsp,%rax
  0x00007fffe1262449: and     $0xfffffffffffff007,%rax
  0x00007fffe1262450: mov     %rax,(%rbx)
  0x00007fffe1262453: jmpq    0x7fffe1262471
  0x00007fffe1262458: movq    $0x3,(%rbx)
  0x00007fffe126245f: mov     %rax,%rbx
  0x00007fffe1262462: mov     0x16(%rbx),%rax
  0x00007fffe1262466: test    %rax,%rax
  0x00007fffe1262469: jne     0x7fffe1262471
  0x00007fffe126246b: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1262471: je      0x7fffe1261f62
  ;; B69: #	B20 &lt;- B73 B68  Freq: 1.99998e-12

  0x00007fffe1262477: mov     %rdi,0x38(%rsp)
  0x00007fffe126247c: mov     %r11,0x30(%rsp)
  0x00007fffe1262481: mov     %r9,0x28(%rsp)
  0x00007fffe1262486: mov     %r14d,0x20(%rsp)
  0x00007fffe126248b: mov     %r13d,0x1c(%rsp)
  0x00007fffe1262490: vmovss  %xmm1,0x18(%rsp)
  0x00007fffe1262496: mov     %edx,0x4(%rsp)
  0x00007fffe126249a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126249f: mov     0x40(%rsp),%eax
  0x00007fffe12624a3: mov     %eax,(%rsp)
  0x00007fffe12624a6: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12624ab: mov     %r11,%rsi
  0x00007fffe12624ae: lea     0x70(%rsp),%rdx
  0x00007fffe12624b3: callq   0x7fffe11658a0    ; OopMap{[0]=NarrowOop [8]=Oop [16]=Oop [24]=NarrowOop [36]=NarrowOop [40]=Oop [48]=Oop off=1816}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12624b8: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12624bd: mov     (%rsp),%eax
  0x00007fffe12624c0: mov     %eax,0x40(%rsp)
  0x00007fffe12624c4: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12624c9: mov     0x4(%rsp),%edx
  0x00007fffe12624cd: vmovss  0x18(%rsp),%xmm1
  0x00007fffe12624d3: mov     0x1c(%rsp),%r13d
  0x00007fffe12624d8: mov     0x20(%rsp),%r14d
  0x00007fffe12624dd: mov     0x28(%rsp),%r9
  0x00007fffe12624e2: mov     0x30(%rsp),%r11
  0x00007fffe12624e7: mov     0x38(%rsp),%rdi
  0x00007fffe12624ec: jmpq    0x7fffe1261f62
  ;; B70: #	B105 B71 &lt;- B19  Freq: 9.99989e-07

  0x00007fffe12624f1: test    $0x7,%rcx
  0x00007fffe12624f8: jne     0x7fffe1262ab1
  ;; B71: #	B73 B72 &lt;- B70  Freq: 9.99988e-07

  0x00007fffe12624fe: test    $0x300,%rcx
  0x00007fffe1262505: jne     0x7fffe1262514
  ;; B72: #	B73 &lt;- B71  Freq: 9.99987e-07

  0x00007fffe1262507: and     $0x37f,%rax
  0x00007fffe126250e: mov     %rax,%r8
  0x00007fffe1262511: or      %r15,%r8
  ;; B73: #	B69 B74 &lt;- B72 B71  Freq: 9.99988e-07

  0x00007fffe1262514: lock cmpxchg %r8,(%r11)
  0x00007fffe1262519: jne     0x7fffe1262477
  ;; B74: #	B20 &lt;- B73  Freq: 9.99987e-07

  0x00007fffe126251f: jmpq    0x7fffe1261f62
  ;; B75: #	B122 B76 &lt;- B23 B24 B25 B26  Freq: 3.99995e-06

  0x00007fffe1262524: mov     %rbp,%rbx
  0x00007fffe1262527: mov     %rdi,0x28(%rsp)
  0x00007fffe126252c: mov     %r11,0x18(%rsp)
  0x00007fffe1262531: mov     %r9,(%rsp)
  0x00007fffe1262535: mov     %edx,%ebp
  0x00007fffe1262537: mov     %rbx,%rsi
  0x00007fffe126253a: mov     %r14d,%edx
  0x00007fffe126253d: mov     %ebp,%r9d
  0x00007fffe1262540: nop
  0x00007fffe1262541: nop
  0x00007fffe1262542: nop
  0x00007fffe1262543: callq   0x7fffe1169ba0    ; OopMap{[0]=Oop [8]=Oop [16]=Oop [24]=Oop [36]=NarrowOop [64]=NarrowOop off=1960}
                                                ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B76: #	B28 &lt;- B75  Freq: 3.99987e-06

  0x00007fffe1262548: jmpq    0x7fffe1261fea
  ;; B77: #	B29 B78 &lt;- B28  Freq: 9.99988e-07

  0x00007fffe126254d: lea     0x70(%rsp),%rax
  0x00007fffe1262552: cmpq    $0x0,(%rax)
  0x00007fffe1262559: je      0x7fffe12625d3
  0x00007fffe126255f: mov     (%r11),%r10
  0x00007fffe1262562: test    $0x2,%r10
  0x00007fffe1262569: je      0x7fffe12625cb
  0x00007fffe126256b: mov     0x16(%r10),%rax
  0x00007fffe126256f: xor     %r15,%rax
  0x00007fffe1262572: or      0x26(%r10),%rax
  0x00007fffe1262576: jne     0x7fffe12625d3
  0x00007fffe1262578: mov     0x36(%r10),%rax
  0x00007fffe126257c: or      0x3e(%r10),%rax
  0x00007fffe1262580: jne     0x7fffe126258c
  0x00007fffe1262582: movq    $0x0,0x16(%r10)
  0x00007fffe126258a: jmp     0x7fffe12625d3
  0x00007fffe126258c: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262594: je      0x7fffe12625bf
  0x00007fffe1262596: movq    $0x0,0x16(%r10)
  0x00007fffe126259e: lock addl $0x0,(%rsp)
  0x00007fffe12625a3: cmpq    $0x0,0x46(%r10)
  0x00007fffe12625ab: jne     0x7fffe12625c4
  0x00007fffe12625ad: movabs  $0x0,%rax
  0x00007fffe12625b7: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12625bd: jne     0x7fffe12625c4
  0x00007fffe12625bf: or      $0x1,%eax
  0x00007fffe12625c2: jmp     0x7fffe12625d3
  0x00007fffe12625c4: test    $0x0,%eax
  0x00007fffe12625c9: jmp     0x7fffe12625d3
  0x00007fffe12625cb: mov     (%rax),%r10
  0x00007fffe12625ce: lock cmpxchg %r10,(%r11)
  0x00007fffe12625d3: je      0x7fffe126200d
  ;; B78: #	B29 &lt;- B77  Freq: 9.99988e-13

  0x00007fffe12625d9: mov     0x18(%rsp),%rdi
  0x00007fffe12625de: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12625e3: movabs  $0x7ffff744655c,%r10
  0x00007fffe12625ed: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12625f0: jmpq    0x7fffe126200d
  ;; B79: #	N1714 &lt;- B31  Freq: 9.99987e-07

  0x00007fffe12625f5: mov     $0xffffffde,%esi
  0x00007fffe12625fa: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12625ff: mov     0x24(%rsp),%eax
  0x00007fffe1262603: mov     %eax,0x8(%rsp)
  0x00007fffe1262607: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126260c: mov     %r13,0x18(%rsp)
  0x00007fffe1262611: mov     %r13,0x20(%rsp)
  0x00007fffe1262616: nop
  0x00007fffe1262617: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=NarrowOop [24]=Oop [32]=Oop [64]=NarrowOop off=2172}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe126261c: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B80: #	B81 &lt;- B83  Freq: 9.99984e-13

  0x00007fffe1262621: lock cmpxchg %r10,(%r9)
  ;; B81: #	B34 B82 &lt;- B32 B80  Freq: 9.99987e-07

  0x00007fffe1262626: lea     0x70(%rsp),%rbx
  0x00007fffe126262b: mov     (%r9),%rax
  0x00007fffe126262e: test    $0x2,%rax
  0x00007fffe1262634: jne     0x7fffe126265a
  0x00007fffe1262636: or      $0x1,%rax
  0x00007fffe126263a: mov     %rax,(%rbx)
  0x00007fffe126263d: lock cmpxchg %rbx,(%r9)
  0x00007fffe1262642: je      0x7fffe1262673
  0x00007fffe1262648: sub     %rsp,%rax
  0x00007fffe126264b: and     $0xfffffffffffff007,%rax
  0x00007fffe1262652: mov     %rax,(%rbx)
  0x00007fffe1262655: jmpq    0x7fffe1262673
  0x00007fffe126265a: movq    $0x3,(%rbx)
  0x00007fffe1262661: mov     %rax,%rbx
  0x00007fffe1262664: mov     0x16(%rbx),%rax
  0x00007fffe1262668: test    %rax,%rax
  0x00007fffe126266b: jne     0x7fffe1262673
  0x00007fffe126266d: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1262673: je      0x7fffe126206f
  ;; B82: #	B34 &lt;- B86 B81  Freq: 1.99997e-12

  0x00007fffe1262679: mov     %r9,(%rsp)
  0x00007fffe126267d: mov     %r13,%rbp
  0x00007fffe1262680: mov     %r9,%rsi
  0x00007fffe1262683: lea     0x70(%rsp),%rdx
  0x00007fffe1262688: nop
  0x00007fffe1262689: nop
  0x00007fffe126268a: nop
  0x00007fffe126268b: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [16]=Oop [36]=NarrowOop [64]=NarrowOop off=2288}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262690: mov     %rbp,%r13
  0x00007fffe1262693: mov     (%rsp),%r9
  0x00007fffe1262697: jmpq    0x7fffe126206f    ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B83: #	B80 B84 &lt;- B33  Freq: 9.99985e-07

  0x00007fffe126269c: test    $0x7,%r8
  0x00007fffe12626a3: jne     0x7fffe1262621
  ;; B84: #	B86 B85 &lt;- B83  Freq: 9.99984e-07

  0x00007fffe12626a9: test    $0x300,%r8
  0x00007fffe12626b0: jne     0x7fffe12626bf
  ;; B85: #	B86 &lt;- B84  Freq: 9.99982e-07

  0x00007fffe12626b2: and     $0x37f,%rax
  0x00007fffe12626b9: mov     %rax,%r11
  0x00007fffe12626bc: or      %r15,%r11
  ;; B86: #	B82 B87 &lt;- B85 B84  Freq: 9.99984e-07

  0x00007fffe12626bf: lock cmpxchg %r11,(%r9)
  0x00007fffe12626c4: jne     0x7fffe1262679
  ;; B87: #	B34 &lt;- B86  Freq: 9.99982e-07

  0x00007fffe12626c6: jmpq    0x7fffe126206f
  ;; B88: #	N1714 &lt;- B42  Freq: 9.9997e-07

  0x00007fffe12626cb: mov     $0xffffffde,%esi
  0x00007fffe12626d0: mov     %r13,0x10(%rsp)
  0x00007fffe12626d5: mov     %r13,0x18(%rsp)
  0x00007fffe12626da: mov     %ecx,0x20(%rsp)
  0x00007fffe12626de: mov     %r9,0x28(%rsp)
  0x00007fffe12626e3: callq   0x7fffe1107820    ; OopMap{[16]=Oop [24]=Oop [32]=NarrowOop [36]=NarrowOop [40]=Oop [64]=NarrowOop off=2376}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12626e8: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B89: #	B44 B90 &lt;- B43  Freq: 9.99969e-07

  0x00007fffe12626ed: lea     0x70(%rsp),%rax
  0x00007fffe12626f2: cmpq    $0x0,(%rax)
  0x00007fffe12626f9: je      0x7fffe1262773
  0x00007fffe12626ff: mov     (%r9),%r10
  0x00007fffe1262702: test    $0x2,%r10
  0x00007fffe1262709: je      0x7fffe126276b
  0x00007fffe126270b: mov     0x16(%r10),%rax
  0x00007fffe126270f: xor     %r15,%rax
  0x00007fffe1262712: or      0x26(%r10),%rax
  0x00007fffe1262716: jne     0x7fffe1262773
  0x00007fffe1262718: mov     0x36(%r10),%rax
  0x00007fffe126271c: or      0x3e(%r10),%rax
  0x00007fffe1262720: jne     0x7fffe126272c
  0x00007fffe1262722: movq    $0x0,0x16(%r10)
  0x00007fffe126272a: jmp     0x7fffe1262773
  0x00007fffe126272c: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262734: je      0x7fffe126275f
  0x00007fffe1262736: movq    $0x0,0x16(%r10)
  0x00007fffe126273e: lock addl $0x0,(%rsp)
  0x00007fffe1262743: cmpq    $0x0,0x46(%r10)
  0x00007fffe126274b: jne     0x7fffe1262764
  0x00007fffe126274d: movabs  $0x0,%rax
  0x00007fffe1262757: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126275d: jne     0x7fffe1262764
  0x00007fffe126275f: or      $0x1,%eax
  0x00007fffe1262762: jmp     0x7fffe1262773
  0x00007fffe1262764: test    $0x0,%eax
  0x00007fffe1262769: jmp     0x7fffe1262773
  0x00007fffe126276b: mov     (%rax),%r10
  0x00007fffe126276e: lock cmpxchg %r10,(%r9)
  0x00007fffe1262773: je      0x7fffe1262187
  ;; B90: #	B44 &lt;- B89  Freq: 9.99969e-13

  0x00007fffe1262779: mov     %r9,%rdi
  0x00007fffe126277c: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262781: movabs  $0x7ffff744655c,%r10
  0x00007fffe126278b: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe126278e: jmpq    0x7fffe1262187
  ;; B91: #	B45 B92 &lt;- B44  Freq: 9.99969e-07

  0x00007fffe1262793: lea     0x68(%rsp),%rax
  0x00007fffe1262798: cmpq    $0x0,(%rax)
  0x00007fffe126279f: je      0x7fffe126281b
  0x00007fffe12627a5: mov     0x0(%r13),%r10
  0x00007fffe12627a9: test    $0x2,%r10
  0x00007fffe12627b0: je      0x7fffe1262812
  0x00007fffe12627b2: mov     0x16(%r10),%rax
  0x00007fffe12627b6: xor     %r15,%rax
  0x00007fffe12627b9: or      0x26(%r10),%rax
  0x00007fffe12627bd: jne     0x7fffe126281b
  0x00007fffe12627bf: mov     0x36(%r10),%rax
  0x00007fffe12627c3: or      0x3e(%r10),%rax
  0x00007fffe12627c7: jne     0x7fffe12627d3
  0x00007fffe12627c9: movq    $0x0,0x16(%r10)
  0x00007fffe12627d1: jmp     0x7fffe126281b
  0x00007fffe12627d3: cmpq    $0x0,0x46(%r10)
  0x00007fffe12627db: je      0x7fffe1262806
  0x00007fffe12627dd: movq    $0x0,0x16(%r10)
  0x00007fffe12627e5: lock addl $0x0,(%rsp)
  0x00007fffe12627ea: cmpq    $0x0,0x46(%r10)
  0x00007fffe12627f2: jne     0x7fffe126280b
  0x00007fffe12627f4: movabs  $0x0,%rax
  0x00007fffe12627fe: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1262804: jne     0x7fffe126280b
  0x00007fffe1262806: or      $0x1,%eax
  0x00007fffe1262809: jmp     0x7fffe126281b
  0x00007fffe126280b: test    $0x0,%eax
  0x00007fffe1262810: jmp     0x7fffe126281b
  0x00007fffe1262812: mov     (%rax),%r10
  0x00007fffe1262815: lock cmpxchg %r10,0x0(%r13)
  0x00007fffe126281b: je      0x7fffe126219b
  ;; B92: #	B45 &lt;- B91  Freq: 9.99969e-13

  0x00007fffe1262821: mov     %r13,%rdi
  0x00007fffe1262824: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262829: movabs  $0x7ffff744655c,%r10
  0x00007fffe1262833: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262836: jmpq    0x7fffe126219b
  ;; B93: #	B47 B94 &lt;- B46  Freq: 9.99968e-07

  0x00007fffe126283b: mov     0x8(%rsp),%r11
  0x00007fffe1262840: lea     0x60(%rsp),%rax
  0x00007fffe1262845: cmpq    $0x0,(%rax)
  0x00007fffe126284c: je      0x7fffe12628c6
  0x00007fffe1262852: mov     (%r11),%r10
  0x00007fffe1262855: test    $0x2,%r10
  0x00007fffe126285c: je      0x7fffe12628be
  0x00007fffe126285e: mov     0x16(%r10),%rax
  0x00007fffe1262862: xor     %r15,%rax
  0x00007fffe1262865: or      0x26(%r10),%rax
  0x00007fffe1262869: jne     0x7fffe12628c6
  0x00007fffe126286b: mov     0x36(%r10),%rax
  0x00007fffe126286f: or      0x3e(%r10),%rax
  0x00007fffe1262873: jne     0x7fffe126287f
  0x00007fffe1262875: movq    $0x0,0x16(%r10)
  0x00007fffe126287d: jmp     0x7fffe12628c6
  0x00007fffe126287f: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262887: je      0x7fffe12628b2
  0x00007fffe1262889: movq    $0x0,0x16(%r10)
  0x00007fffe1262891: lock addl $0x0,(%rsp)
  0x00007fffe1262896: cmpq    $0x0,0x46(%r10)
  0x00007fffe126289e: jne     0x7fffe12628b7
  0x00007fffe12628a0: movabs  $0x0,%rax
  0x00007fffe12628aa: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12628b0: jne     0x7fffe12628b7
  0x00007fffe12628b2: or      $0x1,%eax
  0x00007fffe12628b5: jmp     0x7fffe12628c6
  0x00007fffe12628b7: test    $0x0,%eax
  0x00007fffe12628bc: jmp     0x7fffe12628c6
  0x00007fffe12628be: mov     (%rax),%r10
  0x00007fffe12628c1: lock cmpxchg %r10,(%r11)
  0x00007fffe12628c6: je      0x7fffe12621d0
  ;; B94: #	B47 &lt;- B93  Freq: 9.99968e-13

  0x00007fffe12628cc: mov     0x8(%rsp),%rdi
  0x00007fffe12628d1: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12628d6: movabs  $0x7ffff744655c,%r10
  0x00007fffe12628e0: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@32 (line 107)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe12628e3: jmpq    0x7fffe12621d0
  ;; B95: #	B96 &lt;- B40  Freq: 6.75466e-07

  0x00007fffe12628e8: mov     (%rsp),%r13
  ;; B96: #	N1714 &lt;- B95 B36  Freq: 1.01325e-06

  0x00007fffe12628ec: mov     $0xfffffff6,%esi
  0x00007fffe12628f1: mov     0x24(%rsp),%r11d
  0x00007fffe12628f6: mov     %r11d,0x4(%rsp)
  0x00007fffe12628fb: mov     %r13,0x10(%rsp)
  0x00007fffe1262900: mov     %r13,0x18(%rsp)
  0x00007fffe1262905: mov     %r9,0x20(%rsp)
  0x00007fffe126290a: nop
  0x00007fffe126290b: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [16]=Oop [24]=Oop [32]=Oop [64]=NarrowOop off=2928}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262910: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B97: #	N1714 &lt;- B38  Freq: 6.66628e-07

  0x00007fffe1262915: mov     $0xffffffde,%esi
  0x00007fffe126291a: mov     0x40(%rsp),%r11d
  0x00007fffe126291f: mov     %r11d,0x4(%rsp)
  0x00007fffe1262924: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262929: mov     0x24(%rsp),%eax
  0x00007fffe126292d: mov     %eax,0x8(%rsp)
  0x00007fffe1262931: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262936: mov     %r13,0x18(%rsp)
  0x00007fffe126293b: mov     %r13,0x20(%rsp)
  0x00007fffe1262940: mov     %r9,0x30(%rsp)
  0x00007fffe1262945: mov     %r9,0x38(%rsp)
  0x00007fffe126294a: mov     %ecx,0xc(%rsp)
  0x00007fffe126294e: mov     %r8d,0x40(%rsp)
  0x00007fffe1262953: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop [48]=Oop [56]=Oop off=3000}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262958: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B98: #	N1714 &lt;- B7  Freq: 4.99998e-07

  0x00007fffe126295d: mov     $0xffffff65,%esi
  0x00007fffe1262962: mov     0x40(%rsp),%ebp
  0x00007fffe1262966: mov     %edx,0x8(%rsp)
  0x00007fffe126296a: nop
  0x00007fffe126296b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [36]=NarrowOop off=3024}
                                                ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@7 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262970: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B99: #	N1714 &lt;- B8  Freq: 4.99998e-07

  0x00007fffe1262975: mov     $0xffffff65,%esi
  0x00007fffe126297a: mov     0x40(%rsp),%ebp
  0x00007fffe126297e: mov     %edx,0xc(%rsp)
  0x00007fffe1262982: nop
  0x00007fffe1262983: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [36]=NarrowOop off=3048}
                                                ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262988: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B100: #	N1714 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe126298d: mov     $0xffffff65,%esi
  0x00007fffe1262992: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262997: mov     0x40(%rsp),%eax
  0x00007fffe126299b: mov     %eax,0x4(%rsp)
  0x00007fffe126299f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12629a4: nop
  0x00007fffe12629a5: nop
  0x00007fffe12629a6: nop
  0x00007fffe12629a7: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [36]=NarrowOop off=3084}
                                                ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@11 (line 103)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12629ac: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B101: #	N1714 &lt;- B11  Freq: 4.76834e-07

  0x00007fffe12629b1: mov     $0xffffff65,%esi
  0x00007fffe12629b6: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12629bb: mov     0x40(%rsp),%eax
  0x00007fffe12629bf: mov     %eax,(%rsp)
  0x00007fffe12629c2: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12629c7: mov     %edx,0xc(%rsp)
  0x00007fffe12629cb: mov     %ecx,0x10(%rsp)
  0x00007fffe12629cf: mov     %ebx,0x14(%rsp)
  0x00007fffe12629d3: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [16]=NarrowOop [20]=NarrowOop [36]=NarrowOop off=3128}
                                                ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe12629d8: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B102: #	N1714 &lt;- B21  Freq: 4.76832e-07

  0x00007fffe12629dd: mov     $0xffffff65,%esi
  0x00007fffe12629e2: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12629e7: mov     0x40(%rsp),%eax
  0x00007fffe12629eb: mov     %eax,(%rsp)
  0x00007fffe12629ee: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12629f3: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12629f8: mov     0x24(%rsp),%eax
  0x00007fffe12629fc: mov     %eax,0x4(%rsp)
  0x00007fffe1262a00: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262a05: mov     %r9,0x10(%rsp)
  0x00007fffe1262a0a: mov     %r9,0x18(%rsp)
  0x00007fffe1262a0f: vmovss  %xmm1,0x28(%rsp)
  0x00007fffe1262a15: mov     %r14d,0x2c(%rsp)
  0x00007fffe1262a1a: mov     %edx,0x34(%rsp)
  0x00007fffe1262a1e: mov     %ebx,0x38(%rsp)
  0x00007fffe1262a22: mov     %r11,0x40(%rsp)
  0x00007fffe1262a27: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [16]=Oop [24]=Oop [40]=NarrowOop [64]=Oop off=3212}
                                                ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262a2c: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B103: #	N1714 &lt;- B22  Freq: 4.76832e-07

  0x00007fffe1262a31: mov     $0xffffff65,%esi
  0x00007fffe1262a36: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262a3b: mov     0x40(%rsp),%eax
  0x00007fffe1262a3f: mov     %eax,0x4(%rsp)
  0x00007fffe1262a43: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262a48: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262a4d: mov     0x24(%rsp),%eax
  0x00007fffe1262a51: mov     %eax,0x8(%rsp)
  0x00007fffe1262a55: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262a5a: mov     %r9,0x18(%rsp)
  0x00007fffe1262a5f: mov     %r9,0x20(%rsp)
  0x00007fffe1262a64: vmovss  %xmm1,0xc(%rsp)
  0x00007fffe1262a6a: mov     %r14d,0x30(%rsp)
  0x00007fffe1262a6f: mov     %edx,0x38(%rsp)
  0x00007fffe1262a73: mov     %r11,0x40(%rsp)
  0x00007fffe1262a78: nop
  0x00007fffe1262a79: nop
  0x00007fffe1262a7a: nop
  0x00007fffe1262a7b: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop [64]=Oop off=3296}
                                                ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262a80: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B104: #	N1714 &lt;- B29  Freq: 4.76831e-07

  0x00007fffe1262a85: mov     $0xffffff65,%esi
  0x00007fffe1262a8a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262a8f: mov     0x24(%rsp),%eax
  0x00007fffe1262a93: mov     %eax,0x8(%rsp)
  0x00007fffe1262a97: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262a9c: mov     %r13,0x18(%rsp)
  0x00007fffe1262aa1: mov     %r13,0x20(%rsp)
  0x00007fffe1262aa6: nop
  0x00007fffe1262aa7: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [24]=Oop [32]=Oop [64]=NarrowOop off=3340}
                                                ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262aac: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B105: #	B68 &lt;- B70  Freq: 9.99989e-13

  0x00007fffe1262ab1: lock cmpxchg %r10,(%r11)
  0x00007fffe1262ab6: jmpq    0x7fffe1262424
  ;; B106: #	N1714 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe1262abb: mov     $0xfffffff6,%esi
  0x00007fffe1262ac0: nop
  0x00007fffe1262ac1: nop
  0x00007fffe1262ac2: nop
  0x00007fffe1262ac3: callq   0x7fffe1107820    ; OopMap{off=3368}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262ac8: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B107: #	N1714 &lt;- B2  Freq: 1.01328e-06

  0x00007fffe1262acd: mov     $0xfffffff6,%esi
  0x00007fffe1262ad2: mov     %r10d,%ebp
  0x00007fffe1262ad5: nop
  0x00007fffe1262ad6: nop
  0x00007fffe1262ad7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop off=3388}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262adc: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B108: #	N1714 &lt;- B6  Freq: 1.01328e-06

  0x00007fffe1262ae1: mov     $0xfffffff6,%esi
  0x00007fffe1262ae6: mov     0x40(%rsp),%ebp
  0x00007fffe1262aea: nop
  0x00007fffe1262aeb: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop off=3408}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262af0: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B109: #	N1714 &lt;- B12  Freq: 1.01327e-06

  0x00007fffe1262af5: mov     $0xfffffff6,%esi
  0x00007fffe1262afa: mov     0x40(%rsp),%ebp
  0x00007fffe1262afe: mov     %r11d,0x4(%rsp)
  0x00007fffe1262b03: mov     %r10d,0x8(%rsp)
  0x00007fffe1262b08: mov     %edx,0xc(%rsp)
  0x00007fffe1262b0c: nop
  0x00007fffe1262b0d: nop
  0x00007fffe1262b0e: nop
  0x00007fffe1262b0f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop off=3444}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262b14: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B110: #	N1714 &lt;- B20  Freq: 1.01327e-06

  0x00007fffe1262b19: mov     $0xfffffff6,%esi
  0x00007fffe1262b1e: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262b23: mov     0x24(%rsp),%eax
  0x00007fffe1262b27: mov     %eax,0x4(%rsp)
  0x00007fffe1262b2b: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262b30: mov     %r9,0x10(%rsp)
  0x00007fffe1262b35: mov     %r9,0x18(%rsp)
  0x00007fffe1262b3a: mov     %r11,0x20(%rsp)
  0x00007fffe1262b3f: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop [16]=Oop [24]=Oop [32]=Oop [64]=NarrowOop off=3492}
                                                ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262b44: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B111: #	N1714 &lt;- B30  Freq: 1.01327e-06

  0x00007fffe1262b49: mov     $0xfffffff6,%esi
  0x00007fffe1262b4e: mov     %r13,0x10(%rsp)
  0x00007fffe1262b53: mov     %r13,0x18(%rsp)
  0x00007fffe1262b58: nop
  0x00007fffe1262b59: nop
  0x00007fffe1262b5a: nop
  0x00007fffe1262b5b: callq   0x7fffe1107820    ; OopMap{[16]=Oop [24]=Oop [36]=NarrowOop [64]=NarrowOop off=3520}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262b60: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B112: #	N1714 &lt;- B45  Freq: 1.01325e-06

  0x00007fffe1262b65: mov     $0xfffffff6,%esi
  0x00007fffe1262b6a: nop
  0x00007fffe1262b6b: callq   0x7fffe1107820    ; OopMap{[64]=NarrowOop off=3536}
                                                ;*invokevirtual clear
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262b70: callq   0x7ffff736b4ea    ;*invokevirtual clear
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B113: #	N1714 &lt;- B37  Freq: 6.75481e-07

  0x00007fffe1262b75: mov     $0xfffffff6,%esi
  0x00007fffe1262b7a: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262b7f: mov     0x24(%rsp),%eax
  0x00007fffe1262b83: mov     %eax,0x8(%rsp)
  0x00007fffe1262b87: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262b8c: mov     %r13,0x18(%rsp)
  0x00007fffe1262b91: mov     %r13,0x20(%rsp)
  0x00007fffe1262b96: mov     %r9,0x28(%rsp)
  0x00007fffe1262b9b: mov     %r8d,0xc(%rsp)
  0x00007fffe1262ba0: nop
  0x00007fffe1262ba1: nop
  0x00007fffe1262ba2: nop
  0x00007fffe1262ba3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=NarrowOop [24]=Oop [32]=Oop [40]=Oop [64]=NarrowOop off=3592}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262ba8: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.ByteBuffer::array@-1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B114: #	N1714 &lt;- B10  Freq: 4.76835e-07

  0x00007fffe1262bad: mov     $0xffffff65,%esi
  0x00007fffe1262bb2: mov     0x40(%rsp),%ebp
  0x00007fffe1262bb6: mov     %edx,0x8(%rsp)
  0x00007fffe1262bba: mov     %ecx,0xc(%rsp)
  0x00007fffe1262bbe: mov     %ebx,0x10(%rsp)
  0x00007fffe1262bc2: mov     %r11d,0x14(%rsp)
  0x00007fffe1262bc7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [12]=NarrowOop [16]=NarrowOop [20]=NarrowOop [36]=NarrowOop off=3628}
                                                ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262bcc: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B115: #	N1714 &lt;- B16  Freq: 4.76833e-07

  0x00007fffe1262bd1: mov     $0xffffff65,%esi
  0x00007fffe1262bd6: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1262bdb: mov     0x24(%rsp),%eax
  0x00007fffe1262bdf: mov     %eax,0x8(%rsp)
  0x00007fffe1262be3: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1262be8: vmovss  %xmm1,0xc(%rsp)
  0x00007fffe1262bee: mov     %r10d,0x18(%rsp)
  0x00007fffe1262bf3: mov     %edx,0x1c(%rsp)
  0x00007fffe1262bf7: mov     %r9,0x20(%rsp)
  0x00007fffe1262bfc: mov     %r9,0x28(%rsp)
  0x00007fffe1262c01: nop
  0x00007fffe1262c02: nop
  0x00007fffe1262c03: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=NarrowOop [12]=NarrowOop [32]=Oop [40]=Oop [64]=NarrowOop off=3688}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262c08: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B116: #	B118 B117 &lt;- B127  Freq: 6.66631e-11

  0x00007fffe1262c0d: mov     %rax,%rbx
  0x00007fffe1262c10: mov     0x40(%rsp),%r11d
  0x00007fffe1262c15: mov     $0x7,%r10d
  0x00007fffe1262c1b: and     (%r11),%r10
  0x00007fffe1262c1e: cmp     $0x5,%r10
  0x00007fffe1262c22: jne     0x7fffe1262c34    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@38 (line 107)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B117: #	N1714 &lt;- B119 B118 B116  Freq: 6.66631e-11

  0x00007fffe1262c24: mov     %rbx,%rsi
  0x00007fffe1262c27: add     $0x80,%rsp
  0x00007fffe1262c2e: pop     %rbp
  0x00007fffe1262c2f: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B118: #	B117 B119 &lt;- B116  Freq: 6.66631e-17

  0x00007fffe1262c34: mov     0x8(%rsp),%r11
  0x00007fffe1262c39: lea     0x60(%rsp),%rax
  0x00007fffe1262c3e: cmpq    $0x0,(%rax)
  0x00007fffe1262c45: je      0x7fffe1262cbf
  0x00007fffe1262c4b: mov     (%r11),%r10
  0x00007fffe1262c4e: test    $0x2,%r10
  0x00007fffe1262c55: je      0x7fffe1262cb7
  0x00007fffe1262c57: mov     0x16(%r10),%rax
  0x00007fffe1262c5b: xor     %r15,%rax
  0x00007fffe1262c5e: or      0x26(%r10),%rax
  0x00007fffe1262c62: jne     0x7fffe1262cbf
  0x00007fffe1262c64: mov     0x36(%r10),%rax
  0x00007fffe1262c68: or      0x3e(%r10),%rax
  0x00007fffe1262c6c: jne     0x7fffe1262c78
  0x00007fffe1262c6e: movq    $0x0,0x16(%r10)
  0x00007fffe1262c76: jmp     0x7fffe1262cbf
  0x00007fffe1262c78: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262c80: je      0x7fffe1262cab
  0x00007fffe1262c82: movq    $0x0,0x16(%r10)
  0x00007fffe1262c8a: lock addl $0x0,(%rsp)
  0x00007fffe1262c8f: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262c97: jne     0x7fffe1262cb0
  0x00007fffe1262c99: movabs  $0x0,%rax
  0x00007fffe1262ca3: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1262ca9: jne     0x7fffe1262cb0
  0x00007fffe1262cab: or      $0x1,%eax
  0x00007fffe1262cae: jmp     0x7fffe1262cbf
  0x00007fffe1262cb0: test    $0x0,%eax
  0x00007fffe1262cb5: jmp     0x7fffe1262cbf
  0x00007fffe1262cb7: mov     (%rax),%r10
  0x00007fffe1262cba: lock cmpxchg %r10,(%r11)
  0x00007fffe1262cbf: je      0x7fffe1262c24
  ;; B119: #	B117 &lt;- B118  Freq: 6.66631e-23

  0x00007fffe1262cc5: mov     0x8(%rsp),%rdi
  0x00007fffe1262cca: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262ccf: movabs  $0x7ffff744655c,%r10
  0x00007fffe1262cd9: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@38 (line 107)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262cdc: jmpq    0x7fffe1262c24    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B120: #	N1714 &lt;- B127  Freq: 6.66631e-11

  0x00007fffe1262ce1: mov     $0xffffffbd,%esi
  0x00007fffe1262ce6: mov     %rax,0x8(%rsp)
  0x00007fffe1262ceb: callq   0x7fffe1107820    ; OopMap{[8]=Oop [36]=NarrowOop [64]=NarrowOop off=3920}
                                                ;*astore
                                                ; - java.io.PrintStream::write@50 (line 485)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262cf0: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B121: #	N1714 &lt;- B127  Freq: 6.66631e-11

  0x00007fffe1262cf5: mov     $0xffffffbd,%esi
  0x00007fffe1262cfa: mov     %rax,0x10(%rsp)
  0x00007fffe1262cff: callq   0x7fffe1107820    ; OopMap{[16]=Oop [24]=Oop [36]=NarrowOop [64]=NarrowOop off=3940}
                                                ;*astore
                                                ; - java.io.PrintStream::write@61 (line 488)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  0x00007fffe1262d04: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B122: #	B132 B123 &lt;- B75  Freq: 3.99995e-11

  0x00007fffe1262d09: mov     %rax,%rbx
  0x00007fffe1262d0c: mov     $0x7,%r10d
  0x00007fffe1262d12: mov     0x18(%rsp),%r11
  0x00007fffe1262d17: and     (%r11),%r10
  0x00007fffe1262d1a: cmp     $0x5,%r10
  0x00007fffe1262d1e: jne     0x7fffe1262ebd    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B123: #	B126 &lt;- B133 B132 B122  Freq: 3.99995e-11

  0x00007fffe1262d24: mov     %rbx,%rbp
  0x00007fffe1262d27: mov     %rbx,%r13
  0x00007fffe1262d2a: jmp     0x7fffe1262d4b    ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B124: #	B130 B125 &lt;- B39  Freq: 6.66628e-06

  0x00007fffe1262d2c: mov     %rax,%rbx
  0x00007fffe1262d2f: mov     $0x7,%r10d
  0x00007fffe1262d35: mov     %rbp,%r11
  0x00007fffe1262d38: and     (%r11),%r10
  0x00007fffe1262d3b: cmp     $0x5,%r10
  0x00007fffe1262d3f: jne     0x7fffe1262e17    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  ;; B125: #	B126 &lt;- B131 B130 B124  Freq: 6.66628e-06

  0x00007fffe1262d45: mov     %rbx,%rbp
  0x00007fffe1262d48: mov     %rbx,%r13
  ;; B126: #	B128 B127 &lt;- B123 B125  Freq: 6.66632e-06

  0x00007fffe1262d4b: mov     $0x7,%r10d
  0x00007fffe1262d51: mov     (%rsp),%r11
  0x00007fffe1262d55: and     (%r11),%r10
  0x00007fffe1262d58: cmp     $0x5,%r10
  0x00007fffe1262d5c: jne     0x7fffe1262d6c
  ;; B127: #	B116 B121 B120 &lt;- B129 B128 B126  Freq: 6.66632e-06

  0x00007fffe1262d5e: mov     %r11,0x18(%rsp)   ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262d63: mov     %r13,%rsi
  0x00007fffe1262d66: nop
  0x00007fffe1262d67: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [8]=Oop [16]=Oop [24]=Oop [36]=NarrowOop [64]=NarrowOop off=4044}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ;   {runtime_call}
  ;; B128: #	B127 B129 &lt;- B126  Freq: 6.66632e-12

  0x00007fffe1262d6c: lea     0x68(%rsp),%rax
  0x00007fffe1262d71: cmpq    $0x0,(%rax)
  0x00007fffe1262d78: je      0x7fffe1262df2
  0x00007fffe1262d7e: mov     (%r11),%r10
  0x00007fffe1262d81: test    $0x2,%r10
  0x00007fffe1262d88: je      0x7fffe1262dea
  0x00007fffe1262d8a: mov     0x16(%r10),%rax
  0x00007fffe1262d8e: xor     %r15,%rax
  0x00007fffe1262d91: or      0x26(%r10),%rax
  0x00007fffe1262d95: jne     0x7fffe1262df2
  0x00007fffe1262d97: mov     0x36(%r10),%rax
  0x00007fffe1262d9b: or      0x3e(%r10),%rax
  0x00007fffe1262d9f: jne     0x7fffe1262dab
  0x00007fffe1262da1: movq    $0x0,0x16(%r10)
  0x00007fffe1262da9: jmp     0x7fffe1262df2
  0x00007fffe1262dab: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262db3: je      0x7fffe1262dde
  0x00007fffe1262db5: movq    $0x0,0x16(%r10)
  0x00007fffe1262dbd: lock addl $0x0,(%rsp)
  0x00007fffe1262dc2: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262dca: jne     0x7fffe1262de3
  0x00007fffe1262dcc: movabs  $0x0,%rax
  0x00007fffe1262dd6: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1262ddc: jne     0x7fffe1262de3
  0x00007fffe1262dde: or      $0x1,%eax
  0x00007fffe1262de1: jmp     0x7fffe1262df2
  0x00007fffe1262de3: test    $0x0,%eax
  0x00007fffe1262de8: jmp     0x7fffe1262df2
  0x00007fffe1262dea: mov     (%rax),%r10
  0x00007fffe1262ded: lock cmpxchg %r10,(%r11)
  0x00007fffe1262df2: je      0x7fffe1262d5e
  ;; B129: #	B127 &lt;- B128  Freq: 6.66632e-18

  0x00007fffe1262df8: mov     (%rsp),%rdi
  0x00007fffe1262dfc: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262e01: movabs  $0x7ffff744655c,%r10
  0x00007fffe1262e0b: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262e0e: mov     (%rsp),%r11
  0x00007fffe1262e12: jmpq    0x7fffe1262d5e
  ;; B130: #	B125 B131 &lt;- B124  Freq: 6.66628e-12

  0x00007fffe1262e17: lea     0x70(%rsp),%rax
  0x00007fffe1262e1c: cmpq    $0x0,(%rax)
  0x00007fffe1262e23: je      0x7fffe1262e9d
  0x00007fffe1262e29: mov     (%r11),%r10
  0x00007fffe1262e2c: test    $0x2,%r10
  0x00007fffe1262e33: je      0x7fffe1262e95
  0x00007fffe1262e35: mov     0x16(%r10),%rax
  0x00007fffe1262e39: xor     %r15,%rax
  0x00007fffe1262e3c: or      0x26(%r10),%rax
  0x00007fffe1262e40: jne     0x7fffe1262e9d
  0x00007fffe1262e42: mov     0x36(%r10),%rax
  0x00007fffe1262e46: or      0x3e(%r10),%rax
  0x00007fffe1262e4a: jne     0x7fffe1262e56
  0x00007fffe1262e4c: movq    $0x0,0x16(%r10)
  0x00007fffe1262e54: jmp     0x7fffe1262e9d
  0x00007fffe1262e56: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262e5e: je      0x7fffe1262e89
  0x00007fffe1262e60: movq    $0x0,0x16(%r10)
  0x00007fffe1262e68: lock addl $0x0,(%rsp)
  0x00007fffe1262e6d: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262e75: jne     0x7fffe1262e8e
  0x00007fffe1262e77: movabs  $0x0,%rax
  0x00007fffe1262e81: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1262e87: jne     0x7fffe1262e8e
  0x00007fffe1262e89: or      $0x1,%eax
  0x00007fffe1262e8c: jmp     0x7fffe1262e9d
  0x00007fffe1262e8e: test    $0x0,%eax
  0x00007fffe1262e93: jmp     0x7fffe1262e9d
  0x00007fffe1262e95: mov     (%rax),%r10
  0x00007fffe1262e98: lock cmpxchg %r10,(%r11)
  0x00007fffe1262e9d: je      0x7fffe1262d45
  ;; B131: #	B125 &lt;- B130  Freq: 6.66628e-18

  0x00007fffe1262ea3: mov     %r11,%rdi
  0x00007fffe1262ea6: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262eab: movabs  $0x7ffff744655c,%r10
  0x00007fffe1262eb5: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262eb8: jmpq    0x7fffe1262d45
  ;; B132: #	B123 B133 &lt;- B122  Freq: 3.99995e-17

  0x00007fffe1262ebd: lea     0x70(%rsp),%rax
  0x00007fffe1262ec2: cmpq    $0x0,(%rax)
  0x00007fffe1262ec9: je      0x7fffe1262f43
  0x00007fffe1262ecf: mov     (%r11),%r10
  0x00007fffe1262ed2: test    $0x2,%r10
  0x00007fffe1262ed9: je      0x7fffe1262f3b
  0x00007fffe1262edb: mov     0x16(%r10),%rax
  0x00007fffe1262edf: xor     %r15,%rax
  0x00007fffe1262ee2: or      0x26(%r10),%rax
  0x00007fffe1262ee6: jne     0x7fffe1262f43
  0x00007fffe1262ee8: mov     0x36(%r10),%rax
  0x00007fffe1262eec: or      0x3e(%r10),%rax
  0x00007fffe1262ef0: jne     0x7fffe1262efc
  0x00007fffe1262ef2: movq    $0x0,0x16(%r10)
  0x00007fffe1262efa: jmp     0x7fffe1262f43
  0x00007fffe1262efc: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262f04: je      0x7fffe1262f2f
  0x00007fffe1262f06: movq    $0x0,0x16(%r10)
  0x00007fffe1262f0e: lock addl $0x0,(%rsp)
  0x00007fffe1262f13: cmpq    $0x0,0x46(%r10)
  0x00007fffe1262f1b: jne     0x7fffe1262f34
  0x00007fffe1262f1d: movabs  $0x0,%rax
  0x00007fffe1262f27: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1262f2d: jne     0x7fffe1262f34
  0x00007fffe1262f2f: or      $0x1,%eax
  0x00007fffe1262f32: jmp     0x7fffe1262f43
  0x00007fffe1262f34: test    $0x0,%eax
  0x00007fffe1262f39: jmp     0x7fffe1262f43
  0x00007fffe1262f3b: mov     (%rax),%r10
  0x00007fffe1262f3e: lock cmpxchg %r10,(%r11)
  0x00007fffe1262f43: je      0x7fffe1262d24
  ;; B133: #	B123 &lt;- B132  Freq: 3.99995e-23

  0x00007fffe1262f49: mov     %r11,%rdi
  0x00007fffe1262f4c: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262f51: movabs  $0x7ffff744655c,%r10
  0x00007fffe1262f5b: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)

  0x00007fffe1262f5e: jmpq    0x7fffe1262d24
  0x00007fffe1262f63: hlt
  0x00007fffe1262f64: hlt
  0x00007fffe1262f65: hlt
  0x00007fffe1262f66: hlt
  0x00007fffe1262f67: hlt
  0x00007fffe1262f68: hlt
  0x00007fffe1262f69: hlt
  0x00007fffe1262f6a: hlt
  0x00007fffe1262f6b: hlt
  0x00007fffe1262f6c: hlt
  0x00007fffe1262f6d: hlt
  0x00007fffe1262f6e: hlt
  0x00007fffe1262f6f: hlt
  0x00007fffe1262f70: hlt
  0x00007fffe1262f71: hlt
  0x00007fffe1262f72: hlt
  0x00007fffe1262f73: hlt
  0x00007fffe1262f74: hlt
  0x00007fffe1262f75: hlt
  0x00007fffe1262f76: hlt
  0x00007fffe1262f77: hlt
  0x00007fffe1262f78: hlt
  0x00007fffe1262f79: hlt
  0x00007fffe1262f7a: hlt
  0x00007fffe1262f7b: hlt
  0x00007fffe1262f7c: hlt
  0x00007fffe1262f7d: hlt
  0x00007fffe1262f7e: hlt
  0x00007fffe1262f7f: hlt
[Stub Code]
  0x00007fffe1262f80: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe1262f8a: jmpq    0x7fffe1262f8a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1262f8f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe1262f94: callq   0x7fffe1262f99
  0x00007fffe1262f99: subq    $0x5,(%rsp)
  0x00007fffe1262f9e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1262fa3: hlt
  0x00007fffe1262fa4: hlt
  0x00007fffe1262fa5: hlt
  0x00007fffe1262fa6: hlt
  0x00007fffe1262fa7: hlt
<nmethod compile_id='97' compiler='C2' level='4' entry='0x00007fffe1261da0' size='9624' address='0x00007fffe1261b90' relocation_offset='304' insts_offset='528' stub_offset='5104' scopes_data_offset='5296' scopes_pcs_offset='7192' dependencies_offset='9432' handler_table_offset='9440' nul_chk_table_offset='9536' method='java/io/OutputStreamWriter flushBuffer ()V' bytes='8' count='56827' iicount='56827' stamp='119.392'/>
<make_not_entrant thread='140736956679936' compile_id='50' compiler='C1' level='2' stamp='119.392'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1258650:
Code:
Argument 0 is unknown.RIP: 0x7fffe12587c0 Code size: 0x00000190
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa8338} &apos;indexOf&apos; &apos;(I)I&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe12587c0: mov     0x8(%rsi),%r10d
  0x00007fffe12587c4: shl     $0x3,%r10
  0x00007fffe12587c8: cmp     %rax,%r10
  0x00007fffe12587cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12587d1: nop
  0x00007fffe12587d2: nop
  0x00007fffe12587d3: nop
  0x00007fffe12587d4: nop
  0x00007fffe12587d5: nop
  0x00007fffe12587d6: nop
  0x00007fffe12587d7: nop
  0x00007fffe12587d8: nop
  0x00007fffe12587d9: nop
  0x00007fffe12587da: nop
  0x00007fffe12587db: nop
  0x00007fffe12587dc: nop
  0x00007fffe12587dd: nop
  0x00007fffe12587de: nop
  0x00007fffe12587df: nop
[Verified Entry Point]
  0x00007fffe12587e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12587e7: push    %rbp
  0x00007fffe12587e8: sub     $0x30,%rsp
  0x00007fffe12587ec: movabs  $0x7ffff4c55418,%rcx
  0x00007fffe12587f6: mov     0x8(%rcx),%edi
  0x00007fffe12587f9: add     $0x8,%edi
  0x00007fffe12587fc: mov     %edi,0x8(%rcx)
  0x00007fffe12587ff: movabs  $0x7ffff4aa8338,%rcx  ;   {metadata({method} {0x00007ffff4aa8338} &apos;indexOf&apos; &apos;(I)I&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe1258809: and     $0x3ff8,%edi
  0x00007fffe125880f: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb004db70]
  0x00007fffe1258812: je      0x7fffe1258830    ;*aload_0
                                                ; - java.lang.String::indexOf@0 (line 1502)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 6]

  0x00007fffe1258818: mov     $0x0,%ecx         ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1502)

  0x00007fffe125881d: nop
  0x00007fffe125881e: nop
  0x00007fffe125881f: callq   0x7fffe1105e80    ; OopMap{off=100}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {optimized virtual_call}
  0x00007fffe1258824: add     $0x30,%rsp
  0x00007fffe1258828: pop     %rbp
  0x00007fffe1258829: test    %eax,0x16da28d1(%rip)  ;   {poll_return}
  0x00007fffe125882f: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1258830: mov     %rcx,0x8(%rsp)
  0x00007fffe1258835: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125883d: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=130}
                                                ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1502)
                                                ;   {runtime_call}
  0x00007fffe1258842: jmp     0x7fffe1258818
  0x00007fffe1258844: nop
  0x00007fffe1258845: nop
  ;; Unwind handler
  0x00007fffe1258846: mov     0x348(%r15),%rax
  0x00007fffe125884d: movabs  $0x0,%r10
  0x00007fffe1258857: mov     %r10,0x348(%r15)
  0x00007fffe125885e: movabs  $0x0,%r10
  0x00007fffe1258868: mov     %r10,0x350(%r15)
  0x00007fffe125886f: add     $0x30,%rsp
  0x00007fffe1258873: pop     %rbp
  0x00007fffe1258874: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1258879: hlt
  0x00007fffe125887a: hlt
  0x00007fffe125887b: hlt
  0x00007fffe125887c: hlt
  0x00007fffe125887d: hlt
  0x00007fffe125887e: hlt
  0x00007fffe125887f: hlt
[Stub Code]
  0x00007fffe1258880: nop                       ;   {no_reloc}
  0x00007fffe1258881: nop
  0x00007fffe1258882: nop
  0x00007fffe1258883: nop
  0x00007fffe1258884: nop
  0x00007fffe1258885: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125888f: jmpq    0x7fffe125888f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1258894: movabs  $0xdead,%rbx
  0x00007fffe125889e: movabs  $0xdead,%rcx
  0x00007fffe12588a8: movabs  $0xdead,%rsi
  0x00007fffe12588b2: movabs  $0xdead,%rdi
  0x00007fffe12588bc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12588c1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12588c6: sub     $0x80,%rsp
  0x00007fffe12588cd: mov     %rax,0x78(%rsp)
  0x00007fffe12588d2: mov     %rcx,0x70(%rsp)
  0x00007fffe12588d7: mov     %rdx,0x68(%rsp)
  0x00007fffe12588dc: mov     %rbx,0x60(%rsp)
  0x00007fffe12588e1: mov     %rbp,0x50(%rsp)
  0x00007fffe12588e6: mov     %rsi,0x48(%rsp)
  0x00007fffe12588eb: mov     %rdi,0x40(%rsp)
  0x00007fffe12588f0: mov     %r8,0x38(%rsp)
  0x00007fffe12588f5: mov     %r9,0x30(%rsp)
  0x00007fffe12588fa: mov     %r10,0x28(%rsp)
  0x00007fffe12588ff: mov     %r11,0x20(%rsp)
  0x00007fffe1258904: mov     %r12,0x18(%rsp)
  0x00007fffe1258909: mov     %r13,0x10(%rsp)
  0x00007fffe125890e: mov     %r14,0x8(%rsp)
  0x00007fffe1258913: mov     %r15,(%rsp)
  0x00007fffe1258917: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1258921: movabs  $0x7fffe12588c1,%rsi  ;   {internal_word}
  0x00007fffe125892b: mov     %rsp,%rdx
  0x00007fffe125892e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1258932: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1258937: hlt
[Deopt Handler Code]
  0x00007fffe1258938: movabs  $0x7fffe1258938,%r10  ;   {section_word}
  0x00007fffe1258942: push    %r10
  0x00007fffe1258944: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1258949: hlt
  0x00007fffe125894a: hlt
  0x00007fffe125894b: hlt
  0x00007fffe125894c: hlt
  0x00007fffe125894d: hlt
  0x00007fffe125894e: hlt
  0x00007fffe125894f: hlt
<nmethod compile_id='62' compiler='C1' level='2' entry='0x00007fffe12587c0' size='920' address='0x00007fffe1258650' relocation_offset='304' insts_offset='368' stub_offset='560' scopes_data_offset='776' scopes_pcs_offset='816' dependencies_offset='912' method='java/lang/String indexOf (I)I' bytes='7' count='28982' iicount='28982' stamp='119.400'/>
Decoding compiled method 0x00007fffe1253190:
Code:
Argument 0 is unknown.RIP: 0x7fffe1253300 Code size: 0x00000218
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa6730} &apos;&lt;init&gt;&apos; &apos;([CZ)V&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx:rdx   = &apos;[C&apos;
  # parm1:    rcx       = boolean
  #           [sp+0x40]  (sp of caller)
  ;;  block B3 [0, 0]

  0x00007fffe1253300: mov     0x8(%rsi),%r10d
  0x00007fffe1253304: shl     $0x3,%r10
  0x00007fffe1253308: cmp     %rax,%r10
  0x00007fffe125330b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1253311: nop
  0x00007fffe1253312: nop
  0x00007fffe1253313: nop
  0x00007fffe1253314: nop
  0x00007fffe1253315: nop
  0x00007fffe1253316: nop
  0x00007fffe1253317: nop
  0x00007fffe1253318: nop
  0x00007fffe1253319: nop
  0x00007fffe125331a: nop
  0x00007fffe125331b: nop
  0x00007fffe125331c: nop
  0x00007fffe125331d: nop
  0x00007fffe125331e: nop
  0x00007fffe125331f: nop
[Verified Entry Point]
  0x00007fffe1253320: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1253327: push    %rbp
  0x00007fffe1253328: sub     $0x30,%rsp
  0x00007fffe125332c: movabs  $0x7ffff4c79f48,%rdi
  0x00007fffe1253336: mov     0x8(%rdi),%ebx
  0x00007fffe1253339: add     $0x8,%ebx
  0x00007fffe125333c: mov     %ebx,0x8(%rdi)
  0x00007fffe125333f: movabs  $0x7ffff4aa6730,%rdi  ;   {metadata({method} {0x00007ffff4aa6730} &apos;&lt;init&gt;&apos; &apos;([CZ)V&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe1253349: and     $0x3ff8,%ebx
  0x00007fffe125334f: cmp     $0x0,%ebx
  ;;   24 branch [EQ] [CounterOverflowStub: 0x00007fffa8098ee0]
  0x00007fffe1253352: je      0x7fffe1253405    ;*aload_0
                                                ; - java.lang.String::&lt;init&gt;@0 (line 608)

  ;;  block B4 [0, 0]

  ;;  block B0 [0, 9]

  0x00007fffe1253358: mov     %rdx,%r10
  0x00007fffe125335b: push    %r10
  0x00007fffe125335d: cmp     0x16b0687c(%rip),%r12  ;   {external_word}
  0x00007fffe1253364: je      0x7fffe12533e1
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe125336a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125336f: sub     $0x80,%rsp
  0x00007fffe1253376: mov     %rax,0x78(%rsp)
  0x00007fffe125337b: mov     %rcx,0x70(%rsp)
  0x00007fffe1253380: mov     %rdx,0x68(%rsp)
  0x00007fffe1253385: mov     %rbx,0x60(%rsp)
  0x00007fffe125338a: mov     %rbp,0x50(%rsp)
  0x00007fffe125338f: mov     %rsi,0x48(%rsp)
  0x00007fffe1253394: mov     %rdi,0x40(%rsp)
  0x00007fffe1253399: mov     %r8,0x38(%rsp)
  0x00007fffe125339e: mov     %r9,0x30(%rsp)
  0x00007fffe12533a3: mov     %r10,0x28(%rsp)
  0x00007fffe12533a8: mov     %r11,0x20(%rsp)
  0x00007fffe12533ad: mov     %r12,0x18(%rsp)
  0x00007fffe12533b2: mov     %r13,0x10(%rsp)
  0x00007fffe12533b7: mov     %r14,0x8(%rsp)
  0x00007fffe12533bc: mov     %r15,(%rsp)
  0x00007fffe12533c0: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe12533ca: movabs  $0x7fffe125336a,%rsi  ;   {internal_word}
  0x00007fffe12533d4: mov     %rsp,%rdx
  0x00007fffe12533d7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12533db: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12533e0: hlt
  0x00007fffe12533e1: pop     %r10
  0x00007fffe12533e3: mov     %r10d,0xc(%rsi)
  0x00007fffe12533e7: shr     $0x9,%rsi
  0x00007fffe12533eb: movabs  $0x7ffff591e000,%rdi
  0x00007fffe12533f5: movb    $0x0,(%rsi,%rdi)  ;*putfield value
                                                ; - java.lang.String::&lt;init&gt;@6 (line 610)

  0x00007fffe12533f9: add     $0x30,%rsp
  0x00007fffe12533fd: pop     %rbp
  0x00007fffe12533fe: test    %eax,0x16da7cfc(%rip)  ;   {poll_return}
  0x00007fffe1253404: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1253405: mov     %rdi,0x8(%rsp)
  0x00007fffe125340a: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1253412: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop off=279}
                                                ;*synchronization entry
                                                ; - java.lang.String::&lt;init&gt;@-1 (line 608)
                                                ;   {runtime_call}
  0x00007fffe1253417: jmpq    0x7fffe1253358
  0x00007fffe125341c: nop
  0x00007fffe125341d: nop
  ;; Unwind handler
  0x00007fffe125341e: mov     0x348(%r15),%rax
  0x00007fffe1253425: movabs  $0x0,%r10
  0x00007fffe125342f: mov     %r10,0x348(%r15)
  0x00007fffe1253436: movabs  $0x0,%r10
  0x00007fffe1253440: mov     %r10,0x350(%r15)
  0x00007fffe1253447: add     $0x30,%rsp
  0x00007fffe125344b: pop     %rbp
  0x00007fffe125344c: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1253451: hlt
  0x00007fffe1253452: hlt
  0x00007fffe1253453: hlt
  0x00007fffe1253454: hlt
  0x00007fffe1253455: hlt
  0x00007fffe1253456: hlt
  0x00007fffe1253457: hlt
  0x00007fffe1253458: hlt
  0x00007fffe1253459: hlt
  0x00007fffe125345a: hlt
  0x00007fffe125345b: hlt
  0x00007fffe125345c: hlt
  0x00007fffe125345d: hlt
  0x00007fffe125345e: hlt
  0x00007fffe125345f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1253460: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe125346a: movabs  $0xdead,%rcx
  0x00007fffe1253474: movabs  $0xdead,%rsi
  0x00007fffe125347e: movabs  $0xdead,%rdi
  0x00007fffe1253488: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125348d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1253492: sub     $0x80,%rsp
  0x00007fffe1253499: mov     %rax,0x78(%rsp)
  0x00007fffe125349e: mov     %rcx,0x70(%rsp)
  0x00007fffe12534a3: mov     %rdx,0x68(%rsp)
  0x00007fffe12534a8: mov     %rbx,0x60(%rsp)
  0x00007fffe12534ad: mov     %rbp,0x50(%rsp)
  0x00007fffe12534b2: mov     %rsi,0x48(%rsp)
  0x00007fffe12534b7: mov     %rdi,0x40(%rsp)
  0x00007fffe12534bc: mov     %r8,0x38(%rsp)
  0x00007fffe12534c1: mov     %r9,0x30(%rsp)
  0x00007fffe12534c6: mov     %r10,0x28(%rsp)
  0x00007fffe12534cb: mov     %r11,0x20(%rsp)
  0x00007fffe12534d0: mov     %r12,0x18(%rsp)
  0x00007fffe12534d5: mov     %r13,0x10(%rsp)
  0x00007fffe12534da: mov     %r14,0x8(%rsp)
  0x00007fffe12534df: mov     %r15,(%rsp)
  0x00007fffe12534e3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12534ed: movabs  $0x7fffe125348d,%rsi  ;   {internal_word}
  0x00007fffe12534f7: mov     %rsp,%rdx
  0x00007fffe12534fa: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12534fe: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1253503: hlt
[Deopt Handler Code]
  0x00007fffe1253504: movabs  $0x7fffe1253504,%r10  ;   {section_word}
  0x00007fffe125350e: push    %r10
  0x00007fffe1253510: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1253515: hlt
  0x00007fffe1253516: hlt
  0x00007fffe1253517: hlt
<nmethod compile_id='63' compiler='C1' level='2' entry='0x00007fffe1253300' size='1032' address='0x00007fffe1253190' relocation_offset='304' insts_offset='368' stub_offset='720' scopes_data_offset='912' scopes_pcs_offset='944' dependencies_offset='1024' method='java/lang/String &lt;init&gt; ([CZ)V' bytes='10' count='29156' iicount='29156' stamp='119.410'/>
Decoding compiled method 0x00007fffe1255410:
Code:
Argument 0 is unknown.RIP: 0x7fffe12555a0 Code size: 0x00000370
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;
  # this:     rsi:rsi   = &apos;java/io/PrintStream&apos;
  # parm0:    rdx       = int
  #           [sp+0x70]  (sp of caller)
  ;;  block B10 [0, 0]

  0x00007fffe12555a0: mov     0x8(%rsi),%r10d
  0x00007fffe12555a4: shl     $0x3,%r10
  0x00007fffe12555a8: cmp     %rax,%r10
  0x00007fffe12555ab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12555b1: nop
  0x00007fffe12555b2: nop
  0x00007fffe12555b3: nop
  0x00007fffe12555b4: nop
  0x00007fffe12555b5: nop
  0x00007fffe12555b6: nop
  0x00007fffe12555b7: nop
  0x00007fffe12555b8: nop
  0x00007fffe12555b9: nop
  0x00007fffe12555ba: nop
  0x00007fffe12555bb: nop
  0x00007fffe12555bc: nop
  0x00007fffe12555bd: nop
  0x00007fffe12555be: nop
  0x00007fffe12555bf: nop
[Verified Entry Point]
  0x00007fffe12555c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12555c7: push    %rbp
  0x00007fffe12555c8: sub     $0x60,%rsp
  0x00007fffe12555cc: movabs  $0x7ffff4d70ef8,%rax
  0x00007fffe12555d6: mov     0x8(%rax),%edi
  0x00007fffe12555d9: add     $0x8,%edi
  0x00007fffe12555dc: mov     %edi,0x8(%rax)
  0x00007fffe12555df: movabs  $0x7ffff4c24a80,%rax  ;   {metadata({method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe12555e9: and     $0x3ff8,%edi
  0x00007fffe12555ef: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb0207a00]
  0x00007fffe12555f2: je      0x7fffe1255780    ;*aload_0
                                                ; - java.io.PrintStream::println@0 (line 735)

  ;;  block B11 [0, 0]

  ;;  block B0 [0, 23]

  0x00007fffe12555f8: lea     0x48(%rsp),%rdi
  0x00007fffe12555fd: mov     %rsi,0x8(%rdi)
  0x00007fffe1255601: mov     (%rsi),%rax
  0x00007fffe1255604: mov     %rax,%rbx
  0x00007fffe1255607: and     $0x7,%rbx
  0x00007fffe125560b: cmp     $0x5,%rbx
  0x00007fffe125560f: jne     0x7fffe1255696
  0x00007fffe1255615: mov     0x8(%rsi),%ebx
  0x00007fffe1255618: shl     $0x3,%rbx
  0x00007fffe125561c: mov     0xb0(%rbx),%rbx
  0x00007fffe1255623: or      %r15,%rbx
  0x00007fffe1255626: xor     %rax,%rbx
  0x00007fffe1255629: and     $0xffffffffffffff87,%rbx
  0x00007fffe125562d: je      0x7fffe12556be
  0x00007fffe1255633: test    $0x7,%rbx
  0x00007fffe125563a: jne     0x7fffe1255683
  0x00007fffe125563c: test    $0x300,%rbx
  0x00007fffe1255643: jne     0x7fffe1255662
  0x00007fffe1255645: and     $0x37f,%rax
  0x00007fffe125564c: mov     %rax,%rbx
  0x00007fffe125564f: or      %r15,%rbx
  0x00007fffe1255652: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1255657: jne     0x7fffe1255797
  0x00007fffe125565d: jmpq    0x7fffe12556be
  0x00007fffe1255662: mov     0x8(%rsi),%ebx
  0x00007fffe1255665: shl     $0x3,%rbx
  0x00007fffe1255669: mov     0xb0(%rbx),%rbx
  0x00007fffe1255670: or      %r15,%rbx
  0x00007fffe1255673: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1255678: jne     0x7fffe1255797
  0x00007fffe125567e: jmpq    0x7fffe12556be
  0x00007fffe1255683: mov     0x8(%rsi),%ebx
  0x00007fffe1255686: shl     $0x3,%rbx
  0x00007fffe125568a: mov     0xb0(%rbx),%rbx
  0x00007fffe1255691: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1255696: mov     (%rsi),%rax
  0x00007fffe1255699: or      $0x1,%rax
  0x00007fffe125569d: mov     %rax,(%rdi)
  0x00007fffe12556a0: lock cmpxchg %rdi,(%rsi)
  0x00007fffe12556a5: je      0x7fffe12556be
  0x00007fffe12556ab: sub     %rsp,%rax
  0x00007fffe12556ae: and     $0xfffffffffffff007,%rax
  0x00007fffe12556b5: mov     %rax,(%rdi)
  0x00007fffe12556b8: jne     0x7fffe1255797    ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)

  0x00007fffe12556be: mov     %rsi,0x40(%rsp)
  0x00007fffe12556c3: mov     %rdx,%rsi         ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12556c6: nop
  0x00007fffe12556c7: callq   0x7fffe1106300    ; OopMap{[64]=Oop [80]=Oop off=300}
                                                ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {static_call}
  0x00007fffe12556cc: mov     %rax,%rdx
  0x00007fffe12556cf: mov     0x40(%rsp),%rsi   ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12556d4: nop
  0x00007fffe12556d5: nop
  0x00007fffe12556d6: nop
  0x00007fffe12556d7: callq   0x7fffe1105e80    ; OopMap{[64]=Oop [80]=Oop off=316}
                                                ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {optimized virtual_call}
  0x00007fffe12556dc: mov     0x40(%rsp),%rsi   ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12556e1: nop
  0x00007fffe12556e2: nop
  0x00007fffe12556e3: nop
  0x00007fffe12556e4: nop
  0x00007fffe12556e5: nop
  0x00007fffe12556e6: nop
  0x00007fffe12556e7: callq   0x7fffe1105e80    ; OopMap{[64]=Oop [80]=Oop off=332}
                                                ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {optimized virtual_call}
  0x00007fffe12556ec: lea     0x48(%rsp),%rax
  0x00007fffe12556f1: mov     0x8(%rax),%rdi
  0x00007fffe12556f5: mov     (%rdi),%rsi
  0x00007fffe12556f8: and     $0x7,%rsi
  0x00007fffe12556fc: cmp     $0x5,%rsi
  0x00007fffe1255700: je      0x7fffe125571d
  0x00007fffe1255706: mov     (%rax),%rsi
  0x00007fffe1255709: test    %rsi,%rsi
  0x00007fffe125570c: je      0x7fffe125571d
  0x00007fffe1255712: lock cmpxchg %rsi,(%rdi)
  0x00007fffe1255717: jne     0x7fffe12557aa    ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)

  0x00007fffe125571d: add     $0x60,%rsp
  0x00007fffe1255721: pop     %rbp
  0x00007fffe1255722: test    %eax,0x16da59d8(%rip)  ;   {poll_return}
  0x00007fffe1255728: retq                      ;*return
                                                ; - java.io.PrintStream::println@23 (line 739)

  ;;  block B1 [18, 22]

  0x00007fffe1255729: mov     0x348(%r15),%rax
  0x00007fffe1255730: xor     %r10,%r10
  0x00007fffe1255733: mov     %r10,0x348(%r15)
  0x00007fffe125573a: xor     %r10,%r10
  0x00007fffe125573d: mov     %r10,0x350(%r15)
  0x00007fffe1255744: mov     %rax,%rsi
  0x00007fffe1255747: lea     0x48(%rsp),%rax
  0x00007fffe125574c: mov     0x8(%rax),%rbx
  0x00007fffe1255750: mov     (%rbx),%rdi
  0x00007fffe1255753: and     $0x7,%rdi
  0x00007fffe1255757: cmp     $0x5,%rdi
  0x00007fffe125575b: je      0x7fffe1255778
  0x00007fffe1255761: mov     (%rax),%rdi
  0x00007fffe1255764: test    %rdi,%rdi
  0x00007fffe1255767: je      0x7fffe1255778
  0x00007fffe125576d: lock cmpxchg %rdi,(%rbx)
  0x00007fffe1255772: jne     0x7fffe12557bd    ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)

  0x00007fffe1255778: mov     %rsi,%rax
  0x00007fffe125577b: jmpq    0x7fffe12557f8
  ;; CounterOverflowStub slow case
  0x00007fffe1255780: mov     %rax,0x8(%rsp)
  0x00007fffe1255785: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125578d: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=498}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::println@-1 (line 735)
                                                ;   {runtime_call}
  0x00007fffe1255792: jmpq    0x7fffe12555f8
  ;; MonitorEnterStub slow case
  0x00007fffe1255797: mov     %rsi,0x8(%rsp)
  0x00007fffe125579c: mov     %rdi,(%rsp)
  0x00007fffe12557a0: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [80]=Oop off=517}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ;   {runtime_call}
  0x00007fffe12557a5: jmpq    0x7fffe12556be
  ;; MonitorExitStub slow case
  0x00007fffe12557aa: lea     0x48(%rsp),%rax
  0x00007fffe12557af: mov     %rax,(%rsp)
  0x00007fffe12557b3: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12557b8: jmpq    0x7fffe125571d
  ;; MonitorExitStub slow case
  0x00007fffe12557bd: lea     0x48(%rsp),%rax
  0x00007fffe12557c2: mov     %rax,(%rsp)
  0x00007fffe12557c6: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12557cb: jmp     0x7fffe1255778
  0x00007fffe12557cd: nop
  0x00007fffe12557ce: nop
  ;; Unwind handler
  0x00007fffe12557cf: mov     0x348(%r15),%rax
  0x00007fffe12557d6: movabs  $0x0,%r10
  0x00007fffe12557e0: mov     %r10,0x348(%r15)
  0x00007fffe12557e7: movabs  $0x0,%r10
  0x00007fffe12557f1: mov     %r10,0x350(%r15)
  0x00007fffe12557f8: add     $0x60,%rsp
  0x00007fffe12557fc: pop     %rbp
  0x00007fffe12557fd: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1255802: hlt
  0x00007fffe1255803: hlt
  0x00007fffe1255804: hlt
  0x00007fffe1255805: hlt
  0x00007fffe1255806: hlt
  0x00007fffe1255807: hlt
  0x00007fffe1255808: hlt
  0x00007fffe1255809: hlt
  0x00007fffe125580a: hlt
  0x00007fffe125580b: hlt
  0x00007fffe125580c: hlt
  0x00007fffe125580d: hlt
  0x00007fffe125580e: hlt
  0x00007fffe125580f: hlt
  0x00007fffe1255810: hlt
  0x00007fffe1255811: hlt
  0x00007fffe1255812: hlt
  0x00007fffe1255813: hlt
  0x00007fffe1255814: hlt
  0x00007fffe1255815: hlt
  0x00007fffe1255816: hlt
  0x00007fffe1255817: hlt
  0x00007fffe1255818: hlt
  0x00007fffe1255819: hlt
  0x00007fffe125581a: hlt
  0x00007fffe125581b: hlt
  0x00007fffe125581c: hlt
  0x00007fffe125581d: hlt
  0x00007fffe125581e: hlt
  0x00007fffe125581f: hlt
[Stub Code]
  0x00007fffe1255820: nop                       ;   {no_reloc}
  0x00007fffe1255821: nop
  0x00007fffe1255822: nop
  0x00007fffe1255823: nop
  0x00007fffe1255824: nop
  0x00007fffe1255825: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125582f: jmpq    0x7fffe125582f    ;   {runtime_call}
  0x00007fffe1255834: nop
  0x00007fffe1255835: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125583f: jmpq    0x7fffe125583f    ;   {runtime_call}
  0x00007fffe1255844: nop
  0x00007fffe1255845: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125584f: jmpq    0x7fffe125584f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1255854: movabs  $0xdead,%rbx
  0x00007fffe125585e: movabs  $0xdead,%rcx
  0x00007fffe1255868: movabs  $0xdead,%rsi
  0x00007fffe1255872: movabs  $0xdead,%rdi
  0x00007fffe125587c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1255881: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1255886: sub     $0x80,%rsp
  0x00007fffe125588d: mov     %rax,0x78(%rsp)
  0x00007fffe1255892: mov     %rcx,0x70(%rsp)
  0x00007fffe1255897: mov     %rdx,0x68(%rsp)
  0x00007fffe125589c: mov     %rbx,0x60(%rsp)
  0x00007fffe12558a1: mov     %rbp,0x50(%rsp)
  0x00007fffe12558a6: mov     %rsi,0x48(%rsp)
  0x00007fffe12558ab: mov     %rdi,0x40(%rsp)
  0x00007fffe12558b0: mov     %r8,0x38(%rsp)
  0x00007fffe12558b5: mov     %r9,0x30(%rsp)
  0x00007fffe12558ba: mov     %r10,0x28(%rsp)
  0x00007fffe12558bf: mov     %r11,0x20(%rsp)
  0x00007fffe12558c4: mov     %r12,0x18(%rsp)
  0x00007fffe12558c9: mov     %r13,0x10(%rsp)
  0x00007fffe12558ce: mov     %r14,0x8(%rsp)
  0x00007fffe12558d3: mov     %r15,(%rsp)
  0x00007fffe12558d7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12558e1: movabs  $0x7fffe1255881,%rsi  ;   {internal_word}
  0x00007fffe12558eb: mov     %rsp,%rdx
  0x00007fffe12558ee: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12558f2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12558f7: hlt
[Deopt Handler Code]
  0x00007fffe12558f8: movabs  $0x7fffe12558f8,%r10  ;   {section_word}
  0x00007fffe1255902: push    %r10
  0x00007fffe1255904: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1255909: hlt
  0x00007fffe125590a: hlt
  0x00007fffe125590b: hlt
  0x00007fffe125590c: hlt
  0x00007fffe125590d: hlt
  0x00007fffe125590e: hlt
  0x00007fffe125590f: hlt
<nmethod compile_id='64' compiler='C1' level='2' entry='0x00007fffe12555a0' size='1800' address='0x00007fffe1255410' relocation_offset='304' insts_offset='400' stub_offset='1040' scopes_data_offset='1312' scopes_pcs_offset='1480' dependencies_offset='1720' handler_table_offset='1728' method='java/io/PrintStream println (I)V' bytes='24' count='30320' iicount='30320' stamp='119.452'/>
<writer thread='140737327351552'/>
<task_queued compile_id='101' method='java/lang/String indexOf (I)I' bytes='7' count='30519' iicount='30519' stamp='119.452' comment='tiered' hot_count='30519'/>
<task_queued compile_id='102' method='java/lang/String &lt;init&gt; ([CZ)V' bytes='10' count='30692' iicount='30692' stamp='119.464' comment='tiered' hot_count='30692'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1264150:
Code:
Argument 0 is unknown.RIP: 0x7fffe1264340 Code size: 0x00000e08
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2b6d0} &apos;writeBytes&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x80]  (sp of caller)
  ;; N1313: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1264340: mov     0x8(%rsi),%r10d
  0x00007fffe1264344: shl     $0x3,%r10
  0x00007fffe1264348: cmp     %r10,%rax
  0x00007fffe126434b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1264351: nop
  0x00007fffe1264352: nop
  0x00007fffe1264353: nop
  0x00007fffe1264354: nop
  0x00007fffe1264355: nop
  0x00007fffe1264356: nop
  0x00007fffe1264357: nop
  0x00007fffe1264358: nop
  0x00007fffe1264359: nop
  0x00007fffe126435a: nop
  0x00007fffe126435b: nop
  0x00007fffe126435c: nop
  0x00007fffe126435d: nop
  0x00007fffe126435e: nop
  0x00007fffe126435f: nop
[Verified Entry Point]
  ;; B1: #	B90 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1264360: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1264367: push    %rbp
  0x00007fffe1264368: sub     $0x70,%rsp        ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@-1 (line 210)

  0x00007fffe126436c: mov     %rsi,0x30(%rsp)
  0x00007fffe1264371: mov     0x20(%rsi),%r10d  ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@1 (line 210)

  0x00007fffe1264375: mov     0x18(%r10),%r13d  ;*getfield position
                                                ; - java.nio.Buffer::flip@2 (line 357)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; implicit exception: dispatches to 0x00007fffe1264d85
  ;; B2: #	B84 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1264379: mov     %r13d,0x1c(%r10)  ;*putfield limit
                                                ; - java.nio.Buffer::flip@5 (line 357)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)

  0x00007fffe126437d: mov     %r12d,0x18(%r10)  ;*putfield position
                                                ; - java.nio.Buffer::flip@10 (line 358)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)

  0x00007fffe1264381: movl    $0xffffffff,0xc(%r10)  ;*putfield mark
                                                ; - java.nio.Buffer::flip@15 (line 359)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)

  0x00007fffe1264389: test    %r13d,%r13d
  0x00007fffe126438c: jl      0x7fffe1264ca1    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)

  ;; B3: #	B85 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe1264392: test    %r13d,%r13d
  0x00007fffe1264395: jle     0x7fffe1264cbd    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@57 (line 216)

  ;; B4: #	B42 B5 &lt;- B3  Freq: 0.999998

  0x00007fffe126439b: mov     0x28(%rsi),%ebp
  0x00007fffe126439e: test    %ebp,%ebp
  0x00007fffe12643a0: jne     0x7fffe12646c7    ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)

  ;; B5: #	B96 B6 &lt;- B4  Freq: 0.999997

  0x00007fffe12643a6: mov     0x2c(%r10),%r9d   ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  0x00007fffe12643aa: mov     0x24(%rsi),%ecx   ;*getfield out
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@100 (line 221)

  0x00007fffe12643ad: mov     0xc(%r9),%edi     ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; implicit exception: dispatches to 0x00007fffe1264e21
  ;; B6: #	B86 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe12643b1: movzbl  0x28(%r10),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  0x00007fffe12643b6: test    %ebp,%ebp
  0x00007fffe12643b8: jne     0x7fffe1264cd9    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  ;; B7: #	B91 B8 &lt;- B6  Freq: 0.999996

  0x00007fffe12643be: mov     0x24(%r10),%r11d  ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)

  0x00007fffe12643c2: mov     0x8(%rcx),%r8d    ; implicit exception: dispatches to 0x00007fffe1264d95
  ;; B8: #	B43 B9 &lt;- B7  Freq: 0.999995

  0x00007fffe12643c6: cmp     $0x200051d4,%r8d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe12643cd: jne     0x7fffe12646dd    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B9: #	B45 B10 &lt;- B8  Freq: 0.999994

  0x00007fffe12643d3: mov     %r9,%rdx          ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)

  0x00007fffe12643d6: mov     %rcx,%r10         ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe12643d9: mov     (%r10),%rax
  0x00007fffe12643dc: mov     %rax,%r8
  0x00007fffe12643df: and     $0x7,%r8
  0x00007fffe12643e3: cmp     $0x5,%r8
  0x00007fffe12643e7: jne     0x7fffe126470a
  ;; B10: #	B48 B11 &lt;- B9  Freq: 0.999993

  0x00007fffe12643ed: mov     $0x200051d4,%ecx  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe12643f2: movabs  $0x0,%r8
  0x00007fffe12643fc: lea     (%r8,%rcx,8),%r8
  0x00007fffe1264400: mov     0xb0(%r8),%r8
  0x00007fffe1264407: mov     %r8,%rcx
  0x00007fffe126440a: or      %r15,%rcx
  0x00007fffe126440d: mov     %rcx,%rbx
  0x00007fffe1264410: xor     %rax,%rbx
  0x00007fffe1264413: test    $0xffffffffffffff87,%rbx
  0x00007fffe126441a: jne     0x7fffe12647d5    ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B11: #	B97 B12 &lt;- B46 B45 B10 B52  Freq: 0.999994

  0x00007fffe1264420: mov     0xc(%r10),%ebp    ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264424: mov     0x8(%rbp),%r8d    ; implicit exception: dispatches to 0x00007fffe1264e49
  ;; B12: #	B47 B13 &lt;- B11  Freq: 0.999994

  0x00007fffe1264428: cmp     $0x2000524d,%r8d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe126442f: jne     0x7fffe12647ad
  ;; B13: #	B54 B14 &lt;- B12  Freq: 0.999993

  0x00007fffe1264435: mov     %rbp,%r14         ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264438: mov     (%r14),%rax
  0x00007fffe126443b: mov     %rax,%r8
  0x00007fffe126443e: and     $0x7,%r8
  0x00007fffe1264442: mov     $0x2000524d,%ecx  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1264447: shl     $0x3,%rcx
  0x00007fffe126444b: mov     %rcx,(%rsp)
  0x00007fffe126444f: cmp     $0x5,%r8
  0x00007fffe1264453: jne     0x7fffe126480d
  ;; B14: #	B56 B15 &lt;- B13  Freq: 0.999992

  0x00007fffe1264459: mov     0xb0(%rcx),%r8
  0x00007fffe1264460: mov     %r8,%rcx
  0x00007fffe1264463: or      %r15,%rcx
  0x00007fffe1264466: mov     %rcx,%rbx
  0x00007fffe1264469: xor     %rax,%rbx
  0x00007fffe126446c: test    $0xffffffffffffff87,%rbx
  0x00007fffe1264473: jne     0x7fffe12648d0    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B15: #	B92 B16 &lt;- B55 B54 B14 B60  Freq: 0.999993

  0x00007fffe1264479: mov     0x14(%r14),%esi   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126447d: mov     0xc(%rsi),%ebx    ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; implicit exception: dispatches to 0x00007fffe1264db1
  ;; B16: #	B87 B17 &lt;- B15  Freq: 0.999992

  0x00007fffe1264480: cmp     %ebx,%r13d
  0x00007fffe1264483: jnl     0x7fffe1264cf9    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B17: #	B88 B18 &lt;- B16  Freq: 0.999991

  0x00007fffe1264489: mov     0x10(%r14),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@31 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126448d: mov     %ebx,%ebp
  0x00007fffe126448f: sub     %r8d,%ebp         ;*isub
                                                ; - java.io.BufferedOutputStream::write@34 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264492: cmp     %ebp,%r13d
  0x00007fffe1264495: jnle    0x7fffe1264d31    ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B18: #	B63 B19 &lt;- B17  Freq: 0.999991

  0x00007fffe126449b: mov     %rsi,%rcx         ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126449e: test    %r11d,%r11d
  0x00007fffe12644a1: jl      0x7fffe126490b
  ;; B19: #	B63 B20 &lt;- B18  Freq: 0.99999

  0x00007fffe12644a7: test    %r8d,%r8d
  0x00007fffe12644aa: jl      0x7fffe126490b
  ;; B20: #	B61 B21 &lt;- B19  Freq: 0.999989

  0x00007fffe12644b0: mov     %r10,%rbp
  0x00007fffe12644b3: mov     %r13d,%r10d
  0x00007fffe12644b6: add     %r11d,%r10d
  0x00007fffe12644b9: cmp     %r10d,%edi
  0x00007fffe12644bc: jb      0x7fffe1264903
  ;; B21: #	B62 B22 &lt;- B20  Freq: 0.999988

  0x00007fffe12644c2: mov     %r13d,%edi
  0x00007fffe12644c5: add     %r8d,%edi
  0x00007fffe12644c8: cmp     %edi,%ebx
  0x00007fffe12644ca: jb      0x7fffe1264908
  ;; B22: #	B23 &lt;- B21  Freq: 0.999987

  0x00007fffe12644d0: lea     0x10(%rsi,%r8),%rsi
  0x00007fffe12644d5: lea     0x10(%r9,%r11),%rdi
  0x00007fffe12644da: movsxd  %r13d,%rdx
  0x00007fffe12644dd: movabs  $0x7fffe1140ce0,%r10
  0x00007fffe12644e7: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B23: #	B65 B24 &lt;- B22 B64  Freq: 0.999991

  0x00007fffe12644ea: mov     0x10(%r14),%r10d  ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@58 (line 129)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe12644ee: add     %r13d,%r10d
  0x00007fffe12644f1: mov     %r10d,0x10(%r14)
  0x00007fffe12644f5: mov     $0x7,%r10d
  0x00007fffe12644fb: and     (%r14),%r10
  0x00007fffe12644fe: cmp     $0x5,%r10
  0x00007fffe1264502: jne     0x7fffe126495c    ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B24: #	B89 B25 &lt;- B66 B65 B23  Freq: 0.999991

  0x00007fffe1264508: mov     %rbp,%r13
  0x00007fffe126450b: movzbl  0x10(%rbp),%ebp   ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@20 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126450f: test    %ebp,%ebp
  0x00007fffe1264511: je      0x7fffe1264d69    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B25: #	B93 B26 &lt;- B24  Freq: 0.99999

  0x00007fffe1264517: mov     0xc(%r13),%ebp    ;*getfield out
                                                ; - java.io.PrintStream::write@27 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126451b: mov     0x8(%rbp),%r10d   ; implicit exception: dispatches to 0x00007fffe1264dd1
  ;; B26: #	B67 B27 &lt;- B25  Freq: 0.999989

  0x00007fffe126451f: cmp     $0x2000524d,%r10d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1264526: jne     0x7fffe1264a02
  ;; B27: #	B69 B28 &lt;- B26  Freq: 0.999988

  0x00007fffe126452c: mov     %rbp,%r10         ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126452f: mov     (%r10),%rax
  0x00007fffe1264532: mov     %rax,%r11
  0x00007fffe1264535: and     $0x7,%r11
  0x00007fffe1264539: cmp     $0x5,%r11
  0x00007fffe126453d: jne     0x7fffe1264a22
  ;; B28: #	B71 B29 &lt;- B27  Freq: 0.999987

  0x00007fffe1264543: mov     (%rsp),%r11
  0x00007fffe1264547: mov     0xb0(%r11),%r11
  0x00007fffe126454e: mov     %r11,%r8
  0x00007fffe1264551: or      %r15,%r8
  0x00007fffe1264554: mov     %r8,%r9
  0x00007fffe1264557: xor     %rax,%r9
  0x00007fffe126455a: test    $0xffffffffffffff87,%r9
  0x00007fffe1264561: jne     0x7fffe1264aa7    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B29: #	B32 B30 &lt;- B70 B69 B28 B75  Freq: 0.999988

  0x00007fffe1264567: mov     0x10(%r10),%ebx   ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126456b: mov     0xc(%r10),%r11d   ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe126456f: test    %ebx,%ebx
  0x00007fffe1264571: jnle    0x7fffe1264581    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B30: #	B37 B31 &lt;- B29  Freq: 0.333358

  0x00007fffe1264573: test    %r11d,%r11d
  0x00007fffe1264576: jne     0x7fffe1264666    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B31: #	B82 &lt;- B30  Freq: 3.37784e-07

  0x00007fffe126457c: jmpq    0x7fffe1264c4b
  ;; B32: #	B95 B33 &lt;- B29  Freq: 0.666631

  0x00007fffe1264581: mov     0x14(%r10),%ebp   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264585: mov     0x8(%r11),%r8d    ; implicit exception: dispatches to 0x00007fffe1264dfd
  ;; B33: #	B83 B34 &lt;- B32  Freq: 0.66663

  0x00007fffe1264589: cmp     $0x20004f38,%r8d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1264590: jne     0x7fffe1264c69    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B34: #	B103 B35 &lt;- B33  Freq: 0.666629

  0x00007fffe1264596: mov     %rbp,%rdx
  0x00007fffe1264599: push    %r10
  0x00007fffe126459b: cmp     0x16af563e(%rip),%r12  ;   {external_word}
  0x00007fffe12645a2: je      0x7fffe126461f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12645a8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12645ad: sub     $0x80,%rsp
  0x00007fffe12645b4: mov     %rax,0x78(%rsp)
  0x00007fffe12645b9: mov     %rcx,0x70(%rsp)
  0x00007fffe12645be: mov     %rdx,0x68(%rsp)
  0x00007fffe12645c3: mov     %rbx,0x60(%rsp)
  0x00007fffe12645c8: mov     %rbp,0x50(%rsp)
  0x00007fffe12645cd: mov     %rsi,0x48(%rsp)
  0x00007fffe12645d2: mov     %rdi,0x40(%rsp)
  0x00007fffe12645d7: mov     %r8,0x38(%rsp)
  0x00007fffe12645dc: mov     %r9,0x30(%rsp)
  0x00007fffe12645e1: mov     %r10,0x28(%rsp)
  0x00007fffe12645e6: mov     %r11,0x20(%rsp)
  0x00007fffe12645eb: mov     %r12,0x18(%rsp)
  0x00007fffe12645f0: mov     %r13,0x10(%rsp)
  0x00007fffe12645f5: mov     %r14,0x8(%rsp)
  0x00007fffe12645fa: mov     %r15,(%rsp)
  0x00007fffe12645fe: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1264608: movabs  $0x7fffe12645a8,%rsi  ;   {internal_word}
  0x00007fffe1264612: mov     %rsp,%rdx
  0x00007fffe1264615: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1264619: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126461e: hlt
  0x00007fffe126461f: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264621: mov     %r11,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264624: movzbl  0xc(%rsi),%r9d    ;*getfield append
                                                ; - java.io.FileOutputStream::write@5 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264629: xor     %ecx,%ecx
  0x00007fffe126462b: mov     %ebx,%r8d
  0x00007fffe126462e: mov     %r13,(%rsp)
  0x00007fffe1264632: mov     %r13,0x8(%rsp)
  0x00007fffe1264637: mov     %r13,0x28(%rsp)
  0x00007fffe126463c: mov     %r10,0x18(%rsp)
  0x00007fffe1264641: mov     %r10,0x20(%rsp)
  0x00007fffe1264646: nop
  0x00007fffe1264647: callq   0x7fffe1105e80    ; OopMap{[0]=Oop [8]=Oop [24]=Oop [32]=Oop [40]=Oop [48]=Oop off=780}
                                                ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {optimized virtual_call}
  ;; B35: #	B81 B36 &lt;- B34  Freq: 0.666616

  0x00007fffe126464c: mov     0x18(%rsp),%r10
  0x00007fffe1264651: mov     %r12d,0x10(%r10)  ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264655: mov     0xc(%r10),%r11d   ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264659: test    %r11d,%r11d
  0x00007fffe126465c: je      0x7fffe1264c47
  ;; B36: #	B37 &lt;- B35  Freq: 0.666615

  0x00007fffe1264662: mov     (%rsp),%r13       ;*return
                                                ; - java.io.BufferedOutputStream::flushBuffer@28 (line 85)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B37: #	B76 B38 &lt;- B36 B30  Freq: 0.999972

  0x00007fffe1264666: mov     0x8(%r11),%r8d
  0x00007fffe126466a: cmp     $0x20004f38,%r8d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1264671: jne     0x7fffe1264ad6
  ;; B38: #	B77 B39 &lt;- B37  Freq: 0.999971

  0x00007fffe1264677: mov     $0x7,%r11d
  0x00007fffe126467d: and     (%r10),%r11
  0x00007fffe1264680: cmp     $0x5,%r11
  0x00007fffe1264684: jne     0x7fffe1264af9
  ;; B39: #	B79 B40 &lt;- B78 B77 B38  Freq: 0.999971

  0x00007fffe126468a: mov     $0x7,%r10d
  0x00007fffe1264690: and     0x0(%r13),%r10
  0x00007fffe1264694: cmp     $0x5,%r10
  0x00007fffe1264698: jne     0x7fffe1264b9f    ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B40: #	B94 B41 &lt;- B80 B79 B39  Freq: 0.999971

  0x00007fffe126469e: mov     0x30(%rsp),%r10
  0x00007fffe12646a3: mov     0x20(%r10),%r11d  ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@124 (line 224)

  0x00007fffe12646a7: mov     0x20(%r11),%r10d  ; implicit exception: dispatches to 0x00007fffe1264ded
  ;; B41: #	N1313 &lt;- B40  Freq: 0.99997

  0x00007fffe12646ab: mov     %r10d,0x1c(%r11)  ;*putfield limit
                                                ; - java.nio.Buffer::clear@10 (line 330)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)

  0x00007fffe12646af: mov     %r12d,0x18(%r11)  ;*putfield position
                                                ; - java.nio.Buffer::clear@2 (line 329)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)

  0x00007fffe12646b3: movl    $0xffffffff,0xc(%r11)  ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@-1 (line 210)

  0x00007fffe12646bb: add     $0x70,%rsp
  0x00007fffe12646bf: pop     %rbp
  0x00007fffe12646c0: test    %eax,0x16d9693a(%rip)  ;   {poll_return}
  0x00007fffe12646c6: retq                      ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)

  ;; B42: #	N1313 &lt;- B4  Freq: 9.99998e-07

  0x00007fffe12646c7: mov     $0xffffffec,%esi
  0x00007fffe12646cc: mov     %r13d,0x8(%rsp)
  0x00007fffe12646d1: nop
  0x00007fffe12646d2: nop
  0x00007fffe12646d3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [48]=Oop off=920}
                                                ;*ifnull
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@64 (line 217)
                                                ;   {runtime_call}
  0x00007fffe12646d8: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B43: #	N1313 &lt;- B8  Freq: 9.99995e-07

  0x00007fffe12646dd: mov     $0xffffffde,%esi
  0x00007fffe12646e2: mov     0x30(%rsp),%rbp
  0x00007fffe12646e7: mov     %r13d,(%rsp)
  0x00007fffe12646eb: mov     %ecx,0x4(%rsp)
  0x00007fffe12646ef: mov     %r9d,0x8(%rsp)
  0x00007fffe12646f4: mov     %r11d,0xc(%rsp)
  0x00007fffe12646f9: nop
  0x00007fffe12646fa: nop
  0x00007fffe12646fb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop off=960}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264700: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B44: #	B45 &lt;- B48  Freq: 9.99993e-13

  0x00007fffe1264705: lock cmpxchg %r8,(%r10)
  ;; B45: #	B11 B46 &lt;- B9 B44  Freq: 9.99995e-07

  0x00007fffe126470a: lea     0x50(%rsp),%rbx
  0x00007fffe126470f: mov     (%r10),%rax
  0x00007fffe1264712: test    $0x2,%rax
  0x00007fffe1264718: jne     0x7fffe126473e
  0x00007fffe126471a: or      $0x1,%rax
  0x00007fffe126471e: mov     %rax,(%rbx)
  0x00007fffe1264721: lock cmpxchg %rbx,(%r10)
  0x00007fffe1264726: je      0x7fffe1264757
  0x00007fffe126472c: sub     %rsp,%rax
  0x00007fffe126472f: and     $0xfffffffffffff007,%rax
  0x00007fffe1264736: mov     %rax,(%rbx)
  0x00007fffe1264739: jmpq    0x7fffe1264757
  0x00007fffe126473e: movq    $0x3,(%rbx)
  0x00007fffe1264745: mov     %rax,%rbx
  0x00007fffe1264748: mov     0x16(%rbx),%rax
  0x00007fffe126474c: test    %rax,%rax
  0x00007fffe126474f: jne     0x7fffe1264757
  0x00007fffe1264751: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1264757: je      0x7fffe1264420
  ;; B46: #	B11 &lt;- B51 B45  Freq: 1.99999e-12

  0x00007fffe126475d: mov     %r10,0x18(%rsp)
  0x00007fffe1264762: mov     %rdx,0x10(%rsp)
  0x00007fffe1264767: mov     %r11d,0xc(%rsp)
  0x00007fffe126476c: mov     %edi,0x8(%rsp)
  0x00007fffe1264770: mov     %r9d,0x4(%rsp)
  0x00007fffe1264775: mov     %r13d,(%rsp)
  0x00007fffe1264779: mov     %rsi,%rbp
  0x00007fffe126477c: mov     %r10,%rsi
  0x00007fffe126477f: lea     0x50(%rsp),%rdx
  0x00007fffe1264784: nop
  0x00007fffe1264785: nop
  0x00007fffe1264786: nop
  0x00007fffe1264787: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [4]=NarrowOop [16]=Oop [24]=Oop [48]=Oop off=1100}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe126478c: mov     (%rsp),%r13d
  0x00007fffe1264790: mov     0x4(%rsp),%r9d
  0x00007fffe1264795: mov     0x8(%rsp),%edi
  0x00007fffe1264799: mov     0xc(%rsp),%r11d
  0x00007fffe126479e: mov     0x10(%rsp),%rdx
  0x00007fffe12647a3: mov     0x18(%rsp),%r10
  0x00007fffe12647a8: jmpq    0x7fffe1264420
  ;; B47: #	N1313 &lt;- B12  Freq: 9.99994e-07

  0x00007fffe12647ad: mov     $0xffffffde,%esi
  0x00007fffe12647b2: mov     %r13d,0x8(%rsp)
  0x00007fffe12647b7: mov     %r10,0x18(%rsp)
  0x00007fffe12647bc: mov     %r9d,0xc(%rsp)
  0x00007fffe12647c1: mov     %r11d,0x20(%rsp)
  0x00007fffe12647c6: mov     %r10,0x28(%rsp)
  0x00007fffe12647cb: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [12]=NarrowOop [24]=Oop [40]=Oop [48]=Oop off=1168}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe12647d0: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B48: #	B44 B49 &lt;- B10  Freq: 9.99993e-07

  0x00007fffe12647d5: test    $0x7,%rbx
  0x00007fffe12647dc: jne     0x7fffe1264705
  ;; B49: #	B51 B50 &lt;- B48  Freq: 9.99992e-07

  0x00007fffe12647e2: test    $0x300,%rbx
  0x00007fffe12647e9: jne     0x7fffe12647f8
  ;; B50: #	B51 &lt;- B49  Freq: 9.99991e-07

  0x00007fffe12647eb: and     $0x37f,%rax
  0x00007fffe12647f2: mov     %rax,%rcx
  0x00007fffe12647f5: or      %r15,%rcx
  ;; B51: #	B46 B52 &lt;- B50 B49  Freq: 9.99992e-07

  0x00007fffe12647f8: lock cmpxchg %rcx,(%r10)
  0x00007fffe12647fd: jne     0x7fffe126475d
  ;; B52: #	B11 &lt;- B51  Freq: 9.99991e-07

  0x00007fffe1264803: jmpq    0x7fffe1264420
  ;; B53: #	B54 &lt;- B56  Freq: 9.99992e-13

  0x00007fffe1264808: lock cmpxchg %r8,(%r14)
  ;; B54: #	B15 B55 &lt;- B13 B53  Freq: 9.99994e-07

  0x00007fffe126480d: lea     0x58(%rsp),%rbx
  0x00007fffe1264812: mov     (%r14),%rax
  0x00007fffe1264815: test    $0x2,%rax
  0x00007fffe126481b: jne     0x7fffe1264841
  0x00007fffe126481d: or      $0x1,%rax
  0x00007fffe1264821: mov     %rax,(%rbx)
  0x00007fffe1264824: lock cmpxchg %rbx,(%r14)
  0x00007fffe1264829: je      0x7fffe126485a
  0x00007fffe126482f: sub     %rsp,%rax
  0x00007fffe1264832: and     $0xfffffffffffff007,%rax
  0x00007fffe1264839: mov     %rax,(%rbx)
  0x00007fffe126483c: jmpq    0x7fffe126485a
  0x00007fffe1264841: movq    $0x3,(%rbx)
  0x00007fffe1264848: mov     %rax,%rbx
  0x00007fffe126484b: mov     0x16(%rbx),%rax
  0x00007fffe126484f: test    %rax,%rax
  0x00007fffe1264852: jne     0x7fffe126485a
  0x00007fffe1264854: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126485a: je      0x7fffe1264479
  ;; B55: #	B15 &lt;- B59 B54  Freq: 1.99998e-12

  0x00007fffe1264860: pushq   (%rsp)
  0x00007fffe1264864: popq    0x28(%rsp)
  0x00007fffe1264869: mov     %r14,0x20(%rsp)
  0x00007fffe126486e: mov     %r10,0x18(%rsp)
  0x00007fffe1264873: mov     %rdx,0x10(%rsp)
  0x00007fffe1264878: mov     %r11d,0xc(%rsp)
  0x00007fffe126487d: mov     %edi,0x8(%rsp)
  0x00007fffe1264881: mov     %r9d,0x4(%rsp)
  0x00007fffe1264886: mov     %r13d,(%rsp)
  0x00007fffe126488a: mov     0x30(%rsp),%rbp
  0x00007fffe126488f: mov     %r14,%rsi
  0x00007fffe1264892: lea     0x58(%rsp),%rdx
  0x00007fffe1264897: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [4]=NarrowOop [16]=Oop [24]=Oop [32]=Oop off=1372}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe126489c: mov     %rbp,0x30(%rsp)
  0x00007fffe12648a1: mov     (%rsp),%r13d
  0x00007fffe12648a5: mov     0x4(%rsp),%r9d
  0x00007fffe12648aa: mov     0x8(%rsp),%edi
  0x00007fffe12648ae: mov     0xc(%rsp),%r11d
  0x00007fffe12648b3: mov     0x10(%rsp),%rdx
  0x00007fffe12648b8: mov     0x18(%rsp),%r10
  0x00007fffe12648bd: mov     0x20(%rsp),%r14
  0x00007fffe12648c2: pushq   0x28(%rsp)
  0x00007fffe12648c7: popq    (%rsp)
  0x00007fffe12648cb: jmpq    0x7fffe1264479
  ;; B56: #	B53 B57 &lt;- B14  Freq: 9.99992e-07

  0x00007fffe12648d0: test    $0x7,%rbx
  0x00007fffe12648d7: jne     0x7fffe1264808
  ;; B57: #	B59 B58 &lt;- B56  Freq: 9.99991e-07

  0x00007fffe12648dd: test    $0x300,%rbx
  0x00007fffe12648e4: jne     0x7fffe12648f3
  ;; B58: #	B59 &lt;- B57  Freq: 9.9999e-07

  0x00007fffe12648e6: and     $0x37f,%rax
  0x00007fffe12648ed: mov     %rax,%rcx
  0x00007fffe12648f0: or      %r15,%rcx
  ;; B59: #	B55 B60 &lt;- B58 B57  Freq: 9.99991e-07

  0x00007fffe12648f3: lock cmpxchg %rcx,(%r14)
  0x00007fffe12648f8: jne     0x7fffe1264860
  ;; B60: #	B15 &lt;- B59  Freq: 9.9999e-07

  0x00007fffe12648fe: jmpq    0x7fffe1264479
  ;; B61: #	B63 &lt;- B20  Freq: 9.99989e-07

  0x00007fffe1264903: mov     %rbp,%r10
  0x00007fffe1264906: jmp     0x7fffe126490b
  ;; B62: #	B63 &lt;- B21  Freq: 9.99987e-07

  0x00007fffe1264908: mov     %rbp,%r10
  ;; B63: #	B101 B64 &lt;- B18 B19 B61 B62  Freq: 3.99996e-06

  0x00007fffe126490b: pushq   (%rsp)
  0x00007fffe126490f: popq    0x18(%rsp)
  0x00007fffe1264914: mov     %r14,0x10(%rsp)
  0x00007fffe1264919: mov     %r10,0x8(%rsp)
  0x00007fffe126491e: mov     %r13d,%ebp
  0x00007fffe1264921: pushq   0x30(%rsp)
  0x00007fffe1264926: popq    (%rsp)
  0x00007fffe126492a: mov     %rdx,%rsi
  0x00007fffe126492d: mov     %r11d,%edx
  0x00007fffe1264930: mov     %r13d,%r9d
  0x00007fffe1264933: callq   0x7fffe1169ba0    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=1528}
                                                ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B64: #	B23 &lt;- B63  Freq: 3.99988e-06

  0x00007fffe1264938: pushq   (%rsp)
  0x00007fffe126493c: popq    0x30(%rsp)
  0x00007fffe1264941: mov     %ebp,%r13d
  0x00007fffe1264944: mov     0x8(%rsp),%rbp
  0x00007fffe1264949: mov     0x10(%rsp),%r14
  0x00007fffe126494e: pushq   0x18(%rsp)
  0x00007fffe1264953: popq    (%rsp)
  0x00007fffe1264957: jmpq    0x7fffe12644ea
  ;; B65: #	B24 B66 &lt;- B23  Freq: 9.99991e-07

  0x00007fffe126495c: lea     0x58(%rsp),%rax
  0x00007fffe1264961: cmpq    $0x0,(%rax)
  0x00007fffe1264968: je      0x7fffe12649e2
  0x00007fffe126496e: mov     (%r14),%r10
  0x00007fffe1264971: test    $0x2,%r10
  0x00007fffe1264978: je      0x7fffe12649da
  0x00007fffe126497a: mov     0x16(%r10),%rax
  0x00007fffe126497e: xor     %r15,%rax
  0x00007fffe1264981: or      0x26(%r10),%rax
  0x00007fffe1264985: jne     0x7fffe12649e2
  0x00007fffe1264987: mov     0x36(%r10),%rax
  0x00007fffe126498b: or      0x3e(%r10),%rax
  0x00007fffe126498f: jne     0x7fffe126499b
  0x00007fffe1264991: movq    $0x0,0x16(%r10)
  0x00007fffe1264999: jmp     0x7fffe12649e2
  0x00007fffe126499b: cmpq    $0x0,0x46(%r10)
  0x00007fffe12649a3: je      0x7fffe12649ce
  0x00007fffe12649a5: movq    $0x0,0x16(%r10)
  0x00007fffe12649ad: lock addl $0x0,(%rsp)
  0x00007fffe12649b2: cmpq    $0x0,0x46(%r10)
  0x00007fffe12649ba: jne     0x7fffe12649d3
  0x00007fffe12649bc: movabs  $0x0,%rax
  0x00007fffe12649c6: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12649cc: jne     0x7fffe12649d3
  0x00007fffe12649ce: or      $0x1,%eax
  0x00007fffe12649d1: jmp     0x7fffe12649e2
  0x00007fffe12649d3: test    $0x0,%eax
  0x00007fffe12649d8: jmp     0x7fffe12649e2
  0x00007fffe12649da: mov     (%rax),%r10
  0x00007fffe12649dd: lock cmpxchg %r10,(%r14)
  0x00007fffe12649e2: je      0x7fffe1264508
  ;; B66: #	B24 &lt;- B65  Freq: 9.99991e-13

  0x00007fffe12649e8: mov     %r14,%rdi
  0x00007fffe12649eb: lea     0x58(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe12649f0: movabs  $0x7ffff744655c,%r10
  0x00007fffe12649fa: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe12649fd: jmpq    0x7fffe1264508
  ;; B67: #	N1313 &lt;- B26  Freq: 9.99989e-07

  0x00007fffe1264a02: mov     $0xffffffde,%esi
  0x00007fffe1264a07: mov     %r13,0x10(%rsp)
  0x00007fffe1264a0c: mov     %r13,0x18(%rsp)
  0x00007fffe1264a11: nop
  0x00007fffe1264a12: nop
  0x00007fffe1264a13: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [48]=Oop off=1752}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264a18: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B68: #	B69 &lt;- B71  Freq: 9.99987e-13

  0x00007fffe1264a1d: lock cmpxchg %r11,(%r10)
  ;; B69: #	B29 B70 &lt;- B27 B68  Freq: 9.99989e-07

  0x00007fffe1264a22: lea     0x58(%rsp),%rbx
  0x00007fffe1264a27: mov     (%r10),%rax
  0x00007fffe1264a2a: test    $0x2,%rax
  0x00007fffe1264a30: jne     0x7fffe1264a56
  0x00007fffe1264a32: or      $0x1,%rax
  0x00007fffe1264a36: mov     %rax,(%rbx)
  0x00007fffe1264a39: lock cmpxchg %rbx,(%r10)
  0x00007fffe1264a3e: je      0x7fffe1264a6f
  0x00007fffe1264a44: sub     %rsp,%rax
  0x00007fffe1264a47: and     $0xfffffffffffff007,%rax
  0x00007fffe1264a4e: mov     %rax,(%rbx)
  0x00007fffe1264a51: jmpq    0x7fffe1264a6f
  0x00007fffe1264a56: movq    $0x3,(%rbx)
  0x00007fffe1264a5d: mov     %rax,%rbx
  0x00007fffe1264a60: mov     0x16(%rbx),%rax
  0x00007fffe1264a64: test    %rax,%rax
  0x00007fffe1264a67: jne     0x7fffe1264a6f
  0x00007fffe1264a69: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1264a6f: je      0x7fffe1264567
  ;; B70: #	B29 &lt;- B74 B69  Freq: 1.99998e-12

  0x00007fffe1264a75: mov     %r10,%rsi
  0x00007fffe1264a78: lea     0x58(%rsp),%rdx
  0x00007fffe1264a7d: mov     %r13,0x8(%rsp)
  0x00007fffe1264a82: mov     %r13,0x10(%rsp)
  0x00007fffe1264a87: mov     %r10,0x20(%rsp)
  0x00007fffe1264a8c: mov     %r10,0x38(%rsp)
  0x00007fffe1264a91: nop
  0x00007fffe1264a92: nop
  0x00007fffe1264a93: callq   0x7fffe11658a0    ; OopMap{[8]=Oop [16]=Oop [32]=Oop [48]=Oop [56]=Oop off=1880}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264a98: mov     0x8(%rsp),%r13
  0x00007fffe1264a9d: mov     0x20(%rsp),%r10
  0x00007fffe1264aa2: jmpq    0x7fffe1264567    ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B71: #	B68 B72 &lt;- B28  Freq: 9.99987e-07

  0x00007fffe1264aa7: test    $0x7,%r9
  0x00007fffe1264aae: jne     0x7fffe1264a1d
  ;; B72: #	B74 B73 &lt;- B71  Freq: 9.99986e-07

  0x00007fffe1264ab4: test    $0x300,%r9
  0x00007fffe1264abb: jne     0x7fffe1264aca
  ;; B73: #	B74 &lt;- B72  Freq: 9.99985e-07

  0x00007fffe1264abd: and     $0x37f,%rax
  0x00007fffe1264ac4: mov     %rax,%r8
  0x00007fffe1264ac7: or      %r15,%r8
  ;; B74: #	B70 B75 &lt;- B73 B72  Freq: 9.99986e-07

  0x00007fffe1264aca: lock cmpxchg %r8,(%r10)
  0x00007fffe1264acf: jne     0x7fffe1264a75
  ;; B75: #	B29 &lt;- B74  Freq: 9.99985e-07

  0x00007fffe1264ad1: jmpq    0x7fffe1264567
  ;; B76: #	N1313 &lt;- B37  Freq: 9.99972e-07

  0x00007fffe1264ad6: mov     $0xffffffde,%esi
  0x00007fffe1264adb: mov     %r13,0x8(%rsp)
  0x00007fffe1264ae0: mov     %r13,0x10(%rsp)
  0x00007fffe1264ae5: mov     %r11d,0x18(%rsp)
  0x00007fffe1264aea: mov     %r10,0x20(%rsp)
  0x00007fffe1264aef: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=NarrowOop [32]=Oop [48]=Oop off=1972}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264af4: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B77: #	B39 B78 &lt;- B38  Freq: 9.99971e-07

  0x00007fffe1264af9: lea     0x58(%rsp),%rax
  0x00007fffe1264afe: cmpq    $0x0,(%rax)
  0x00007fffe1264b05: je      0x7fffe1264b7f
  0x00007fffe1264b0b: mov     (%r10),%r11
  0x00007fffe1264b0e: test    $0x2,%r11
  0x00007fffe1264b15: je      0x7fffe1264b77
  0x00007fffe1264b17: mov     0x16(%r11),%rax
  0x00007fffe1264b1b: xor     %r15,%rax
  0x00007fffe1264b1e: or      0x26(%r11),%rax
  0x00007fffe1264b22: jne     0x7fffe1264b7f
  0x00007fffe1264b24: mov     0x36(%r11),%rax
  0x00007fffe1264b28: or      0x3e(%r11),%rax
  0x00007fffe1264b2c: jne     0x7fffe1264b38
  0x00007fffe1264b2e: movq    $0x0,0x16(%r11)
  0x00007fffe1264b36: jmp     0x7fffe1264b7f
  0x00007fffe1264b38: cmpq    $0x0,0x46(%r11)
  0x00007fffe1264b40: je      0x7fffe1264b6b
  0x00007fffe1264b42: movq    $0x0,0x16(%r11)
  0x00007fffe1264b4a: lock addl $0x0,(%rsp)
  0x00007fffe1264b4f: cmpq    $0x0,0x46(%r11)
  0x00007fffe1264b57: jne     0x7fffe1264b70
  0x00007fffe1264b59: movabs  $0x0,%rax
  0x00007fffe1264b63: lock cmpxchg %r15,0x16(%r11)
  0x00007fffe1264b69: jne     0x7fffe1264b70
  0x00007fffe1264b6b: or      $0x1,%eax
  0x00007fffe1264b6e: jmp     0x7fffe1264b7f
  0x00007fffe1264b70: test    $0x0,%eax
  0x00007fffe1264b75: jmp     0x7fffe1264b7f
  0x00007fffe1264b77: mov     (%rax),%r11
  0x00007fffe1264b7a: lock cmpxchg %r11,(%r10)
  0x00007fffe1264b7f: je      0x7fffe126468a
  ;; B78: #	B39 &lt;- B77  Freq: 9.99971e-13

  0x00007fffe1264b85: mov     %r10,%rdi
  0x00007fffe1264b88: lea     0x58(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264b8d: movabs  $0x7ffff744655c,%r10
  0x00007fffe1264b97: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264b9a: jmpq    0x7fffe126468a
  ;; B79: #	B40 B80 &lt;- B39  Freq: 9.99971e-07

  0x00007fffe1264b9f: lea     0x50(%rsp),%rax
  0x00007fffe1264ba4: cmpq    $0x0,(%rax)
  0x00007fffe1264bab: je      0x7fffe1264c27
  0x00007fffe1264bb1: mov     0x0(%r13),%r10
  0x00007fffe1264bb5: test    $0x2,%r10
  0x00007fffe1264bbc: je      0x7fffe1264c1e
  0x00007fffe1264bbe: mov     0x16(%r10),%rax
  0x00007fffe1264bc2: xor     %r15,%rax
  0x00007fffe1264bc5: or      0x26(%r10),%rax
  0x00007fffe1264bc9: jne     0x7fffe1264c27
  0x00007fffe1264bcb: mov     0x36(%r10),%rax
  0x00007fffe1264bcf: or      0x3e(%r10),%rax
  0x00007fffe1264bd3: jne     0x7fffe1264bdf
  0x00007fffe1264bd5: movq    $0x0,0x16(%r10)
  0x00007fffe1264bdd: jmp     0x7fffe1264c27
  0x00007fffe1264bdf: cmpq    $0x0,0x46(%r10)
  0x00007fffe1264be7: je      0x7fffe1264c12
  0x00007fffe1264be9: movq    $0x0,0x16(%r10)
  0x00007fffe1264bf1: lock addl $0x0,(%rsp)
  0x00007fffe1264bf6: cmpq    $0x0,0x46(%r10)
  0x00007fffe1264bfe: jne     0x7fffe1264c17
  0x00007fffe1264c00: movabs  $0x0,%rax
  0x00007fffe1264c0a: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1264c10: jne     0x7fffe1264c17
  0x00007fffe1264c12: or      $0x1,%eax
  0x00007fffe1264c15: jmp     0x7fffe1264c27
  0x00007fffe1264c17: test    $0x0,%eax
  0x00007fffe1264c1c: jmp     0x7fffe1264c27
  0x00007fffe1264c1e: mov     (%rax),%r10
  0x00007fffe1264c21: lock cmpxchg %r10,0x0(%r13)
  0x00007fffe1264c27: je      0x7fffe126469e
  ;; B80: #	B40 &lt;- B79  Freq: 9.99971e-13

  0x00007fffe1264c2d: mov     %r13,%rdi
  0x00007fffe1264c30: lea     0x50(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264c35: movabs  $0x7ffff744655c,%r10
  0x00007fffe1264c3f: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264c42: jmpq    0x7fffe126469e
  ;; B81: #	B82 &lt;- B35  Freq: 6.75468e-07

  0x00007fffe1264c47: mov     (%rsp),%r13
  ;; B82: #	N1313 &lt;- B81 B31  Freq: 1.01325e-06

  0x00007fffe1264c4b: mov     $0xfffffff6,%esi
  0x00007fffe1264c50: mov     %r13,0x8(%rsp)
  0x00007fffe1264c55: mov     %r13,0x10(%rsp)
  0x00007fffe1264c5a: mov     %r10,0x18(%rsp)
  0x00007fffe1264c5f: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=Oop [48]=Oop off=2340}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264c64: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B83: #	N1313 &lt;- B33  Freq: 6.6663e-07

  0x00007fffe1264c69: mov     $0xffffffde,%esi
  0x00007fffe1264c6e: pushq   0x30(%rsp)
  0x00007fffe1264c73: popq    (%rsp)
  0x00007fffe1264c77: mov     %r13,0x10(%rsp)
  0x00007fffe1264c7c: mov     %r13,0x18(%rsp)
  0x00007fffe1264c81: mov     %r10,0x28(%rsp)
  0x00007fffe1264c86: mov     %r10,0x30(%rsp)
  0x00007fffe1264c8b: mov     %r11d,0x38(%rsp)
  0x00007fffe1264c90: mov     %ebx,0x3c(%rsp)
  0x00007fffe1264c94: nop
  0x00007fffe1264c95: nop
  0x00007fffe1264c96: nop
  0x00007fffe1264c97: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [24]=Oop [40]=Oop [48]=Oop [56]=NarrowOop off=2396}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264c9c: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ;   {runtime_call}
  ;; B84: #	N1313 &lt;- B2  Freq: 4.99999e-07

  0x00007fffe1264ca1: mov     $0xffffff65,%esi
  0x00007fffe1264ca6: mov     0x30(%rsp),%rbp
  0x00007fffe1264cab: mov     %r13d,0x4(%rsp)
  0x00007fffe1264cb0: nop
  0x00007fffe1264cb1: nop
  0x00007fffe1264cb2: nop
  0x00007fffe1264cb3: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2424}
                                                ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ;   {runtime_call}
  0x00007fffe1264cb8: callq   0x7ffff736b4ea    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@57 (line 216)
                                                ;   {runtime_call}
  ;; B85: #	N1313 &lt;- B3  Freq: 4.99999e-07

  0x00007fffe1264cbd: mov     $0xffffff65,%esi
  0x00007fffe1264cc2: mov     0x30(%rsp),%rbp
  0x00007fffe1264cc7: mov     %r13d,0x4(%rsp)
  0x00007fffe1264ccc: nop
  0x00007fffe1264ccd: nop
  0x00007fffe1264cce: nop
  0x00007fffe1264ccf: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2452}
                                                ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@57 (line 216)
                                                ;   {runtime_call}
  0x00007fffe1264cd4: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ;   {runtime_call}
  ;; B86: #	N1313 &lt;- B6  Freq: 4.76836e-07

  0x00007fffe1264cd9: mov     $0xffffff65,%esi
  0x00007fffe1264cde: mov     %r13d,0x8(%rsp)
  0x00007fffe1264ce3: mov     %r10d,0xc(%rsp)
  0x00007fffe1264ce8: mov     %ecx,0x10(%rsp)
  0x00007fffe1264cec: nop
  0x00007fffe1264ced: nop
  0x00007fffe1264cee: nop
  0x00007fffe1264cef: callq   0x7fffe1107820    ; OopMap{[12]=NarrowOop [16]=NarrowOop [48]=Oop off=2484}
                                                ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264cf4: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ;   {runtime_call}
  ;; B87: #	N1313 &lt;- B16  Freq: 4.76833e-07

  0x00007fffe1264cf9: mov     $0xffffff65,%esi
  0x00007fffe1264cfe: mov     0x30(%rsp),%rbp
  0x00007fffe1264d03: mov     %r13d,0x4(%rsp)
  0x00007fffe1264d08: mov     %r10,0x10(%rsp)
  0x00007fffe1264d0d: mov     %r10,0x18(%rsp)
  0x00007fffe1264d12: mov     %r9d,0x28(%rsp)
  0x00007fffe1264d17: mov     %r11d,0x2c(%rsp)
  0x00007fffe1264d1c: mov     %ebx,0x30(%rsp)
  0x00007fffe1264d20: mov     %r14,0x38(%rsp)
  0x00007fffe1264d25: nop
  0x00007fffe1264d26: nop
  0x00007fffe1264d27: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=Oop [24]=Oop [40]=NarrowOop [56]=Oop off=2540}
                                                ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264d2c: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B88: #	N1313 &lt;- B17  Freq: 4.76833e-07

  0x00007fffe1264d31: mov     $0xffffff65,%esi
  0x00007fffe1264d36: pushq   0x30(%rsp)
  0x00007fffe1264d3b: popq    (%rsp)
  0x00007fffe1264d3f: mov     %r13d,0xc(%rsp)
  0x00007fffe1264d44: mov     %r10,0x18(%rsp)
  0x00007fffe1264d49: mov     %r10,0x20(%rsp)
  0x00007fffe1264d4e: mov     %r9d,0x30(%rsp)
  0x00007fffe1264d53: mov     %r11d,0x34(%rsp)
  0x00007fffe1264d58: mov     %r14,0x38(%rsp)
  0x00007fffe1264d5d: nop
  0x00007fffe1264d5e: nop
  0x00007fffe1264d5f: callq   0x7fffe1107820    ; OopMap{[0]=Oop [24]=Oop [32]=Oop [48]=NarrowOop [56]=Oop off=2596}
                                                ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264d64: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B89: #	N1313 &lt;- B24  Freq: 4.76833e-07

  0x00007fffe1264d69: mov     $0xffffff65,%esi
  0x00007fffe1264d6e: mov     %r13,0x10(%rsp)
  0x00007fffe1264d73: mov     %r13,0x18(%rsp)
  0x00007fffe1264d78: nop
  0x00007fffe1264d79: nop
  0x00007fffe1264d7a: nop
  0x00007fffe1264d7b: callq   0x7fffe1107820    ; OopMap{[16]=Oop [24]=Oop [48]=Oop off=2624}
                                                ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264d80: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B90: #	N1313 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe1264d85: mov     $0xfffffff6,%esi
  0x00007fffe1264d8a: nop
  0x00007fffe1264d8b: callq   0x7fffe1107820    ; OopMap{off=2640}
                                                ;*invokevirtual flip
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ;   {runtime_call}
  0x00007fffe1264d90: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B91: #	N1313 &lt;- B7  Freq: 1.01327e-06

  0x00007fffe1264d95: mov     $0xfffffff6,%esi
  0x00007fffe1264d9a: mov     %r13d,%ebp
  0x00007fffe1264d9d: mov     %r9d,(%rsp)
  0x00007fffe1264da1: mov     %r11d,0x4(%rsp)
  0x00007fffe1264da6: nop
  0x00007fffe1264da7: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop off=2668}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264dac: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B92: #	N1313 &lt;- B15  Freq: 1.01327e-06

  0x00007fffe1264db1: mov     $0xfffffff6,%esi
  0x00007fffe1264db6: mov     %r10,0x8(%rsp)
  0x00007fffe1264dbb: mov     %r10,0x10(%rsp)
  0x00007fffe1264dc0: mov     %r14,0x18(%rsp)
  0x00007fffe1264dc5: nop
  0x00007fffe1264dc6: nop
  0x00007fffe1264dc7: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [24]=Oop [48]=Oop off=2700}
                                                ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264dcc: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B93: #	N1313 &lt;- B25  Freq: 1.01327e-06

  0x00007fffe1264dd1: mov     $0xfffffff6,%esi
  0x00007fffe1264dd6: mov     %r13,0x8(%rsp)
  0x00007fffe1264ddb: mov     %r13,0x10(%rsp)
  0x00007fffe1264de0: nop
  0x00007fffe1264de1: nop
  0x00007fffe1264de2: nop
  0x00007fffe1264de3: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop [48]=Oop off=2728}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264de8: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B94: #	N1313 &lt;- B40  Freq: 1.01325e-06

  0x00007fffe1264ded: mov     $0xfffffff6,%esi
  0x00007fffe1264df2: nop
  0x00007fffe1264df3: callq   0x7fffe1107820    ; OopMap{off=2744}
                                                ;*invokevirtual clear
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ;   {runtime_call}
  0x00007fffe1264df8: callq   0x7ffff736b4ea    ;*invokevirtual clear
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ;   {runtime_call}
  ;; B95: #	N1313 &lt;- B32  Freq: 6.75483e-07

  0x00007fffe1264dfd: mov     $0xfffffff6,%esi
  0x00007fffe1264e02: mov     %r13,0x10(%rsp)
  0x00007fffe1264e07: mov     %r13,0x18(%rsp)
  0x00007fffe1264e0c: mov     %r10,0x20(%rsp)
  0x00007fffe1264e11: mov     %ebx,0x28(%rsp)
  0x00007fffe1264e15: nop
  0x00007fffe1264e16: nop
  0x00007fffe1264e17: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [16]=Oop [24]=Oop [32]=Oop [48]=Oop off=2780}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264e1c: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.ByteBuffer::array@-1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ;   {runtime_call}
  ;; B96: #	N1313 &lt;- B5  Freq: 4.76836e-07

  0x00007fffe1264e21: mov     $0xffffff65,%esi
  0x00007fffe1264e26: mov     0x30(%rsp),%rbp
  0x00007fffe1264e2b: mov     %r13d,(%rsp)
  0x00007fffe1264e2f: mov     %r10d,0x4(%rsp)
  0x00007fffe1264e34: mov     %ecx,0x8(%rsp)
  0x00007fffe1264e38: mov     %r9d,0xc(%rsp)
  0x00007fffe1264e3d: nop
  0x00007fffe1264e3e: nop
  0x00007fffe1264e3f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [4]=NarrowOop [8]=NarrowOop [12]=NarrowOop off=2820}
                                                ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264e44: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ;   {runtime_call}
  ;; B97: #	N1313 &lt;- B11  Freq: 4.76834e-07

  0x00007fffe1264e49: mov     $0xffffff65,%esi
  0x00007fffe1264e4e: mov     %r13d,0x8(%rsp)
  0x00007fffe1264e53: mov     %r9d,0xc(%rsp)
  0x00007fffe1264e58: mov     %r11d,0x18(%rsp)
  0x00007fffe1264e5d: mov     %r10,0x20(%rsp)
  0x00007fffe1264e62: mov     %r10,0x28(%rsp)
  0x00007fffe1264e67: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [12]=NarrowOop [32]=Oop [40]=Oop [48]=Oop off=2860}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264e6c: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@-1 (line 210)
                                                ;   {runtime_call}
  ;; B98: #	N1313 &lt;- B106  Freq: 6.66633e-11

  0x00007fffe1264e71: mov     %rax,%rsi
  0x00007fffe1264e74: add     $0x70,%rsp
  0x00007fffe1264e78: pop     %rbp
  0x00007fffe1264e79: jmpq    0x7fffe11657a0    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B99: #	N1313 &lt;- B106  Freq: 6.66633e-11

  0x00007fffe1264e7e: mov     $0xffffffbd,%esi
  0x00007fffe1264e83: mov     %rax,0x8(%rsp)
  0x00007fffe1264e88: nop
  0x00007fffe1264e89: nop
  0x00007fffe1264e8a: nop
  0x00007fffe1264e8b: callq   0x7fffe1107820    ; OopMap{[8]=Oop [40]=Oop [48]=Oop off=2896}
                                                ;*astore
                                                ; - java.io.PrintStream::write@61 (line 488)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264e90: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B100: #	N1313 &lt;- B106  Freq: 6.66633e-11

  0x00007fffe1264e95: mov     $0xffffffbd,%esi
  0x00007fffe1264e9a: mov     %rax,(%rsp)
  0x00007fffe1264e9e: nop
  0x00007fffe1264e9f: callq   0x7fffe1107820    ; OopMap{[0]=Oop [48]=Oop off=2916}
                                                ;*astore
                                                ; - java.io.PrintStream::write@50 (line 485)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  0x00007fffe1264ea4: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B101: #	B111 B102 &lt;- B63  Freq: 3.99996e-11

  0x00007fffe1264ea9: mov     %rax,%rbx
  0x00007fffe1264eac: mov     $0x7,%r10d
  0x00007fffe1264eb2: mov     0x10(%rsp),%r11
  0x00007fffe1264eb7: and     (%r11),%r10
  0x00007fffe1264eba: cmp     $0x5,%r10
  0x00007fffe1264ebe: jne     0x7fffe1265068    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B102: #	B105 &lt;- B112 B111 B101  Freq: 3.99996e-11

  0x00007fffe1264ec4: mov     %rbx,%rbp
  0x00007fffe1264ec7: pushq   (%rsp)
  0x00007fffe1264ecb: popq    0x30(%rsp)
  0x00007fffe1264ed0: pushq   0x8(%rsp)
  0x00007fffe1264ed5: popq    0x28(%rsp)
  0x00007fffe1264eda: jmp     0x7fffe1264efa    ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B103: #	B109 B104 &lt;- B34  Freq: 6.66629e-06

  0x00007fffe1264edc: mov     %rax,%rbx
  0x00007fffe1264edf: mov     $0x7,%r10d
  0x00007fffe1264ee5: mov     0x18(%rsp),%r11
  0x00007fffe1264eea: and     (%r11),%r10
  0x00007fffe1264eed: cmp     $0x5,%r10
  0x00007fffe1264ef1: jne     0x7fffe1264fc2    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B104: #	B105 &lt;- B110 B109 B103  Freq: 6.66629e-06

  0x00007fffe1264ef7: mov     %rbx,%rbp
  ;; B105: #	B107 B106 &lt;- B102 B104  Freq: 6.66633e-06

  0x00007fffe1264efa: mov     $0x7,%r10d
  0x00007fffe1264f00: mov     0x28(%rsp),%r13
  0x00007fffe1264f05: and     0x0(%r13),%r10
  0x00007fffe1264f09: cmp     $0x5,%r10
  0x00007fffe1264f0d: jne     0x7fffe1264f18    ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  ;; B106: #	B98 B100 B99 &lt;- B108 B107 B105  Freq: 6.66633e-06

  0x00007fffe1264f0f: mov     %rbx,%rsi
  0x00007fffe1264f12: nop
  0x00007fffe1264f13: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [40]=Oop [48]=Oop off=3032}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ;   {runtime_call}
  ;; B107: #	B106 B108 &lt;- B105  Freq: 6.66633e-12

  0x00007fffe1264f18: lea     0x50(%rsp),%rax
  0x00007fffe1264f1d: cmpq    $0x0,(%rax)
  0x00007fffe1264f24: je      0x7fffe1264fa0
  0x00007fffe1264f2a: mov     0x0(%r13),%r10
  0x00007fffe1264f2e: test    $0x2,%r10
  0x00007fffe1264f35: je      0x7fffe1264f97
  0x00007fffe1264f37: mov     0x16(%r10),%rax
  0x00007fffe1264f3b: xor     %r15,%rax
  0x00007fffe1264f3e: or      0x26(%r10),%rax
  0x00007fffe1264f42: jne     0x7fffe1264fa0
  0x00007fffe1264f44: mov     0x36(%r10),%rax
  0x00007fffe1264f48: or      0x3e(%r10),%rax
  0x00007fffe1264f4c: jne     0x7fffe1264f58
  0x00007fffe1264f4e: movq    $0x0,0x16(%r10)
  0x00007fffe1264f56: jmp     0x7fffe1264fa0
  0x00007fffe1264f58: cmpq    $0x0,0x46(%r10)
  0x00007fffe1264f60: je      0x7fffe1264f8b
  0x00007fffe1264f62: movq    $0x0,0x16(%r10)
  0x00007fffe1264f6a: lock addl $0x0,(%rsp)
  0x00007fffe1264f6f: cmpq    $0x0,0x46(%r10)
  0x00007fffe1264f77: jne     0x7fffe1264f90
  0x00007fffe1264f79: movabs  $0x0,%rax
  0x00007fffe1264f83: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1264f89: jne     0x7fffe1264f90
  0x00007fffe1264f8b: or      $0x1,%eax
  0x00007fffe1264f8e: jmp     0x7fffe1264fa0
  0x00007fffe1264f90: test    $0x0,%eax
  0x00007fffe1264f95: jmp     0x7fffe1264fa0
  0x00007fffe1264f97: mov     (%rax),%r10
  0x00007fffe1264f9a: lock cmpxchg %r10,0x0(%r13)
  0x00007fffe1264fa0: je      0x7fffe1264f0f
  ;; B108: #	B106 &lt;- B107  Freq: 6.66633e-18

  0x00007fffe1264fa6: mov     0x28(%rsp),%rdi
  0x00007fffe1264fab: lea     0x50(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264fb0: movabs  $0x7ffff744655c,%r10
  0x00007fffe1264fba: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1264fbd: jmpq    0x7fffe1264f0f
  ;; B109: #	B104 B110 &lt;- B103  Freq: 6.66629e-12

  0x00007fffe1264fc2: lea     0x58(%rsp),%rax
  0x00007fffe1264fc7: cmpq    $0x0,(%rax)
  0x00007fffe1264fce: je      0x7fffe1265048
  0x00007fffe1264fd4: mov     (%r11),%r10
  0x00007fffe1264fd7: test    $0x2,%r10
  0x00007fffe1264fde: je      0x7fffe1265040
  0x00007fffe1264fe0: mov     0x16(%r10),%rax
  0x00007fffe1264fe4: xor     %r15,%rax
  0x00007fffe1264fe7: or      0x26(%r10),%rax
  0x00007fffe1264feb: jne     0x7fffe1265048
  0x00007fffe1264fed: mov     0x36(%r10),%rax
  0x00007fffe1264ff1: or      0x3e(%r10),%rax
  0x00007fffe1264ff5: jne     0x7fffe1265001
  0x00007fffe1264ff7: movq    $0x0,0x16(%r10)
  0x00007fffe1264fff: jmp     0x7fffe1265048
  0x00007fffe1265001: cmpq    $0x0,0x46(%r10)
  0x00007fffe1265009: je      0x7fffe1265034
  0x00007fffe126500b: movq    $0x0,0x16(%r10)
  0x00007fffe1265013: lock addl $0x0,(%rsp)
  0x00007fffe1265018: cmpq    $0x0,0x46(%r10)
  0x00007fffe1265020: jne     0x7fffe1265039
  0x00007fffe1265022: movabs  $0x0,%rax
  0x00007fffe126502c: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1265032: jne     0x7fffe1265039
  0x00007fffe1265034: or      $0x1,%eax
  0x00007fffe1265037: jmp     0x7fffe1265048
  0x00007fffe1265039: test    $0x0,%eax
  0x00007fffe126503e: jmp     0x7fffe1265048
  0x00007fffe1265040: mov     (%rax),%r10
  0x00007fffe1265043: lock cmpxchg %r10,(%r11)
  0x00007fffe1265048: je      0x7fffe1264ef7
  ;; B110: #	B104 &lt;- B109  Freq: 6.66629e-18

  0x00007fffe126504e: mov     %r11,%rdi
  0x00007fffe1265051: lea     0x58(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1265056: movabs  $0x7ffff744655c,%r10
  0x00007fffe1265060: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1265063: jmpq    0x7fffe1264ef7
  ;; B111: #	B102 B112 &lt;- B101  Freq: 3.99996e-17

  0x00007fffe1265068: lea     0x58(%rsp),%rax
  0x00007fffe126506d: cmpq    $0x0,(%rax)
  0x00007fffe1265074: je      0x7fffe12650ee
  0x00007fffe126507a: mov     (%r11),%r10
  0x00007fffe126507d: test    $0x2,%r10
  0x00007fffe1265084: je      0x7fffe12650e6
  0x00007fffe1265086: mov     0x16(%r10),%rax
  0x00007fffe126508a: xor     %r15,%rax
  0x00007fffe126508d: or      0x26(%r10),%rax
  0x00007fffe1265091: jne     0x7fffe12650ee
  0x00007fffe1265093: mov     0x36(%r10),%rax
  0x00007fffe1265097: or      0x3e(%r10),%rax
  0x00007fffe126509b: jne     0x7fffe12650a7
  0x00007fffe126509d: movq    $0x0,0x16(%r10)
  0x00007fffe12650a5: jmp     0x7fffe12650ee
  0x00007fffe12650a7: cmpq    $0x0,0x46(%r10)
  0x00007fffe12650af: je      0x7fffe12650da
  0x00007fffe12650b1: movq    $0x0,0x16(%r10)
  0x00007fffe12650b9: lock addl $0x0,(%rsp)
  0x00007fffe12650be: cmpq    $0x0,0x46(%r10)
  0x00007fffe12650c6: jne     0x7fffe12650df
  0x00007fffe12650c8: movabs  $0x0,%rax
  0x00007fffe12650d2: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12650d8: jne     0x7fffe12650df
  0x00007fffe12650da: or      $0x1,%eax
  0x00007fffe12650dd: jmp     0x7fffe12650ee
  0x00007fffe12650df: test    $0x0,%eax
  0x00007fffe12650e4: jmp     0x7fffe12650ee
  0x00007fffe12650e6: mov     (%rax),%r10
  0x00007fffe12650e9: lock cmpxchg %r10,(%r11)
  0x00007fffe12650ee: je      0x7fffe1264ec4
  ;; B112: #	B102 &lt;- B111  Freq: 3.99996e-23

  0x00007fffe12650f4: mov     %r11,%rdi
  0x00007fffe12650f7: lea     0x58(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe12650fc: movabs  $0x7ffff744655c,%r10
  0x00007fffe1265106: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)

  0x00007fffe1265109: jmpq    0x7fffe1264ec4
  0x00007fffe126510e: hlt
  0x00007fffe126510f: hlt
  0x00007fffe1265110: hlt
  0x00007fffe1265111: hlt
  0x00007fffe1265112: hlt
  0x00007fffe1265113: hlt
  0x00007fffe1265114: hlt
  0x00007fffe1265115: hlt
  0x00007fffe1265116: hlt
  0x00007fffe1265117: hlt
  0x00007fffe1265118: hlt
  0x00007fffe1265119: hlt
  0x00007fffe126511a: hlt
  0x00007fffe126511b: hlt
  0x00007fffe126511c: hlt
  0x00007fffe126511d: hlt
  0x00007fffe126511e: hlt
  0x00007fffe126511f: hlt
[Stub Code]
  0x00007fffe1265120: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe126512a: jmpq    0x7fffe126512a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe126512f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe1265134: callq   0x7fffe1265139
  0x00007fffe1265139: subq    $0x5,(%rsp)
  0x00007fffe126513e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1265143: hlt
  0x00007fffe1265144: hlt
  0x00007fffe1265145: hlt
  0x00007fffe1265146: hlt
  0x00007fffe1265147: hlt
<nmethod compile_id='100' compiler='C2' level='4' entry='0x00007fffe1264340' size='7744' address='0x00007fffe1264150' relocation_offset='304' insts_offset='496' stub_offset='4048' scopes_data_offset='4200' scopes_pcs_offset='5600' dependencies_offset='7568' handler_table_offset='7576' nul_chk_table_offset='7672' method='sun/nio/cs/StreamEncoder writeBytes ()V' bytes='132' count='56830' iicount='56830' stamp='119.527'/>
<make_not_entrant thread='140736956679936' compile_id='53' compiler='C1' level='2' stamp='119.527'/>
<writer thread='140737327351552'/>
<task_queued compile_id='103' method='java/io/PrintStream println (I)V' bytes='24' count='31856' iicount='31856' stamp='119.527' comment='tiered' hot_count='31856'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1254650:
Code:
Argument 0 is unknown.RIP: 0x7fffe1254880 Code size: 0x000007b0
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4b68858} &apos;toString&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/Integer&apos;
  # parm0:    rsi       = int
  #           [sp+0x70]  (sp of caller)
  ;;  block B19 [0, 0]

  0x00007fffe1254880: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1254887: push    %rbp
  0x00007fffe1254888: sub     $0x60,%rsp
  0x00007fffe125488c: mov     %rsi,%r8
  0x00007fffe125488f: movabs  $0x7ffff4d70f58,%rbx
  0x00007fffe1254899: mov     0x8(%rbx),%edx
  0x00007fffe125489c: add     $0x8,%edx
  0x00007fffe125489f: mov     %edx,0x8(%rbx)
  0x00007fffe12548a2: movabs  $0x7ffff4b68858,%rbx  ;   {metadata({method} {0x00007ffff4b68858} &apos;toString&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe12548ac: and     $0x3ff8,%edx
  0x00007fffe12548b2: cmp     $0x0,%edx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb4026ad0]
  0x00007fffe12548b5: je      0x7fffe1254bdb    ;*iload_0
                                                ; - java.lang.Integer::toString@0 (line 398)

  ;;  block B20 [0, 0]

  ;;  block B0 [0, 3]

  0x00007fffe12548bb: cmp     $0x80000000,%r8d
  ;;   34 branch [EQ] [B1] 
  0x00007fffe12548c2: je      0x7fffe1254bc5    ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)

  ;;  block B2 [9, 10]

  0x00007fffe12548c8: cmp     $0x0,%r8d
  ;;   42 branch [GE] [B4] 
  0x00007fffe12548cc: jnl     0x7fffe125493f    ;*ifge
                                                ; - java.lang.Integer::toString@10 (line 400)

  ;;  block B3 [13, 2]

  0x00007fffe12548d2: mov     %r8,%rbx
  0x00007fffe12548d5: neg     %ebx
  0x00007fffe12548d7: mov     $0x0,%edx
  ;;   54 branch [AL] [B8] 
  0x00007fffe12548dc: jmpq    0x7fffe125491c    ;*iload_0
                                                ; - java.lang.Integer::stringSize@2 (line 473)
                                                ; - java.lang.Integer::toString@15 (line 400)

  0x00007fffe12548e1: nop
  0x00007fffe12548e2: nop
  0x00007fffe12548e3: nop
  0x00007fffe12548e4: nop
  0x00007fffe12548e5: nop
  0x00007fffe12548e6: nop
  0x00007fffe12548e7: nop
  ;;  block B10 [15, 18]

  0x00007fffe12548e8: incl    %edx
  0x00007fffe12548ea: movabs  $0x7ffff4d70f78,%rsi
  0x00007fffe12548f4: mov     0xc(%rsi),%edi
  0x00007fffe12548f7: add     $0x8,%edi
  0x00007fffe12548fa: mov     %edi,0xc(%rsi)
  0x00007fffe12548fd: movabs  $0x7ffff4b68b88,%rsi  ;   {metadata({method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe1254907: and     $0x1fff8,%edi
  0x00007fffe125490d: cmp     $0x0,%edi
  ;;   94 branch [EQ] [CounterOverflowStub: 0x00007fffb4029b30]
  0x00007fffe1254910: je      0x7fffe1254bf2    ; OopMap{off=150}
                                                ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ; - java.lang.Integer::toString@15 (line 400)

  0x00007fffe1254916: test    %eax,0x16da67e4(%rip)  ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ; - java.lang.Integer::toString@15 (line 400)
                                                ;   {poll}
  ;;  block B8 [2, 8]

  0x00007fffe125491c: movabs  $0xd73af3c0,%rsi  ;   {oop([I)}
  0x00007fffe1254926: movsxd  %edx,%rdi
  0x00007fffe1254929: cmp     0xc(%rsi),%edx    ; implicit exception: dispatches to 0x00007fffe1254c09
  ;;   64 branch [AE] [RangeCheckStub: 0x00007fffb4029030] [bci:7]
  0x00007fffe125492c: jnb     0x7fffe1254d01
  0x00007fffe1254932: mov     0x10(%rsi,%rdi,4),%esi  ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@15 (line 400)

  0x00007fffe1254936: cmp     %esi,%ebx
  ;;   70 branch [GT] [B10] 
  0x00007fffe1254938: jnle    0x7fffe12548e8
  ;;   72 branch [AL] [B9] 
  0x00007fffe125493a: jmpq    0x7fffe12549ad    ;*if_icmpgt
                                                ; - java.lang.Integer::stringSize@8 (line 473)
                                                ; - java.lang.Integer::toString@15 (line 400)

  ;;  block B4 [23, 2]

  0x00007fffe125493f: mov     $0x0,%ebx
  ;;  108 branch [AL] [B12] 
  0x00007fffe1254944: jmpq    0x7fffe1254984    ;*iload_0
                                                ; - java.lang.Integer::stringSize@2 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)

  0x00007fffe1254949: nop
  0x00007fffe125494a: nop
  0x00007fffe125494b: nop
  0x00007fffe125494c: nop
  0x00007fffe125494d: nop
  0x00007fffe125494e: nop
  0x00007fffe125494f: nop
  ;;  block B14 [15, 18]

  0x00007fffe1254950: incl    %ebx
  0x00007fffe1254952: movabs  $0x7ffff4d70f78,%rdx
  0x00007fffe125495c: mov     0xc(%rdx),%esi
  0x00007fffe125495f: add     $0x8,%esi
  0x00007fffe1254962: mov     %esi,0xc(%rdx)
  0x00007fffe1254965: movabs  $0x7ffff4b68b88,%rdx  ;   {metadata({method} {0x00007ffff4b68b88} &apos;stringSize&apos; &apos;(I)I&apos; in &apos;java/lang/Integer&apos;)}
  0x00007fffe125496f: and     $0x1fff8,%esi
  0x00007fffe1254975: cmp     $0x0,%esi
  ;;  148 branch [EQ] [CounterOverflowStub: 0x00007fffb402ae70]
  0x00007fffe1254978: je      0x7fffe1254d81    ; OopMap{off=254}
                                                ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ; - java.lang.Integer::toString@24 (line 400)

  0x00007fffe125497e: test    %eax,0x16da677c(%rip)  ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {poll}
  ;;  block B12 [2, 8]

  0x00007fffe1254984: movabs  $0xd73af3c0,%rdx  ;   {oop([I)}
  0x00007fffe125498e: movsxd  %ebx,%rsi
  0x00007fffe1254991: cmp     0xc(%rdx),%ebx    ; implicit exception: dispatches to 0x00007fffe1254d98
  ;;  118 branch [AE] [RangeCheckStub: 0x00007fffb402a370] [bci:7]
  0x00007fffe1254994: jnb     0x7fffe1254e90
  0x00007fffe125499a: mov     0x10(%rdx,%rsi,4),%edx  ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)

  0x00007fffe125499e: cmp     %edx,%r8d
  ;;  124 branch [GT] [B14] 
  0x00007fffe12549a1: jnle    0x7fffe1254950    ;*if_icmpgt
                                                ; - java.lang.Integer::stringSize@8 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)

  ;;  block B13 [11, 27]

  0x00007fffe12549a3: incl    %ebx
  0x00007fffe12549a5: mov     %rbx,%r9
  ;;  166 branch [AL] [B5] 
  0x00007fffe12549a8: jmpq    0x7fffe12549b4    ;*istore_1
                                                ; - java.lang.Integer::toString@27 (line 400)

  ;;  block B9 [11, 20]

  0x00007fffe12549ad: incl    %edx
  0x00007fffe12549af: incl    %edx
  0x00007fffe12549b1: mov     %rdx,%r9          ;*goto
                                                ; - java.lang.Integer::toString@20 (line 400)

  ;;  block B5 [27, 47]

  0x00007fffe12549b4: mov     %r9,%rbx
  0x00007fffe12549b7: movabs  $0x100000220,%rdx  ;   {metadata({type array char})}
  0x00007fffe12549c1: movsxd  %ebx,%rbx
  0x00007fffe12549c4: mov     %rbx,%rdi
  0x00007fffe12549c7: cmp     $0xffffff,%rbx
  0x00007fffe12549ce: jnbe    0x7fffe1254f10
  0x00007fffe12549d4: movabs  $0x17,%rsi
  0x00007fffe12549de: lea     (%rsi,%rbx,2),%rsi
  0x00007fffe12549e2: and     $0xfffffffffffffff8,%rsi
  0x00007fffe12549e6: mov     0x70(%r15),%rax
  0x00007fffe12549ea: lea     (%rax,%rsi),%rsi
  0x00007fffe12549ee: cmp     0x80(%r15),%rsi
  0x00007fffe12549f5: jnbe    0x7fffe1254f10
  0x00007fffe12549fb: mov     %rsi,0x70(%r15)
  0x00007fffe12549ff: sub     %rax,%rsi
  0x00007fffe1254a02: movq    $0x1,(%rax)
  0x00007fffe1254a09: mov     %rdx,%rcx
  0x00007fffe1254a0c: shr     $0x3,%rcx
  0x00007fffe1254a10: mov     %ecx,0x8(%rax)
  0x00007fffe1254a13: mov     %ebx,0xc(%rax)
  0x00007fffe1254a16: sub     $0x10,%rsi
  0x00007fffe1254a1a: je      0x7fffe1254ab5
  0x00007fffe1254a20: test    $0x7,%rsi
  0x00007fffe1254a27: je      0x7fffe1254aa4
  0x00007fffe1254a2d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254a32: sub     $0x80,%rsp
  0x00007fffe1254a39: mov     %rax,0x78(%rsp)
  0x00007fffe1254a3e: mov     %rcx,0x70(%rsp)
  0x00007fffe1254a43: mov     %rdx,0x68(%rsp)
  0x00007fffe1254a48: mov     %rbx,0x60(%rsp)
  0x00007fffe1254a4d: mov     %rbp,0x50(%rsp)
  0x00007fffe1254a52: mov     %rsi,0x48(%rsp)
  0x00007fffe1254a57: mov     %rdi,0x40(%rsp)
  0x00007fffe1254a5c: mov     %r8,0x38(%rsp)
  0x00007fffe1254a61: mov     %r9,0x30(%rsp)
  0x00007fffe1254a66: mov     %r10,0x28(%rsp)
  0x00007fffe1254a6b: mov     %r11,0x20(%rsp)
  0x00007fffe1254a70: mov     %r12,0x18(%rsp)
  0x00007fffe1254a75: mov     %r13,0x10(%rsp)
  0x00007fffe1254a7a: mov     %r14,0x8(%rsp)
  0x00007fffe1254a7f: mov     %r15,(%rsp)
  0x00007fffe1254a83: movabs  $0x7ffff762a5d0,%rdi  ;   {external_word}
  0x00007fffe1254a8d: movabs  $0x7fffe1254a2d,%rsi  ;   {internal_word}
  0x00007fffe1254a97: mov     %rsp,%rdx
  0x00007fffe1254a9a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254a9e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254aa3: hlt
  0x00007fffe1254aa4: xor     %rbx,%rbx
  0x00007fffe1254aa7: shr     $0x3,%rsi
  0x00007fffe1254aab: mov     %rbx,0x8(%rax,%rsi,8)
  0x00007fffe1254ab0: decq    %rsi
  0x00007fffe1254ab3: jne     0x7fffe1254aab    ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)

  0x00007fffe1254ab5: mov     %r8,%rsi
  0x00007fffe1254ab8: mov     %r9,%rdx
  0x00007fffe1254abb: mov     %rax,%rcx         ;*invokestatic getChars
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe1254abe: mov     %rax,0x48(%rsp)
  0x00007fffe1254ac3: nop
  0x00007fffe1254ac4: nop
  0x00007fffe1254ac5: nop
  0x00007fffe1254ac6: nop
  0x00007fffe1254ac7: callq   0x7fffe1106300    ; OopMap{[72]=Oop off=588}
                                                ;*invokestatic getChars
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {static_call}
  0x00007fffe1254acc: movabs  $0x100001798,%rdx  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe1254ad6: mov     0x70(%r15),%rax
  0x00007fffe1254ada: lea     0x18(%rax),%rdi
  0x00007fffe1254ade: cmp     0x80(%r15),%rdi
  0x00007fffe1254ae5: jnbe    0x7fffe1254f1a
  0x00007fffe1254aeb: mov     %rdi,0x70(%r15)
  0x00007fffe1254aef: mov     0xb0(%rdx),%rcx
  0x00007fffe1254af6: mov     %rcx,(%rax)
  0x00007fffe1254af9: mov     %rdx,%rcx
  0x00007fffe1254afc: shr     $0x3,%rcx
  0x00007fffe1254b00: mov     %ecx,0x8(%rax)
  0x00007fffe1254b03: xor     %rcx,%rcx
  0x00007fffe1254b06: mov     %ecx,0xc(%rax)
  0x00007fffe1254b09: xor     %rcx,%rcx
  0x00007fffe1254b0c: mov     %rcx,0x10(%rax)   ;*new  ; - java.lang.Integer::toString@38 (line 403)

  0x00007fffe1254b10: mov     0x48(%rsp),%rsi
  0x00007fffe1254b15: mov     %rsi,%r10
  0x00007fffe1254b18: push    %r10
  0x00007fffe1254b1a: cmp     0x16b050bf(%rip),%r12  ;   {external_word}
  0x00007fffe1254b21: je      0x7fffe1254b9e
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe1254b27: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254b2c: sub     $0x80,%rsp
  0x00007fffe1254b33: mov     %rax,0x78(%rsp)
  0x00007fffe1254b38: mov     %rcx,0x70(%rsp)
  0x00007fffe1254b3d: mov     %rdx,0x68(%rsp)
  0x00007fffe1254b42: mov     %rbx,0x60(%rsp)
  0x00007fffe1254b47: mov     %rbp,0x50(%rsp)
  0x00007fffe1254b4c: mov     %rsi,0x48(%rsp)
  0x00007fffe1254b51: mov     %rdi,0x40(%rsp)
  0x00007fffe1254b56: mov     %r8,0x38(%rsp)
  0x00007fffe1254b5b: mov     %r9,0x30(%rsp)
  0x00007fffe1254b60: mov     %r10,0x28(%rsp)
  0x00007fffe1254b65: mov     %r11,0x20(%rsp)
  0x00007fffe1254b6a: mov     %r12,0x18(%rsp)
  0x00007fffe1254b6f: mov     %r13,0x10(%rsp)
  0x00007fffe1254b74: mov     %r14,0x8(%rsp)
  0x00007fffe1254b79: mov     %r15,(%rsp)
  0x00007fffe1254b7d: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe1254b87: movabs  $0x7fffe1254b27,%rsi  ;   {internal_word}
  0x00007fffe1254b91: mov     %rsp,%rdx
  0x00007fffe1254b94: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254b98: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254b9d: hlt
  0x00007fffe1254b9e: pop     %r10
  0x00007fffe1254ba0: mov     %r10d,0xc(%rax)
  0x00007fffe1254ba4: mov     %rax,%rsi
  0x00007fffe1254ba7: shr     $0x9,%rsi
  0x00007fffe1254bab: movabs  $0x7ffff591e000,%rdi
  0x00007fffe1254bb5: movb    $0x0,(%rsi,%rdi)  ;*putfield value
                                                ; - java.lang.String::&lt;init&gt;@6 (line 610)
                                                ; - java.lang.Integer::toString@44 (line 403)

  0x00007fffe1254bb9: add     $0x60,%rsp
  0x00007fffe1254bbd: pop     %rbp
  0x00007fffe1254bbe: test    %eax,0x16da653c(%rip)  ;   {poll_return}
  0x00007fffe1254bc4: retq                      ;*areturn
                                                ; - java.lang.Integer::toString@47 (line 403)

  ;;  block B1 [6, 8]

  0x00007fffe1254bc5: movabs  $0xd73840d0,%rax  ;   {oop(&quot;-2147483648&quot;)}
  0x00007fffe1254bcf: add     $0x60,%rsp
  0x00007fffe1254bd3: pop     %rbp
  0x00007fffe1254bd4: test    %eax,0x16da6526(%rip)  ;   {poll_return}
  0x00007fffe1254bda: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1254bdb: mov     %rbx,0x8(%rsp)
  0x00007fffe1254be0: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1254be8: callq   0x7fffe11fe5a0    ; OopMap{off=877}
                                                ;*synchronization entry
                                                ; - java.lang.Integer::toString@-1 (line 398)
                                                ;   {runtime_call}
  0x00007fffe1254bed: jmpq    0x7fffe12548bb
  ;; CounterOverflowStub slow case
  0x00007fffe1254bf2: mov     %rsi,0x8(%rsp)
  0x00007fffe1254bf7: movq    $0x12,(%rsp)
  0x00007fffe1254bff: callq   0x7fffe11fe5a0    ; OopMap{off=900}
                                                ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ; - java.lang.Integer::toString@15 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254c04: jmpq    0x7fffe1254916
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1254c09: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=910}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@15 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254c0e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254c13: sub     $0x80,%rsp
  0x00007fffe1254c1a: mov     %rax,0x78(%rsp)
  0x00007fffe1254c1f: mov     %rcx,0x70(%rsp)
  0x00007fffe1254c24: mov     %rdx,0x68(%rsp)
  0x00007fffe1254c29: mov     %rbx,0x60(%rsp)
  0x00007fffe1254c2e: mov     %rbp,0x50(%rsp)
  0x00007fffe1254c33: mov     %rsi,0x48(%rsp)
  0x00007fffe1254c38: mov     %rdi,0x40(%rsp)
  0x00007fffe1254c3d: mov     %r8,0x38(%rsp)
  0x00007fffe1254c42: mov     %r9,0x30(%rsp)
  0x00007fffe1254c47: mov     %r10,0x28(%rsp)
  0x00007fffe1254c4c: mov     %r11,0x20(%rsp)
  0x00007fffe1254c51: mov     %r12,0x18(%rsp)
  0x00007fffe1254c56: mov     %r13,0x10(%rsp)
  0x00007fffe1254c5b: mov     %r14,0x8(%rsp)
  0x00007fffe1254c60: mov     %r15,(%rsp)
  0x00007fffe1254c64: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1254c6e: movabs  $0x7fffe1254c0e,%rsi  ;   {internal_word}
  0x00007fffe1254c78: mov     %rsp,%rdx
  0x00007fffe1254c7b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254c7f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254c84: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1254c85: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=1034}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@15 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254c8a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254c8f: sub     $0x80,%rsp
  0x00007fffe1254c96: mov     %rax,0x78(%rsp)
  0x00007fffe1254c9b: mov     %rcx,0x70(%rsp)
  0x00007fffe1254ca0: mov     %rdx,0x68(%rsp)
  0x00007fffe1254ca5: mov     %rbx,0x60(%rsp)
  0x00007fffe1254caa: mov     %rbp,0x50(%rsp)
  0x00007fffe1254caf: mov     %rsi,0x48(%rsp)
  0x00007fffe1254cb4: mov     %rdi,0x40(%rsp)
  0x00007fffe1254cb9: mov     %r8,0x38(%rsp)
  0x00007fffe1254cbe: mov     %r9,0x30(%rsp)
  0x00007fffe1254cc3: mov     %r10,0x28(%rsp)
  0x00007fffe1254cc8: mov     %r11,0x20(%rsp)
  0x00007fffe1254ccd: mov     %r12,0x18(%rsp)
  0x00007fffe1254cd2: mov     %r13,0x10(%rsp)
  0x00007fffe1254cd7: mov     %r14,0x8(%rsp)
  0x00007fffe1254cdc: mov     %r15,(%rsp)
  0x00007fffe1254ce0: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1254cea: movabs  $0x7fffe1254c8a,%rsi  ;   {internal_word}
  0x00007fffe1254cf4: mov     %rsp,%rdx
  0x00007fffe1254cf7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254cfb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254d00: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1254d01: mov     %rdx,(%rsp)
  0x00007fffe1254d05: callq   0x7fffe1168720    ; OopMap{rsi=Oop off=1162}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@15 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254d0a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254d0f: sub     $0x80,%rsp
  0x00007fffe1254d16: mov     %rax,0x78(%rsp)
  0x00007fffe1254d1b: mov     %rcx,0x70(%rsp)
  0x00007fffe1254d20: mov     %rdx,0x68(%rsp)
  0x00007fffe1254d25: mov     %rbx,0x60(%rsp)
  0x00007fffe1254d2a: mov     %rbp,0x50(%rsp)
  0x00007fffe1254d2f: mov     %rsi,0x48(%rsp)
  0x00007fffe1254d34: mov     %rdi,0x40(%rsp)
  0x00007fffe1254d39: mov     %r8,0x38(%rsp)
  0x00007fffe1254d3e: mov     %r9,0x30(%rsp)
  0x00007fffe1254d43: mov     %r10,0x28(%rsp)
  0x00007fffe1254d48: mov     %r11,0x20(%rsp)
  0x00007fffe1254d4d: mov     %r12,0x18(%rsp)
  0x00007fffe1254d52: mov     %r13,0x10(%rsp)
  0x00007fffe1254d57: mov     %r14,0x8(%rsp)
  0x00007fffe1254d5c: mov     %r15,(%rsp)
  0x00007fffe1254d60: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1254d6a: movabs  $0x7fffe1254d0a,%rsi  ;   {internal_word}
  0x00007fffe1254d74: mov     %rsp,%rdx
  0x00007fffe1254d77: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254d7b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254d80: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe1254d81: mov     %rdx,0x8(%rsp)
  0x00007fffe1254d86: movq    $0x12,(%rsp)
  0x00007fffe1254d8e: callq   0x7fffe11fe5a0    ; OopMap{off=1299}
                                                ;*goto
                                                ; - java.lang.Integer::stringSize@18 (line 472)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254d93: jmpq    0x7fffe125497e
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1254d98: callq   0x7fffe11670a0    ; OopMap{rdx=Oop off=1309}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254d9d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254da2: sub     $0x80,%rsp
  0x00007fffe1254da9: mov     %rax,0x78(%rsp)
  0x00007fffe1254dae: mov     %rcx,0x70(%rsp)
  0x00007fffe1254db3: mov     %rdx,0x68(%rsp)
  0x00007fffe1254db8: mov     %rbx,0x60(%rsp)
  0x00007fffe1254dbd: mov     %rbp,0x50(%rsp)
  0x00007fffe1254dc2: mov     %rsi,0x48(%rsp)
  0x00007fffe1254dc7: mov     %rdi,0x40(%rsp)
  0x00007fffe1254dcc: mov     %r8,0x38(%rsp)
  0x00007fffe1254dd1: mov     %r9,0x30(%rsp)
  0x00007fffe1254dd6: mov     %r10,0x28(%rsp)
  0x00007fffe1254ddb: mov     %r11,0x20(%rsp)
  0x00007fffe1254de0: mov     %r12,0x18(%rsp)
  0x00007fffe1254de5: mov     %r13,0x10(%rsp)
  0x00007fffe1254dea: mov     %r14,0x8(%rsp)
  0x00007fffe1254def: mov     %r15,(%rsp)
  0x00007fffe1254df3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1254dfd: movabs  $0x7fffe1254d9d,%rsi  ;   {internal_word}
  0x00007fffe1254e07: mov     %rsp,%rdx
  0x00007fffe1254e0a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254e0e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254e13: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1254e14: callq   0x7fffe11670a0    ; OopMap{rdx=Oop off=1433}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254e19: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254e1e: sub     $0x80,%rsp
  0x00007fffe1254e25: mov     %rax,0x78(%rsp)
  0x00007fffe1254e2a: mov     %rcx,0x70(%rsp)
  0x00007fffe1254e2f: mov     %rdx,0x68(%rsp)
  0x00007fffe1254e34: mov     %rbx,0x60(%rsp)
  0x00007fffe1254e39: mov     %rbp,0x50(%rsp)
  0x00007fffe1254e3e: mov     %rsi,0x48(%rsp)
  0x00007fffe1254e43: mov     %rdi,0x40(%rsp)
  0x00007fffe1254e48: mov     %r8,0x38(%rsp)
  0x00007fffe1254e4d: mov     %r9,0x30(%rsp)
  0x00007fffe1254e52: mov     %r10,0x28(%rsp)
  0x00007fffe1254e57: mov     %r11,0x20(%rsp)
  0x00007fffe1254e5c: mov     %r12,0x18(%rsp)
  0x00007fffe1254e61: mov     %r13,0x10(%rsp)
  0x00007fffe1254e66: mov     %r14,0x8(%rsp)
  0x00007fffe1254e6b: mov     %r15,(%rsp)
  0x00007fffe1254e6f: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1254e79: movabs  $0x7fffe1254e19,%rsi  ;   {internal_word}
  0x00007fffe1254e83: mov     %rsp,%rdx
  0x00007fffe1254e86: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254e8a: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254e8f: hlt
  ;; RangeCheckStub slow case
  0x00007fffe1254e90: mov     %rbx,(%rsp)
  0x00007fffe1254e94: callq   0x7fffe1168720    ; OopMap{rdx=Oop off=1561}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {runtime_call}
  0x00007fffe1254e99: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254e9e: sub     $0x80,%rsp
  0x00007fffe1254ea5: mov     %rax,0x78(%rsp)
  0x00007fffe1254eaa: mov     %rcx,0x70(%rsp)
  0x00007fffe1254eaf: mov     %rdx,0x68(%rsp)
  0x00007fffe1254eb4: mov     %rbx,0x60(%rsp)
  0x00007fffe1254eb9: mov     %rbp,0x50(%rsp)
  0x00007fffe1254ebe: mov     %rsi,0x48(%rsp)
  0x00007fffe1254ec3: mov     %rdi,0x40(%rsp)
  0x00007fffe1254ec8: mov     %r8,0x38(%rsp)
  0x00007fffe1254ecd: mov     %r9,0x30(%rsp)
  0x00007fffe1254ed2: mov     %r10,0x28(%rsp)
  0x00007fffe1254ed7: mov     %r11,0x20(%rsp)
  0x00007fffe1254edc: mov     %r12,0x18(%rsp)
  0x00007fffe1254ee1: mov     %r13,0x10(%rsp)
  0x00007fffe1254ee6: mov     %r14,0x8(%rsp)
  0x00007fffe1254eeb: mov     %r15,(%rsp)
  0x00007fffe1254eef: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1254ef9: movabs  $0x7fffe1254e99,%rsi  ;   {internal_word}
  0x00007fffe1254f03: mov     %rsp,%rdx
  0x00007fffe1254f06: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1254f0a: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1254f0f: hlt
  ;; NewTypeArrayStub slow case
  0x00007fffe1254f10: callq   0x7fffe11f8440    ; OopMap{off=1685}
                                                ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)
                                                ;   {runtime_call}
  0x00007fffe1254f15: jmpq    0x7fffe1254ab5
  ;; NewInstanceStub slow case
  0x00007fffe1254f1a: mov     %rdx,%rdx
  0x00007fffe1254f1d: callq   0x7fffe116ad80    ; OopMap{[72]=Oop off=1698}
                                                ;*new  ; - java.lang.Integer::toString@38 (line 403)
                                                ;   {runtime_call}
  0x00007fffe1254f22: jmpq    0x7fffe1254b10
  0x00007fffe1254f27: nop
  0x00007fffe1254f28: nop
  ;; Unwind handler
  0x00007fffe1254f29: mov     0x348(%r15),%rax
  0x00007fffe1254f30: movabs  $0x0,%r10
  0x00007fffe1254f3a: mov     %r10,0x348(%r15)
  0x00007fffe1254f41: movabs  $0x0,%r10
  0x00007fffe1254f4b: mov     %r10,0x350(%r15)
  0x00007fffe1254f52: add     $0x60,%rsp
  0x00007fffe1254f56: pop     %rbp
  0x00007fffe1254f57: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1254f5c: hlt
  0x00007fffe1254f5d: hlt
  0x00007fffe1254f5e: hlt
  0x00007fffe1254f5f: hlt
[Stub Code]
  0x00007fffe1254f60: nop                       ;   {no_reloc}
  0x00007fffe1254f61: nop
  0x00007fffe1254f62: nop
  0x00007fffe1254f63: nop
  0x00007fffe1254f64: nop
  0x00007fffe1254f65: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1254f6f: jmpq    0x7fffe1254f6f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1254f74: movabs  $0xdead,%rbx
  0x00007fffe1254f7e: movabs  $0xdead,%rcx
  0x00007fffe1254f88: movabs  $0xdead,%rsi
  0x00007fffe1254f92: movabs  $0xdead,%rdi
  0x00007fffe1254f9c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1254fa1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1254fa6: sub     $0x80,%rsp
  0x00007fffe1254fad: mov     %rax,0x78(%rsp)
  0x00007fffe1254fb2: mov     %rcx,0x70(%rsp)
  0x00007fffe1254fb7: mov     %rdx,0x68(%rsp)
  0x00007fffe1254fbc: mov     %rbx,0x60(%rsp)
  0x00007fffe1254fc1: mov     %rbp,0x50(%rsp)
  0x00007fffe1254fc6: mov     %rsi,0x48(%rsp)
  0x00007fffe1254fcb: mov     %rdi,0x40(%rsp)
  0x00007fffe1254fd0: mov     %r8,0x38(%rsp)
  0x00007fffe1254fd5: mov     %r9,0x30(%rsp)
  0x00007fffe1254fda: mov     %r10,0x28(%rsp)
  0x00007fffe1254fdf: mov     %r11,0x20(%rsp)
  0x00007fffe1254fe4: mov     %r12,0x18(%rsp)
  0x00007fffe1254fe9: mov     %r13,0x10(%rsp)
  0x00007fffe1254fee: mov     %r14,0x8(%rsp)
  0x00007fffe1254ff3: mov     %r15,(%rsp)
  0x00007fffe1254ff7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1255001: movabs  $0x7fffe1254fa1,%rsi  ;   {internal_word}
  0x00007fffe125500b: mov     %rsp,%rdx
  0x00007fffe125500e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1255012: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1255017: hlt
[Deopt Handler Code]
  0x00007fffe1255018: movabs  $0x7fffe1255018,%r10  ;   {section_word}
  0x00007fffe1255022: push    %r10
  0x00007fffe1255024: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1255029: hlt
  0x00007fffe125502a: hlt
  0x00007fffe125502b: hlt
  0x00007fffe125502c: hlt
  0x00007fffe125502d: hlt
  0x00007fffe125502e: hlt
  0x00007fffe125502f: hlt
<nmethod compile_id='67' compiler='C1' level='2' entry='0x00007fffe1254880' size='3384' address='0x00007fffe1254650' relocation_offset='304' insts_offset='560' stub_offset='2320' scopes_data_offset='2552' scopes_pcs_offset='2792' dependencies_offset='3336' nul_chk_table_offset='3344' method='java/lang/Integer toString (I)Ljava/lang/String;' bytes='48' count='33679' iicount='33679' stamp='119.554'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe124e750:
Code:
Argument 0 is unknown.RIP: 0x7fffe124e8c0 Code size: 0x000000f8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa6730} &apos;&lt;init&gt;&apos; &apos;([CZ)V&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx:rdx   = &apos;[C&apos;
  # parm1:    rcx       = boolean
  #           [sp+0x20]  (sp of caller)
  ;; N28: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124e8c0: mov     0x8(%rsi),%r10d
  0x00007fffe124e8c4: shl     $0x3,%r10
  0x00007fffe124e8c8: cmp     %r10,%rax
  0x00007fffe124e8cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe124e8d1: nop
  0x00007fffe124e8d2: nop
  0x00007fffe124e8d3: nop
  0x00007fffe124e8d4: nop
  0x00007fffe124e8d5: nop
  0x00007fffe124e8d6: nop
  0x00007fffe124e8d7: nop
  0x00007fffe124e8d8: nop
  0x00007fffe124e8d9: nop
  0x00007fffe124e8da: nop
  0x00007fffe124e8db: nop
  0x00007fffe124e8dc: nop
  0x00007fffe124e8dd: nop
  0x00007fffe124e8de: nop
  0x00007fffe124e8df: nop
[Verified Entry Point]
  ;; B1: #	N28 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe124e8e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe124e8e7: push    %rbp
  0x00007fffe124e8e8: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - java.lang.String::&lt;init&gt;@-1 (line 608)

  0x00007fffe124e8ec: mov     %rsi,%r10
  0x00007fffe124e8ef: mov     %rdx,%r8
  0x00007fffe124e8f2: push    %r10
  0x00007fffe124e8f4: cmp     0x16b0b2e5(%rip),%r12  ;   {external_word}
  0x00007fffe124e8fb: je      0x7fffe124e978
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe124e901: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe124e906: sub     $0x80,%rsp
  0x00007fffe124e90d: mov     %rax,0x78(%rsp)
  0x00007fffe124e912: mov     %rcx,0x70(%rsp)
  0x00007fffe124e917: mov     %rdx,0x68(%rsp)
  0x00007fffe124e91c: mov     %rbx,0x60(%rsp)
  0x00007fffe124e921: mov     %rbp,0x50(%rsp)
  0x00007fffe124e926: mov     %rsi,0x48(%rsp)
  0x00007fffe124e92b: mov     %rdi,0x40(%rsp)
  0x00007fffe124e930: mov     %r8,0x38(%rsp)
  0x00007fffe124e935: mov     %r9,0x30(%rsp)
  0x00007fffe124e93a: mov     %r10,0x28(%rsp)
  0x00007fffe124e93f: mov     %r11,0x20(%rsp)
  0x00007fffe124e944: mov     %r12,0x18(%rsp)
  0x00007fffe124e949: mov     %r13,0x10(%rsp)
  0x00007fffe124e94e: mov     %r14,0x8(%rsp)
  0x00007fffe124e953: mov     %r15,(%rsp)
  0x00007fffe124e957: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe124e961: movabs  $0x7fffe124e901,%rsi  ;   {internal_word}
  0x00007fffe124e96b: mov     %rsp,%rdx
  0x00007fffe124e96e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe124e972: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe124e977: hlt
  0x00007fffe124e978: pop     %r10
  0x00007fffe124e97a: mov     %r8d,0xc(%rsi)
  0x00007fffe124e97e: shr     $0x9,%r10
  0x00007fffe124e982: movabs  $0x7ffff591e000,%r11
  0x00007fffe124e98c: mov     %r12l,(%r11,%r10)  ;*putfield value
                                                ; - java.lang.String::&lt;init&gt;@6 (line 610)

  0x00007fffe124e990: add     $0x10,%rsp
  0x00007fffe124e994: pop     %rbp
  0x00007fffe124e995: test    %eax,0x16dac665(%rip)  ;   {poll_return}
  0x00007fffe124e99b: retq
  0x00007fffe124e99c: hlt
  0x00007fffe124e99d: hlt
  0x00007fffe124e99e: hlt
  0x00007fffe124e99f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe124e9a0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe124e9a5: callq   0x7fffe124e9aa
  0x00007fffe124e9aa: subq    $0x5,(%rsp)
  0x00007fffe124e9af: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe124e9b4: hlt
  0x00007fffe124e9b5: hlt
  0x00007fffe124e9b6: hlt
  0x00007fffe124e9b7: hlt
<nmethod compile_id='102' compiler='C2' level='4' entry='0x00007fffe124e8c0' size='712' address='0x00007fffe124e750' relocation_offset='304' insts_offset='368' stub_offset='592' scopes_data_offset='624' scopes_pcs_offset='640' dependencies_offset='704' method='java/lang/String &lt;init&gt; ([CZ)V' bytes='10' count='33707' iicount='33707' stamp='119.563'/>
<make_not_entrant thread='140736956679936' compile_id='63' compiler='C1' level='2' stamp='119.563'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe12677d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe12679c0 Code size: 0x000011e8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c2ac78} &apos;flushBuffer&apos; &apos;()V&apos; in &apos;sun/nio/cs/StreamEncoder&apos;
  #           [sp+0x90]  (sp of caller)
  ;; N1688: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe12679c0: mov     0x8(%rsi),%r10d
  0x00007fffe12679c4: shl     $0x3,%r10
  0x00007fffe12679c8: cmp     %r10,%rax
  0x00007fffe12679cb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe12679d1: nop
  0x00007fffe12679d2: nop
  0x00007fffe12679d3: nop
  0x00007fffe12679d4: nop
  0x00007fffe12679d5: nop
  0x00007fffe12679d6: nop
  0x00007fffe12679d7: nop
  0x00007fffe12679d8: nop
  0x00007fffe12679d9: nop
  0x00007fffe12679da: nop
  0x00007fffe12679db: nop
  0x00007fffe12679dc: nop
  0x00007fffe12679dd: nop
  0x00007fffe12679de: nop
  0x00007fffe12679df: nop
[Verified Entry Point]
  ;; B1: #	B104 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe12679e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12679e7: push    %rbp
  0x00007fffe12679e8: sub     $0x80,%rsp        ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@-1 (line 102)

  0x00007fffe12679ef: mov     %rsi,0x38(%rsp)
  0x00007fffe12679f4: mov     0x10(%rsi),%r11d
  0x00007fffe12679f8: mov     %r11d,0x1c(%rsp)
  0x00007fffe12679fd: mov     (%r11),%rax       ; implicit exception: dispatches to 0x00007fffe12686d5
  ;; B2: #	B48 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1267a00: mov     %rax,%r10
  0x00007fffe1267a03: and     $0x7,%r10
  0x00007fffe1267a07: mov     %r11,%rcx         ;*getfield lock
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@1 (line 102)

  0x00007fffe1267a0a: cmp     $0x5,%r10
  0x00007fffe1267a0e: jne     0x7fffe1267dcf
  ;; B3: #	B50 B4 &lt;- B2  Freq: 0.999998

  0x00007fffe1267a14: mov     0x8(%r11),%r11d
  0x00007fffe1267a18: movabs  $0x0,%r10
  0x00007fffe1267a22: lea     (%r10,%r11,8),%r10
  0x00007fffe1267a26: mov     0xb0(%r10),%r10
  0x00007fffe1267a2d: mov     %r10,%r11
  0x00007fffe1267a30: or      %r15,%r11
  0x00007fffe1267a33: mov     %r11,%r8
  0x00007fffe1267a36: xor     %rax,%r8
  0x00007fffe1267a39: test    $0xffffffffffffff87,%r8
  0x00007fffe1267a40: jne     0x7fffe1267e4a    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)

  ;; B4: #	B99 B5 &lt;- B49 B48 B3 B54  Freq: 0.999999

  0x00007fffe1267a46: mov     0x38(%rsp),%r10
  0x00007fffe1267a4b: movzbl  0x16(%r10),%ebp   ;*getfield isOpen
                                                ; - sun.nio.cs.StreamEncoder::isOpen@1 (line 155)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@8 (line 103)

  0x00007fffe1267a50: test    %ebp,%ebp
  0x00007fffe1267a52: je      0x7fffe12685d9    ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@11 (line 103)

  ;; B5: #	B105 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe1267a58: mov     0x20(%r10),%r11d  ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@1 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267a5c: mov     0x18(%r11),%r13d  ;*getfield position
                                                ; - java.nio.Buffer::position@1 (line 226)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; implicit exception: dispatches to 0x00007fffe12686e9
  ;; B6: #	B97 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe1267a60: test    %r13d,%r13d
  0x00007fffe1267a63: jle     0x7fffe12685a9    ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@7 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B7: #	B98 B8 &lt;- B6  Freq: 0.999997

  0x00007fffe1267a69: mov     %r13d,0x1c(%r11)  ;*putfield limit
                                                ; - java.nio.Buffer::flip@5 (line 357)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267a6d: mov     %r12d,0x18(%r11)  ;*putfield position
                                                ; - java.nio.Buffer::flip@10 (line 358)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267a71: movl    $0xffffffff,0xc(%r11)  ;*putfield mark
                                                ; - java.nio.Buffer::flip@15 (line 359)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@4 (line 210)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267a79: test    %r13d,%r13d
  0x00007fffe1267a7c: jl      0x7fffe12685c1    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B8: #	B55 B9 &lt;- B7  Freq: 0.999997

  0x00007fffe1267a82: mov     0x28(%r10),%ebp
  0x00007fffe1267a86: test    %ebp,%ebp
  0x00007fffe1267a88: jne     0x7fffe1267e7e    ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B9: #	B111 B10 &lt;- B8  Freq: 0.999996

  0x00007fffe1267a8e: mov     0x2c(%r11),%r10d  ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267a92: mov     0x38(%rsp),%r8
  0x00007fffe1267a97: mov     0x24(%r8),%ebx    ;*getfield out
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@100 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267a9b: mov     0xc(%r10),%edi    ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; implicit exception: dispatches to 0x00007fffe12687a1
  ;; B10: #	B100 B11 &lt;- B9  Freq: 0.999995

  0x00007fffe1267a9f: movzbl  0x28(%r11),%ebp   ;*getfield isReadOnly
                                                ; - java.nio.ByteBuffer::array@16 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267aa4: test    %ebp,%ebp
  0x00007fffe1267aa6: jne     0x7fffe12685fd    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B11: #	B106 B12 &lt;- B10  Freq: 0.999995

  0x00007fffe1267aac: mov     0x24(%r11),%r11d  ;*getfield offset
                                                ; - java.nio.ByteBuffer::arrayOffset@31 (line 1033)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@114 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267ab0: mov     0x8(%rbx),%r9d    ; implicit exception: dispatches to 0x00007fffe12686fd
  ;; B12: #	B56 B13 &lt;- B11  Freq: 0.999994

  0x00007fffe1267ab4: cmp     $0x200051d4,%r9d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe1267abb: jne     0x7fffe1267ea5
  ;; B13: #	B58 B14 &lt;- B12  Freq: 0.999993

  0x00007fffe1267ac1: mov     %rbx,%r8          ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267ac4: mov     (%r8),%rax
  0x00007fffe1267ac7: mov     %rax,%r9
  0x00007fffe1267aca: and     $0x7,%r9
  0x00007fffe1267ace: cmp     $0x5,%r9
  0x00007fffe1267ad2: jne     0x7fffe1267ed2
  ;; B14: #	B61 B15 &lt;- B13  Freq: 0.999992

  0x00007fffe1267ad8: mov     $0x200051d4,%r9d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe1267ade: shl     $0x3,%r9
  0x00007fffe1267ae2: mov     0xb0(%r9),%r9
  0x00007fffe1267ae9: mov     %r9,%rbx
  0x00007fffe1267aec: or      %r15,%rbx
  0x00007fffe1267aef: mov     %rbx,%rdx
  0x00007fffe1267af2: xor     %rax,%rdx
  0x00007fffe1267af5: test    $0xffffffffffffff87,%rdx
  0x00007fffe1267afc: jne     0x7fffe1267fbd    ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B15: #	B112 B16 &lt;- B59 B58 B14 B65  Freq: 0.999993

  0x00007fffe1267b02: mov     0xc(%r8),%ebp     ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b06: mov     0x8(%rbp),%ebx    ; implicit exception: dispatches to 0x00007fffe12687c9
  ;; B16: #	B60 B17 &lt;- B15  Freq: 0.999992

  0x00007fffe1267b09: cmp     $0x2000524d,%ebx  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1267b0f: jne     0x7fffe1267f81
  ;; B17: #	B67 B18 &lt;- B16  Freq: 0.999991

  0x00007fffe1267b15: mov     %rbp,%r14         ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b18: mov     (%r14),%rax
  0x00007fffe1267b1b: mov     %rax,%rbx
  0x00007fffe1267b1e: and     $0x7,%rbx
  0x00007fffe1267b22: mov     $0x2000524d,%r9d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1267b28: shl     $0x3,%r9
  0x00007fffe1267b2c: mov     %r9,0x8(%rsp)
  0x00007fffe1267b31: cmp     $0x5,%rbx
  0x00007fffe1267b35: jne     0x7fffe1267ff5
  ;; B18: #	B69 B19 &lt;- B17  Freq: 0.99999

  0x00007fffe1267b3b: mov     0xb0(%r9),%r9
  0x00007fffe1267b42: mov     %r9,%rbx
  0x00007fffe1267b45: or      %r15,%rbx
  0x00007fffe1267b48: mov     %rbx,%rdx
  0x00007fffe1267b4b: xor     %rax,%rdx
  0x00007fffe1267b4e: test    $0xffffffffffffff87,%rdx
  0x00007fffe1267b55: jne     0x7fffe12680c4    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B19: #	B107 B20 &lt;- B68 B67 B18 B73  Freq: 0.999991

  0x00007fffe1267b5b: mov     0x14(%r14),%ebx   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b5f: mov     0xc(%rbx),%r9d    ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ; implicit exception: dispatches to 0x00007fffe1268721
  ;; B20: #	B101 B21 &lt;- B19  Freq: 0.99999

  0x00007fffe1267b63: cmp     %r9d,%r13d
  0x00007fffe1267b66: jnl     0x7fffe126862d    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B21: #	B102 B22 &lt;- B20  Freq: 0.99999

  0x00007fffe1267b6c: mov     %r8,0x28(%rsp)
  0x00007fffe1267b71: mov     %rcx,(%rsp)
  0x00007fffe1267b75: mov     0x10(%r14),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@31 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b79: mov     %r9d,%ebp
  0x00007fffe1267b7c: sub     %r8d,%ebp         ;*isub
                                                ; - java.io.BufferedOutputStream::write@34 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b7f: cmp     %ebp,%r13d
  0x00007fffe1267b82: jnle    0x7fffe126866d    ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B22: #	B74 B23 &lt;- B21  Freq: 0.999989

  0x00007fffe1267b88: mov     %rbx,%rcx         ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b8b: mov     %r10,%rax         ;*getfield hb
                                                ; - java.nio.ByteBuffer::array@1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267b8e: test    %r11d,%r11d
  0x00007fffe1267b91: jl      0x7fffe12680f7
  ;; B23: #	B74 B24 &lt;- B22  Freq: 0.999988

  0x00007fffe1267b97: test    %r8d,%r8d
  0x00007fffe1267b9a: jl      0x7fffe12680f7
  ;; B24: #	B74 B25 &lt;- B23  Freq: 0.999987

  0x00007fffe1267ba0: mov     %r13d,%edx
  0x00007fffe1267ba3: add     %r11d,%edx
  0x00007fffe1267ba6: cmp     %edx,%edi
  0x00007fffe1267ba8: jb      0x7fffe12680f7
  ;; B25: #	B74 B26 &lt;- B24  Freq: 0.999986

  0x00007fffe1267bae: mov     %r13d,%edx
  0x00007fffe1267bb1: add     %r8d,%edx
  0x00007fffe1267bb4: cmp     %edx,%r9d
  0x00007fffe1267bb7: jb      0x7fffe12680f7
  ;; B26: #	B27 &lt;- B25  Freq: 0.999985

  0x00007fffe1267bbd: lea     0x10(%rbx,%r8),%rsi
  0x00007fffe1267bc2: lea     0x10(%r10,%r11),%rdi
  0x00007fffe1267bc7: movsxd  %r13d,%rdx
  0x00007fffe1267bca: movabs  $0x7fffe1140ce0,%r10
  0x00007fffe1267bd4: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B27: #	B76 B28 &lt;- B26 B75  Freq: 0.999989

  0x00007fffe1267bd7: mov     0x10(%r14),%r10d  ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@58 (line 129)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267bdb: add     %r13d,%r10d
  0x00007fffe1267bde: mov     %r10d,0x10(%r14)
  0x00007fffe1267be2: mov     $0x7,%r10d
  0x00007fffe1267be8: and     (%r14),%r10
  0x00007fffe1267beb: cmp     $0x5,%r10
  0x00007fffe1267bef: jne     0x7fffe1268145    ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B28: #	B103 B29 &lt;- B77 B76 B27  Freq: 0.999989

  0x00007fffe1267bf5: mov     0x28(%rsp),%r13
  0x00007fffe1267bfa: movzbl  0x10(%r13),%ebp   ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@20 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267bff: test    %ebp,%ebp
  0x00007fffe1267c01: je      0x7fffe12686b5    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B29: #	B108 B30 &lt;- B28  Freq: 0.999989

  0x00007fffe1267c07: mov     0xc(%r13),%ebp    ;*getfield out
                                                ; - java.io.PrintStream::write@27 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267c0b: mov     0x8(%rbp),%r10d   ; implicit exception: dispatches to 0x00007fffe1268745
  ;; B30: #	B78 B31 &lt;- B29  Freq: 0.999988

  0x00007fffe1267c0f: cmp     $0x2000524d,%r10d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe1267c16: jne     0x7fffe12681eb
  ;; B31: #	B80 B32 &lt;- B30  Freq: 0.999987

  0x00007fffe1267c1c: mov     %rbp,%r11         ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267c1f: mov     (%r11),%rax
  0x00007fffe1267c22: mov     %rax,%r10
  0x00007fffe1267c25: and     $0x7,%r10
  0x00007fffe1267c29: cmp     $0x5,%r10
  0x00007fffe1267c2d: jne     0x7fffe1268212
  ;; B32: #	B82 B33 &lt;- B31  Freq: 0.999986

  0x00007fffe1267c33: mov     0x8(%rsp),%r10
  0x00007fffe1267c38: mov     0xb0(%r10),%r10
  0x00007fffe1267c3f: mov     %r10,%r8
  0x00007fffe1267c42: or      %r15,%r8
  0x00007fffe1267c45: mov     %r8,%r9
  0x00007fffe1267c48: xor     %rax,%r9
  0x00007fffe1267c4b: test    $0xffffffffffffff87,%r9
  0x00007fffe1267c52: jne     0x7fffe12682c6    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B33: #	B36 B34 &lt;- B81 B80 B32 B86  Freq: 0.999987

  0x00007fffe1267c58: mov     0x10(%r11),%r10d  ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267c5c: mov     0xc(%r11),%r9d    ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267c60: test    %r10d,%r10d
  0x00007fffe1267c63: jnle    0x7fffe1267c73    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B34: #	B41 B35 &lt;- B33  Freq: 0.333357

  0x00007fffe1267c65: test    %r9d,%r9d
  0x00007fffe1267c68: jne     0x7fffe1267d49    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B35: #	B95 &lt;- B34  Freq: 3.37784e-07

  0x00007fffe1267c6e: jmpq    0x7fffe126852e
  ;; B36: #	B110 B37 &lt;- B33  Freq: 0.666629

  0x00007fffe1267c73: mov     0x14(%r11),%ebp   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267c77: mov     0x8(%r9),%r8d     ; implicit exception: dispatches to 0x00007fffe1268769
  ;; B37: #	B96 B38 &lt;- B36  Freq: 0.666629

  0x00007fffe1267c7b: cmp     $0x20004f38,%r8d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1267c82: jne     0x7fffe126855d    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B38: #	B121 B39 &lt;- B37  Freq: 0.666628

  0x00007fffe1267c88: mov     %r13,0x8(%rsp)
  0x00007fffe1267c8d: mov     %rbp,%rdx
  0x00007fffe1267c90: push    %r10
  0x00007fffe1267c92: cmp     0x16af1f47(%rip),%r12  ;   {external_word}
  0x00007fffe1267c99: je      0x7fffe1267d16
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1267c9f: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1267ca4: sub     $0x80,%rsp
  0x00007fffe1267cab: mov     %rax,0x78(%rsp)
  0x00007fffe1267cb0: mov     %rcx,0x70(%rsp)
  0x00007fffe1267cb5: mov     %rdx,0x68(%rsp)
  0x00007fffe1267cba: mov     %rbx,0x60(%rsp)
  0x00007fffe1267cbf: mov     %rbp,0x50(%rsp)
  0x00007fffe1267cc4: mov     %rsi,0x48(%rsp)
  0x00007fffe1267cc9: mov     %rdi,0x40(%rsp)
  0x00007fffe1267cce: mov     %r8,0x38(%rsp)
  0x00007fffe1267cd3: mov     %r9,0x30(%rsp)
  0x00007fffe1267cd8: mov     %r10,0x28(%rsp)
  0x00007fffe1267cdd: mov     %r11,0x20(%rsp)
  0x00007fffe1267ce2: mov     %r12,0x18(%rsp)
  0x00007fffe1267ce7: mov     %r13,0x10(%rsp)
  0x00007fffe1267cec: mov     %r14,0x8(%rsp)
  0x00007fffe1267cf1: mov     %r15,(%rsp)
  0x00007fffe1267cf5: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1267cff: movabs  $0x7fffe1267c9f,%rsi  ;   {internal_word}
  0x00007fffe1267d09: mov     %rsp,%rdx
  0x00007fffe1267d0c: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1267d10: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1267d15: hlt
  0x00007fffe1267d16: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d18: mov     %r9,%rsi          ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d1b: movzbl  0xc(%rsi),%r9d    ;*getfield append
                                                ; - java.io.FileOutputStream::write@5 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d20: xor     %ecx,%ecx
  0x00007fffe1267d22: mov     %r10d,%r8d
  0x00007fffe1267d25: mov     %r11,%rbp
  0x00007fffe1267d28: nop
  0x00007fffe1267d29: nop
  0x00007fffe1267d2a: nop
  0x00007fffe1267d2b: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [28]=NarrowOop [56]=Oop off=880}
                                                ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {optimized virtual_call}
  ;; B39: #	B94 B40 &lt;- B38  Freq: 0.666615

  0x00007fffe1267d30: mov     %rbp,%r11
  0x00007fffe1267d33: mov     %r12d,0x10(%r11)  ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d37: mov     0xc(%r11),%r9d    ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d3b: test    %r9d,%r9d
  0x00007fffe1267d3e: je      0x7fffe1268526
  ;; B40: #	B41 &lt;- B39  Freq: 0.666614

  0x00007fffe1267d44: mov     0x8(%rsp),%r13    ;*return
                                                ; - java.io.BufferedOutputStream::flushBuffer@28 (line 85)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B41: #	B87 B42 &lt;- B40 B34  Freq: 0.999971

  0x00007fffe1267d49: mov     0x8(%r9),%r8d
  0x00007fffe1267d4d: cmp     $0x20004f38,%r8d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1267d54: jne     0x7fffe12682f9
  ;; B42: #	B88 B43 &lt;- B41  Freq: 0.99997

  0x00007fffe1267d5a: mov     $0x7,%r10d
  0x00007fffe1267d60: and     (%r11),%r10
  0x00007fffe1267d63: cmp     $0x5,%r10
  0x00007fffe1267d67: jne     0x7fffe126832d
  ;; B43: #	B90 B44 &lt;- B89 B88 B42  Freq: 0.99997

  0x00007fffe1267d6d: mov     $0x7,%r10d
  0x00007fffe1267d73: and     0x0(%r13),%r10
  0x00007fffe1267d77: cmp     $0x5,%r10
  0x00007fffe1267d7b: jne     0x7fffe12683d3    ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B44: #	B109 B45 &lt;- B91 B90 B43  Freq: 0.99997

  0x00007fffe1267d81: mov     0x38(%rsp),%r10
  0x00007fffe1267d86: mov     0x20(%r10),%r11d  ;*getfield bb
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@124 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d8a: mov     0x20(%r11),%r10d  ; implicit exception: dispatches to 0x00007fffe1268759
  ;; B45: #	B92 B46 &lt;- B44  Freq: 0.999969

  0x00007fffe1267d8e: mov     %r10d,0x1c(%r11)  ;*putfield limit
                                                ; - java.nio.Buffer::clear@10 (line 330)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d92: mov     %r12d,0x18(%r11)  ;*putfield position
                                                ; - java.nio.Buffer::clear@2 (line 329)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1267d96: movl    $0xffffffff,0xc(%r11)
  0x00007fffe1267d9e: mov     $0x7,%r10d
  0x00007fffe1267da4: mov     0x1c(%rsp),%r11d
  0x00007fffe1267da9: and     (%r11),%r10
  0x00007fffe1267dac: cmp     $0x5,%r10
  0x00007fffe1267db0: jne     0x7fffe126847b    ;*synchronization entry
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@-1 (line 102)

  ;; B46: #	N1688 &lt;- B93 B92 B45  Freq: 0.999969

  0x00007fffe1267db6: add     $0x80,%rsp
  0x00007fffe1267dbd: pop     %rbp
  0x00007fffe1267dbe: test    %eax,0x16d9323c(%rip)  ;   {poll_return}
  0x00007fffe1267dc4: retq
  ;; B47: #	B48 &lt;- B50  Freq: 9.99998e-13

  0x00007fffe1267dc5: mov     0x1c(%rsp),%r8d
  0x00007fffe1267dca: lock cmpxchg %r10,(%r8)
  ;; B48: #	B4 B49 &lt;- B2 B47  Freq: 1e-06

  0x00007fffe1267dcf: lea     0x60(%rsp),%rbx
  0x00007fffe1267dd4: mov     (%rcx),%rax
  0x00007fffe1267dd7: test    $0x2,%rax
  0x00007fffe1267ddd: jne     0x7fffe1267e03
  0x00007fffe1267ddf: or      $0x1,%rax
  0x00007fffe1267de3: mov     %rax,(%rbx)
  0x00007fffe1267de6: lock cmpxchg %rbx,(%rcx)
  0x00007fffe1267deb: je      0x7fffe1267e1c
  0x00007fffe1267df1: sub     %rsp,%rax
  0x00007fffe1267df4: and     $0xfffffffffffff007,%rax
  0x00007fffe1267dfb: mov     %rax,(%rbx)
  0x00007fffe1267dfe: jmpq    0x7fffe1267e1c
  0x00007fffe1267e03: movq    $0x3,(%rbx)
  0x00007fffe1267e0a: mov     %rax,%rbx
  0x00007fffe1267e0d: mov     0x16(%rbx),%rax
  0x00007fffe1267e11: test    %rax,%rax
  0x00007fffe1267e14: jne     0x7fffe1267e1c
  0x00007fffe1267e16: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1267e1c: je      0x7fffe1267a46
  ;; B49: #	B4 &lt;- B53 B48  Freq: 2e-12

  0x00007fffe1267e22: mov     %rcx,%rsi
  0x00007fffe1267e25: lea     0x60(%rsp),%rdx
  0x00007fffe1267e2a: mov     0x38(%rsp),%rbp
  0x00007fffe1267e2f: mov     %rcx,0x8(%rsp)
  0x00007fffe1267e34: mov     %rcx,0x10(%rsp)
  0x00007fffe1267e39: nop
  0x00007fffe1267e3a: nop
  0x00007fffe1267e3b: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [8]=Oop [16]=Oop [28]=NarrowOop [56]=Oop off=1152}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ;   {runtime_call}
  0x00007fffe1267e40: mov     0x8(%rsp),%rcx
  0x00007fffe1267e45: jmpq    0x7fffe1267a46
  ;; B50: #	B47 B51 &lt;- B3  Freq: 9.99998e-07

  0x00007fffe1267e4a: test    $0x7,%r8
  0x00007fffe1267e51: jne     0x7fffe1267dc5
  ;; B51: #	B53 B52 &lt;- B50  Freq: 9.99997e-07

  0x00007fffe1267e57: test    $0x300,%r8
  0x00007fffe1267e5e: jne     0x7fffe1267e6d
  ;; B52: #	B53 &lt;- B51  Freq: 9.99996e-07

  0x00007fffe1267e60: and     $0x37f,%rax
  0x00007fffe1267e67: mov     %rax,%r11
  0x00007fffe1267e6a: or      %r15,%r11
  ;; B53: #	B49 B54 &lt;- B52 B51  Freq: 9.99997e-07

  0x00007fffe1267e6d: mov     0x1c(%rsp),%r10d
  0x00007fffe1267e72: lock cmpxchg %r11,(%r10)
  0x00007fffe1267e77: jne     0x7fffe1267e22
  ;; B54: #	B4 &lt;- B53  Freq: 9.99996e-07

  0x00007fffe1267e79: jmpq    0x7fffe1267a46    ;*getfield ch
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@61 (line 217)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B55: #	N1688 &lt;- B8  Freq: 9.99997e-07

  0x00007fffe1267e7e: mov     $0xffffffec,%esi
  0x00007fffe1267e83: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1267e88: mov     0x1c(%rsp),%eax
  0x00007fffe1267e8c: mov     %eax,(%rsp)
  0x00007fffe1267e8f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1267e94: mov     %r13d,0x10(%rsp)
  0x00007fffe1267e99: nop
  0x00007fffe1267e9a: nop
  0x00007fffe1267e9b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=NarrowOop [56]=Oop off=1248}
                                                ;*ifnull
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@64 (line 217)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1267ea0: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B56: #	N1688 &lt;- B12  Freq: 9.99994e-07

  0x00007fffe1267ea5: mov     $0xffffffde,%esi
  0x00007fffe1267eaa: mov     0x1c(%rsp),%ebp
  0x00007fffe1267eae: mov     %ebx,0x4(%rsp)
  0x00007fffe1267eb2: mov     %r10d,0x10(%rsp)
  0x00007fffe1267eb7: mov     %r11d,0x14(%rsp)
  0x00007fffe1267ebc: mov     %r13d,0x18(%rsp)
  0x00007fffe1267ec1: nop
  0x00007fffe1267ec2: nop
  0x00007fffe1267ec3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [16]=NarrowOop [56]=Oop off=1288}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1267ec8: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B57: #	B58 &lt;- B61  Freq: 9.99992e-13

  0x00007fffe1267ecd: lock cmpxchg %r9,(%r8)
  ;; B58: #	B15 B59 &lt;- B13 B57  Freq: 9.99994e-07

  0x00007fffe1267ed2: lea     0x68(%rsp),%rbx
  0x00007fffe1267ed7: mov     (%r8),%rax
  0x00007fffe1267eda: test    $0x2,%rax
  0x00007fffe1267ee0: jne     0x7fffe1267f06
  0x00007fffe1267ee2: or      $0x1,%rax
  0x00007fffe1267ee6: mov     %rax,(%rbx)
  0x00007fffe1267ee9: lock cmpxchg %rbx,(%r8)
  0x00007fffe1267eee: je      0x7fffe1267f1f
  0x00007fffe1267ef4: sub     %rsp,%rax
  0x00007fffe1267ef7: and     $0xfffffffffffff007,%rax
  0x00007fffe1267efe: mov     %rax,(%rbx)
  0x00007fffe1267f01: jmpq    0x7fffe1267f1f
  0x00007fffe1267f06: movq    $0x3,(%rbx)
  0x00007fffe1267f0d: mov     %rax,%rbx
  0x00007fffe1267f10: mov     0x16(%rbx),%rax
  0x00007fffe1267f14: test    %rax,%rax
  0x00007fffe1267f17: jne     0x7fffe1267f1f
  0x00007fffe1267f19: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1267f1f: je      0x7fffe1267b02
  ;; B59: #	B15 &lt;- B64 B58  Freq: 1.99998e-12

  0x00007fffe1267f25: mov     %r8,0x20(%rsp)
  0x00007fffe1267f2a: mov     %r11d,0x18(%rsp)
  0x00007fffe1267f2f: mov     %edi,0x14(%rsp)
  0x00007fffe1267f33: mov     %r10d,0x10(%rsp)
  0x00007fffe1267f38: mov     %r13d,0x4(%rsp)
  0x00007fffe1267f3d: mov     %rcx,0x8(%rsp)
  0x00007fffe1267f42: mov     0x38(%rsp),%rbp
  0x00007fffe1267f47: mov     %r8,%rsi
  0x00007fffe1267f4a: lea     0x68(%rsp),%rdx
  0x00007fffe1267f4f: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [28]=NarrowOop [32]=Oop off=1428}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1267f54: mov     %rbp,0x38(%rsp)
  0x00007fffe1267f59: mov     0x8(%rsp),%r8
  0x00007fffe1267f5e: mov     0x4(%rsp),%r13d
  0x00007fffe1267f63: mov     0x10(%rsp),%r10d
  0x00007fffe1267f68: mov     0x14(%rsp),%edi
  0x00007fffe1267f6c: mov     0x18(%rsp),%r11d
  0x00007fffe1267f71: mov     0x20(%rsp),%r9
  0x00007fffe1267f76: mov     %r8,%rcx
  0x00007fffe1267f79: mov     %r9,%r8
  0x00007fffe1267f7c: jmpq    0x7fffe1267b02
  ;; B60: #	N1688 &lt;- B16  Freq: 9.99992e-07

  0x00007fffe1267f81: mov     $0xffffffde,%esi
  0x00007fffe1267f86: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1267f8b: mov     0x1c(%rsp),%eax
  0x00007fffe1267f8f: mov     %eax,(%rsp)
  0x00007fffe1267f92: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1267f97: mov     %r8,0x18(%rsp)
  0x00007fffe1267f9c: mov     %r10d,0x20(%rsp)
  0x00007fffe1267fa1: mov     %r11d,0x24(%rsp)
  0x00007fffe1267fa6: mov     %r13d,0x28(%rsp)
  0x00007fffe1267fab: mov     %r8,0x30(%rsp)
  0x00007fffe1267fb0: nop
  0x00007fffe1267fb1: nop
  0x00007fffe1267fb2: nop
  0x00007fffe1267fb3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=NarrowOop [24]=Oop [32]=NarrowOop [48]=Oop [56]=Oop off=1528}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1267fb8: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B61: #	B57 B62 &lt;- B14  Freq: 9.99992e-07

  0x00007fffe1267fbd: test    $0x7,%rdx
  0x00007fffe1267fc4: jne     0x7fffe1267ecd
  ;; B62: #	B64 B63 &lt;- B61  Freq: 9.99991e-07

  0x00007fffe1267fca: test    $0x300,%rdx
  0x00007fffe1267fd1: jne     0x7fffe1267fe0
  ;; B63: #	B64 &lt;- B62  Freq: 9.9999e-07

  0x00007fffe1267fd3: and     $0x37f,%rax
  0x00007fffe1267fda: mov     %rax,%rbx
  0x00007fffe1267fdd: or      %r15,%rbx
  ;; B64: #	B59 B65 &lt;- B63 B62  Freq: 9.99991e-07

  0x00007fffe1267fe0: lock cmpxchg %rbx,(%r8)
  0x00007fffe1267fe5: jne     0x7fffe1267f25
  ;; B65: #	B15 &lt;- B64  Freq: 9.9999e-07

  0x00007fffe1267feb: jmpq    0x7fffe1267b02
  ;; B66: #	B67 &lt;- B69  Freq: 9.9999e-13

  0x00007fffe1267ff0: lock cmpxchg %r9,(%r14)
  ;; B67: #	B19 B68 &lt;- B17 B66  Freq: 9.99992e-07

  0x00007fffe1267ff5: lea     0x70(%rsp),%rbx
  0x00007fffe1267ffa: mov     (%r14),%rax
  0x00007fffe1267ffd: test    $0x2,%rax
  0x00007fffe1268003: jne     0x7fffe1268029
  0x00007fffe1268005: or      $0x1,%rax
  0x00007fffe1268009: mov     %rax,(%rbx)
  0x00007fffe126800c: lock cmpxchg %rbx,(%r14)
  0x00007fffe1268011: je      0x7fffe1268042
  0x00007fffe1268017: sub     %rsp,%rax
  0x00007fffe126801a: and     $0xfffffffffffff007,%rax
  0x00007fffe1268021: mov     %rax,(%rbx)
  0x00007fffe1268024: jmpq    0x7fffe1268042
  0x00007fffe1268029: movq    $0x3,(%rbx)
  0x00007fffe1268030: mov     %rax,%rbx
  0x00007fffe1268033: mov     0x16(%rbx),%rax
  0x00007fffe1268037: test    %rax,%rax
  0x00007fffe126803a: jne     0x7fffe1268042
  0x00007fffe126803c: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1268042: je      0x7fffe1267b5b
  ;; B68: #	B19 &lt;- B72 B67  Freq: 1.99998e-12

  0x00007fffe1268048: pushq   0x8(%rsp)
  0x00007fffe126804d: popq    0x30(%rsp)
  0x00007fffe1268052: mov     %r14,0x28(%rsp)
  0x00007fffe1268057: mov     %r8,0x20(%rsp)
  0x00007fffe126805c: mov     %r11d,0x18(%rsp)
  0x00007fffe1268061: mov     %edi,0x14(%rsp)
  0x00007fffe1268065: mov     %r10d,0x10(%rsp)
  0x00007fffe126806a: mov     %r13d,0x4(%rsp)
  0x00007fffe126806f: mov     %rcx,0x8(%rsp)
  0x00007fffe1268074: mov     0x38(%rsp),%rbp
  0x00007fffe1268079: mov     %r14,%rsi
  0x00007fffe126807c: lea     0x70(%rsp),%rdx
  0x00007fffe1268081: nop
  0x00007fffe1268082: nop
  0x00007fffe1268083: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [8]=Oop [16]=NarrowOop [28]=NarrowOop [32]=Oop [40]=Oop off=1736}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268088: mov     %rbp,0x38(%rsp)
  0x00007fffe126808d: mov     0x8(%rsp),%r8
  0x00007fffe1268092: mov     0x4(%rsp),%r13d
  0x00007fffe1268097: mov     0x10(%rsp),%r10d
  0x00007fffe126809c: mov     0x14(%rsp),%edi
  0x00007fffe12680a0: mov     0x18(%rsp),%r11d
  0x00007fffe12680a5: mov     0x20(%rsp),%r9
  0x00007fffe12680aa: mov     0x28(%rsp),%r14
  0x00007fffe12680af: pushq   0x30(%rsp)
  0x00007fffe12680b4: popq    0x8(%rsp)
  0x00007fffe12680b9: mov     %r8,%rcx
  0x00007fffe12680bc: mov     %r9,%r8
  0x00007fffe12680bf: jmpq    0x7fffe1267b5b
  ;; B69: #	B66 B70 &lt;- B18  Freq: 9.9999e-07

  0x00007fffe12680c4: test    $0x7,%rdx
  0x00007fffe12680cb: jne     0x7fffe1267ff0
  ;; B70: #	B72 B71 &lt;- B69  Freq: 9.99989e-07

  0x00007fffe12680d1: test    $0x300,%rdx
  0x00007fffe12680d8: jne     0x7fffe12680e7
  ;; B71: #	B72 &lt;- B70  Freq: 9.99988e-07

  0x00007fffe12680da: and     $0x37f,%rax
  0x00007fffe12680e1: mov     %rax,%rbx
  0x00007fffe12680e4: or      %r15,%rbx
  ;; B72: #	B68 B73 &lt;- B71 B70  Freq: 9.99989e-07

  0x00007fffe12680e7: lock cmpxchg %rbx,(%r14)
  0x00007fffe12680ec: jne     0x7fffe1268048
  ;; B73: #	B19 &lt;- B72  Freq: 9.99988e-07

  0x00007fffe12680f2: jmpq    0x7fffe1267b5b
  ;; B74: #	B119 B75 &lt;- B22 B23 B24 B25  Freq: 3.99995e-06

  0x00007fffe12680f7: pushq   0x8(%rsp)
  0x00007fffe12680fc: popq    0x20(%rsp)
  0x00007fffe1268101: mov     %r14,0x10(%rsp)
  0x00007fffe1268106: pushq   0x28(%rsp)
  0x00007fffe126810b: popq    0x8(%rsp)
  0x00007fffe1268110: mov     %r13d,%ebp
  0x00007fffe1268113: mov     %rax,%rsi
  0x00007fffe1268116: mov     %r11d,%edx
  0x00007fffe1268119: mov     %r13d,%r9d
  0x00007fffe126811c: nop
  0x00007fffe126811d: nop
  0x00007fffe126811e: nop
  0x00007fffe126811f: callq   0x7fffe1169ba0    ; OopMap{[0]=Oop [8]=Oop [16]=Oop [28]=NarrowOop [56]=Oop off=1892}
                                                ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B75: #	B27 &lt;- B74  Freq: 3.99987e-06

  0x00007fffe1268124: mov     %ebp,%r13d
  0x00007fffe1268127: pushq   0x8(%rsp)
  0x00007fffe126812c: popq    0x28(%rsp)
  0x00007fffe1268131: mov     0x10(%rsp),%r14
  0x00007fffe1268136: pushq   0x20(%rsp)
  0x00007fffe126813b: popq    0x8(%rsp)
  0x00007fffe1268140: jmpq    0x7fffe1267bd7
  ;; B76: #	B28 B77 &lt;- B27  Freq: 9.99989e-07

  0x00007fffe1268145: lea     0x70(%rsp),%rax
  0x00007fffe126814a: cmpq    $0x0,(%rax)
  0x00007fffe1268151: je      0x7fffe12681cb
  0x00007fffe1268157: mov     (%r14),%r10
  0x00007fffe126815a: test    $0x2,%r10
  0x00007fffe1268161: je      0x7fffe12681c3
  0x00007fffe1268163: mov     0x16(%r10),%rax
  0x00007fffe1268167: xor     %r15,%rax
  0x00007fffe126816a: or      0x26(%r10),%rax
  0x00007fffe126816e: jne     0x7fffe12681cb
  0x00007fffe1268170: mov     0x36(%r10),%rax
  0x00007fffe1268174: or      0x3e(%r10),%rax
  0x00007fffe1268178: jne     0x7fffe1268184
  0x00007fffe126817a: movq    $0x0,0x16(%r10)
  0x00007fffe1268182: jmp     0x7fffe12681cb
  0x00007fffe1268184: cmpq    $0x0,0x46(%r10)
  0x00007fffe126818c: je      0x7fffe12681b7
  0x00007fffe126818e: movq    $0x0,0x16(%r10)
  0x00007fffe1268196: lock addl $0x0,(%rsp)
  0x00007fffe126819b: cmpq    $0x0,0x46(%r10)
  0x00007fffe12681a3: jne     0x7fffe12681bc
  0x00007fffe12681a5: movabs  $0x0,%rax
  0x00007fffe12681af: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12681b5: jne     0x7fffe12681bc
  0x00007fffe12681b7: or      $0x1,%eax
  0x00007fffe12681ba: jmp     0x7fffe12681cb
  0x00007fffe12681bc: test    $0x0,%eax
  0x00007fffe12681c1: jmp     0x7fffe12681cb
  0x00007fffe12681c3: mov     (%rax),%r10
  0x00007fffe12681c6: lock cmpxchg %r10,(%r14)
  0x00007fffe12681cb: je      0x7fffe1267bf5
  ;; B77: #	B28 &lt;- B76  Freq: 9.99989e-13

  0x00007fffe12681d1: mov     %r14,%rdi
  0x00007fffe12681d4: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe12681d9: movabs  $0x7ffff744655c,%r10
  0x00007fffe12681e3: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe12681e6: jmpq    0x7fffe1267bf5
  ;; B78: #	N1688 &lt;- B30  Freq: 9.99987e-07

  0x00007fffe12681eb: mov     $0xffffffde,%esi
  0x00007fffe12681f0: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12681f5: mov     0x1c(%rsp),%eax
  0x00007fffe12681f9: mov     %eax,(%rsp)
  0x00007fffe12681fc: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268201: nop
  0x00007fffe1268202: nop
  0x00007fffe1268203: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=NarrowOop [40]=Oop [56]=Oop off=2120}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268208: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B79: #	B80 &lt;- B82  Freq: 9.99986e-13

  0x00007fffe126820d: lock cmpxchg %r10,(%r11)
  ;; B80: #	B33 B81 &lt;- B31 B79  Freq: 9.99988e-07

  0x00007fffe1268212: lea     0x70(%rsp),%rbx
  0x00007fffe1268217: mov     (%r11),%rax
  0x00007fffe126821a: test    $0x2,%rax
  0x00007fffe1268220: jne     0x7fffe1268246
  0x00007fffe1268222: or      $0x1,%rax
  0x00007fffe1268226: mov     %rax,(%rbx)
  0x00007fffe1268229: lock cmpxchg %rbx,(%r11)
  0x00007fffe126822e: je      0x7fffe126825f
  0x00007fffe1268234: sub     %rsp,%rax
  0x00007fffe1268237: and     $0xfffffffffffff007,%rax
  0x00007fffe126823e: mov     %rax,(%rbx)
  0x00007fffe1268241: jmpq    0x7fffe126825f
  0x00007fffe1268246: movq    $0x3,(%rbx)
  0x00007fffe126824d: mov     %rax,%rbx
  0x00007fffe1268250: mov     0x16(%rbx),%rax
  0x00007fffe1268254: test    %rax,%rax
  0x00007fffe1268257: jne     0x7fffe126825f
  0x00007fffe1268259: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126825f: je      0x7fffe1267c58
  ;; B81: #	B33 &lt;- B85 B80  Freq: 1.99997e-12

  0x00007fffe1268265: mov     %r11,0x20(%rsp)
  0x00007fffe126826a: pushq   (%rsp)
  0x00007fffe126826e: popq    0x8(%rsp)
  0x00007fffe1268273: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268278: mov     0x1c(%rsp),%eax
  0x00007fffe126827c: mov     %eax,(%rsp)
  0x00007fffe126827f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268284: mov     0x38(%rsp),%rbp
  0x00007fffe1268289: mov     %r11,%rsi
  0x00007fffe126828c: lea     0x70(%rsp),%rdx
  0x00007fffe1268291: nop
  0x00007fffe1268292: nop
  0x00007fffe1268293: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=NarrowOop [8]=Oop [32]=Oop [40]=Oop off=2264}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268298: mov     %rbp,0x38(%rsp)
  0x00007fffe126829d: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12682a2: mov     (%rsp),%eax
  0x00007fffe12682a5: mov     %eax,0x1c(%rsp)
  0x00007fffe12682a9: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12682ae: pushq   0x8(%rsp)
  0x00007fffe12682b3: popq    (%rsp)
  0x00007fffe12682b7: mov     0x20(%rsp),%r11
  0x00007fffe12682bc: mov     0x28(%rsp),%r13
  0x00007fffe12682c1: jmpq    0x7fffe1267c58    ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B82: #	B79 B83 &lt;- B32  Freq: 9.99986e-07

  0x00007fffe12682c6: test    $0x7,%r9
  0x00007fffe12682cd: jne     0x7fffe126820d
  ;; B83: #	B85 B84 &lt;- B82  Freq: 9.99985e-07

  0x00007fffe12682d3: test    $0x300,%r9
  0x00007fffe12682da: jne     0x7fffe12682e9
  ;; B84: #	B85 &lt;- B83  Freq: 9.99984e-07

  0x00007fffe12682dc: and     $0x37f,%rax
  0x00007fffe12682e3: mov     %rax,%r8
  0x00007fffe12682e6: or      %r15,%r8
  ;; B85: #	B81 B86 &lt;- B84 B83  Freq: 9.99985e-07

  0x00007fffe12682e9: lock cmpxchg %r8,(%r11)
  0x00007fffe12682ee: jne     0x7fffe1268265
  ;; B86: #	B33 &lt;- B85  Freq: 9.99984e-07

  0x00007fffe12682f4: jmpq    0x7fffe1267c58
  ;; B87: #	N1688 &lt;- B41  Freq: 9.99971e-07

  0x00007fffe12682f9: mov     $0xffffffde,%esi
  0x00007fffe12682fe: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268303: mov     0x1c(%rsp),%eax
  0x00007fffe1268307: mov     %eax,(%rsp)
  0x00007fffe126830a: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126830f: mov     %r13,0x18(%rsp)
  0x00007fffe1268314: mov     %r13,0x20(%rsp)
  0x00007fffe1268319: mov     %r9d,0x4(%rsp)
  0x00007fffe126831e: mov     %r11,0x28(%rsp)
  0x00007fffe1268323: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [4]=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=2408}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268328: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B88: #	B43 B89 &lt;- B42  Freq: 9.9997e-07

  0x00007fffe126832d: lea     0x70(%rsp),%rax
  0x00007fffe1268332: cmpq    $0x0,(%rax)
  0x00007fffe1268339: je      0x7fffe12683b3
  0x00007fffe126833f: mov     (%r11),%r10
  0x00007fffe1268342: test    $0x2,%r10
  0x00007fffe1268349: je      0x7fffe12683ab
  0x00007fffe126834b: mov     0x16(%r10),%rax
  0x00007fffe126834f: xor     %r15,%rax
  0x00007fffe1268352: or      0x26(%r10),%rax
  0x00007fffe1268356: jne     0x7fffe12683b3
  0x00007fffe1268358: mov     0x36(%r10),%rax
  0x00007fffe126835c: or      0x3e(%r10),%rax
  0x00007fffe1268360: jne     0x7fffe126836c
  0x00007fffe1268362: movq    $0x0,0x16(%r10)
  0x00007fffe126836a: jmp     0x7fffe12683b3
  0x00007fffe126836c: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268374: je      0x7fffe126839f
  0x00007fffe1268376: movq    $0x0,0x16(%r10)
  0x00007fffe126837e: lock addl $0x0,(%rsp)
  0x00007fffe1268383: cmpq    $0x0,0x46(%r10)
  0x00007fffe126838b: jne     0x7fffe12683a4
  0x00007fffe126838d: movabs  $0x0,%rax
  0x00007fffe1268397: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126839d: jne     0x7fffe12683a4
  0x00007fffe126839f: or      $0x1,%eax
  0x00007fffe12683a2: jmp     0x7fffe12683b3
  0x00007fffe12683a4: test    $0x0,%eax
  0x00007fffe12683a9: jmp     0x7fffe12683b3
  0x00007fffe12683ab: mov     (%rax),%r10
  0x00007fffe12683ae: lock cmpxchg %r10,(%r11)
  0x00007fffe12683b3: je      0x7fffe1267d6d
  ;; B89: #	B43 &lt;- B88  Freq: 9.9997e-13

  0x00007fffe12683b9: mov     %r11,%rdi
  0x00007fffe12683bc: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe12683c1: movabs  $0x7ffff744655c,%r10
  0x00007fffe12683cb: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe12683ce: jmpq    0x7fffe1267d6d
  ;; B90: #	B44 B91 &lt;- B43  Freq: 9.9997e-07

  0x00007fffe12683d3: lea     0x68(%rsp),%rax
  0x00007fffe12683d8: cmpq    $0x0,(%rax)
  0x00007fffe12683df: je      0x7fffe126845b
  0x00007fffe12683e5: mov     0x0(%r13),%r10
  0x00007fffe12683e9: test    $0x2,%r10
  0x00007fffe12683f0: je      0x7fffe1268452
  0x00007fffe12683f2: mov     0x16(%r10),%rax
  0x00007fffe12683f6: xor     %r15,%rax
  0x00007fffe12683f9: or      0x26(%r10),%rax
  0x00007fffe12683fd: jne     0x7fffe126845b
  0x00007fffe12683ff: mov     0x36(%r10),%rax
  0x00007fffe1268403: or      0x3e(%r10),%rax
  0x00007fffe1268407: jne     0x7fffe1268413
  0x00007fffe1268409: movq    $0x0,0x16(%r10)
  0x00007fffe1268411: jmp     0x7fffe126845b
  0x00007fffe1268413: cmpq    $0x0,0x46(%r10)
  0x00007fffe126841b: je      0x7fffe1268446
  0x00007fffe126841d: movq    $0x0,0x16(%r10)
  0x00007fffe1268425: lock addl $0x0,(%rsp)
  0x00007fffe126842a: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268432: jne     0x7fffe126844b
  0x00007fffe1268434: movabs  $0x0,%rax
  0x00007fffe126843e: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1268444: jne     0x7fffe126844b
  0x00007fffe1268446: or      $0x1,%eax
  0x00007fffe1268449: jmp     0x7fffe126845b
  0x00007fffe126844b: test    $0x0,%eax
  0x00007fffe1268450: jmp     0x7fffe126845b
  0x00007fffe1268452: mov     (%rax),%r10
  0x00007fffe1268455: lock cmpxchg %r10,0x0(%r13)
  0x00007fffe126845b: je      0x7fffe1267d81
  ;; B91: #	B44 &lt;- B90  Freq: 9.9997e-13

  0x00007fffe1268461: mov     %r13,%rdi
  0x00007fffe1268464: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268469: movabs  $0x7ffff744655c,%r10
  0x00007fffe1268473: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268476: jmpq    0x7fffe1267d81
  ;; B92: #	B46 B93 &lt;- B45  Freq: 9.99969e-07

  0x00007fffe126847b: lea     0x60(%rsp),%rax
  0x00007fffe1268480: mov     (%rsp),%r11
  0x00007fffe1268484: cmpq    $0x0,(%rax)
  0x00007fffe126848b: je      0x7fffe1268505
  0x00007fffe1268491: mov     (%r11),%r10
  0x00007fffe1268494: test    $0x2,%r10
  0x00007fffe126849b: je      0x7fffe12684fd
  0x00007fffe126849d: mov     0x16(%r10),%rax
  0x00007fffe12684a1: xor     %r15,%rax
  0x00007fffe12684a4: or      0x26(%r10),%rax
  0x00007fffe12684a8: jne     0x7fffe1268505
  0x00007fffe12684aa: mov     0x36(%r10),%rax
  0x00007fffe12684ae: or      0x3e(%r10),%rax
  0x00007fffe12684b2: jne     0x7fffe12684be
  0x00007fffe12684b4: movq    $0x0,0x16(%r10)
  0x00007fffe12684bc: jmp     0x7fffe1268505
  0x00007fffe12684be: cmpq    $0x0,0x46(%r10)
  0x00007fffe12684c6: je      0x7fffe12684f1
  0x00007fffe12684c8: movq    $0x0,0x16(%r10)
  0x00007fffe12684d0: lock addl $0x0,(%rsp)
  0x00007fffe12684d5: cmpq    $0x0,0x46(%r10)
  0x00007fffe12684dd: jne     0x7fffe12684f6
  0x00007fffe12684df: movabs  $0x0,%rax
  0x00007fffe12684e9: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12684ef: jne     0x7fffe12684f6
  0x00007fffe12684f1: or      $0x1,%eax
  0x00007fffe12684f4: jmp     0x7fffe1268505
  0x00007fffe12684f6: test    $0x0,%eax
  0x00007fffe12684fb: jmp     0x7fffe1268505
  0x00007fffe12684fd: mov     (%rax),%r10
  0x00007fffe1268500: lock cmpxchg %r10,(%r11)
  0x00007fffe1268505: je      0x7fffe1267db6
  ;; B93: #	B46 &lt;- B92  Freq: 9.99969e-13

  0x00007fffe126850b: mov     (%rsp),%rdi
  0x00007fffe126850f: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)

  0x00007fffe1268514: movabs  $0x7ffff744655c,%r10
  0x00007fffe126851e: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@32 (line 107)

  0x00007fffe1268521: jmpq    0x7fffe1267db6
  ;; B94: #	B95 &lt;- B39  Freq: 6.75467e-07

  0x00007fffe1268526: mov     0x8(%rsp),%r10
  0x00007fffe126852b: mov     %r10,%r13
  ;; B95: #	N1688 &lt;- B94 B35  Freq: 1.01325e-06

  0x00007fffe126852e: mov     $0xfffffff6,%esi
  0x00007fffe1268533: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268538: mov     0x1c(%rsp),%eax
  0x00007fffe126853c: mov     %eax,(%rsp)
  0x00007fffe126853f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268544: mov     %r13,0x18(%rsp)
  0x00007fffe1268549: mov     %r13,0x20(%rsp)
  0x00007fffe126854e: mov     %r11,0x28(%rsp)
  0x00007fffe1268553: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=2968}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268558: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B96: #	N1688 &lt;- B37  Freq: 6.66629e-07

  0x00007fffe126855d: mov     $0xffffffde,%esi
  0x00007fffe1268562: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268567: mov     0x1c(%rsp),%eax
  0x00007fffe126856b: mov     %eax,0x4(%rsp)
  0x00007fffe126856f: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268574: pushq   0x38(%rsp)
  0x00007fffe1268579: popq    0x8(%rsp)
  0x00007fffe126857e: mov     %r13,0x18(%rsp)
  0x00007fffe1268583: mov     %r13,0x20(%rsp)
  0x00007fffe1268588: mov     %r11,0x30(%rsp)
  0x00007fffe126858d: mov     %r11,0x38(%rsp)
  0x00007fffe1268592: mov     %r9d,0x40(%rsp)
  0x00007fffe1268597: mov     %r10d,0x44(%rsp)
  0x00007fffe126859c: nop
  0x00007fffe126859d: nop
  0x00007fffe126859e: nop
  0x00007fffe126859f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [8]=Oop [24]=Oop [32]=Oop [48]=Oop [56]=Oop [64]=NarrowOop off=3044}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12685a4: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B97: #	N1688 &lt;- B6  Freq: 4.99999e-07

  0x00007fffe12685a9: mov     $0xffffff65,%esi
  0x00007fffe12685ae: mov     0x1c(%rsp),%ebp
  0x00007fffe12685b2: mov     %r13d,0x4(%rsp)
  0x00007fffe12685b7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [56]=Oop off=3068}
                                                ;*ifle
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@7 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12685bc: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B98: #	N1688 &lt;- B7  Freq: 4.99999e-07

  0x00007fffe12685c1: mov     $0xffffff65,%esi
  0x00007fffe12685c6: mov     0x1c(%rsp),%ebp
  0x00007fffe12685ca: mov     %r13d,0x10(%rsp)
  0x00007fffe12685cf: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [56]=Oop off=3092}
                                                ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12685d4: callq   0x7ffff736b4ea    ;*if_icmpgt
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@45 (line 214)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B99: #	N1688 &lt;- B4  Freq: 4.76837e-07

  0x00007fffe12685d9: mov     $0xffffff65,%esi
  0x00007fffe12685de: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12685e3: mov     0x1c(%rsp),%eax
  0x00007fffe12685e7: mov     %eax,0x8(%rsp)
  0x00007fffe12685eb: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12685f0: nop
  0x00007fffe12685f1: nop
  0x00007fffe12685f2: nop
  0x00007fffe12685f3: callq   0x7fffe1107820    ; OopMap{[8]=NarrowOop [56]=Oop off=3128}
                                                ;*ifeq
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@11 (line 103)
                                                ;   {runtime_call}
  0x00007fffe12685f8: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B100: #	N1688 &lt;- B10  Freq: 4.76835e-07

  0x00007fffe12685fd: mov     $0xffffff65,%esi
  0x00007fffe1268602: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268607: mov     0x1c(%rsp),%eax
  0x00007fffe126860b: mov     %eax,(%rsp)
  0x00007fffe126860e: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268613: mov     %r13d,0x10(%rsp)
  0x00007fffe1268618: mov     %ebx,0x14(%rsp)
  0x00007fffe126861c: mov     %r11d,0x18(%rsp)
  0x00007fffe1268621: nop
  0x00007fffe1268622: nop
  0x00007fffe1268623: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [20]=NarrowOop [24]=NarrowOop [56]=Oop off=3176}
                                                ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268628: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.nio.ByteBuffer::array@19 (line 1003)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B101: #	N1688 &lt;- B20  Freq: 4.76832e-07

  0x00007fffe126862d: mov     $0xffffff65,%esi
  0x00007fffe1268632: mov     0x1c(%rsp),%ebp
  0x00007fffe1268636: pushq   0x38(%rsp)
  0x00007fffe126863b: popq    0x8(%rsp)
  0x00007fffe1268640: mov     %r8,0x18(%rsp)
  0x00007fffe1268645: mov     %r8,0x20(%rsp)
  0x00007fffe126864a: mov     %r10d,0x4(%rsp)
  0x00007fffe126864f: mov     %r11d,0x30(%rsp)
  0x00007fffe1268654: mov     %r13d,0x38(%rsp)
  0x00007fffe1268659: mov     %r9d,0x3c(%rsp)
  0x00007fffe126865e: mov     %r14,0x40(%rsp)
  0x00007fffe1268663: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [8]=Oop [24]=Oop [32]=Oop [64]=Oop off=3240}
                                                ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268668: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B102: #	N1688 &lt;- B21  Freq: 4.76832e-07

  0x00007fffe126866d: mov     $0xffffff65,%esi
  0x00007fffe1268672: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268677: mov     0x1c(%rsp),%eax
  0x00007fffe126867b: mov     %eax,(%rsp)
  0x00007fffe126867e: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268683: pushq   0x38(%rsp)
  0x00007fffe1268688: popq    0x8(%rsp)
  0x00007fffe126868d: pushq   0x28(%rsp)
  0x00007fffe1268692: popq    0x10(%rsp)
  0x00007fffe1268697: mov     %r10d,0x30(%rsp)
  0x00007fffe126869c: mov     %r11d,0x34(%rsp)
  0x00007fffe12686a1: mov     %r13d,0x3c(%rsp)
  0x00007fffe12686a6: mov     %r14,0x40(%rsp)
  0x00007fffe12686ab: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [8]=Oop [16]=Oop [48]=NarrowOop [64]=Oop off=3312}
                                                ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12686b0: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B103: #	N1688 &lt;- B28  Freq: 4.76832e-07

  0x00007fffe12686b5: mov     $0xffffff65,%esi
  0x00007fffe12686ba: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12686bf: mov     0x1c(%rsp),%eax
  0x00007fffe12686c3: mov     %eax,(%rsp)
  0x00007fffe12686c6: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12686cb: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [40]=Oop [56]=Oop off=3344}
                                                ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12686d0: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B104: #	N1688 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe12686d5: mov     $0xfffffff6,%esi
  0x00007fffe12686da: mov     0x38(%rsp),%rbp
  0x00007fffe12686df: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=3364}
                                                ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ;   {runtime_call}
  0x00007fffe12686e4: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)
                                                ;   {runtime_call}
  ;; B105: #	N1688 &lt;- B5  Freq: 1.01328e-06

  0x00007fffe12686e9: mov     $0xfffffff6,%esi
  0x00007fffe12686ee: mov     0x1c(%rsp),%ebp
  0x00007fffe12686f2: nop
  0x00007fffe12686f3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop off=3384}
                                                ;*invokevirtual position
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@4 (line 290)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12686f8: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B106: #	N1688 &lt;- B11  Freq: 1.01327e-06

  0x00007fffe12686fd: mov     $0xfffffff6,%esi
  0x00007fffe1268702: mov     0x1c(%rsp),%ebp
  0x00007fffe1268706: mov     %r10d,0x4(%rsp)
  0x00007fffe126870b: mov     %r11d,0x8(%rsp)
  0x00007fffe1268710: mov     %r13d,0xc(%rsp)
  0x00007fffe1268715: nop
  0x00007fffe1268716: nop
  0x00007fffe1268717: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop off=3420}
                                                ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe126871c: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B107: #	N1688 &lt;- B19  Freq: 1.01327e-06

  0x00007fffe1268721: mov     $0xfffffff6,%esi
  0x00007fffe1268726: mov     0x1c(%rsp),%ebp
  0x00007fffe126872a: mov     %r8,0x18(%rsp)
  0x00007fffe126872f: mov     %r8,0x20(%rsp)
  0x00007fffe1268734: mov     %r14,0x28(%rsp)
  0x00007fffe1268739: nop
  0x00007fffe126873a: nop
  0x00007fffe126873b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=3456}
                                                ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268740: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B108: #	N1688 &lt;- B29  Freq: 1.01327e-06

  0x00007fffe1268745: mov     $0xfffffff6,%esi
  0x00007fffe126874a: mov     0x1c(%rsp),%ebp
  0x00007fffe126874e: nop
  0x00007fffe126874f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [40]=Oop [56]=Oop off=3476}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268754: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B109: #	N1688 &lt;- B44  Freq: 1.01325e-06

  0x00007fffe1268759: mov     $0xfffffff6,%esi
  0x00007fffe126875e: nop
  0x00007fffe126875f: callq   0x7fffe1107820    ; OopMap{[28]=NarrowOop off=3492}
                                                ;*invokevirtual clear
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268764: callq   0x7ffff736b4ea    ;*invokevirtual clear
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@127 (line 224)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B110: #	N1688 &lt;- B36  Freq: 6.75482e-07

  0x00007fffe1268769: mov     $0xfffffff6,%esi
  0x00007fffe126876e: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe1268773: mov     0x1c(%rsp),%eax
  0x00007fffe1268777: mov     %eax,0x4(%rsp)
  0x00007fffe126877b: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268780: mov     %r13,0x18(%rsp)
  0x00007fffe1268785: mov     %r13,0x20(%rsp)
  0x00007fffe126878a: mov     %r11,0x28(%rsp)
  0x00007fffe126878f: mov     %r10d,0x30(%rsp)
  0x00007fffe1268794: nop
  0x00007fffe1268795: nop
  0x00007fffe1268796: nop
  0x00007fffe1268797: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [4]=NarrowOop [24]=Oop [32]=Oop [40]=Oop [56]=Oop off=3548}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe126879c: callq   0x7ffff736b4ea    ;*synchronization entry
                                                ; - java.nio.ByteBuffer::array@-1 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B111: #	N1688 &lt;- B9  Freq: 4.76835e-07

  0x00007fffe12687a1: mov     $0xffffff65,%esi
  0x00007fffe12687a6: mov     0x1c(%rsp),%ebp
  0x00007fffe12687aa: mov     %r13d,0x4(%rsp)
  0x00007fffe12687af: mov     %ebx,0x10(%rsp)
  0x00007fffe12687b3: mov     %r11d,0x14(%rsp)
  0x00007fffe12687b8: mov     %r10d,0x18(%rsp)
  0x00007fffe12687bd: nop
  0x00007fffe12687be: nop
  0x00007fffe12687bf: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [16]=NarrowOop [20]=NarrowOop [24]=NarrowOop [56]=Oop off=3588}
                                                ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12687c4: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.nio.ByteBuffer::array@4 (line 1001)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@107 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B112: #	N1688 &lt;- B15  Freq: 4.76834e-07

  0x00007fffe12687c9: mov     $0xffffff65,%esi
  0x00007fffe12687ce: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12687d3: mov     0x1c(%rsp),%eax
  0x00007fffe12687d7: mov     %eax,(%rsp)
  0x00007fffe12687da: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe12687df: mov     %r10d,0x18(%rsp)
  0x00007fffe12687e4: mov     %r11d,0x1c(%rsp)
  0x00007fffe12687e9: mov     %r13d,0x20(%rsp)
  0x00007fffe12687ee: mov     %r8,0x28(%rsp)
  0x00007fffe12687f3: mov     %r8,0x30(%rsp)
  0x00007fffe12687f8: nop
  0x00007fffe12687f9: nop
  0x00007fffe12687fa: nop
  0x00007fffe12687fb: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=NarrowOop [24]=NarrowOop [40]=Oop [48]=Oop [56]=Oop off=3648}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268800: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B113: #	B115 B114 &lt;- B124  Freq: 6.66632e-11

  0x00007fffe1268805: mov     %rax,%rbx
  0x00007fffe1268808: mov     0x1c(%rsp),%r11d
  0x00007fffe126880d: mov     $0x7,%r10d
  0x00007fffe1268813: and     (%r11),%r10
  0x00007fffe1268816: cmp     $0x5,%r10
  0x00007fffe126881a: jne     0x7fffe126882c    ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@38 (line 107)

  ;; B114: #	N1688 &lt;- B116 B115 B113  Freq: 6.66632e-11

  0x00007fffe126881c: mov     %rbx,%rsi
  0x00007fffe126881f: add     $0x80,%rsp
  0x00007fffe1268826: pop     %rbp
  0x00007fffe1268827: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B115: #	B114 B116 &lt;- B113  Freq: 6.66632e-17

  0x00007fffe126882c: mov     (%rsp),%r11
  0x00007fffe1268830: lea     0x60(%rsp),%rax
  0x00007fffe1268835: cmpq    $0x0,(%rax)
  0x00007fffe126883c: je      0x7fffe12688b6
  0x00007fffe1268842: mov     (%r11),%r10
  0x00007fffe1268845: test    $0x2,%r10
  0x00007fffe126884c: je      0x7fffe12688ae
  0x00007fffe126884e: mov     0x16(%r10),%rax
  0x00007fffe1268852: xor     %r15,%rax
  0x00007fffe1268855: or      0x26(%r10),%rax
  0x00007fffe1268859: jne     0x7fffe12688b6
  0x00007fffe126885b: mov     0x36(%r10),%rax
  0x00007fffe126885f: or      0x3e(%r10),%rax
  0x00007fffe1268863: jne     0x7fffe126886f
  0x00007fffe1268865: movq    $0x0,0x16(%r10)
  0x00007fffe126886d: jmp     0x7fffe12688b6
  0x00007fffe126886f: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268877: je      0x7fffe12688a2
  0x00007fffe1268879: movq    $0x0,0x16(%r10)
  0x00007fffe1268881: lock addl $0x0,(%rsp)
  0x00007fffe1268886: cmpq    $0x0,0x46(%r10)
  0x00007fffe126888e: jne     0x7fffe12688a7
  0x00007fffe1268890: movabs  $0x0,%rax
  0x00007fffe126889a: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12688a0: jne     0x7fffe12688a7
  0x00007fffe12688a2: or      $0x1,%eax
  0x00007fffe12688a5: jmp     0x7fffe12688b6
  0x00007fffe12688a7: test    $0x0,%eax
  0x00007fffe12688ac: jmp     0x7fffe12688b6
  0x00007fffe12688ae: mov     (%rax),%r10
  0x00007fffe12688b1: lock cmpxchg %r10,(%r11)
  0x00007fffe12688b6: je      0x7fffe126881c
  ;; B116: #	B114 &lt;- B115  Freq: 6.66632e-23

  0x00007fffe12688bc: mov     (%rsp),%rdi
  0x00007fffe12688c0: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@6 (line 102)

  0x00007fffe12688c5: movabs  $0x7ffff744655c,%r10
  0x00007fffe12688cf: callq   %r10              ;*monitorexit
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@38 (line 107)

  0x00007fffe12688d2: jmpq    0x7fffe126881c    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B117: #	N1688 &lt;- B124  Freq: 6.66632e-11

  0x00007fffe12688d7: mov     $0xffffffbd,%esi
  0x00007fffe12688dc: mov     %rax,0x10(%rsp)
  0x00007fffe12688e1: nop
  0x00007fffe12688e2: nop
  0x00007fffe12688e3: callq   0x7fffe1107820    ; OopMap{[16]=Oop [28]=NarrowOop [56]=Oop off=3880}
                                                ;*astore
                                                ; - java.io.PrintStream::write@50 (line 485)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe12688e8: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B118: #	N1688 &lt;- B124  Freq: 6.66632e-11

  0x00007fffe12688ed: mov     $0xffffffbd,%esi
  0x00007fffe12688f2: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe12688f7: mov     0x1c(%rsp),%eax
  0x00007fffe12688fb: mov     %eax,(%rsp)
  0x00007fffe12688fe: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe1268903: mov     %rax,0x18(%rsp)
  0x00007fffe1268908: nop
  0x00007fffe1268909: nop
  0x00007fffe126890a: nop
  0x00007fffe126890b: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [16]=Oop [24]=Oop [56]=Oop off=3920}
                                                ;*astore
                                                ; - java.io.PrintStream::write@61 (line 488)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  0x00007fffe1268910: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B119: #	B129 B120 &lt;- B74  Freq: 3.99995e-11

  0x00007fffe1268915: mov     %rax,%rbx
  0x00007fffe1268918: mov     $0x7,%r10d
  0x00007fffe126891e: mov     0x10(%rsp),%r11
  0x00007fffe1268923: and     (%r11),%r10
  0x00007fffe1268926: cmp     $0x5,%r10
  0x00007fffe126892a: jne     0x7fffe1268ac8    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B120: #	B123 &lt;- B130 B129 B119  Freq: 3.99995e-11

  0x00007fffe1268930: mov     %rbx,%rbp
  0x00007fffe1268933: jmp     0x7fffe1268951    ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B121: #	B127 B122 &lt;- B38  Freq: 6.66628e-06

  0x00007fffe1268935: mov     %rax,%rbx
  0x00007fffe1268938: mov     $0x7,%r10d
  0x00007fffe126893e: mov     %rbp,%r11
  0x00007fffe1268941: and     (%r11),%r10
  0x00007fffe1268944: cmp     $0x5,%r10
  0x00007fffe1268948: jne     0x7fffe1268a22    ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  ;; B122: #	B123 &lt;- B128 B127 B121  Freq: 6.66628e-06

  0x00007fffe126894e: mov     %rbx,%rbp
  ;; B123: #	B125 B124 &lt;- B120 B122  Freq: 6.66632e-06

  0x00007fffe1268951: mov     $0x7,%r10d
  0x00007fffe1268957: mov     0x8(%rsp),%r13
  0x00007fffe126895c: and     0x0(%r13),%r10
  0x00007fffe1268960: cmp     $0x5,%r10
  0x00007fffe1268964: jne     0x7fffe1268978
  ;; B124: #	B113 B118 B117 &lt;- B126 B125 B123  Freq: 6.66632e-06

  0x00007fffe1268966: pushq   0x8(%rsp)
  0x00007fffe126896b: popq    0x10(%rsp)        ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268970: mov     %rbx,%rsi
  0x00007fffe1268973: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [0]=Oop [16]=Oop [28]=NarrowOop [56]=Oop off=4024}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)
                                                ;   {runtime_call}
  ;; B125: #	B124 B126 &lt;- B123  Freq: 6.66632e-12

  0x00007fffe1268978: lea     0x68(%rsp),%rax
  0x00007fffe126897d: cmpq    $0x0,(%rax)
  0x00007fffe1268984: je      0x7fffe1268a00
  0x00007fffe126898a: mov     0x0(%r13),%r10
  0x00007fffe126898e: test    $0x2,%r10
  0x00007fffe1268995: je      0x7fffe12689f7
  0x00007fffe1268997: mov     0x16(%r10),%rax
  0x00007fffe126899b: xor     %r15,%rax
  0x00007fffe126899e: or      0x26(%r10),%rax
  0x00007fffe12689a2: jne     0x7fffe1268a00
  0x00007fffe12689a4: mov     0x36(%r10),%rax
  0x00007fffe12689a8: or      0x3e(%r10),%rax
  0x00007fffe12689ac: jne     0x7fffe12689b8
  0x00007fffe12689ae: movq    $0x0,0x16(%r10)
  0x00007fffe12689b6: jmp     0x7fffe1268a00
  0x00007fffe12689b8: cmpq    $0x0,0x46(%r10)
  0x00007fffe12689c0: je      0x7fffe12689eb
  0x00007fffe12689c2: movq    $0x0,0x16(%r10)
  0x00007fffe12689ca: lock addl $0x0,(%rsp)
  0x00007fffe12689cf: cmpq    $0x0,0x46(%r10)
  0x00007fffe12689d7: jne     0x7fffe12689f0
  0x00007fffe12689d9: movabs  $0x0,%rax
  0x00007fffe12689e3: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12689e9: jne     0x7fffe12689f0
  0x00007fffe12689eb: or      $0x1,%eax
  0x00007fffe12689ee: jmp     0x7fffe1268a00
  0x00007fffe12689f0: test    $0x0,%eax
  0x00007fffe12689f5: jmp     0x7fffe1268a00
  0x00007fffe12689f7: mov     (%rax),%r10
  0x00007fffe12689fa: lock cmpxchg %r10,0x0(%r13)
  0x00007fffe1268a00: je      0x7fffe1268966
  ;; B126: #	B124 &lt;- B125  Freq: 6.66632e-18

  0x00007fffe1268a06: mov     0x8(%rsp),%rdi
  0x00007fffe1268a0b: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268a10: movabs  $0x7ffff744655c,%r10
  0x00007fffe1268a1a: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268a1d: jmpq    0x7fffe1268966
  ;; B127: #	B122 B128 &lt;- B121  Freq: 6.66628e-12

  0x00007fffe1268a22: lea     0x70(%rsp),%rax
  0x00007fffe1268a27: cmpq    $0x0,(%rax)
  0x00007fffe1268a2e: je      0x7fffe1268aa8
  0x00007fffe1268a34: mov     (%r11),%r10
  0x00007fffe1268a37: test    $0x2,%r10
  0x00007fffe1268a3e: je      0x7fffe1268aa0
  0x00007fffe1268a40: mov     0x16(%r10),%rax
  0x00007fffe1268a44: xor     %r15,%rax
  0x00007fffe1268a47: or      0x26(%r10),%rax
  0x00007fffe1268a4b: jne     0x7fffe1268aa8
  0x00007fffe1268a4d: mov     0x36(%r10),%rax
  0x00007fffe1268a51: or      0x3e(%r10),%rax
  0x00007fffe1268a55: jne     0x7fffe1268a61
  0x00007fffe1268a57: movq    $0x0,0x16(%r10)
  0x00007fffe1268a5f: jmp     0x7fffe1268aa8
  0x00007fffe1268a61: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268a69: je      0x7fffe1268a94
  0x00007fffe1268a6b: movq    $0x0,0x16(%r10)
  0x00007fffe1268a73: lock addl $0x0,(%rsp)
  0x00007fffe1268a78: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268a80: jne     0x7fffe1268a99
  0x00007fffe1268a82: movabs  $0x0,%rax
  0x00007fffe1268a8c: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1268a92: jne     0x7fffe1268a99
  0x00007fffe1268a94: or      $0x1,%eax
  0x00007fffe1268a97: jmp     0x7fffe1268aa8
  0x00007fffe1268a99: test    $0x0,%eax
  0x00007fffe1268a9e: jmp     0x7fffe1268aa8
  0x00007fffe1268aa0: mov     (%rax),%r10
  0x00007fffe1268aa3: lock cmpxchg %r10,(%r11)
  0x00007fffe1268aa8: je      0x7fffe126894e
  ;; B128: #	B122 &lt;- B127  Freq: 6.66628e-18

  0x00007fffe1268aae: mov     %r11,%rdi
  0x00007fffe1268ab1: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268ab6: movabs  $0x7ffff744655c,%r10
  0x00007fffe1268ac0: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268ac3: jmpq    0x7fffe126894e
  ;; B129: #	B120 B130 &lt;- B119  Freq: 3.99995e-17

  0x00007fffe1268ac8: lea     0x70(%rsp),%rax
  0x00007fffe1268acd: cmpq    $0x0,(%rax)
  0x00007fffe1268ad4: je      0x7fffe1268b4e
  0x00007fffe1268ada: mov     (%r11),%r10
  0x00007fffe1268add: test    $0x2,%r10
  0x00007fffe1268ae4: je      0x7fffe1268b46
  0x00007fffe1268ae6: mov     0x16(%r10),%rax
  0x00007fffe1268aea: xor     %r15,%rax
  0x00007fffe1268aed: or      0x26(%r10),%rax
  0x00007fffe1268af1: jne     0x7fffe1268b4e
  0x00007fffe1268af3: mov     0x36(%r10),%rax
  0x00007fffe1268af7: or      0x3e(%r10),%rax
  0x00007fffe1268afb: jne     0x7fffe1268b07
  0x00007fffe1268afd: movq    $0x0,0x16(%r10)
  0x00007fffe1268b05: jmp     0x7fffe1268b4e
  0x00007fffe1268b07: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268b0f: je      0x7fffe1268b3a
  0x00007fffe1268b11: movq    $0x0,0x16(%r10)
  0x00007fffe1268b19: lock addl $0x0,(%rsp)
  0x00007fffe1268b1e: cmpq    $0x0,0x46(%r10)
  0x00007fffe1268b26: jne     0x7fffe1268b3f
  0x00007fffe1268b28: movabs  $0x0,%rax
  0x00007fffe1268b32: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1268b38: jne     0x7fffe1268b3f
  0x00007fffe1268b3a: or      $0x1,%eax
  0x00007fffe1268b3d: jmp     0x7fffe1268b4e
  0x00007fffe1268b3f: test    $0x0,%eax
  0x00007fffe1268b44: jmp     0x7fffe1268b4e
  0x00007fffe1268b46: mov     (%rax),%r10
  0x00007fffe1268b49: lock cmpxchg %r10,(%r11)
  0x00007fffe1268b4e: je      0x7fffe1268930
  ;; B130: #	B120 &lt;- B129  Freq: 3.99995e-23

  0x00007fffe1268b54: mov     %r11,%rdi
  0x00007fffe1268b57: lea     0x70(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268b5c: movabs  $0x7ffff744655c,%r10
  0x00007fffe1268b66: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ; - sun.nio.cs.StreamEncoder::writeBytes@120 (line 221)
                                                ; - sun.nio.cs.StreamEncoder::implFlushBuffer@11 (line 291)
                                                ; - sun.nio.cs.StreamEncoder::flushBuffer@15 (line 104)

  0x00007fffe1268b69: jmpq    0x7fffe1268930
  0x00007fffe1268b6e: hlt
  0x00007fffe1268b6f: hlt
  0x00007fffe1268b70: hlt
  0x00007fffe1268b71: hlt
  0x00007fffe1268b72: hlt
  0x00007fffe1268b73: hlt
  0x00007fffe1268b74: hlt
  0x00007fffe1268b75: hlt
  0x00007fffe1268b76: hlt
  0x00007fffe1268b77: hlt
  0x00007fffe1268b78: hlt
  0x00007fffe1268b79: hlt
  0x00007fffe1268b7a: hlt
  0x00007fffe1268b7b: hlt
  0x00007fffe1268b7c: hlt
  0x00007fffe1268b7d: hlt
  0x00007fffe1268b7e: hlt
  0x00007fffe1268b7f: hlt
[Stub Code]
  0x00007fffe1268b80: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe1268b8a: jmpq    0x7fffe1268b8a    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1268b8f: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe1268b94: callq   0x7fffe1268b99
  0x00007fffe1268b99: subq    $0x5,(%rsp)
  0x00007fffe1268b9e: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1268ba3: hlt
  0x00007fffe1268ba4: hlt
  0x00007fffe1268ba5: hlt
  0x00007fffe1268ba6: hlt
  0x00007fffe1268ba7: hlt
<nmethod compile_id='98' compiler='C2' level='4' entry='0x00007fffe12679c0' size='9520' address='0x00007fffe12677d0' relocation_offset='304' insts_offset='496' stub_offset='5040' scopes_data_offset='5224' scopes_pcs_offset='7160' dependencies_offset='9336' handler_table_offset='9344' nul_chk_table_offset='9440' method='sun/nio/cs/StreamEncoder flushBuffer ()V' bytes='42' count='56830' iicount='56830' stamp='119.643'/>
<make_not_entrant thread='140736955627264' compile_id='51' compiler='C1' level='2' stamp='119.643'/>
<writer thread='140737327351552'/>
<task_queued compile_id='104' method='java/lang/Integer toString (I)Ljava/lang/String;' bytes='48' count='35217' iicount='35217' stamp='119.643' comment='tiered' hot_count='35217'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1252d50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1252ea0 Code size: 0x000000f8
[Entry Point]
[Constants]
  # {method} {0x00007ffff4aa8338} &apos;indexOf&apos; &apos;(I)I&apos; in &apos;java/lang/String&apos;
  # this:     rsi:rsi   = &apos;java/lang/String&apos;
  # parm0:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  ;; N112: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1252ea0: mov     0x8(%rsi),%r10d
  0x00007fffe1252ea4: shl     $0x3,%r10
  0x00007fffe1252ea8: cmp     %r10,%rax
  0x00007fffe1252eab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1252eb1: nop
  0x00007fffe1252eb2: nop
  0x00007fffe1252eb3: nop
  0x00007fffe1252eb4: nop
  0x00007fffe1252eb5: nop
  0x00007fffe1252eb6: nop
  0x00007fffe1252eb7: nop
  0x00007fffe1252eb8: nop
  0x00007fffe1252eb9: nop
  0x00007fffe1252eba: nop
  0x00007fffe1252ebb: nop
  0x00007fffe1252ebc: nop
  0x00007fffe1252ebd: nop
  0x00007fffe1252ebe: nop
  0x00007fffe1252ebf: nop
[Verified Entry Point]
  ;; B1: #	B13 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1252ec0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1252ec7: push    %rbp
  0x00007fffe1252ec8: sub     $0x20,%rsp        ;*synchronization entry
                                                ; - java.lang.String::indexOf@-1 (line 1502)

  0x00007fffe1252ecc: mov     %rsi,%r10
  0x00007fffe1252ecf: mov     0xc(%rsi),%r11d   ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  0x00007fffe1252ed3: mov     0xc(%r11),%ebp    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; implicit exception: dispatches to 0x00007fffe1252f55
  ;; B2: #	B9 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe1252ed7: mov     $0xffffffff,%eax
  0x00007fffe1252edc: test    %ebp,%ebp
  0x00007fffe1252ede: jle     0x7fffe1252f13    ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1548)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  ;; B3: #	B12 B4 &lt;- B2  Freq: 0.999295

  0x00007fffe1252ee0: cmp     $0x10000,%edx
  0x00007fffe1252ee6: jnl     0x7fffe1252f3d    ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  ;; B4: #	B11 B5 &lt;- B3  Freq: 0.999295

  0x00007fffe1252ee8: test    %ebp,%ebp
  0x00007fffe1252eea: jbe     0x7fffe1252f24
  ;; B5: #	B11 B6 &lt;- B4  Freq: 0.999294

  0x00007fffe1252eec: mov     %ebp,%r8d
  0x00007fffe1252eef: decl    %r8d
  0x00007fffe1252ef2: cmp     %ebp,%r8d
  0x00007fffe1252ef5: jnb     0x7fffe1252f24
  ;; B6: #	B7 &lt;- B5  Freq: 0.999293

  0x00007fffe1252ef7: xor     %r10d,%r10d
  0x00007fffe1252efa: nop
  0x00007fffe1252efb: nop
  0x00007fffe1252efc: nop
  0x00007fffe1252efd: nop
  0x00007fffe1252efe: nop
  0x00007fffe1252eff: nop                       ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  ;; B7: #	B10 B8 &lt;- B6 B8 	Loop: B7-B8 inner  Freq: 2.90129

  0x00007fffe1252f00: movzwl  0x10(%r11,%r10,2),%r8d  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  0x00007fffe1252f06: cmp     %edx,%r8d
  0x00007fffe1252f09: je      0x7fffe1252f1f    ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  ;; B8: #	B7 B9 &lt;- B7  Freq: 2.90076

  0x00007fffe1252f0b: incl    %r10d             ;*iinc
                                                ; - java.lang.String::indexOf@55 (line 1557)
                                                ; - java.lang.String::indexOf@3 (line 1502)

  0x00007fffe1252f0e: cmp     %ebp,%r10d
  0x00007fffe1252f11: jl      0x7fffe1252f00    ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1502)

  ;; B9: #	N112 &lt;- B2 B10 B8  Freq: 0.999996

  0x00007fffe1252f13: add     $0x20,%rsp
  0x00007fffe1252f17: pop     %rbp
  0x00007fffe1252f18: test    %eax,0x16da80e2(%rip)  ;   {poll_return}
  0x00007fffe1252f1e: retq
  ;; B10: #	B9 &lt;- B7  Freq: 0.000536603

  0x00007fffe1252f1f: mov     %r10d,%eax
  0x00007fffe1252f22: jmp     0x7fffe1252f13
  ;; B11: #	N112 &lt;- B5 B4  Freq: 2.01186e-06

  0x00007fffe1252f24: mov     $0xffffff86,%esi
  0x00007fffe1252f29: mov     %edx,(%rsp)
  0x00007fffe1252f2c: mov     %r11d,0x4(%rsp)
  0x00007fffe1252f31: nop
  0x00007fffe1252f32: nop
  0x00007fffe1252f33: callq   0x7fffe1107820    ; OopMap{[4]=NarrowOop off=152}
                                                ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {runtime_call}
  0x00007fffe1252f38: callq   0x7ffff736b4ea    ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {runtime_call}
  ;; B12: #	N112 &lt;- B3  Freq: 4.76501e-07

  0x00007fffe1252f3d: mov     $0xffffff65,%esi
  0x00007fffe1252f42: mov     %edx,0x4(%rsp)
  0x00007fffe1252f46: mov     %r10,0x8(%rsp)
  0x00007fffe1252f4b: callq   0x7fffe1107820    ; OopMap{[8]=Oop off=176}
                                                ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {runtime_call}
  0x00007fffe1252f50: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.lang.String::indexOf@25 (line 1553)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {runtime_call}
  ;; B13: #	N112 &lt;- B1  Freq: 1.01328e-06

  0x00007fffe1252f55: mov     $0xfffffff6,%esi
  0x00007fffe1252f5a: nop
  0x00007fffe1252f5b: callq   0x7fffe1107820    ; OopMap{off=192}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {runtime_call}
  0x00007fffe1252f60: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ;   {runtime_call}
  0x00007fffe1252f65: hlt
  0x00007fffe1252f66: hlt
  0x00007fffe1252f67: hlt
  0x00007fffe1252f68: hlt
  0x00007fffe1252f69: hlt
  0x00007fffe1252f6a: hlt
  0x00007fffe1252f6b: hlt
  0x00007fffe1252f6c: hlt
  0x00007fffe1252f6d: hlt
  0x00007fffe1252f6e: hlt
  0x00007fffe1252f6f: hlt
  0x00007fffe1252f70: hlt
  0x00007fffe1252f71: hlt
  0x00007fffe1252f72: hlt
  0x00007fffe1252f73: hlt
  0x00007fffe1252f74: hlt
  0x00007fffe1252f75: hlt
  0x00007fffe1252f76: hlt
  0x00007fffe1252f77: hlt
  0x00007fffe1252f78: hlt
  0x00007fffe1252f79: hlt
  0x00007fffe1252f7a: hlt
  0x00007fffe1252f7b: hlt
  0x00007fffe1252f7c: hlt
  0x00007fffe1252f7d: hlt
  0x00007fffe1252f7e: hlt
  0x00007fffe1252f7f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1252f80: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe1252f85: callq   0x7fffe1252f8a
  0x00007fffe1252f8a: subq    $0x5,(%rsp)
  0x00007fffe1252f8f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1252f94: hlt
  0x00007fffe1252f95: hlt
  0x00007fffe1252f96: hlt
  0x00007fffe1252f97: hlt
<nmethod compile_id='101' compiler='C2' level='4' entry='0x00007fffe1252ea0' size='1056' address='0x00007fffe1252d50' relocation_offset='304' insts_offset='336' stub_offset='560' scopes_data_offset='600' scopes_pcs_offset='744' dependencies_offset='1032' nul_chk_table_offset='1040' method='java/lang/String indexOf (I)I' bytes='7' count='36438' iicount='36438' stamp='119.659'/>
<make_not_entrant thread='140736956679936' compile_id='62' compiler='C1' level='2' stamp='119.659'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1266150:
Code:
Argument 0 is unknown.RIP: 0x7fffe1266480 Code size: 0x00000c80
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c24010} &apos;newLine&apos; &apos;()V&apos; in &apos;java/io/PrintStream&apos;
  #           [sp+0xa0]  (sp of caller)
  ;;  block B23 [0, 0]

  0x00007fffe1266480: mov     0x8(%rsi),%r10d
  0x00007fffe1266484: shl     $0x3,%r10
  0x00007fffe1266488: cmp     %rax,%r10
  0x00007fffe126648b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1266491: nop
  0x00007fffe1266492: nop
  0x00007fffe1266493: nop
  0x00007fffe1266494: nop
  0x00007fffe1266495: nop
  0x00007fffe1266496: nop
  0x00007fffe1266497: nop
  0x00007fffe1266498: nop
  0x00007fffe1266499: nop
  0x00007fffe126649a: nop
  0x00007fffe126649b: nop
  0x00007fffe126649c: nop
  0x00007fffe126649d: nop
  0x00007fffe126649e: nop
  0x00007fffe126649f: nop
[Verified Entry Point]
  0x00007fffe12664a0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12664a7: push    %rbp
  0x00007fffe12664a8: sub     $0x90,%rsp
  0x00007fffe12664af: mov     %rsi,0x68(%rsp)
  0x00007fffe12664b4: movabs  $0x7ffff4d712f8,%rax
  0x00007fffe12664be: mov     0x8(%rax),%edx
  0x00007fffe12664c1: add     $0x8,%edx
  0x00007fffe12664c4: mov     %edx,0x8(%rax)
  0x00007fffe12664c7: movabs  $0x7ffff4c24010,%rax  ;   {metadata({method} {0x00007ffff4c24010} &apos;newLine&apos; &apos;()V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe12664d1: and     $0x3ff8,%edx
  0x00007fffe12664d7: cmp     $0x0,%edx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0395480]
  0x00007fffe12664da: je      0x7fffe1266bc3    ;*aload_0
                                                ; - java.io.PrintStream::newLine@0 (line 542)

  ;;  block B24 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe12664e0: lea     0x78(%rsp),%rdx
  0x00007fffe12664e5: mov     %rsi,0x8(%rdx)
  0x00007fffe12664e9: mov     (%rsi),%rax
  0x00007fffe12664ec: mov     %rax,%rcx
  0x00007fffe12664ef: and     $0x7,%rcx
  0x00007fffe12664f3: cmp     $0x5,%rcx
  0x00007fffe12664f7: jne     0x7fffe126657e
  0x00007fffe12664fd: mov     0x8(%rsi),%ecx
  0x00007fffe1266500: shl     $0x3,%rcx
  0x00007fffe1266504: mov     0xb0(%rcx),%rcx
  0x00007fffe126650b: or      %r15,%rcx
  0x00007fffe126650e: xor     %rax,%rcx
  0x00007fffe1266511: and     $0xffffffffffffff87,%rcx
  0x00007fffe1266515: je      0x7fffe12665a6
  0x00007fffe126651b: test    $0x7,%rcx
  0x00007fffe1266522: jne     0x7fffe126656b
  0x00007fffe1266524: test    $0x300,%rcx
  0x00007fffe126652b: jne     0x7fffe126654a
  0x00007fffe126652d: and     $0x37f,%rax
  0x00007fffe1266534: mov     %rax,%rcx
  0x00007fffe1266537: or      %r15,%rcx
  0x00007fffe126653a: lock cmpxchg %rcx,(%rsi)
  0x00007fffe126653f: jne     0x7fffe1266bda
  0x00007fffe1266545: jmpq    0x7fffe12665a6
  0x00007fffe126654a: mov     0x8(%rsi),%ecx
  0x00007fffe126654d: shl     $0x3,%rcx
  0x00007fffe1266551: mov     0xb0(%rcx),%rcx
  0x00007fffe1266558: or      %r15,%rcx
  0x00007fffe126655b: lock cmpxchg %rcx,(%rsi)
  0x00007fffe1266560: jne     0x7fffe1266bda
  0x00007fffe1266566: jmpq    0x7fffe12665a6
  0x00007fffe126656b: mov     0x8(%rsi),%ecx
  0x00007fffe126656e: shl     $0x3,%rcx
  0x00007fffe1266572: mov     0xb0(%rcx),%rcx
  0x00007fffe1266579: lock cmpxchg %rcx,(%rsi)
  0x00007fffe126657e: mov     (%rsi),%rax
  0x00007fffe1266581: or      $0x1,%rax
  0x00007fffe1266585: mov     %rax,(%rdx)
  0x00007fffe1266588: lock cmpxchg %rdx,(%rsi)
  0x00007fffe126658d: je      0x7fffe12665a6
  0x00007fffe1266593: sub     %rsp,%rax
  0x00007fffe1266596: and     $0xfffffffffffff007,%rax
  0x00007fffe126659d: mov     %rax,(%rdx)
  0x00007fffe12665a0: jne     0x7fffe1266bda    ;*monitorenter
                                                ; - java.io.PrintStream::newLine@3 (line 542)

  0x00007fffe12665a6: mov     0xc(%rsi),%edx
  0x00007fffe12665a9: push    %r10
  0x00007fffe12665ab: cmp     0x16af362e(%rip),%r12  ;   {external_word}
  0x00007fffe12665b2: je      0x7fffe126662f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12665b8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12665bd: sub     $0x80,%rsp
  0x00007fffe12665c4: mov     %rax,0x78(%rsp)
  0x00007fffe12665c9: mov     %rcx,0x70(%rsp)
  0x00007fffe12665ce: mov     %rdx,0x68(%rsp)
  0x00007fffe12665d3: mov     %rbx,0x60(%rsp)
  0x00007fffe12665d8: mov     %rbp,0x50(%rsp)
  0x00007fffe12665dd: mov     %rsi,0x48(%rsp)
  0x00007fffe12665e2: mov     %rdi,0x40(%rsp)
  0x00007fffe12665e7: mov     %r8,0x38(%rsp)
  0x00007fffe12665ec: mov     %r9,0x30(%rsp)
  0x00007fffe12665f1: mov     %r10,0x28(%rsp)
  0x00007fffe12665f6: mov     %r11,0x20(%rsp)
  0x00007fffe12665fb: mov     %r12,0x18(%rsp)
  0x00007fffe1266600: mov     %r13,0x10(%rsp)
  0x00007fffe1266605: mov     %r14,0x8(%rsp)
  0x00007fffe126660a: mov     %r15,(%rsp)
  0x00007fffe126660e: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1266618: movabs  $0x7fffe12665b8,%rsi  ;   {internal_word}
  0x00007fffe1266622: mov     %rsp,%rdx
  0x00007fffe1266625: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266629: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126662e: hlt
  0x00007fffe126662f: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  0x00007fffe1266631: cmp     $0x0,%rdx
  ;;   40 branch [EQ] [B13] 
  0x00007fffe1266635: je      0x7fffe1266aac    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  ;;  block B14 [17, 33]

  0x00007fffe126663b: mov     0x18(%rsi),%edi
  0x00007fffe126663e: push    %r10
  0x00007fffe1266640: cmp     0x16af3599(%rip),%r12  ;   {external_word}
  0x00007fffe1266647: je      0x7fffe12666c4
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe126664d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266652: sub     $0x80,%rsp
  0x00007fffe1266659: mov     %rax,0x78(%rsp)
  0x00007fffe126665e: mov     %rcx,0x70(%rsp)
  0x00007fffe1266663: mov     %rdx,0x68(%rsp)
  0x00007fffe1266668: mov     %rbx,0x60(%rsp)
  0x00007fffe126666d: mov     %rbp,0x50(%rsp)
  0x00007fffe1266672: mov     %rsi,0x48(%rsp)
  0x00007fffe1266677: mov     %rdi,0x40(%rsp)
  0x00007fffe126667c: mov     %r8,0x38(%rsp)
  0x00007fffe1266681: mov     %r9,0x30(%rsp)
  0x00007fffe1266686: mov     %r10,0x28(%rsp)
  0x00007fffe126668b: mov     %r11,0x20(%rsp)
  0x00007fffe1266690: mov     %r12,0x18(%rsp)
  0x00007fffe1266695: mov     %r13,0x10(%rsp)
  0x00007fffe126669a: mov     %r14,0x8(%rsp)
  0x00007fffe126669f: mov     %r15,(%rsp)
  0x00007fffe12666a3: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12666ad: movabs  $0x7fffe126664d,%rsi  ;   {internal_word}
  0x00007fffe12666b7: mov     %rsp,%rdx
  0x00007fffe12666ba: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12666be: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12666c3: hlt
  0x00007fffe12666c4: pop     %r10              ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@9 (line 544)

  0x00007fffe12666c6: mov     0x24(%rdi),%edx   ; implicit exception: dispatches to 0x00007fffe1266bed
  0x00007fffe12666c9: push    %r10
  0x00007fffe12666cb: cmp     0x16af350e(%rip),%r12  ;   {external_word}
  0x00007fffe12666d2: je      0x7fffe126674f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12666d8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12666dd: sub     $0x80,%rsp
  0x00007fffe12666e4: mov     %rax,0x78(%rsp)
  0x00007fffe12666e9: mov     %rcx,0x70(%rsp)
  0x00007fffe12666ee: mov     %rdx,0x68(%rsp)
  0x00007fffe12666f3: mov     %rbx,0x60(%rsp)
  0x00007fffe12666f8: mov     %rbp,0x50(%rsp)
  0x00007fffe12666fd: mov     %rsi,0x48(%rsp)
  0x00007fffe1266702: mov     %rdi,0x40(%rsp)
  0x00007fffe1266707: mov     %r8,0x38(%rsp)
  0x00007fffe126670c: mov     %r9,0x30(%rsp)
  0x00007fffe1266711: mov     %r10,0x28(%rsp)
  0x00007fffe1266716: mov     %r11,0x20(%rsp)
  0x00007fffe126671b: mov     %r12,0x18(%rsp)
  0x00007fffe1266720: mov     %r13,0x10(%rsp)
  0x00007fffe1266725: mov     %r14,0x8(%rsp)
  0x00007fffe126672a: mov     %r15,(%rsp)
  0x00007fffe126672e: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1266738: movabs  $0x7fffe12666d8,%rsi  ;   {internal_word}
  0x00007fffe1266742: mov     %rsp,%rdx
  0x00007fffe1266745: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266749: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126674e: hlt
  0x00007fffe126674f: pop     %r10              ;*getfield lineSeparator
                                                ; - java.io.BufferedWriter::newLine@2 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe1266751: mov     0xc(%rdx),%ecx    ; implicit exception: dispatches to 0x00007fffe1266c69
  0x00007fffe1266754: push    %r10
  0x00007fffe1266756: cmp     0x16af3483(%rip),%r12  ;   {external_word}
  0x00007fffe126675d: je      0x7fffe12667da
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1266763: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266768: sub     $0x80,%rsp
  0x00007fffe126676f: mov     %rax,0x78(%rsp)
  0x00007fffe1266774: mov     %rcx,0x70(%rsp)
  0x00007fffe1266779: mov     %rdx,0x68(%rsp)
  0x00007fffe126677e: mov     %rbx,0x60(%rsp)
  0x00007fffe1266783: mov     %rbp,0x50(%rsp)
  0x00007fffe1266788: mov     %rsi,0x48(%rsp)
  0x00007fffe126678d: mov     %rdi,0x40(%rsp)
  0x00007fffe1266792: mov     %r8,0x38(%rsp)
  0x00007fffe1266797: mov     %r9,0x30(%rsp)
  0x00007fffe126679c: mov     %r10,0x28(%rsp)
  0x00007fffe12667a1: mov     %r11,0x20(%rsp)
  0x00007fffe12667a6: mov     %r12,0x18(%rsp)
  0x00007fffe12667ab: mov     %r13,0x10(%rsp)
  0x00007fffe12667b0: mov     %r14,0x8(%rsp)
  0x00007fffe12667b5: mov     %r15,(%rsp)
  0x00007fffe12667b9: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12667c3: movabs  $0x7fffe1266763,%rsi  ;   {internal_word}
  0x00007fffe12667cd: mov     %rsp,%rdx
  0x00007fffe12667d0: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12667d4: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12667d9: hlt
  0x00007fffe12667da: pop     %r10              ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe12667dc: mov     0xc(%rcx),%r8d    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; implicit exception: dispatches to 0x00007fffe1266ce5
  0x00007fffe12667e0: mov     $0x0,%ecx
  0x00007fffe12667e5: mov     %rdi,%rsi         ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe12667e8: nop
  0x00007fffe12667e9: nop
  0x00007fffe12667ea: nop
  0x00007fffe12667eb: nop
  0x00007fffe12667ec: nop
  0x00007fffe12667ed: nop
  0x00007fffe12667ee: nop
  0x00007fffe12667ef: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [128]=Oop off=884}
                                                ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {optimized virtual_call}
  0x00007fffe12667f4: mov     0x68(%rsp),%rsi
  0x00007fffe12667f9: mov     0x18(%rsi),%edi
  0x00007fffe12667fc: push    %r10
  0x00007fffe12667fe: cmp     0x16af33db(%rip),%r12  ;   {external_word}
  0x00007fffe1266805: je      0x7fffe1266882
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe126680b: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266810: sub     $0x80,%rsp
  0x00007fffe1266817: mov     %rax,0x78(%rsp)
  0x00007fffe126681c: mov     %rcx,0x70(%rsp)
  0x00007fffe1266821: mov     %rdx,0x68(%rsp)
  0x00007fffe1266826: mov     %rbx,0x60(%rsp)
  0x00007fffe126682b: mov     %rbp,0x50(%rsp)
  0x00007fffe1266830: mov     %rsi,0x48(%rsp)
  0x00007fffe1266835: mov     %rdi,0x40(%rsp)
  0x00007fffe126683a: mov     %r8,0x38(%rsp)
  0x00007fffe126683f: mov     %r9,0x30(%rsp)
  0x00007fffe1266844: mov     %r10,0x28(%rsp)
  0x00007fffe1266849: mov     %r11,0x20(%rsp)
  0x00007fffe126684e: mov     %r12,0x18(%rsp)
  0x00007fffe1266853: mov     %r13,0x10(%rsp)
  0x00007fffe1266858: mov     %r14,0x8(%rsp)
  0x00007fffe126685d: mov     %r15,(%rsp)
  0x00007fffe1266861: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe126686b: movabs  $0x7fffe126680b,%rsi  ;   {internal_word}
  0x00007fffe1266875: mov     %rsp,%rdx
  0x00007fffe1266878: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126687c: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266881: hlt
  0x00007fffe1266882: pop     %r10              ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@16 (line 545)

  0x00007fffe1266884: cmp     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe1266d61
  0x00007fffe1266887: mov     %rdi,%rsi         ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)

  0x00007fffe126688a: nop
  0x00007fffe126688b: nop
  0x00007fffe126688c: nop
  0x00007fffe126688d: nop
  0x00007fffe126688e: nop
  0x00007fffe126688f: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [128]=Oop off=1044}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ;   {optimized virtual_call}
  0x00007fffe1266894: mov     0x68(%rsp),%rsi
  0x00007fffe1266899: mov     0x1c(%rsi),%edi
  0x00007fffe126689c: push    %r10
  0x00007fffe126689e: cmp     0x16af333b(%rip),%r12  ;   {external_word}
  0x00007fffe12668a5: je      0x7fffe1266922
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12668ab: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12668b0: sub     $0x80,%rsp
  0x00007fffe12668b7: mov     %rax,0x78(%rsp)
  0x00007fffe12668bc: mov     %rcx,0x70(%rsp)
  0x00007fffe12668c1: mov     %rdx,0x68(%rsp)
  0x00007fffe12668c6: mov     %rbx,0x60(%rsp)
  0x00007fffe12668cb: mov     %rbp,0x50(%rsp)
  0x00007fffe12668d0: mov     %rsi,0x48(%rsp)
  0x00007fffe12668d5: mov     %rdi,0x40(%rsp)
  0x00007fffe12668da: mov     %r8,0x38(%rsp)
  0x00007fffe12668df: mov     %r9,0x30(%rsp)
  0x00007fffe12668e4: mov     %r10,0x28(%rsp)
  0x00007fffe12668e9: mov     %r11,0x20(%rsp)
  0x00007fffe12668ee: mov     %r12,0x18(%rsp)
  0x00007fffe12668f3: mov     %r13,0x10(%rsp)
  0x00007fffe12668f8: mov     %r14,0x8(%rsp)
  0x00007fffe12668fd: mov     %r15,(%rsp)
  0x00007fffe1266901: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe126690b: movabs  $0x7fffe12668ab,%rsi  ;   {internal_word}
  0x00007fffe1266915: mov     %rsp,%rdx
  0x00007fffe1266918: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126691c: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266921: hlt
  0x00007fffe1266922: pop     %r10              ;*getfield charOut
                                                ; - java.io.PrintStream::newLine@23 (line 546)

  0x00007fffe1266924: mov     0x14(%rdi),%edi   ; implicit exception: dispatches to 0x00007fffe1266ddd
  0x00007fffe1266927: push    %r10
  0x00007fffe1266929: cmp     0x16af32b0(%rip),%r12  ;   {external_word}
  0x00007fffe1266930: je      0x7fffe12669ad
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1266936: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126693b: sub     $0x80,%rsp
  0x00007fffe1266942: mov     %rax,0x78(%rsp)
  0x00007fffe1266947: mov     %rcx,0x70(%rsp)
  0x00007fffe126694c: mov     %rdx,0x68(%rsp)
  0x00007fffe1266951: mov     %rbx,0x60(%rsp)
  0x00007fffe1266956: mov     %rbp,0x50(%rsp)
  0x00007fffe126695b: mov     %rsi,0x48(%rsp)
  0x00007fffe1266960: mov     %rdi,0x40(%rsp)
  0x00007fffe1266965: mov     %r8,0x38(%rsp)
  0x00007fffe126696a: mov     %r9,0x30(%rsp)
  0x00007fffe126696f: mov     %r10,0x28(%rsp)
  0x00007fffe1266974: mov     %r11,0x20(%rsp)
  0x00007fffe1266979: mov     %r12,0x18(%rsp)
  0x00007fffe126697e: mov     %r13,0x10(%rsp)
  0x00007fffe1266983: mov     %r14,0x8(%rsp)
  0x00007fffe1266988: mov     %r15,(%rsp)
  0x00007fffe126698c: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1266996: movabs  $0x7fffe1266936,%rsi  ;   {internal_word}
  0x00007fffe12669a0: mov     %rsp,%rdx
  0x00007fffe12669a3: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12669a7: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12669ac: hlt
  0x00007fffe12669ad: pop     %r10              ;*getfield se
                                                ; - java.io.OutputStreamWriter::flushBuffer@1 (line 185)
                                                ; - java.io.PrintStream::newLine@26 (line 546)

  0x00007fffe12669af: cmp     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe1266e59
  0x00007fffe12669b2: mov     %rdi,%rsi         ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; - java.io.PrintStream::newLine@26 (line 546)

  0x00007fffe12669b5: nop
  0x00007fffe12669b6: nop
  0x00007fffe12669b7: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [128]=Oop off=1340}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ;   {optimized virtual_call}
  0x00007fffe12669bc: mov     0x68(%rsp),%rsi
  0x00007fffe12669c1: movsbl  0x10(%rsi),%edi   ;*getfield autoFlush
                                                ; - java.io.PrintStream::newLine@30 (line 547)

  0x00007fffe12669c5: cmp     $0x0,%edi
  ;;   86 branch [EQ] [B6] 
  0x00007fffe12669c8: je      0x7fffe1266a6c    ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)

  ;;  block B5 [36, 43]

  0x00007fffe12669ce: mov     0xc(%rsi),%edi
  0x00007fffe12669d1: push    %r10
  0x00007fffe12669d3: cmp     0x16af3206(%rip),%r12  ;   {external_word}
  0x00007fffe12669da: je      0x7fffe1266a57
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12669e0: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12669e5: sub     $0x80,%rsp
  0x00007fffe12669ec: mov     %rax,0x78(%rsp)
  0x00007fffe12669f1: mov     %rcx,0x70(%rsp)
  0x00007fffe12669f6: mov     %rdx,0x68(%rsp)
  0x00007fffe12669fb: mov     %rbx,0x60(%rsp)
  0x00007fffe1266a00: mov     %rbp,0x50(%rsp)
  0x00007fffe1266a05: mov     %rsi,0x48(%rsp)
  0x00007fffe1266a0a: mov     %rdi,0x40(%rsp)
  0x00007fffe1266a0f: mov     %r8,0x38(%rsp)
  0x00007fffe1266a14: mov     %r9,0x30(%rsp)
  0x00007fffe1266a19: mov     %r10,0x28(%rsp)
  0x00007fffe1266a1e: mov     %r11,0x20(%rsp)
  0x00007fffe1266a23: mov     %r12,0x18(%rsp)
  0x00007fffe1266a28: mov     %r13,0x10(%rsp)
  0x00007fffe1266a2d: mov     %r14,0x8(%rsp)
  0x00007fffe1266a32: mov     %r15,(%rsp)
  0x00007fffe1266a36: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1266a40: movabs  $0x7fffe12669e0,%rsi  ;   {internal_word}
  0x00007fffe1266a4a: mov     %rsp,%rdx
  0x00007fffe1266a4d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266a51: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266a56: hlt
  0x00007fffe1266a57: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::newLine@37 (line 548)

  0x00007fffe1266a59: mov     %rdi,%rsi         ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe1266a5c: nop
  0x00007fffe1266a5d: movabs  $0xffffffffffffffff,%rax
  0x00007fffe1266a67: callq   0x7fffe11060c0    ; OopMap{[104]=Oop [128]=Oop off=1516}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {virtual_call}
  ;;  block B6 [43, 53]

  0x00007fffe1266a6c: lea     0x78(%rsp),%rax
  0x00007fffe1266a71: mov     0x8(%rax),%rsi
  0x00007fffe1266a75: mov     (%rsi),%rdx
  0x00007fffe1266a78: and     $0x7,%rdx
  0x00007fffe1266a7c: cmp     $0x5,%rdx
  0x00007fffe1266a80: je      0x7fffe1266a9d
  0x00007fffe1266a86: mov     (%rax),%rdx
  0x00007fffe1266a89: test    %rdx,%rdx
  0x00007fffe1266a8c: je      0x7fffe1266a9d
  0x00007fffe1266a92: lock cmpxchg %rdx,(%rsi)
  0x00007fffe1266a97: jne     0x7fffe1266ed5    ;*monitorexit
                                                ; - java.io.PrintStream::newLine@44 (line 549)

  0x00007fffe1266a9d: add     $0x90,%rsp
  0x00007fffe1266aa4: pop     %rbp
  0x00007fffe1266aa5: test    %eax,0x16d94655(%rip)  ;   {poll_return}
  0x00007fffe1266aab: retq
  ;;  block B13 [7, 16]

  ;;  114 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1266aac: nop
  0x00007fffe1266aad: nop
  0x00007fffe1266aae: nop
  0x00007fffe1266aaf: nop
  0x00007fffe1266ab0: jmpq    0x7fffe1266ef7    ;   {no_reloc}
  0x00007fffe1266ab5: add     %al,(%rax)
  0x00007fffe1266ab7: add     %al,(%rax)
  0x00007fffe1266ab9: add     %ch,%cl
  0x00007fffe1266abb: add     $0x0,%al
  0x00007fffe1266abe: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe1266ac1: pop     %rax
  0x00007fffe1266ac2: xlat    (%rbx)
  0x00007fffe1266ac3: xlat    (%rbx)
  0x00007fffe1266ac5: add     %al,(%rax)
  0x00007fffe1266ac7: add     %al,(%rax)
  0x00007fffe1266ac9: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  0x00007fffe1266acc: mov     %rax,0x70(%rsp)
  0x00007fffe1266ad1: nop
  0x00007fffe1266ad2: nop
  0x00007fffe1266ad3: nop
  0x00007fffe1266ad4: nop
  0x00007fffe1266ad5: nop
  0x00007fffe1266ad6: nop
  0x00007fffe1266ad7: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [112]=Oop [128]=Oop off=1628}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ;   {optimized virtual_call}
  0x00007fffe1266adc: mov     0x70(%rsp),%rax   ; OopMap{[104]=Oop [128]=Oop rax=Oop off=1633}
                                                ;*athrow
                                                ; - java.io.PrintStream::ensureOpen@16 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  0x00007fffe1266ae1: movabs  $0x7fffe1266ae1,%rdx  ;   {section_word}
  0x00007fffe1266aeb: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe1266af0: nop                       ;*athrow
                                                ; - java.io.PrintStream::ensureOpen@16 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  ;;  block B1 [48, 52]

  0x00007fffe1266af1: mov     0x348(%r15),%rax
  0x00007fffe1266af8: xor     %r10,%r10
  0x00007fffe1266afb: mov     %r10,0x348(%r15)
  0x00007fffe1266b02: xor     %r10,%r10
  0x00007fffe1266b05: mov     %r10,0x350(%r15)
  0x00007fffe1266b0c: mov     %rax,%rdx
  0x00007fffe1266b0f: lea     0x78(%rsp),%rax
  0x00007fffe1266b14: mov     0x8(%rax),%rdi
  0x00007fffe1266b18: mov     (%rdi),%rsi
  0x00007fffe1266b1b: and     $0x7,%rsi
  0x00007fffe1266b1f: cmp     $0x5,%rsi
  0x00007fffe1266b23: je      0x7fffe1266b40
  0x00007fffe1266b29: mov     (%rax),%rsi
  0x00007fffe1266b2c: test    %rsi,%rsi
  0x00007fffe1266b2f: je      0x7fffe1266b40
  0x00007fffe1266b35: lock cmpxchg %rsi,(%rdi)
  0x00007fffe1266b3a: jne     0x7fffe1266f0e    ;*monitorexit
                                                ; - java.io.PrintStream::newLine@50 (line 549)

  0x00007fffe1266b40: mov     %rdx,%rax         ; OopMap{[104]=Oop rax=Oop off=1731}
                                                ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)

  0x00007fffe1266b43: movabs  $0x7fffe1266b43,%rdx  ;   {section_word}
  0x00007fffe1266b4d: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe1266b52: nop                       ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)

  ;;  block B3 [66, 72]

  0x00007fffe1266b53: mov     0x68(%rsp),%rsi
  0x00007fffe1266b58: mov     0x348(%r15),%rax
  0x00007fffe1266b5f: xor     %r10,%r10
  0x00007fffe1266b62: mov     %r10,0x348(%r15)
  0x00007fffe1266b69: xor     %r10,%r10
  0x00007fffe1266b6c: mov     %r10,0x350(%r15)
  0x00007fffe1266b73: movb    $0x1,0x11(%rsi)   ;*putfield trouble
                                                ; - java.io.PrintStream::newLine@69 (line 555)

  0x00007fffe1266b77: add     $0x90,%rsp
  0x00007fffe1266b7e: pop     %rbp
  0x00007fffe1266b7f: test    %eax,0x16d9457b(%rip)  ;   {poll_return}
  0x00007fffe1266b85: retq
  ;;  block B2 [56, 63]

  0x00007fffe1266b86: mov     0x348(%r15),%rax
  0x00007fffe1266b8d: xor     %r10,%r10
  0x00007fffe1266b90: mov     %r10,0x348(%r15)
  0x00007fffe1266b97: xor     %r10,%r10
  0x00007fffe1266b9a: mov     %r10,0x350(%r15)
  0x00007fffe1266ba1: mov     0x268(%r15),%rsi  ;*invokestatic currentThread
                                                ; - java.io.PrintStream::newLine@57 (line 552)

  0x00007fffe1266ba8: cmp     (%rsi),%rax       ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::newLine@60 (line 552)
                                                ; implicit exception: dispatches to 0x00007fffe1266f21
  0x00007fffe1266bab: nop
  0x00007fffe1266bac: nop
  0x00007fffe1266bad: nop
  0x00007fffe1266bae: nop
  0x00007fffe1266baf: callq   0x7fffe1105e80    ; OopMap{off=1844}
                                                ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::newLine@60 (line 552)
                                                ;   {optimized virtual_call}
  ;;  block B10 [72, 72]

  0x00007fffe1266bb4: add     $0x90,%rsp
  0x00007fffe1266bbb: pop     %rbp
  0x00007fffe1266bbc: test    %eax,0x16d9453e(%rip)  ;   {poll_return}
  0x00007fffe1266bc2: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1266bc3: mov     %rax,0x8(%rsp)
  0x00007fffe1266bc8: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1266bd0: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [104]=Oop off=1877}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)
                                                ;   {runtime_call}
  0x00007fffe1266bd5: jmpq    0x7fffe12664e0
  ;; MonitorEnterStub slow case
  0x00007fffe1266bda: mov     %rsi,0x8(%rsp)
  0x00007fffe1266bdf: mov     %rdx,(%rsp)
  0x00007fffe1266be3: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [104]=Oop [128]=Oop off=1896}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::newLine@3 (line 542)
                                                ;   {runtime_call}
  0x00007fffe1266be8: jmpq    0x7fffe12665a6
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266bed: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [104]=Oop rdi=Oop [128]=Oop off=1906}
                                                ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe1266bf2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266bf7: sub     $0x80,%rsp
  0x00007fffe1266bfe: mov     %rax,0x78(%rsp)
  0x00007fffe1266c03: mov     %rcx,0x70(%rsp)
  0x00007fffe1266c08: mov     %rdx,0x68(%rsp)
  0x00007fffe1266c0d: mov     %rbx,0x60(%rsp)
  0x00007fffe1266c12: mov     %rbp,0x50(%rsp)
  0x00007fffe1266c17: mov     %rsi,0x48(%rsp)
  0x00007fffe1266c1c: mov     %rdi,0x40(%rsp)
  0x00007fffe1266c21: mov     %r8,0x38(%rsp)
  0x00007fffe1266c26: mov     %r9,0x30(%rsp)
  0x00007fffe1266c2b: mov     %r10,0x28(%rsp)
  0x00007fffe1266c30: mov     %r11,0x20(%rsp)
  0x00007fffe1266c35: mov     %r12,0x18(%rsp)
  0x00007fffe1266c3a: mov     %r13,0x10(%rsp)
  0x00007fffe1266c3f: mov     %r14,0x8(%rsp)
  0x00007fffe1266c44: mov     %r15,(%rsp)
  0x00007fffe1266c48: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266c52: movabs  $0x7fffe1266bf2,%rsi  ;   {internal_word}
  0x00007fffe1266c5c: mov     %rsp,%rdx
  0x00007fffe1266c5f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266c63: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266c68: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266c69: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [104]=Oop rdi=Oop rdx=Oop [128]=Oop off=2030}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe1266c6e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266c73: sub     $0x80,%rsp
  0x00007fffe1266c7a: mov     %rax,0x78(%rsp)
  0x00007fffe1266c7f: mov     %rcx,0x70(%rsp)
  0x00007fffe1266c84: mov     %rdx,0x68(%rsp)
  0x00007fffe1266c89: mov     %rbx,0x60(%rsp)
  0x00007fffe1266c8e: mov     %rbp,0x50(%rsp)
  0x00007fffe1266c93: mov     %rsi,0x48(%rsp)
  0x00007fffe1266c98: mov     %rdi,0x40(%rsp)
  0x00007fffe1266c9d: mov     %r8,0x38(%rsp)
  0x00007fffe1266ca2: mov     %r9,0x30(%rsp)
  0x00007fffe1266ca7: mov     %r10,0x28(%rsp)
  0x00007fffe1266cac: mov     %r11,0x20(%rsp)
  0x00007fffe1266cb1: mov     %r12,0x18(%rsp)
  0x00007fffe1266cb6: mov     %r13,0x10(%rsp)
  0x00007fffe1266cbb: mov     %r14,0x8(%rsp)
  0x00007fffe1266cc0: mov     %r15,(%rsp)
  0x00007fffe1266cc4: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266cce: movabs  $0x7fffe1266c6e,%rsi  ;   {internal_word}
  0x00007fffe1266cd8: mov     %rsp,%rdx
  0x00007fffe1266cdb: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266cdf: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266ce4: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266ce5: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [104]=Oop rdi=Oop rdx=Oop [128]=Oop off=2154}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe1266cea: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266cef: sub     $0x80,%rsp
  0x00007fffe1266cf6: mov     %rax,0x78(%rsp)
  0x00007fffe1266cfb: mov     %rcx,0x70(%rsp)
  0x00007fffe1266d00: mov     %rdx,0x68(%rsp)
  0x00007fffe1266d05: mov     %rbx,0x60(%rsp)
  0x00007fffe1266d0a: mov     %rbp,0x50(%rsp)
  0x00007fffe1266d0f: mov     %rsi,0x48(%rsp)
  0x00007fffe1266d14: mov     %rdi,0x40(%rsp)
  0x00007fffe1266d19: mov     %r8,0x38(%rsp)
  0x00007fffe1266d1e: mov     %r9,0x30(%rsp)
  0x00007fffe1266d23: mov     %r10,0x28(%rsp)
  0x00007fffe1266d28: mov     %r11,0x20(%rsp)
  0x00007fffe1266d2d: mov     %r12,0x18(%rsp)
  0x00007fffe1266d32: mov     %r13,0x10(%rsp)
  0x00007fffe1266d37: mov     %r14,0x8(%rsp)
  0x00007fffe1266d3c: mov     %r15,(%rsp)
  0x00007fffe1266d40: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266d4a: movabs  $0x7fffe1266cea,%rsi  ;   {internal_word}
  0x00007fffe1266d54: mov     %rsp,%rdx
  0x00007fffe1266d57: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266d5b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266d60: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266d61: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [104]=Oop rdi=Oop [128]=Oop off=2278}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ;   {runtime_call}
  0x00007fffe1266d66: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266d6b: sub     $0x80,%rsp
  0x00007fffe1266d72: mov     %rax,0x78(%rsp)
  0x00007fffe1266d77: mov     %rcx,0x70(%rsp)
  0x00007fffe1266d7c: mov     %rdx,0x68(%rsp)
  0x00007fffe1266d81: mov     %rbx,0x60(%rsp)
  0x00007fffe1266d86: mov     %rbp,0x50(%rsp)
  0x00007fffe1266d8b: mov     %rsi,0x48(%rsp)
  0x00007fffe1266d90: mov     %rdi,0x40(%rsp)
  0x00007fffe1266d95: mov     %r8,0x38(%rsp)
  0x00007fffe1266d9a: mov     %r9,0x30(%rsp)
  0x00007fffe1266d9f: mov     %r10,0x28(%rsp)
  0x00007fffe1266da4: mov     %r11,0x20(%rsp)
  0x00007fffe1266da9: mov     %r12,0x18(%rsp)
  0x00007fffe1266dae: mov     %r13,0x10(%rsp)
  0x00007fffe1266db3: mov     %r14,0x8(%rsp)
  0x00007fffe1266db8: mov     %r15,(%rsp)
  0x00007fffe1266dbc: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266dc6: movabs  $0x7fffe1266d66,%rsi  ;   {internal_word}
  0x00007fffe1266dd0: mov     %rsp,%rdx
  0x00007fffe1266dd3: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266dd7: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266ddc: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266ddd: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [104]=Oop [128]=Oop off=2402}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ;   {runtime_call}
  0x00007fffe1266de2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266de7: sub     $0x80,%rsp
  0x00007fffe1266dee: mov     %rax,0x78(%rsp)
  0x00007fffe1266df3: mov     %rcx,0x70(%rsp)
  0x00007fffe1266df8: mov     %rdx,0x68(%rsp)
  0x00007fffe1266dfd: mov     %rbx,0x60(%rsp)
  0x00007fffe1266e02: mov     %rbp,0x50(%rsp)
  0x00007fffe1266e07: mov     %rsi,0x48(%rsp)
  0x00007fffe1266e0c: mov     %rdi,0x40(%rsp)
  0x00007fffe1266e11: mov     %r8,0x38(%rsp)
  0x00007fffe1266e16: mov     %r9,0x30(%rsp)
  0x00007fffe1266e1b: mov     %r10,0x28(%rsp)
  0x00007fffe1266e20: mov     %r11,0x20(%rsp)
  0x00007fffe1266e25: mov     %r12,0x18(%rsp)
  0x00007fffe1266e2a: mov     %r13,0x10(%rsp)
  0x00007fffe1266e2f: mov     %r14,0x8(%rsp)
  0x00007fffe1266e34: mov     %r15,(%rsp)
  0x00007fffe1266e38: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266e42: movabs  $0x7fffe1266de2,%rsi  ;   {internal_word}
  0x00007fffe1266e4c: mov     %rsp,%rdx
  0x00007fffe1266e4f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266e53: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266e58: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266e59: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [104]=Oop rdi=Oop [128]=Oop off=2526}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ;   {runtime_call}
  0x00007fffe1266e5e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266e63: sub     $0x80,%rsp
  0x00007fffe1266e6a: mov     %rax,0x78(%rsp)
  0x00007fffe1266e6f: mov     %rcx,0x70(%rsp)
  0x00007fffe1266e74: mov     %rdx,0x68(%rsp)
  0x00007fffe1266e79: mov     %rbx,0x60(%rsp)
  0x00007fffe1266e7e: mov     %rbp,0x50(%rsp)
  0x00007fffe1266e83: mov     %rsi,0x48(%rsp)
  0x00007fffe1266e88: mov     %rdi,0x40(%rsp)
  0x00007fffe1266e8d: mov     %r8,0x38(%rsp)
  0x00007fffe1266e92: mov     %r9,0x30(%rsp)
  0x00007fffe1266e97: mov     %r10,0x28(%rsp)
  0x00007fffe1266e9c: mov     %r11,0x20(%rsp)
  0x00007fffe1266ea1: mov     %r12,0x18(%rsp)
  0x00007fffe1266ea6: mov     %r13,0x10(%rsp)
  0x00007fffe1266eab: mov     %r14,0x8(%rsp)
  0x00007fffe1266eb0: mov     %r15,(%rsp)
  0x00007fffe1266eb4: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266ebe: movabs  $0x7fffe1266e5e,%rsi  ;   {internal_word}
  0x00007fffe1266ec8: mov     %rsp,%rdx
  0x00007fffe1266ecb: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266ecf: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266ed4: hlt
  ;; MonitorExitStub slow case
  0x00007fffe1266ed5: lea     0x78(%rsp),%rax
  0x00007fffe1266eda: mov     %rax,(%rsp)
  0x00007fffe1266ede: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1266ee3: jmpq    0x7fffe1266a9d
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1266ee8: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1266ef2: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1266ef7: callq   0x7fffe11fc960    ; OopMap{[104]=Oop [128]=Oop off=2684}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ;   {runtime_call}
  0x00007fffe1266efc: jmpq    0x7fffe1266ab0
  ;; NewInstanceStub slow case
  0x00007fffe1266f01: mov     %rdx,%rdx
  0x00007fffe1266f04: callq   0x7fffe11668a0    ; OopMap{[104]=Oop [128]=Oop off=2697}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ;   {runtime_call}
  0x00007fffe1266f09: jmpq    0x7fffe1266abf
  ;; MonitorExitStub slow case
  0x00007fffe1266f0e: lea     0x78(%rsp),%rax
  0x00007fffe1266f13: mov     %rax,(%rsp)
  0x00007fffe1266f17: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1266f1c: jmpq    0x7fffe1266b40
  ;; ImplicitNullCheckStub slow case
  0x00007fffe1266f21: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=2726}
                                                ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::newLine@60 (line 552)
                                                ;   {runtime_call}
  0x00007fffe1266f26: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1266f2b: sub     $0x80,%rsp
  0x00007fffe1266f32: mov     %rax,0x78(%rsp)
  0x00007fffe1266f37: mov     %rcx,0x70(%rsp)
  0x00007fffe1266f3c: mov     %rdx,0x68(%rsp)
  0x00007fffe1266f41: mov     %rbx,0x60(%rsp)
  0x00007fffe1266f46: mov     %rbp,0x50(%rsp)
  0x00007fffe1266f4b: mov     %rsi,0x48(%rsp)
  0x00007fffe1266f50: mov     %rdi,0x40(%rsp)
  0x00007fffe1266f55: mov     %r8,0x38(%rsp)
  0x00007fffe1266f5a: mov     %r9,0x30(%rsp)
  0x00007fffe1266f5f: mov     %r10,0x28(%rsp)
  0x00007fffe1266f64: mov     %r11,0x20(%rsp)
  0x00007fffe1266f69: mov     %r12,0x18(%rsp)
  0x00007fffe1266f6e: mov     %r13,0x10(%rsp)
  0x00007fffe1266f73: mov     %r14,0x8(%rsp)
  0x00007fffe1266f78: mov     %r15,(%rsp)
  0x00007fffe1266f7c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1266f86: movabs  $0x7fffe1266f26,%rsi  ;   {internal_word}
  0x00007fffe1266f90: mov     %rsp,%rdx
  0x00007fffe1266f93: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1266f97: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1266f9c: hlt
  0x00007fffe1266f9d: nop
  0x00007fffe1266f9e: nop
  ;; Unwind handler
  0x00007fffe1266f9f: mov     0x348(%r15),%rax
  0x00007fffe1266fa6: movabs  $0x0,%r10
  0x00007fffe1266fb0: mov     %r10,0x348(%r15)
  0x00007fffe1266fb7: movabs  $0x0,%r10
  0x00007fffe1266fc1: mov     %r10,0x350(%r15)
  0x00007fffe1266fc8: add     $0x90,%rsp
  0x00007fffe1266fcf: pop     %rbp
  0x00007fffe1266fd0: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1266fd5: hlt
  0x00007fffe1266fd6: hlt
  0x00007fffe1266fd7: hlt
  0x00007fffe1266fd8: hlt
  0x00007fffe1266fd9: hlt
  0x00007fffe1266fda: hlt
  0x00007fffe1266fdb: hlt
  0x00007fffe1266fdc: hlt
  0x00007fffe1266fdd: hlt
  0x00007fffe1266fde: hlt
  0x00007fffe1266fdf: hlt
[Stub Code]
  0x00007fffe1266fe0: nop                       ;   {no_reloc}
  0x00007fffe1266fe1: nop
  0x00007fffe1266fe2: nop
  0x00007fffe1266fe3: nop
  0x00007fffe1266fe4: nop
  0x00007fffe1266fe5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1266fef: jmpq    0x7fffe1266fef    ;   {runtime_call}
  0x00007fffe1266ff4: nop
  0x00007fffe1266ff5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1266fff: jmpq    0x7fffe1266fff    ;   {runtime_call}
  0x00007fffe1267004: nop
  0x00007fffe1267005: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126700f: jmpq    0x7fffe126700f    ;   {runtime_call}
  0x00007fffe1267014: nop
  0x00007fffe1267015: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126701f: jmpq    0x7fffe126701f    ;   {runtime_call}
  0x00007fffe1267024: nop
  0x00007fffe1267025: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126702f: jmpq    0x7fffe126702f    ;   {runtime_call}
  0x00007fffe1267034: nop
  0x00007fffe1267035: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126703f: jmpq    0x7fffe126703f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1267044: movabs  $0xdead,%rbx
  0x00007fffe126704e: movabs  $0xdead,%rcx
  0x00007fffe1267058: movabs  $0xdead,%rsi
  0x00007fffe1267062: movabs  $0xdead,%rdi
  0x00007fffe126706c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1267071: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1267076: sub     $0x80,%rsp
  0x00007fffe126707d: mov     %rax,0x78(%rsp)
  0x00007fffe1267082: mov     %rcx,0x70(%rsp)
  0x00007fffe1267087: mov     %rdx,0x68(%rsp)
  0x00007fffe126708c: mov     %rbx,0x60(%rsp)
  0x00007fffe1267091: mov     %rbp,0x50(%rsp)
  0x00007fffe1267096: mov     %rsi,0x48(%rsp)
  0x00007fffe126709b: mov     %rdi,0x40(%rsp)
  0x00007fffe12670a0: mov     %r8,0x38(%rsp)
  0x00007fffe12670a5: mov     %r9,0x30(%rsp)
  0x00007fffe12670aa: mov     %r10,0x28(%rsp)
  0x00007fffe12670af: mov     %r11,0x20(%rsp)
  0x00007fffe12670b4: mov     %r12,0x18(%rsp)
  0x00007fffe12670b9: mov     %r13,0x10(%rsp)
  0x00007fffe12670be: mov     %r14,0x8(%rsp)
  0x00007fffe12670c3: mov     %r15,(%rsp)
  0x00007fffe12670c7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12670d1: movabs  $0x7fffe1267071,%rsi  ;   {internal_word}
  0x00007fffe12670db: mov     %rsp,%rdx
  0x00007fffe12670de: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12670e2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12670e7: hlt
[Deopt Handler Code]
  0x00007fffe12670e8: movabs  $0x7fffe12670e8,%r10  ;   {section_word}
  0x00007fffe12670f2: push    %r10
  0x00007fffe12670f4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12670f9: hlt
  0x00007fffe12670fa: hlt
  0x00007fffe12670fb: hlt
  0x00007fffe12670fc: hlt
  0x00007fffe12670fd: hlt
  0x00007fffe12670fe: hlt
  0x00007fffe12670ff: hlt
<nmethod compile_id='71' compiler='C1' level='2' entry='0x00007fffe1266480' size='5728' address='0x00007fffe1266150' relocation_offset='304' insts_offset='816' stub_offset='3728' scopes_data_offset='4104' scopes_pcs_offset='4504' dependencies_offset='5272' handler_table_offset='5288' nul_chk_table_offset='5664' method='java/io/PrintStream newLine ()V' bytes='73' count='36921' iicount='36921' stamp='119.808'/>
Decoding compiled method 0x00007fffe125ba10:
Code:
Argument 0 is unknown.RIP: 0x7fffe125bbe0 Code size: 0x000003b0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c47f28} &apos;newLine&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;
  #           [sp+0x70]  (sp of caller)
  ;;  block B5 [0, 0]

  0x00007fffe125bbe0: mov     0x8(%rsi),%r10d
  0x00007fffe125bbe4: shl     $0x3,%r10
  0x00007fffe125bbe8: cmp     %rax,%r10
  0x00007fffe125bbeb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe125bbf1: nop
  0x00007fffe125bbf2: nop
  0x00007fffe125bbf3: nop
  0x00007fffe125bbf4: nop
  0x00007fffe125bbf5: nop
  0x00007fffe125bbf6: nop
  0x00007fffe125bbf7: nop
  0x00007fffe125bbf8: nop
  0x00007fffe125bbf9: nop
  0x00007fffe125bbfa: nop
  0x00007fffe125bbfb: nop
  0x00007fffe125bbfc: nop
  0x00007fffe125bbfd: nop
  0x00007fffe125bbfe: nop
  0x00007fffe125bbff: nop
[Verified Entry Point]
  0x00007fffe125bc00: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125bc07: push    %rbp
  0x00007fffe125bc08: sub     $0x60,%rsp
  0x00007fffe125bc0c: movabs  $0x7ffff4d71318,%rdx
  0x00007fffe125bc16: mov     0x8(%rdx),%ecx
  0x00007fffe125bc19: add     $0x8,%ecx
  0x00007fffe125bc1c: mov     %ecx,0x8(%rdx)
  0x00007fffe125bc1f: movabs  $0x7ffff4c47f28,%rdx  ;   {metadata({method} {0x00007ffff4c47f28} &apos;newLine&apos; &apos;()V&apos; in &apos;java/io/BufferedWriter&apos;)}
  0x00007fffe125bc29: and     $0x3ff8,%ecx
  0x00007fffe125bc2f: cmp     $0x0,%ecx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffa80abba0]
  0x00007fffe125bc32: je      0x7fffe125bd68    ;*aload_0
                                                ; - java.io.BufferedWriter::newLine@0 (line 243)

  ;;  block B6 [0, 0]

  ;;  block B0 [0, 8]

  0x00007fffe125bc38: mov     0x24(%rsi),%edx
  0x00007fffe125bc3b: push    %r10
  0x00007fffe125bc3d: cmp     0x16afdf9c(%rip),%r12  ;   {external_word}
  0x00007fffe125bc44: je      0x7fffe125bcc1
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125bc4a: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125bc4f: sub     $0x80,%rsp
  0x00007fffe125bc56: mov     %rax,0x78(%rsp)
  0x00007fffe125bc5b: mov     %rcx,0x70(%rsp)
  0x00007fffe125bc60: mov     %rdx,0x68(%rsp)
  0x00007fffe125bc65: mov     %rbx,0x60(%rsp)
  0x00007fffe125bc6a: mov     %rbp,0x50(%rsp)
  0x00007fffe125bc6f: mov     %rsi,0x48(%rsp)
  0x00007fffe125bc74: mov     %rdi,0x40(%rsp)
  0x00007fffe125bc79: mov     %r8,0x38(%rsp)
  0x00007fffe125bc7e: mov     %r9,0x30(%rsp)
  0x00007fffe125bc83: mov     %r10,0x28(%rsp)
  0x00007fffe125bc88: mov     %r11,0x20(%rsp)
  0x00007fffe125bc8d: mov     %r12,0x18(%rsp)
  0x00007fffe125bc92: mov     %r13,0x10(%rsp)
  0x00007fffe125bc97: mov     %r14,0x8(%rsp)
  0x00007fffe125bc9c: mov     %r15,(%rsp)
  0x00007fffe125bca0: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125bcaa: movabs  $0x7fffe125bc4a,%rsi  ;   {internal_word}
  0x00007fffe125bcb4: mov     %rsp,%rdx
  0x00007fffe125bcb7: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125bcbb: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125bcc0: hlt
  0x00007fffe125bcc1: pop     %r10              ;*getfield lineSeparator
                                                ; - java.io.BufferedWriter::newLine@2 (line 243)

  0x00007fffe125bcc3: mov     0xc(%rdx),%ecx    ; implicit exception: dispatches to 0x00007fffe125bd7f
  0x00007fffe125bcc6: push    %r10
  0x00007fffe125bcc8: cmp     0x16afdf11(%rip),%r12  ;   {external_word}
  0x00007fffe125bccf: je      0x7fffe125bd4c
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125bcd5: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125bcda: sub     $0x80,%rsp
  0x00007fffe125bce1: mov     %rax,0x78(%rsp)
  0x00007fffe125bce6: mov     %rcx,0x70(%rsp)
  0x00007fffe125bceb: mov     %rdx,0x68(%rsp)
  0x00007fffe125bcf0: mov     %rbx,0x60(%rsp)
  0x00007fffe125bcf5: mov     %rbp,0x50(%rsp)
  0x00007fffe125bcfa: mov     %rsi,0x48(%rsp)
  0x00007fffe125bcff: mov     %rdi,0x40(%rsp)
  0x00007fffe125bd04: mov     %r8,0x38(%rsp)
  0x00007fffe125bd09: mov     %r9,0x30(%rsp)
  0x00007fffe125bd0e: mov     %r10,0x28(%rsp)
  0x00007fffe125bd13: mov     %r11,0x20(%rsp)
  0x00007fffe125bd18: mov     %r12,0x18(%rsp)
  0x00007fffe125bd1d: mov     %r13,0x10(%rsp)
  0x00007fffe125bd22: mov     %r14,0x8(%rsp)
  0x00007fffe125bd27: mov     %r15,(%rsp)
  0x00007fffe125bd2b: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125bd35: movabs  $0x7fffe125bcd5,%rsi  ;   {internal_word}
  0x00007fffe125bd3f: mov     %rsp,%rdx
  0x00007fffe125bd42: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125bd46: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125bd4b: hlt
  0x00007fffe125bd4c: pop     %r10              ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)

  0x00007fffe125bd4e: mov     0xc(%rcx),%r8d    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; implicit exception: dispatches to 0x00007fffe125bdfb
  0x00007fffe125bd52: mov     $0x0,%ecx         ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)

  0x00007fffe125bd57: callq   0x7fffe1105e80    ; OopMap{off=380}
                                                ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ;   {optimized virtual_call}
  0x00007fffe125bd5c: add     $0x60,%rsp
  0x00007fffe125bd60: pop     %rbp
  0x00007fffe125bd61: test    %eax,0x16d9f399(%rip)  ;   {poll_return}
  0x00007fffe125bd67: retq
  ;; CounterOverflowStub slow case
  0x00007fffe125bd68: mov     %rdx,0x8(%rsp)
  0x00007fffe125bd6d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125bd75: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=410}
                                                ;*synchronization entry
                                                ; - java.io.BufferedWriter::newLine@-1 (line 243)
                                                ;   {runtime_call}
  0x00007fffe125bd7a: jmpq    0x7fffe125bc38
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125bd7f: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop off=420}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ;   {runtime_call}
  0x00007fffe125bd84: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125bd89: sub     $0x80,%rsp
  0x00007fffe125bd90: mov     %rax,0x78(%rsp)
  0x00007fffe125bd95: mov     %rcx,0x70(%rsp)
  0x00007fffe125bd9a: mov     %rdx,0x68(%rsp)
  0x00007fffe125bd9f: mov     %rbx,0x60(%rsp)
  0x00007fffe125bda4: mov     %rbp,0x50(%rsp)
  0x00007fffe125bda9: mov     %rsi,0x48(%rsp)
  0x00007fffe125bdae: mov     %rdi,0x40(%rsp)
  0x00007fffe125bdb3: mov     %r8,0x38(%rsp)
  0x00007fffe125bdb8: mov     %r9,0x30(%rsp)
  0x00007fffe125bdbd: mov     %r10,0x28(%rsp)
  0x00007fffe125bdc2: mov     %r11,0x20(%rsp)
  0x00007fffe125bdc7: mov     %r12,0x18(%rsp)
  0x00007fffe125bdcc: mov     %r13,0x10(%rsp)
  0x00007fffe125bdd1: mov     %r14,0x8(%rsp)
  0x00007fffe125bdd6: mov     %r15,(%rsp)
  0x00007fffe125bdda: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125bde4: movabs  $0x7fffe125bd84,%rsi  ;   {internal_word}
  0x00007fffe125bdee: mov     %rsp,%rdx
  0x00007fffe125bdf1: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125bdf5: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125bdfa: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125bdfb: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop off=544}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ;   {runtime_call}
  0x00007fffe125be00: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125be05: sub     $0x80,%rsp
  0x00007fffe125be0c: mov     %rax,0x78(%rsp)
  0x00007fffe125be11: mov     %rcx,0x70(%rsp)
  0x00007fffe125be16: mov     %rdx,0x68(%rsp)
  0x00007fffe125be1b: mov     %rbx,0x60(%rsp)
  0x00007fffe125be20: mov     %rbp,0x50(%rsp)
  0x00007fffe125be25: mov     %rsi,0x48(%rsp)
  0x00007fffe125be2a: mov     %rdi,0x40(%rsp)
  0x00007fffe125be2f: mov     %r8,0x38(%rsp)
  0x00007fffe125be34: mov     %r9,0x30(%rsp)
  0x00007fffe125be39: mov     %r10,0x28(%rsp)
  0x00007fffe125be3e: mov     %r11,0x20(%rsp)
  0x00007fffe125be43: mov     %r12,0x18(%rsp)
  0x00007fffe125be48: mov     %r13,0x10(%rsp)
  0x00007fffe125be4d: mov     %r14,0x8(%rsp)
  0x00007fffe125be52: mov     %r15,(%rsp)
  0x00007fffe125be56: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125be60: movabs  $0x7fffe125be00,%rsi  ;   {internal_word}
  0x00007fffe125be6a: mov     %rsp,%rdx
  0x00007fffe125be6d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125be71: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125be76: hlt
  0x00007fffe125be77: nop
  0x00007fffe125be78: nop
  ;; Unwind handler
  0x00007fffe125be79: mov     0x348(%r15),%rax
  0x00007fffe125be80: movabs  $0x0,%r10
  0x00007fffe125be8a: mov     %r10,0x348(%r15)
  0x00007fffe125be91: movabs  $0x0,%r10
  0x00007fffe125be9b: mov     %r10,0x350(%r15)
  0x00007fffe125bea2: add     $0x60,%rsp
  0x00007fffe125bea6: pop     %rbp
  0x00007fffe125bea7: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe125beac: hlt
  0x00007fffe125bead: hlt
  0x00007fffe125beae: hlt
  0x00007fffe125beaf: hlt
  0x00007fffe125beb0: hlt
  0x00007fffe125beb1: hlt
  0x00007fffe125beb2: hlt
  0x00007fffe125beb3: hlt
  0x00007fffe125beb4: hlt
  0x00007fffe125beb5: hlt
  0x00007fffe125beb6: hlt
  0x00007fffe125beb7: hlt
  0x00007fffe125beb8: hlt
  0x00007fffe125beb9: hlt
  0x00007fffe125beba: hlt
  0x00007fffe125bebb: hlt
  0x00007fffe125bebc: hlt
  0x00007fffe125bebd: hlt
  0x00007fffe125bebe: hlt
  0x00007fffe125bebf: hlt
[Stub Code]
  0x00007fffe125bec0: nop                       ;   {no_reloc}
  0x00007fffe125bec1: nop
  0x00007fffe125bec2: nop
  0x00007fffe125bec3: nop
  0x00007fffe125bec4: nop
  0x00007fffe125bec5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125becf: jmpq    0x7fffe125becf    ;   {runtime_call}
[Exception Handler]
  0x00007fffe125bed4: movabs  $0xdead,%rbx
  0x00007fffe125bede: movabs  $0xdead,%rcx
  0x00007fffe125bee8: movabs  $0xdead,%rsi
  0x00007fffe125bef2: movabs  $0xdead,%rdi
  0x00007fffe125befc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125bf01: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125bf06: sub     $0x80,%rsp
  0x00007fffe125bf0d: mov     %rax,0x78(%rsp)
  0x00007fffe125bf12: mov     %rcx,0x70(%rsp)
  0x00007fffe125bf17: mov     %rdx,0x68(%rsp)
  0x00007fffe125bf1c: mov     %rbx,0x60(%rsp)
  0x00007fffe125bf21: mov     %rbp,0x50(%rsp)
  0x00007fffe125bf26: mov     %rsi,0x48(%rsp)
  0x00007fffe125bf2b: mov     %rdi,0x40(%rsp)
  0x00007fffe125bf30: mov     %r8,0x38(%rsp)
  0x00007fffe125bf35: mov     %r9,0x30(%rsp)
  0x00007fffe125bf3a: mov     %r10,0x28(%rsp)
  0x00007fffe125bf3f: mov     %r11,0x20(%rsp)
  0x00007fffe125bf44: mov     %r12,0x18(%rsp)
  0x00007fffe125bf49: mov     %r13,0x10(%rsp)
  0x00007fffe125bf4e: mov     %r14,0x8(%rsp)
  0x00007fffe125bf53: mov     %r15,(%rsp)
  0x00007fffe125bf57: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125bf61: movabs  $0x7fffe125bf01,%rsi  ;   {internal_word}
  0x00007fffe125bf6b: mov     %rsp,%rdx
  0x00007fffe125bf6e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125bf72: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125bf77: hlt
[Deopt Handler Code]
  0x00007fffe125bf78: movabs  $0x7fffe125bf78,%r10  ;   {section_word}
  0x00007fffe125bf82: push    %r10
  0x00007fffe125bf84: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125bf89: hlt
  0x00007fffe125bf8a: hlt
  0x00007fffe125bf8b: hlt
  0x00007fffe125bf8c: hlt
  0x00007fffe125bf8d: hlt
  0x00007fffe125bf8e: hlt
  0x00007fffe125bf8f: hlt
<nmethod compile_id='72' compiler='C1' level='2' entry='0x00007fffe125bbe0' size='1752' address='0x00007fffe125ba10' relocation_offset='304' insts_offset='464' stub_offset='1200' scopes_data_offset='1440' scopes_pcs_offset='1544' dependencies_offset='1720' nul_chk_table_offset='1728' method='java/io/BufferedWriter newLine ()V' bytes='9' count='36922' iicount='36922' stamp='119.834'/>
<writer thread='140737327351552'/>
<task_queued compile_id='105' method='java/io/PrintStream newLine ()V' bytes='73' count='38458' iicount='38458' stamp='119.849' comment='tiered' hot_count='38458'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe125a390:
Code:
Argument 0 is unknown.RIP: 0x7fffe125a6a0 Code size: 0x00000c30
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c23ed0} &apos;write&apos; &apos;(Ljava/lang/String;)V&apos; in &apos;java/io/PrintStream&apos;
  # this:     rsi:rsi   = &apos;java/io/PrintStream&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/String&apos;
  #           [sp+0x90]  (sp of caller)
  ;;  block B24 [0, 0]

  0x00007fffe125a6a0: mov     0x8(%rsi),%r10d
  0x00007fffe125a6a4: shl     $0x3,%r10
  0x00007fffe125a6a8: cmp     %rax,%r10
  0x00007fffe125a6ab: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe125a6b1: nop
  0x00007fffe125a6b2: nop
  0x00007fffe125a6b3: nop
  0x00007fffe125a6b4: nop
  0x00007fffe125a6b5: nop
  0x00007fffe125a6b6: nop
  0x00007fffe125a6b7: nop
  0x00007fffe125a6b8: nop
  0x00007fffe125a6b9: nop
  0x00007fffe125a6ba: nop
  0x00007fffe125a6bb: nop
  0x00007fffe125a6bc: nop
  0x00007fffe125a6bd: nop
  0x00007fffe125a6be: nop
  0x00007fffe125a6bf: nop
[Verified Entry Point]
  0x00007fffe125a6c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125a6c7: push    %rbp
  0x00007fffe125a6c8: sub     $0x80,%rsp
  0x00007fffe125a6cf: mov     %rsi,0x50(%rsp)
  0x00007fffe125a6d4: mov     %rdx,0x58(%rsp)
  0x00007fffe125a6d9: movabs  $0x7ffff4d70fb8,%rax
  0x00007fffe125a6e3: mov     0x8(%rax),%ecx
  0x00007fffe125a6e6: add     $0x8,%ecx
  0x00007fffe125a6e9: mov     %ecx,0x8(%rax)
  0x00007fffe125a6ec: movabs  $0x7ffff4c23ed0,%rax  ;   {metadata({method} {0x00007ffff4c23ed0} &apos;write&apos; &apos;(Ljava/lang/String;)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125a6f6: and     $0x3ff8,%ecx
  0x00007fffe125a6fc: cmp     $0x0,%ecx
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb4016e00]
  0x00007fffe125a6ff: je      0x7fffe125ad8b    ;*aload_0
                                                ; - java.io.PrintStream::write@0 (line 523)

  ;;  block B25 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe125a705: lea     0x68(%rsp),%rcx
  0x00007fffe125a70a: mov     %rsi,0x8(%rcx)
  0x00007fffe125a70e: mov     (%rsi),%rax
  0x00007fffe125a711: mov     %rax,%r8
  0x00007fffe125a714: and     $0x7,%r8
  0x00007fffe125a718: cmp     $0x5,%r8
  0x00007fffe125a71c: jne     0x7fffe125a7a6
  0x00007fffe125a722: mov     0x8(%rsi),%r8d
  0x00007fffe125a726: shl     $0x3,%r8
  0x00007fffe125a72a: mov     0xb0(%r8),%r8
  0x00007fffe125a731: or      %r15,%r8
  0x00007fffe125a734: xor     %rax,%r8
  0x00007fffe125a737: and     $0xffffffffffffff87,%r8
  0x00007fffe125a73b: je      0x7fffe125a7ce
  0x00007fffe125a741: test    $0x7,%r8
  0x00007fffe125a748: jne     0x7fffe125a792
  0x00007fffe125a74a: test    $0x300,%r8
  0x00007fffe125a751: jne     0x7fffe125a770
  0x00007fffe125a753: and     $0x37f,%rax
  0x00007fffe125a75a: mov     %rax,%r8
  0x00007fffe125a75d: or      %r15,%r8
  0x00007fffe125a760: lock cmpxchg %r8,(%rsi)
  0x00007fffe125a765: jne     0x7fffe125ada2
  0x00007fffe125a76b: jmpq    0x7fffe125a7ce
  0x00007fffe125a770: mov     0x8(%rsi),%r8d
  0x00007fffe125a774: shl     $0x3,%r8
  0x00007fffe125a778: mov     0xb0(%r8),%r8
  0x00007fffe125a77f: or      %r15,%r8
  0x00007fffe125a782: lock cmpxchg %r8,(%rsi)
  0x00007fffe125a787: jne     0x7fffe125ada2
  0x00007fffe125a78d: jmpq    0x7fffe125a7ce
  0x00007fffe125a792: mov     0x8(%rsi),%r8d
  0x00007fffe125a796: shl     $0x3,%r8
  0x00007fffe125a79a: mov     0xb0(%r8),%r8
  0x00007fffe125a7a1: lock cmpxchg %r8,(%rsi)
  0x00007fffe125a7a6: mov     (%rsi),%rax
  0x00007fffe125a7a9: or      $0x1,%rax
  0x00007fffe125a7ad: mov     %rax,(%rcx)
  0x00007fffe125a7b0: lock cmpxchg %rcx,(%rsi)
  0x00007fffe125a7b5: je      0x7fffe125a7ce
  0x00007fffe125a7bb: sub     %rsp,%rax
  0x00007fffe125a7be: and     $0xfffffffffffff007,%rax
  0x00007fffe125a7c5: mov     %rax,(%rcx)
  0x00007fffe125a7c8: jne     0x7fffe125ada2    ;*monitorenter
                                                ; - java.io.PrintStream::write@3 (line 523)

  0x00007fffe125a7ce: mov     0xc(%rsi),%ecx
  0x00007fffe125a7d1: push    %r10
  0x00007fffe125a7d3: cmp     0x16aff406(%rip),%r12  ;   {external_word}
  0x00007fffe125a7da: je      0x7fffe125a857
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125a7e0: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125a7e5: sub     $0x80,%rsp
  0x00007fffe125a7ec: mov     %rax,0x78(%rsp)
  0x00007fffe125a7f1: mov     %rcx,0x70(%rsp)
  0x00007fffe125a7f6: mov     %rdx,0x68(%rsp)
  0x00007fffe125a7fb: mov     %rbx,0x60(%rsp)
  0x00007fffe125a800: mov     %rbp,0x50(%rsp)
  0x00007fffe125a805: mov     %rsi,0x48(%rsp)
  0x00007fffe125a80a: mov     %rdi,0x40(%rsp)
  0x00007fffe125a80f: mov     %r8,0x38(%rsp)
  0x00007fffe125a814: mov     %r9,0x30(%rsp)
  0x00007fffe125a819: mov     %r10,0x28(%rsp)
  0x00007fffe125a81e: mov     %r11,0x20(%rsp)
  0x00007fffe125a823: mov     %r12,0x18(%rsp)
  0x00007fffe125a828: mov     %r13,0x10(%rsp)
  0x00007fffe125a82d: mov     %r14,0x8(%rsp)
  0x00007fffe125a832: mov     %r15,(%rsp)
  0x00007fffe125a836: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125a840: movabs  $0x7fffe125a7e0,%rsi  ;   {internal_word}
  0x00007fffe125a84a: mov     %rsp,%rdx
  0x00007fffe125a84d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125a851: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125a856: hlt
  0x00007fffe125a857: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)

  0x00007fffe125a859: cmp     $0x0,%rcx
  ;;   42 branch [EQ] [B14] 
  0x00007fffe125a85d: je      0x7fffe125ac74    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)

  ;;  block B15 [17, 34]

  0x00007fffe125a863: mov     0x18(%rsi),%edi
  0x00007fffe125a866: push    %r10
  0x00007fffe125a868: cmp     0x16aff371(%rip),%r12  ;   {external_word}
  0x00007fffe125a86f: je      0x7fffe125a8ec
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125a875: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125a87a: sub     $0x80,%rsp
  0x00007fffe125a881: mov     %rax,0x78(%rsp)
  0x00007fffe125a886: mov     %rcx,0x70(%rsp)
  0x00007fffe125a88b: mov     %rdx,0x68(%rsp)
  0x00007fffe125a890: mov     %rbx,0x60(%rsp)
  0x00007fffe125a895: mov     %rbp,0x50(%rsp)
  0x00007fffe125a89a: mov     %rsi,0x48(%rsp)
  0x00007fffe125a89f: mov     %rdi,0x40(%rsp)
  0x00007fffe125a8a4: mov     %r8,0x38(%rsp)
  0x00007fffe125a8a9: mov     %r9,0x30(%rsp)
  0x00007fffe125a8ae: mov     %r10,0x28(%rsp)
  0x00007fffe125a8b3: mov     %r11,0x20(%rsp)
  0x00007fffe125a8b8: mov     %r12,0x18(%rsp)
  0x00007fffe125a8bd: mov     %r13,0x10(%rsp)
  0x00007fffe125a8c2: mov     %r14,0x8(%rsp)
  0x00007fffe125a8c7: mov     %r15,(%rsp)
  0x00007fffe125a8cb: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125a8d5: movabs  $0x7fffe125a875,%rsi  ;   {internal_word}
  0x00007fffe125a8df: mov     %rsp,%rdx
  0x00007fffe125a8e2: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125a8e6: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125a8eb: hlt
  0x00007fffe125a8ec: pop     %r10              ;*getfield textOut
                                                ; - java.io.PrintStream::write@9 (line 525)

  0x00007fffe125a8ee: cmp     (%rdi),%rax       ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; implicit exception: dispatches to 0x00007fffe125adb5
  0x00007fffe125a8f1: mov     0xc(%rdx),%ecx    ; implicit exception: dispatches to 0x00007fffe125ae31
  0x00007fffe125a8f4: push    %r10
  0x00007fffe125a8f6: cmp     0x16aff2e3(%rip),%r12  ;   {external_word}
  0x00007fffe125a8fd: je      0x7fffe125a97a
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125a903: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125a908: sub     $0x80,%rsp
  0x00007fffe125a90f: mov     %rax,0x78(%rsp)
  0x00007fffe125a914: mov     %rcx,0x70(%rsp)
  0x00007fffe125a919: mov     %rdx,0x68(%rsp)
  0x00007fffe125a91e: mov     %rbx,0x60(%rsp)
  0x00007fffe125a923: mov     %rbp,0x50(%rsp)
  0x00007fffe125a928: mov     %rsi,0x48(%rsp)
  0x00007fffe125a92d: mov     %rdi,0x40(%rsp)
  0x00007fffe125a932: mov     %r8,0x38(%rsp)
  0x00007fffe125a937: mov     %r9,0x30(%rsp)
  0x00007fffe125a93c: mov     %r10,0x28(%rsp)
  0x00007fffe125a941: mov     %r11,0x20(%rsp)
  0x00007fffe125a946: mov     %r12,0x18(%rsp)
  0x00007fffe125a94b: mov     %r13,0x10(%rsp)
  0x00007fffe125a950: mov     %r14,0x8(%rsp)
  0x00007fffe125a955: mov     %r15,(%rsp)
  0x00007fffe125a959: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125a963: movabs  $0x7fffe125a903,%rsi  ;   {internal_word}
  0x00007fffe125a96d: mov     %rsp,%rdx
  0x00007fffe125a970: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125a974: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125a979: hlt
  0x00007fffe125a97a: pop     %r10              ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe125a97c: mov     0xc(%rcx),%r8d    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; implicit exception: dispatches to 0x00007fffe125aead
  0x00007fffe125a980: mov     %rdx,%rbx
  0x00007fffe125a983: mov     %rbx,%rdx
  0x00007fffe125a986: mov     $0x0,%ecx
  0x00007fffe125a98b: mov     %rdi,%rsi         ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe125a98e: nop
  0x00007fffe125a98f: callq   0x7fffe1105e80    ; OopMap{[80]=Oop [88]=Oop [112]=Oop off=756}
                                                ;*invokevirtual write
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {optimized virtual_call}
  0x00007fffe125a994: mov     0x50(%rsp),%rsi
  0x00007fffe125a999: mov     0x18(%rsi),%edi
  0x00007fffe125a99c: push    %r10
  0x00007fffe125a99e: cmp     0x16aff23b(%rip),%r12  ;   {external_word}
  0x00007fffe125a9a5: je      0x7fffe125aa22
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125a9ab: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125a9b0: sub     $0x80,%rsp
  0x00007fffe125a9b7: mov     %rax,0x78(%rsp)
  0x00007fffe125a9bc: mov     %rcx,0x70(%rsp)
  0x00007fffe125a9c1: mov     %rdx,0x68(%rsp)
  0x00007fffe125a9c6: mov     %rbx,0x60(%rsp)
  0x00007fffe125a9cb: mov     %rbp,0x50(%rsp)
  0x00007fffe125a9d0: mov     %rsi,0x48(%rsp)
  0x00007fffe125a9d5: mov     %rdi,0x40(%rsp)
  0x00007fffe125a9da: mov     %r8,0x38(%rsp)
  0x00007fffe125a9df: mov     %r9,0x30(%rsp)
  0x00007fffe125a9e4: mov     %r10,0x28(%rsp)
  0x00007fffe125a9e9: mov     %r11,0x20(%rsp)
  0x00007fffe125a9ee: mov     %r12,0x18(%rsp)
  0x00007fffe125a9f3: mov     %r13,0x10(%rsp)
  0x00007fffe125a9f8: mov     %r14,0x8(%rsp)
  0x00007fffe125a9fd: mov     %r15,(%rsp)
  0x00007fffe125aa01: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125aa0b: movabs  $0x7fffe125a9ab,%rsi  ;   {internal_word}
  0x00007fffe125aa15: mov     %rsp,%rdx
  0x00007fffe125aa18: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125aa1c: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125aa21: hlt
  0x00007fffe125aa22: pop     %r10              ;*getfield textOut
                                                ; - java.io.PrintStream::write@17 (line 526)

  0x00007fffe125aa24: cmp     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe125af29
  0x00007fffe125aa27: mov     %rdi,%rsi         ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)

  0x00007fffe125aa2a: nop
  0x00007fffe125aa2b: nop
  0x00007fffe125aa2c: nop
  0x00007fffe125aa2d: nop
  0x00007fffe125aa2e: nop
  0x00007fffe125aa2f: callq   0x7fffe1105e80    ; OopMap{[88]=Oop [80]=Oop [112]=Oop off=916}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ;   {optimized virtual_call}
  0x00007fffe125aa34: mov     0x50(%rsp),%rsi
  0x00007fffe125aa39: mov     0x1c(%rsi),%edi
  0x00007fffe125aa3c: push    %r10
  0x00007fffe125aa3e: cmp     0x16aff19b(%rip),%r12  ;   {external_word}
  0x00007fffe125aa45: je      0x7fffe125aac2
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125aa4b: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125aa50: sub     $0x80,%rsp
  0x00007fffe125aa57: mov     %rax,0x78(%rsp)
  0x00007fffe125aa5c: mov     %rcx,0x70(%rsp)
  0x00007fffe125aa61: mov     %rdx,0x68(%rsp)
  0x00007fffe125aa66: mov     %rbx,0x60(%rsp)
  0x00007fffe125aa6b: mov     %rbp,0x50(%rsp)
  0x00007fffe125aa70: mov     %rsi,0x48(%rsp)
  0x00007fffe125aa75: mov     %rdi,0x40(%rsp)
  0x00007fffe125aa7a: mov     %r8,0x38(%rsp)
  0x00007fffe125aa7f: mov     %r9,0x30(%rsp)
  0x00007fffe125aa84: mov     %r10,0x28(%rsp)
  0x00007fffe125aa89: mov     %r11,0x20(%rsp)
  0x00007fffe125aa8e: mov     %r12,0x18(%rsp)
  0x00007fffe125aa93: mov     %r13,0x10(%rsp)
  0x00007fffe125aa98: mov     %r14,0x8(%rsp)
  0x00007fffe125aa9d: mov     %r15,(%rsp)
  0x00007fffe125aaa1: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125aaab: movabs  $0x7fffe125aa4b,%rsi  ;   {internal_word}
  0x00007fffe125aab5: mov     %rsp,%rdx
  0x00007fffe125aab8: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125aabc: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125aac1: hlt
  0x00007fffe125aac2: pop     %r10              ;*getfield charOut
                                                ; - java.io.PrintStream::write@24 (line 527)

  0x00007fffe125aac4: mov     0x14(%rdi),%edi   ; implicit exception: dispatches to 0x00007fffe125afa5
  0x00007fffe125aac7: push    %r10
  0x00007fffe125aac9: cmp     0x16aff110(%rip),%r12  ;   {external_word}
  0x00007fffe125aad0: je      0x7fffe125ab4d
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125aad6: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125aadb: sub     $0x80,%rsp
  0x00007fffe125aae2: mov     %rax,0x78(%rsp)
  0x00007fffe125aae7: mov     %rcx,0x70(%rsp)
  0x00007fffe125aaec: mov     %rdx,0x68(%rsp)
  0x00007fffe125aaf1: mov     %rbx,0x60(%rsp)
  0x00007fffe125aaf6: mov     %rbp,0x50(%rsp)
  0x00007fffe125aafb: mov     %rsi,0x48(%rsp)
  0x00007fffe125ab00: mov     %rdi,0x40(%rsp)
  0x00007fffe125ab05: mov     %r8,0x38(%rsp)
  0x00007fffe125ab0a: mov     %r9,0x30(%rsp)
  0x00007fffe125ab0f: mov     %r10,0x28(%rsp)
  0x00007fffe125ab14: mov     %r11,0x20(%rsp)
  0x00007fffe125ab19: mov     %r12,0x18(%rsp)
  0x00007fffe125ab1e: mov     %r13,0x10(%rsp)
  0x00007fffe125ab23: mov     %r14,0x8(%rsp)
  0x00007fffe125ab28: mov     %r15,(%rsp)
  0x00007fffe125ab2c: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125ab36: movabs  $0x7fffe125aad6,%rsi  ;   {internal_word}
  0x00007fffe125ab40: mov     %rsp,%rdx
  0x00007fffe125ab43: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125ab47: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125ab4c: hlt
  0x00007fffe125ab4d: pop     %r10              ;*getfield se
                                                ; - java.io.OutputStreamWriter::flushBuffer@1 (line 185)
                                                ; - java.io.PrintStream::write@27 (line 527)

  0x00007fffe125ab4f: cmp     (%rdi),%rax       ; implicit exception: dispatches to 0x00007fffe125b021
  0x00007fffe125ab52: mov     %rdi,%rsi         ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; - java.io.PrintStream::write@27 (line 527)

  0x00007fffe125ab55: nop
  0x00007fffe125ab56: nop
  0x00007fffe125ab57: callq   0x7fffe1105e80    ; OopMap{[88]=Oop [80]=Oop [112]=Oop off=1212}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ;   {optimized virtual_call}
  0x00007fffe125ab5c: mov     0x50(%rsp),%rsi
  0x00007fffe125ab61: movsbl  0x10(%rsi),%edx   ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@31 (line 528)

  0x00007fffe125ab65: cmp     $0x0,%edx
  ;;   88 branch [EQ] [B6] 
  0x00007fffe125ab68: je      0x7fffe125ac34    ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)

  ;;  block B5 [37, 43]

  0x00007fffe125ab6e: mov     $0xa,%edx
  0x00007fffe125ab73: mov     $0x0,%ecx
  0x00007fffe125ab78: mov     0x58(%rsp),%rsi   ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  0x00007fffe125ab7d: nop
  0x00007fffe125ab7e: nop
  0x00007fffe125ab7f: callq   0x7fffe1105e80    ; OopMap{[80]=Oop [112]=Oop off=1252}
                                                ;*invokevirtual indexOf
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ;   {optimized virtual_call}
  0x00007fffe125ab84: cmp     $0x0,%eax
  ;;  110 branch [LT] [B6] 
  0x00007fffe125ab87: jl      0x7fffe125ac34    ;*iflt
                                                ; - java.io.PrintStream::write@43 (line 528)

  ;;  block B7 [46, 53]

  0x00007fffe125ab8d: mov     0x50(%rsp),%rsi
  0x00007fffe125ab92: mov     0xc(%rsi),%edi
  0x00007fffe125ab95: push    %r10
  0x00007fffe125ab97: cmp     0x16aff042(%rip),%r12  ;   {external_word}
  0x00007fffe125ab9e: je      0x7fffe125ac1b
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125aba4: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125aba9: sub     $0x80,%rsp
  0x00007fffe125abb0: mov     %rax,0x78(%rsp)
  0x00007fffe125abb5: mov     %rcx,0x70(%rsp)
  0x00007fffe125abba: mov     %rdx,0x68(%rsp)
  0x00007fffe125abbf: mov     %rbx,0x60(%rsp)
  0x00007fffe125abc4: mov     %rbp,0x50(%rsp)
  0x00007fffe125abc9: mov     %rsi,0x48(%rsp)
  0x00007fffe125abce: mov     %rdi,0x40(%rsp)
  0x00007fffe125abd3: mov     %r8,0x38(%rsp)
  0x00007fffe125abd8: mov     %r9,0x30(%rsp)
  0x00007fffe125abdd: mov     %r10,0x28(%rsp)
  0x00007fffe125abe2: mov     %r11,0x20(%rsp)
  0x00007fffe125abe7: mov     %r12,0x18(%rsp)
  0x00007fffe125abec: mov     %r13,0x10(%rsp)
  0x00007fffe125abf1: mov     %r14,0x8(%rsp)
  0x00007fffe125abf6: mov     %r15,(%rsp)
  0x00007fffe125abfa: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125ac04: movabs  $0x7fffe125aba4,%rsi  ;   {internal_word}
  0x00007fffe125ac0e: mov     %rsp,%rdx
  0x00007fffe125ac11: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125ac15: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125ac1a: hlt
  0x00007fffe125ac1b: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::write@47 (line 529)

  0x00007fffe125ac1d: mov     %rdi,%rsi         ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@50 (line 529)

  0x00007fffe125ac20: nop
  0x00007fffe125ac21: nop
  0x00007fffe125ac22: nop
  0x00007fffe125ac23: nop
  0x00007fffe125ac24: nop
  0x00007fffe125ac25: movabs  $0xffffffffffffffff,%rax
  0x00007fffe125ac2f: callq   0x7fffe11060c0    ; OopMap{[80]=Oop [112]=Oop off=1428}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@50 (line 529)
                                                ;   {virtual_call}
  ;;  block B6 [53, 63]

  0x00007fffe125ac34: lea     0x68(%rsp),%rax
  0x00007fffe125ac39: mov     0x8(%rax),%rsi
  0x00007fffe125ac3d: mov     (%rsi),%rdx
  0x00007fffe125ac40: and     $0x7,%rdx
  0x00007fffe125ac44: cmp     $0x5,%rdx
  0x00007fffe125ac48: je      0x7fffe125ac65
  0x00007fffe125ac4e: mov     (%rax),%rdx
  0x00007fffe125ac51: test    %rdx,%rdx
  0x00007fffe125ac54: je      0x7fffe125ac65
  0x00007fffe125ac5a: lock cmpxchg %rdx,(%rsi)
  0x00007fffe125ac5f: jne     0x7fffe125b09d    ;*monitorexit
                                                ; - java.io.PrintStream::write@54 (line 530)

  0x00007fffe125ac65: add     $0x80,%rsp
  0x00007fffe125ac6c: pop     %rbp
  0x00007fffe125ac6d: test    %eax,0x16da048d(%rip)  ;   {poll_return}
  0x00007fffe125ac73: retq
  ;;  block B14 [7, 16]

  ;;  138 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe125ac74: nop
  0x00007fffe125ac75: nop
  0x00007fffe125ac76: nop
  0x00007fffe125ac77: nop
  0x00007fffe125ac78: jmpq    0x7fffe125b0bf    ;   {no_reloc}
  0x00007fffe125ac7d: add     %al,(%rax)
  0x00007fffe125ac7f: add     %al,(%rax)
  0x00007fffe125ac81: add     %ch,%cl
  0x00007fffe125ac83: add     $0x0,%al
  0x00007fffe125ac86: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe125ac89: pop     %rax
  0x00007fffe125ac8a: xlat    (%rbx)
  0x00007fffe125ac8b: xlat    (%rbx)
  0x00007fffe125ac8d: add     %al,(%rax)
  0x00007fffe125ac8f: add     %al,(%rax)
  0x00007fffe125ac91: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)

  0x00007fffe125ac94: mov     %rax,0x60(%rsp)
  0x00007fffe125ac99: nop
  0x00007fffe125ac9a: nop
  0x00007fffe125ac9b: nop
  0x00007fffe125ac9c: nop
  0x00007fffe125ac9d: nop
  0x00007fffe125ac9e: nop
  0x00007fffe125ac9f: callq   0x7fffe1105e80    ; OopMap{[80]=Oop [96]=Oop [88]=Oop [112]=Oop off=1540}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ;   {optimized virtual_call}
  0x00007fffe125aca4: mov     0x60(%rsp),%rax   ; OopMap{[80]=Oop [88]=Oop [112]=Oop rax=Oop off=1545}
                                                ;*athrow
                                                ; - java.io.PrintStream::ensureOpen@16 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)

  0x00007fffe125aca9: movabs  $0x7fffe125aca9,%rdx  ;   {section_word}
  0x00007fffe125acb3: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe125acb8: nop                       ;*athrow
                                                ; - java.io.PrintStream::ensureOpen@16 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)

  ;;  block B1 [58, 62]

  0x00007fffe125acb9: mov     0x348(%r15),%rax
  0x00007fffe125acc0: xor     %r10,%r10
  0x00007fffe125acc3: mov     %r10,0x348(%r15)
  0x00007fffe125acca: xor     %r10,%r10
  0x00007fffe125accd: mov     %r10,0x350(%r15)
  0x00007fffe125acd4: mov     %rax,%rdx
  0x00007fffe125acd7: lea     0x68(%rsp),%rax
  0x00007fffe125acdc: mov     0x8(%rax),%rdi
  0x00007fffe125ace0: mov     (%rdi),%rsi
  0x00007fffe125ace3: and     $0x7,%rsi
  0x00007fffe125ace7: cmp     $0x5,%rsi
  0x00007fffe125aceb: je      0x7fffe125ad08
  0x00007fffe125acf1: mov     (%rax),%rsi
  0x00007fffe125acf4: test    %rsi,%rsi
  0x00007fffe125acf7: je      0x7fffe125ad08
  0x00007fffe125acfd: lock cmpxchg %rsi,(%rdi)
  0x00007fffe125ad02: jne     0x7fffe125b0d6    ;*monitorexit
                                                ; - java.io.PrintStream::write@60 (line 530)

  0x00007fffe125ad08: mov     %rdx,%rax         ; OopMap{[80]=Oop rax=Oop off=1643}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)

  0x00007fffe125ad0b: movabs  $0x7fffe125ad0b,%rdx  ;   {section_word}
  0x00007fffe125ad15: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe125ad1a: nop                       ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)

  ;;  block B3 [76, 82]

  0x00007fffe125ad1b: mov     0x50(%rsp),%rsi
  0x00007fffe125ad20: mov     0x348(%r15),%rax
  0x00007fffe125ad27: xor     %r10,%r10
  0x00007fffe125ad2a: mov     %r10,0x348(%r15)
  0x00007fffe125ad31: xor     %r10,%r10
  0x00007fffe125ad34: mov     %r10,0x350(%r15)
  0x00007fffe125ad3b: movb    $0x1,0x11(%rsi)   ;*putfield trouble
                                                ; - java.io.PrintStream::write@79 (line 536)

  0x00007fffe125ad3f: add     $0x80,%rsp
  0x00007fffe125ad46: pop     %rbp
  0x00007fffe125ad47: test    %eax,0x16da03b3(%rip)  ;   {poll_return}
  0x00007fffe125ad4d: retq
  ;;  block B2 [66, 73]

  0x00007fffe125ad4e: mov     0x348(%r15),%rax
  0x00007fffe125ad55: xor     %r10,%r10
  0x00007fffe125ad58: mov     %r10,0x348(%r15)
  0x00007fffe125ad5f: xor     %r10,%r10
  0x00007fffe125ad62: mov     %r10,0x350(%r15)
  0x00007fffe125ad69: mov     0x268(%r15),%rsi  ;*invokestatic currentThread
                                                ; - java.io.PrintStream::write@67 (line 533)

  0x00007fffe125ad70: cmp     (%rsi),%rax       ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::write@70 (line 533)
                                                ; implicit exception: dispatches to 0x00007fffe125b0e9
  0x00007fffe125ad73: nop
  0x00007fffe125ad74: nop
  0x00007fffe125ad75: nop
  0x00007fffe125ad76: nop
  0x00007fffe125ad77: callq   0x7fffe1105e80    ; OopMap{off=1756}
                                                ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::write@70 (line 533)
                                                ;   {optimized virtual_call}
  ;;  block B11 [82, 82]

  0x00007fffe125ad7c: add     $0x80,%rsp
  0x00007fffe125ad83: pop     %rbp
  0x00007fffe125ad84: test    %eax,0x16da0376(%rip)  ;   {poll_return}
  0x00007fffe125ad8a: retq
  ;; CounterOverflowStub slow case
  0x00007fffe125ad8b: mov     %rax,0x8(%rsp)
  0x00007fffe125ad90: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125ad98: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop off=1789}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 523)
                                                ;   {runtime_call}
  0x00007fffe125ad9d: jmpq    0x7fffe125a705
  ;; MonitorEnterStub slow case
  0x00007fffe125ada2: mov     %rsi,0x8(%rsp)
  0x00007fffe125ada7: mov     %rcx,(%rsp)
  0x00007fffe125adab: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop [112]=Oop off=1808}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::write@3 (line 523)
                                                ;   {runtime_call}
  0x00007fffe125adb0: jmpq    0x7fffe125a7ce
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125adb5: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop rdi=Oop [112]=Oop off=1818}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe125adba: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125adbf: sub     $0x80,%rsp
  0x00007fffe125adc6: mov     %rax,0x78(%rsp)
  0x00007fffe125adcb: mov     %rcx,0x70(%rsp)
  0x00007fffe125add0: mov     %rdx,0x68(%rsp)
  0x00007fffe125add5: mov     %rbx,0x60(%rsp)
  0x00007fffe125adda: mov     %rbp,0x50(%rsp)
  0x00007fffe125addf: mov     %rsi,0x48(%rsp)
  0x00007fffe125ade4: mov     %rdi,0x40(%rsp)
  0x00007fffe125ade9: mov     %r8,0x38(%rsp)
  0x00007fffe125adee: mov     %r9,0x30(%rsp)
  0x00007fffe125adf3: mov     %r10,0x28(%rsp)
  0x00007fffe125adf8: mov     %r11,0x20(%rsp)
  0x00007fffe125adfd: mov     %r12,0x18(%rsp)
  0x00007fffe125ae02: mov     %r13,0x10(%rsp)
  0x00007fffe125ae07: mov     %r14,0x8(%rsp)
  0x00007fffe125ae0c: mov     %r15,(%rsp)
  0x00007fffe125ae10: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125ae1a: movabs  $0x7fffe125adba,%rsi  ;   {internal_word}
  0x00007fffe125ae24: mov     %rsp,%rdx
  0x00007fffe125ae27: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125ae2b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125ae30: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125ae31: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop rdi=Oop [112]=Oop off=1942}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe125ae36: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125ae3b: sub     $0x80,%rsp
  0x00007fffe125ae42: mov     %rax,0x78(%rsp)
  0x00007fffe125ae47: mov     %rcx,0x70(%rsp)
  0x00007fffe125ae4c: mov     %rdx,0x68(%rsp)
  0x00007fffe125ae51: mov     %rbx,0x60(%rsp)
  0x00007fffe125ae56: mov     %rbp,0x50(%rsp)
  0x00007fffe125ae5b: mov     %rsi,0x48(%rsp)
  0x00007fffe125ae60: mov     %rdi,0x40(%rsp)
  0x00007fffe125ae65: mov     %r8,0x38(%rsp)
  0x00007fffe125ae6a: mov     %r9,0x30(%rsp)
  0x00007fffe125ae6f: mov     %r10,0x28(%rsp)
  0x00007fffe125ae74: mov     %r11,0x20(%rsp)
  0x00007fffe125ae79: mov     %r12,0x18(%rsp)
  0x00007fffe125ae7e: mov     %r13,0x10(%rsp)
  0x00007fffe125ae83: mov     %r14,0x8(%rsp)
  0x00007fffe125ae88: mov     %r15,(%rsp)
  0x00007fffe125ae8c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125ae96: movabs  $0x7fffe125ae36,%rsi  ;   {internal_word}
  0x00007fffe125aea0: mov     %rsp,%rdx
  0x00007fffe125aea3: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125aea7: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125aeac: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125aead: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [80]=Oop rdx=Oop [88]=Oop rdi=Oop [112]=Oop off=2066}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe125aeb2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125aeb7: sub     $0x80,%rsp
  0x00007fffe125aebe: mov     %rax,0x78(%rsp)
  0x00007fffe125aec3: mov     %rcx,0x70(%rsp)
  0x00007fffe125aec8: mov     %rdx,0x68(%rsp)
  0x00007fffe125aecd: mov     %rbx,0x60(%rsp)
  0x00007fffe125aed2: mov     %rbp,0x50(%rsp)
  0x00007fffe125aed7: mov     %rsi,0x48(%rsp)
  0x00007fffe125aedc: mov     %rdi,0x40(%rsp)
  0x00007fffe125aee1: mov     %r8,0x38(%rsp)
  0x00007fffe125aee6: mov     %r9,0x30(%rsp)
  0x00007fffe125aeeb: mov     %r10,0x28(%rsp)
  0x00007fffe125aef0: mov     %r11,0x20(%rsp)
  0x00007fffe125aef5: mov     %r12,0x18(%rsp)
  0x00007fffe125aefa: mov     %r13,0x10(%rsp)
  0x00007fffe125aeff: mov     %r14,0x8(%rsp)
  0x00007fffe125af04: mov     %r15,(%rsp)
  0x00007fffe125af08: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125af12: movabs  $0x7fffe125aeb2,%rsi  ;   {internal_word}
  0x00007fffe125af1c: mov     %rsp,%rdx
  0x00007fffe125af1f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125af23: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125af28: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125af29: callq   0x7fffe11670a0    ; OopMap{[88]=Oop rsi=Oop [80]=Oop rdi=Oop [112]=Oop off=2190}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ;   {runtime_call}
  0x00007fffe125af2e: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125af33: sub     $0x80,%rsp
  0x00007fffe125af3a: mov     %rax,0x78(%rsp)
  0x00007fffe125af3f: mov     %rcx,0x70(%rsp)
  0x00007fffe125af44: mov     %rdx,0x68(%rsp)
  0x00007fffe125af49: mov     %rbx,0x60(%rsp)
  0x00007fffe125af4e: mov     %rbp,0x50(%rsp)
  0x00007fffe125af53: mov     %rsi,0x48(%rsp)
  0x00007fffe125af58: mov     %rdi,0x40(%rsp)
  0x00007fffe125af5d: mov     %r8,0x38(%rsp)
  0x00007fffe125af62: mov     %r9,0x30(%rsp)
  0x00007fffe125af67: mov     %r10,0x28(%rsp)
  0x00007fffe125af6c: mov     %r11,0x20(%rsp)
  0x00007fffe125af71: mov     %r12,0x18(%rsp)
  0x00007fffe125af76: mov     %r13,0x10(%rsp)
  0x00007fffe125af7b: mov     %r14,0x8(%rsp)
  0x00007fffe125af80: mov     %r15,(%rsp)
  0x00007fffe125af84: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125af8e: movabs  $0x7fffe125af2e,%rsi  ;   {internal_word}
  0x00007fffe125af98: mov     %rsp,%rdx
  0x00007fffe125af9b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125af9f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125afa4: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125afa5: callq   0x7fffe11670a0    ; OopMap{[88]=Oop rsi=Oop [80]=Oop [112]=Oop off=2314}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ;   {runtime_call}
  0x00007fffe125afaa: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125afaf: sub     $0x80,%rsp
  0x00007fffe125afb6: mov     %rax,0x78(%rsp)
  0x00007fffe125afbb: mov     %rcx,0x70(%rsp)
  0x00007fffe125afc0: mov     %rdx,0x68(%rsp)
  0x00007fffe125afc5: mov     %rbx,0x60(%rsp)
  0x00007fffe125afca: mov     %rbp,0x50(%rsp)
  0x00007fffe125afcf: mov     %rsi,0x48(%rsp)
  0x00007fffe125afd4: mov     %rdi,0x40(%rsp)
  0x00007fffe125afd9: mov     %r8,0x38(%rsp)
  0x00007fffe125afde: mov     %r9,0x30(%rsp)
  0x00007fffe125afe3: mov     %r10,0x28(%rsp)
  0x00007fffe125afe8: mov     %r11,0x20(%rsp)
  0x00007fffe125afed: mov     %r12,0x18(%rsp)
  0x00007fffe125aff2: mov     %r13,0x10(%rsp)
  0x00007fffe125aff7: mov     %r14,0x8(%rsp)
  0x00007fffe125affc: mov     %r15,(%rsp)
  0x00007fffe125b000: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125b00a: movabs  $0x7fffe125afaa,%rsi  ;   {internal_word}
  0x00007fffe125b014: mov     %rsp,%rdx
  0x00007fffe125b017: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125b01b: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125b020: hlt
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125b021: callq   0x7fffe11670a0    ; OopMap{[88]=Oop rsi=Oop [80]=Oop rdi=Oop [112]=Oop off=2438}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.OutputStreamWriter::flushBuffer@4 (line 185)
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ;   {runtime_call}
  0x00007fffe125b026: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125b02b: sub     $0x80,%rsp
  0x00007fffe125b032: mov     %rax,0x78(%rsp)
  0x00007fffe125b037: mov     %rcx,0x70(%rsp)
  0x00007fffe125b03c: mov     %rdx,0x68(%rsp)
  0x00007fffe125b041: mov     %rbx,0x60(%rsp)
  0x00007fffe125b046: mov     %rbp,0x50(%rsp)
  0x00007fffe125b04b: mov     %rsi,0x48(%rsp)
  0x00007fffe125b050: mov     %rdi,0x40(%rsp)
  0x00007fffe125b055: mov     %r8,0x38(%rsp)
  0x00007fffe125b05a: mov     %r9,0x30(%rsp)
  0x00007fffe125b05f: mov     %r10,0x28(%rsp)
  0x00007fffe125b064: mov     %r11,0x20(%rsp)
  0x00007fffe125b069: mov     %r12,0x18(%rsp)
  0x00007fffe125b06e: mov     %r13,0x10(%rsp)
  0x00007fffe125b073: mov     %r14,0x8(%rsp)
  0x00007fffe125b078: mov     %r15,(%rsp)
  0x00007fffe125b07c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125b086: movabs  $0x7fffe125b026,%rsi  ;   {internal_word}
  0x00007fffe125b090: mov     %rsp,%rdx
  0x00007fffe125b093: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125b097: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125b09c: hlt
  ;; MonitorExitStub slow case
  0x00007fffe125b09d: lea     0x68(%rsp),%rax
  0x00007fffe125b0a2: mov     %rax,(%rsp)
  0x00007fffe125b0a6: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe125b0ab: jmpq    0x7fffe125ac65
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe125b0b0: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe125b0ba: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe125b0bf: callq   0x7fffe11fc960    ; OopMap{[80]=Oop [88]=Oop [112]=Oop off=2596}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ;   {runtime_call}
  0x00007fffe125b0c4: jmpq    0x7fffe125ac78
  ;; NewInstanceStub slow case
  0x00007fffe125b0c9: mov     %rdx,%rdx
  0x00007fffe125b0cc: callq   0x7fffe11668a0    ; OopMap{[80]=Oop [88]=Oop [112]=Oop off=2609}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ;   {runtime_call}
  0x00007fffe125b0d1: jmpq    0x7fffe125ac87
  ;; MonitorExitStub slow case
  0x00007fffe125b0d6: lea     0x68(%rsp),%rax
  0x00007fffe125b0db: mov     %rax,(%rsp)
  0x00007fffe125b0df: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe125b0e4: jmpq    0x7fffe125ad08
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125b0e9: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=2638}
                                                ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::write@70 (line 533)
                                                ;   {runtime_call}
  0x00007fffe125b0ee: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125b0f3: sub     $0x80,%rsp
  0x00007fffe125b0fa: mov     %rax,0x78(%rsp)
  0x00007fffe125b0ff: mov     %rcx,0x70(%rsp)
  0x00007fffe125b104: mov     %rdx,0x68(%rsp)
  0x00007fffe125b109: mov     %rbx,0x60(%rsp)
  0x00007fffe125b10e: mov     %rbp,0x50(%rsp)
  0x00007fffe125b113: mov     %rsi,0x48(%rsp)
  0x00007fffe125b118: mov     %rdi,0x40(%rsp)
  0x00007fffe125b11d: mov     %r8,0x38(%rsp)
  0x00007fffe125b122: mov     %r9,0x30(%rsp)
  0x00007fffe125b127: mov     %r10,0x28(%rsp)
  0x00007fffe125b12c: mov     %r11,0x20(%rsp)
  0x00007fffe125b131: mov     %r12,0x18(%rsp)
  0x00007fffe125b136: mov     %r13,0x10(%rsp)
  0x00007fffe125b13b: mov     %r14,0x8(%rsp)
  0x00007fffe125b140: mov     %r15,(%rsp)
  0x00007fffe125b144: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125b14e: movabs  $0x7fffe125b0ee,%rsi  ;   {internal_word}
  0x00007fffe125b158: mov     %rsp,%rdx
  0x00007fffe125b15b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125b15f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125b164: hlt
  0x00007fffe125b165: nop
  0x00007fffe125b166: nop
  ;; Unwind handler
  0x00007fffe125b167: mov     0x348(%r15),%rax
  0x00007fffe125b16e: movabs  $0x0,%r10
  0x00007fffe125b178: mov     %r10,0x348(%r15)
  0x00007fffe125b17f: movabs  $0x0,%r10
  0x00007fffe125b189: mov     %r10,0x350(%r15)
  0x00007fffe125b190: add     $0x80,%rsp
  0x00007fffe125b197: pop     %rbp
  0x00007fffe125b198: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe125b19d: hlt
  0x00007fffe125b19e: hlt
  0x00007fffe125b19f: hlt
[Stub Code]
  0x00007fffe125b1a0: nop                       ;   {no_reloc}
  0x00007fffe125b1a1: nop
  0x00007fffe125b1a2: nop
  0x00007fffe125b1a3: nop
  0x00007fffe125b1a4: nop
  0x00007fffe125b1a5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b1af: jmpq    0x7fffe125b1af    ;   {runtime_call}
  0x00007fffe125b1b4: nop
  0x00007fffe125b1b5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b1bf: jmpq    0x7fffe125b1bf    ;   {runtime_call}
  0x00007fffe125b1c4: nop
  0x00007fffe125b1c5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b1cf: jmpq    0x7fffe125b1cf    ;   {runtime_call}
  0x00007fffe125b1d4: nop
  0x00007fffe125b1d5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b1df: jmpq    0x7fffe125b1df    ;   {runtime_call}
  0x00007fffe125b1e4: nop
  0x00007fffe125b1e5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b1ef: jmpq    0x7fffe125b1ef    ;   {runtime_call}
  0x00007fffe125b1f4: nop
  0x00007fffe125b1f5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b1ff: jmpq    0x7fffe125b1ff    ;   {runtime_call}
  0x00007fffe125b204: nop
  0x00007fffe125b205: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125b20f: jmpq    0x7fffe125b20f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe125b214: movabs  $0xdead,%rbx
  0x00007fffe125b21e: movabs  $0xdead,%rcx
  0x00007fffe125b228: movabs  $0xdead,%rsi
  0x00007fffe125b232: movabs  $0xdead,%rdi
  0x00007fffe125b23c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125b241: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125b246: sub     $0x80,%rsp
  0x00007fffe125b24d: mov     %rax,0x78(%rsp)
  0x00007fffe125b252: mov     %rcx,0x70(%rsp)
  0x00007fffe125b257: mov     %rdx,0x68(%rsp)
  0x00007fffe125b25c: mov     %rbx,0x60(%rsp)
  0x00007fffe125b261: mov     %rbp,0x50(%rsp)
  0x00007fffe125b266: mov     %rsi,0x48(%rsp)
  0x00007fffe125b26b: mov     %rdi,0x40(%rsp)
  0x00007fffe125b270: mov     %r8,0x38(%rsp)
  0x00007fffe125b275: mov     %r9,0x30(%rsp)
  0x00007fffe125b27a: mov     %r10,0x28(%rsp)
  0x00007fffe125b27f: mov     %r11,0x20(%rsp)
  0x00007fffe125b284: mov     %r12,0x18(%rsp)
  0x00007fffe125b289: mov     %r13,0x10(%rsp)
  0x00007fffe125b28e: mov     %r14,0x8(%rsp)
  0x00007fffe125b293: mov     %r15,(%rsp)
  0x00007fffe125b297: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125b2a1: movabs  $0x7fffe125b241,%rsi  ;   {internal_word}
  0x00007fffe125b2ab: mov     %rsp,%rdx
  0x00007fffe125b2ae: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125b2b2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125b2b7: hlt
[Deopt Handler Code]
  0x00007fffe125b2b8: movabs  $0x7fffe125b2b8,%r10  ;   {section_word}
  0x00007fffe125b2c2: push    %r10
  0x00007fffe125b2c4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125b2c9: hlt
  0x00007fffe125b2ca: hlt
  0x00007fffe125b2cb: hlt
  0x00007fffe125b2cc: hlt
  0x00007fffe125b2cd: hlt
  0x00007fffe125b2ce: hlt
  0x00007fffe125b2cf: hlt
<nmethod compile_id='70' compiler='C1' level='2' entry='0x00007fffe125a6a0' size='5728' address='0x00007fffe125a390' relocation_offset='304' insts_offset='784' stub_offset='3600' scopes_data_offset='3992' scopes_pcs_offset='4432' dependencies_offset='5248' handler_table_offset='5264' nul_chk_table_offset='5664' method='java/io/PrintStream write (Ljava/lang/String;)V' bytes='83' count='44515' iicount='44515' stamp='119.953'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe1269d10:
Code:
Argument 0 is unknown.RIP: 0x7fffe1269ec0 Code size: 0x00000698
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4b68858} &apos;toString&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/Integer&apos;
  # parm0:    rsi       = int
  #           [sp+0x40]  (sp of caller)
  ;; N1: #	B1 &lt;- B54 B55 B60 B38 B69 B73 B56 B49 B50 B53  Freq: 1

  ;; B1: #	B54 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1269ec0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1269ec7: push    %rbp
  0x00007fffe1269ec8: sub     $0x30,%rsp        ;*synchronization entry
                                                ; - java.lang.Integer::toString@-1 (line 398)

  0x00007fffe1269ecc: mov     %esi,0x10(%rsp)
  0x00007fffe1269ed0: cmp     $0x80000000,%esi
  0x00007fffe1269ed6: je      0x7fffe126a41d    ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)

  ;; B2: #	B55 B3 &lt;- B1  Freq: 1

  0x00007fffe1269edc: test    %esi,%esi
  0x00007fffe1269ede: jl      0x7fffe126a431    ;*ifge
                                                ; - java.lang.Integer::toString@10 (line 400)

  ;; B3: #	B22 B4 &lt;- B2  Freq: 0.999999

  0x00007fffe1269ee4: movabs  $0xd73af3c0,%r9   ;   {oop([I)}
  0x00007fffe1269eee: mov     0x10(%r9),%r11d
  0x00007fffe1269ef2: cmp     %r11d,%esi
  0x00007fffe1269ef5: jle     0x7fffe1269fa9
  ;; B4: #	B21 B5 &lt;- B3  Freq: 0.333303

  0x00007fffe1269efb: mov     0x14(%r9),%r11d
  0x00007fffe1269eff: cmp     %r11d,%esi
  0x00007fffe1269f02: jle     0x7fffe1269fa1
  ;; B5: #	B20 B6 &lt;- B4  Freq: 0.111091

  0x00007fffe1269f08: mov     0x18(%r9),%r11d
  0x00007fffe1269f0c: cmp     %r11d,%esi
  0x00007fffe1269f0f: jle     0x7fffe1269f99
  ;; B6: #	B19 B7 &lt;- B5  Freq: 0.0370268

  0x00007fffe1269f15: mov     0x1c(%r9),%r11d
  0x00007fffe1269f19: cmp     %r11d,%esi
  0x00007fffe1269f1c: jle     0x7fffe1269f8e
  ;; B7: #	B18 B8 &lt;- B6  Freq: 0.0123412

  0x00007fffe1269f1e: mov     0x20(%r9),%r11d
  0x00007fffe1269f22: cmp     %r11d,%esi
  0x00007fffe1269f25: jle     0x7fffe1269f83
  ;; B8: #	B17 B9 &lt;- B7  Freq: 0.00411334

  0x00007fffe1269f27: mov     0x24(%r9),%r11d
  0x00007fffe1269f2b: cmp     %r11d,%esi
  0x00007fffe1269f2e: jle     0x7fffe1269f78
  ;; B9: #	B16 B10 &lt;- B8  Freq: 0.00137099

  0x00007fffe1269f30: mov     0x28(%r9),%r11d
  0x00007fffe1269f34: cmp     %r11d,%esi
  0x00007fffe1269f37: jle     0x7fffe1269f70
  ;; B10: #	B15 B11 &lt;- B9  Freq: 0.000456954

  0x00007fffe1269f39: mov     0x2c(%r9),%r11d
  0x00007fffe1269f3d: cmp     %r11d,%esi
  0x00007fffe1269f40: jle     0x7fffe1269f68
  ;; B11: #	B14 B12 &lt;- B10  Freq: 0.000152304

  0x00007fffe1269f42: mov     0x30(%r9),%r11d
  0x00007fffe1269f46: cmp     %r11d,%esi
  0x00007fffe1269f49: jle     0x7fffe1269f60
  ;; B12: #	B69 B13 &lt;- B11  Freq: 5.07634e-05

  0x00007fffe1269f4b: mov     0x34(%r9),%r11d
  0x00007fffe1269f4f: cmp     %r11d,%esi
  0x00007fffe1269f52: jnle    0x7fffe126a4fa    ;*if_icmpgt
                                                ; - java.lang.Integer::stringSize@8 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)

  ;; B13: #	B23 &lt;- B12  Freq: 5.07634e-05

  0x00007fffe1269f58: mov     $0xa,%r10d
  0x00007fffe1269f5e: jmp     0x7fffe1269faf
  ;; B14: #	B23 &lt;- B11  Freq: 0.000101541

  0x00007fffe1269f60: mov     $0x9,%r10d
  0x00007fffe1269f66: jmp     0x7fffe1269faf
  ;; B15: #	B23 &lt;- B10  Freq: 0.00030465

  0x00007fffe1269f68: mov     $0x8,%r10d
  0x00007fffe1269f6e: jmp     0x7fffe1269faf
  ;; B16: #	B23 &lt;- B9  Freq: 0.000914034

  0x00007fffe1269f70: mov     $0x7,%r10d
  0x00007fffe1269f76: jmp     0x7fffe1269faf
  ;; B17: #	B23 &lt;- B8  Freq: 0.00274235

  0x00007fffe1269f78: mov     $0x6,%r11d
  0x00007fffe1269f7e: mov     %r11d,%r10d
  0x00007fffe1269f81: jmp     0x7fffe1269faf
  ;; B18: #	B23 &lt;- B7  Freq: 0.00822781

  0x00007fffe1269f83: mov     $0x5,%r11d
  0x00007fffe1269f89: mov     %r11d,%r10d
  0x00007fffe1269f8c: jmp     0x7fffe1269faf
  ;; B19: #	B23 &lt;- B6  Freq: 0.0246857

  0x00007fffe1269f8e: mov     $0x4,%r11d
  0x00007fffe1269f94: mov     %r11d,%r10d
  0x00007fffe1269f97: jmp     0x7fffe1269faf
  ;; B20: #	B23 &lt;- B5  Freq: 0.0740638

  0x00007fffe1269f99: mov     $0x3,%r10d
  0x00007fffe1269f9f: jmp     0x7fffe1269faf
  ;; B21: #	B23 &lt;- B4  Freq: 0.222212

  0x00007fffe1269fa1: mov     $0x2,%r10d
  0x00007fffe1269fa7: jmp     0x7fffe1269faf
  ;; B22: #	B23 &lt;- B3  Freq: 0.666696

  0x00007fffe1269fa9: mov     $0x1,%r10d        ;*iadd
                                                ; - java.lang.Integer::stringSize@13 (line 474)
                                                ; - java.lang.Integer::toString@24 (line 400)

  ;; B23: #	B45 B24 &lt;- B21 B20 B16 B18 B14 B19 B15 B17 B13 B22  Freq: 0.999999

  0x00007fffe1269faf: movsxd  %r10d,%rbx
  0x00007fffe1269fb2: shl     $0x1,%rbx
  0x00007fffe1269fb5: mov     %rbx,%rcx
  0x00007fffe1269fb8: add     $0x17,%rcx
  0x00007fffe1269fbc: mov     %rcx,%r11
  0x00007fffe1269fbf: and     $0xfffffffffffffff8,%r11
  0x00007fffe1269fc3: mov     0x70(%r15),%rbp
  0x00007fffe1269fc7: mov     %rbp,%r8
  0x00007fffe1269fca: add     %r11,%r8
  0x00007fffe1269fcd: cmp     0x80(%r15),%r8
  0x00007fffe1269fd4: jnb     0x7fffe126a377
  ;; B24: #	B25 &lt;- B23  Freq: 0.999899

  0x00007fffe1269fda: mov     %r8,0x70(%r15)
  0x00007fffe1269fde: prefetchw 0x100(%r8)
  0x00007fffe1269fe6: movq    $0x1,0x0(%rbp)
  0x00007fffe1269fee: prefetchw 0x140(%r8)
  0x00007fffe1269ff6: movl    $0x20000044,0x8(%rbp)  ;   {metadata({type array char})}
  0x00007fffe1269ffd: mov     %r10d,0xc(%rbp)
  0x00007fffe126a001: prefetchw 0x180(%r8)
  0x00007fffe126a009: mov     %rbp,%rdi
  0x00007fffe126a00c: add     $0x10,%rdi
  0x00007fffe126a010: shr     $0x3,%rcx
  0x00007fffe126a014: add     $0xfffffffffffffffe,%rcx
  0x00007fffe126a018: xor     %rax,%rax
  0x00007fffe126a01b: shl     $0x3,%rcx
  0x00007fffe126a01f: rep stosb (%rdi)
  0x00007fffe126a022: mov     %r10d,0x4(%rsp)   ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)

  ;; B25: #	B56 B26 &lt;- B46 B24  Freq: 0.999999

  0x00007fffe126a027: mov     0x10(%rsp),%r11d
  0x00007fffe126a02c: cmp     $0x10000,%r11d
  0x00007fffe126a033: jnl     0x7fffe126a445    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B26: #	B49 B27 &lt;- B25  Freq: 0.999999

  0x00007fffe126a039: imull   $0xcccd,%r11d,%r10d
  0x00007fffe126a040: mov     0x4(%rsp),%r9d
  0x00007fffe126a045: decl    %r9d              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a048: shr     $0x13,%r10d       ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a04c: mov     %r10d,%r11d
  0x00007fffe126a04f: shl     $0x1,%r11d        ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a052: mov     %r10d,%r8d
  0x00007fffe126a055: shl     $0x3,%r8d         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a059: mov     %r8d,%edi
  0x00007fffe126a05c: add     %r11d,%edi
  0x00007fffe126a05f: mov     0x10(%rsp),%ecx
  0x00007fffe126a063: sub     %edi,%ecx         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a065: cmp     $0x24,%ecx
  0x00007fffe126a068: jnb     0x7fffe126a3b9
  ;; B27: #	B50 B28 &lt;- B26  Freq: 0.999998

  0x00007fffe126a06e: movsxd  %r8d,%r8
  0x00007fffe126a071: movsxd  %r11d,%r11
  0x00007fffe126a074: add     %r11,%r8
  0x00007fffe126a077: movsxd  0x10(%rsp),%r11
  0x00007fffe126a07c: sub     %r8,%r11
  0x00007fffe126a07f: movabs  $0xd73af1b8,%rcx  ;   {oop([C)}
  0x00007fffe126a089: movzwl  0x10(%rcx,%r11,2),%r8d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a08f: cmp     0x4(%rsp),%r9d
  0x00007fffe126a094: jnb     0x7fffe126a3d9
  ;; B28: #	B36 B29 &lt;- B27  Freq: 0.999997

  0x00007fffe126a09a: mov     %r8w,0xe(%rbp,%rbx)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0a0: test    %r10d,%r10d
  0x00007fffe126a0a3: je      0x7fffe126a17d    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B29: #	B57 B30 &lt;- B28  Freq: 0.333306

  0x00007fffe126a0a9: imull   $0xcccd,%r10d,%r9d
  0x00007fffe126a0b0: mov     0x4(%rsp),%r8d
  0x00007fffe126a0b5: add     $0xfffffffe,%r8d  ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0b9: shr     $0x13,%r9d        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0bd: mov     %r9d,%edx
  0x00007fffe126a0c0: shl     $0x3,%edx         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0c3: mov     %r9d,%ebx
  0x00007fffe126a0c6: shl     $0x1,%ebx         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0c8: mov     %ebx,%edi
  0x00007fffe126a0ca: add     %edx,%edi
  0x00007fffe126a0cc: mov     %r10d,%r11d
  0x00007fffe126a0cf: sub     %edi,%r11d        ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0d2: cmp     $0x24,%r11d
  0x00007fffe126a0d6: jnb     0x7fffe126a455
  ;; B30: #	B51 B31 &lt;- B29  Freq: 0.333305

  0x00007fffe126a0dc: movsxd  %ebx,%r11
  0x00007fffe126a0df: movsxd  %edx,%rbx
  0x00007fffe126a0e2: add     %rbx,%r11
  0x00007fffe126a0e5: movsxd  %r10d,%r10
  0x00007fffe126a0e8: sub     %r11,%r10
  0x00007fffe126a0eb: movzwl  0x10(%rcx,%r10,2),%r11d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a0f1: test    %r8d,%r8d
  0x00007fffe126a0f4: jl      0x7fffe126a3f9
  0x00007fffe126a0fa: nop
  0x00007fffe126a0fb: nop                       ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B31: #	B53 B32 &lt;- B30 B35 	Loop: B31-B35 inner pre of N801 Freq: 0.476133

  0x00007fffe126a0fc: cmp     0x4(%rsp),%r8d
  0x00007fffe126a101: jnb     0x7fffe126a3ff
  ;; B32: #	B36 B33 &lt;- B31  Freq: 0.476133

  0x00007fffe126a107: mov     %r11w,0x10(%rbp,%r8,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a10d: test    %r9d,%r9d
  0x00007fffe126a110: je      0x7fffe126a17d    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B33: #	B58 B34 &lt;- B32  Freq: 0.158698

  0x00007fffe126a112: imull   $0xcccd,%r9d,%edi
  0x00007fffe126a119: mov     %r8d,%edx
  0x00007fffe126a11c: decl    %edx              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a11e: shr     $0x13,%edi        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a121: mov     %edi,%ebx
  0x00007fffe126a123: shl     $0x3,%ebx         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a126: mov     %edi,%r10d
  0x00007fffe126a129: shl     $0x1,%r10d        ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a12c: mov     %r10d,%eax
  0x00007fffe126a12f: add     %ebx,%eax
  0x00007fffe126a131: mov     %r9d,%r11d
  0x00007fffe126a134: sub     %eax,%r11d        ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a137: cmp     $0x24,%r11d
  0x00007fffe126a13b: jnb     0x7fffe126a45a
  ;; B34: #	B39 B35 &lt;- B33  Freq: 0.158698

  0x00007fffe126a141: movsxd  %r10d,%r10
  0x00007fffe126a144: movsxd  %ebx,%r11
  0x00007fffe126a147: add     %r11,%r10
  0x00007fffe126a14a: mov     0x4(%rsp),%ebx
  0x00007fffe126a14e: add     $0xfffffffd,%ebx
  0x00007fffe126a151: movsxd  %r9d,%r11
  0x00007fffe126a154: sub     %r10,%r11
  0x00007fffe126a157: movzwl  0x10(%rcx,%r11,2),%r11d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a15d: mov     $0xffffffff,%r10d
  0x00007fffe126a163: cmp     %r10d,%ebx
  0x00007fffe126a166: cmovl   %r10d,%ebx
  0x00007fffe126a16a: cmp     %ebx,%edx
  0x00007fffe126a16c: jle     0x7fffe126a2fe
  ;; B35: #	B31 &lt;- B34  Freq: 0.142828

  0x00007fffe126a172: mov     %edi,%r9d
  0x00007fffe126a175: mov     %edx,%r8d
  0x00007fffe126a178: jmpq    0x7fffe126a0fc    ;*goto
                                                ; - java.lang.Integer::getChars@113 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B36: #	B47 B37 &lt;- B65 B32 B41 B28  Freq: 0.999995

  0x00007fffe126a17d: mov     0x70(%r15),%rax
  0x00007fffe126a181: mov     %rax,%r10
  0x00007fffe126a184: add     $0x18,%r10
  0x00007fffe126a188: cmp     0x80(%r15),%r10
  0x00007fffe126a18f: jnb     0x7fffe126a3a5
  ;; B37: #	B38 &lt;- B36  Freq: 0.999895

  0x00007fffe126a195: mov     %r10,0x70(%r15)
  0x00007fffe126a199: prefetchw 0x100(%r10)
  0x00007fffe126a1a1: mov     $0x200002f3,%r11d  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe126a1a7: movabs  $0x0,%r10
  0x00007fffe126a1b1: lea     (%r10,%r11,8),%r10
  0x00007fffe126a1b5: mov     0xb0(%r10),%r10
  0x00007fffe126a1bc: mov     %r10,(%rax)
  0x00007fffe126a1bf: movl    $0x200002f3,0x8(%rax)  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe126a1c6: mov     %r12d,0xc(%rax)
  0x00007fffe126a1ca: mov     %r12,0x10(%rax)   ;*new  ; - java.lang.Integer::toString@38 (line 403)

  ;; B38: #	N1 &lt;- B48 B37  Freq: 0.999995

  0x00007fffe126a1ce: push    %r10
  0x00007fffe126a1d0: cmp     0x16aefa09(%rip),%r12  ;   {external_word}
  0x00007fffe126a1d7: je      0x7fffe126a254
  ;; MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?
  0x00007fffe126a1dd: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126a1e2: sub     $0x80,%rsp
  0x00007fffe126a1e9: mov     %rax,0x78(%rsp)
  0x00007fffe126a1ee: mov     %rcx,0x70(%rsp)
  0x00007fffe126a1f3: mov     %rdx,0x68(%rsp)
  0x00007fffe126a1f8: mov     %rbx,0x60(%rsp)
  0x00007fffe126a1fd: mov     %rbp,0x50(%rsp)
  0x00007fffe126a202: mov     %rsi,0x48(%rsp)
  0x00007fffe126a207: mov     %rdi,0x40(%rsp)
  0x00007fffe126a20c: mov     %r8,0x38(%rsp)
  0x00007fffe126a211: mov     %r9,0x30(%rsp)
  0x00007fffe126a216: mov     %r10,0x28(%rsp)
  0x00007fffe126a21b: mov     %r11,0x20(%rsp)
  0x00007fffe126a220: mov     %r12,0x18(%rsp)
  0x00007fffe126a225: mov     %r13,0x10(%rsp)
  0x00007fffe126a22a: mov     %r14,0x8(%rsp)
  0x00007fffe126a22f: mov     %r15,(%rsp)
  0x00007fffe126a233: movabs  $0x7ffff7837b80,%rdi  ;   {external_word}
  0x00007fffe126a23d: movabs  $0x7fffe126a1dd,%rsi  ;   {internal_word}
  0x00007fffe126a247: mov     %rsp,%rdx
  0x00007fffe126a24a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126a24e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126a253: hlt
  0x00007fffe126a254: pop     %r10
  0x00007fffe126a256: test    %rbp,%rbp
  0x00007fffe126a259: jne     0x7fffe126a2d6
  ;; null oop passed to encode_heap_oop_not_null2
  0x00007fffe126a25f: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126a264: sub     $0x80,%rsp
  0x00007fffe126a26b: mov     %rax,0x78(%rsp)
  0x00007fffe126a270: mov     %rcx,0x70(%rsp)
  0x00007fffe126a275: mov     %rdx,0x68(%rsp)
  0x00007fffe126a27a: mov     %rbx,0x60(%rsp)
  0x00007fffe126a27f: mov     %rbp,0x50(%rsp)
  0x00007fffe126a284: mov     %rsi,0x48(%rsp)
  0x00007fffe126a289: mov     %rdi,0x40(%rsp)
  0x00007fffe126a28e: mov     %r8,0x38(%rsp)
  0x00007fffe126a293: mov     %r9,0x30(%rsp)
  0x00007fffe126a298: mov     %r10,0x28(%rsp)
  0x00007fffe126a29d: mov     %r11,0x20(%rsp)
  0x00007fffe126a2a2: mov     %r12,0x18(%rsp)
  0x00007fffe126a2a7: mov     %r13,0x10(%rsp)
  0x00007fffe126a2ac: mov     %r14,0x8(%rsp)
  0x00007fffe126a2b1: mov     %r15,(%rsp)
  0x00007fffe126a2b5: movabs  $0x7ffff7837bc0,%rdi  ;   {external_word}
  0x00007fffe126a2bf: movabs  $0x7fffe126a25f,%rsi  ;   {internal_word}
  0x00007fffe126a2c9: mov     %rsp,%rdx
  0x00007fffe126a2cc: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126a2d0: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126a2d5: hlt
  0x00007fffe126a2d6: mov     %rbp,%r11
  0x00007fffe126a2d9: mov     %r11d,0xc(%rax)
  0x00007fffe126a2dd: mov     %rax,%r10
  0x00007fffe126a2e0: shr     $0x9,%r10
  0x00007fffe126a2e4: movabs  $0x7ffff591e000,%r11
  0x00007fffe126a2ee: mov     %r12l,(%r11,%r10)  ;*synchronization entry
                                                ; - java.lang.Integer::toString@-1 (line 398)

  0x00007fffe126a2f2: add     $0x30,%rsp
  0x00007fffe126a2f6: pop     %rbp
  0x00007fffe126a2f7: test    %eax,0x16d90d03(%rip)  ;   {poll_return}
  0x00007fffe126a2fd: retq
  ;; B39: #	B61 B40 &lt;- B34  Freq: 0.0158698

  0x00007fffe126a2fe: cmp     $0xffffffff,%edx
  0x00007fffe126a301: jle     0x7fffe126a481
  ;; B40: #	B41 &lt;- B39  Freq: 0.0158698

  0x00007fffe126a307: nop
  0x00007fffe126a308: nop
  0x00007fffe126a309: nop
  0x00007fffe126a30a: nop
  0x00007fffe126a30b: nop
  0x00007fffe126a30c: nop
  0x00007fffe126a30d: nop
  0x00007fffe126a30e: nop
  0x00007fffe126a30f: nop                       ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B41: #	B36 B42 &lt;- B40 B44 	Loop: B41-B44 inner main of N269 Freq: 0.0238037

  0x00007fffe126a310: mov     %r11w,0x10(%rbp,%rdx,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a316: test    %edi,%edi
  0x00007fffe126a318: je      0x7fffe126a17d    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B42: #	B59 B43 &lt;- B41  Freq: 0.00793395

  0x00007fffe126a31e: imull   $0xcccd,%edi,%r9d
  0x00007fffe126a325: mov     %edx,%r8d
  0x00007fffe126a328: decl    %r8d              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a32b: shr     $0x13,%r9d        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a32f: mov     %r9d,%r10d
  0x00007fffe126a332: shl     $0x1,%r10d        ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a335: mov     %r9d,%esi
  0x00007fffe126a338: shl     $0x3,%esi         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a33b: mov     %esi,%ebx
  0x00007fffe126a33d: add     %r10d,%ebx
  0x00007fffe126a340: mov     %edi,%r11d
  0x00007fffe126a343: sub     %ebx,%r11d        ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a346: cmp     $0x24,%r11d
  0x00007fffe126a34a: jnb     0x7fffe126a460
  ;; B43: #	B62 B44 &lt;- B42  Freq: 0.00793395

  0x00007fffe126a350: movsxd  %esi,%r11
  0x00007fffe126a353: movsxd  %edi,%rbx
  0x00007fffe126a356: movsxd  %r10d,%r10
  0x00007fffe126a359: add     %r10,%r11
  0x00007fffe126a35c: sub     %r11,%rbx
  0x00007fffe126a35f: movzwl  0x10(%rcx,%rbx,2),%r11d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a365: cmp     $0xffffffff,%r8d
  0x00007fffe126a369: jle     0x7fffe126a48d
  ;; B44: #	B41 &lt;- B43  Freq: 0.00793394

  0x00007fffe126a36f: mov     %r8d,%edx
  0x00007fffe126a372: mov     %r9d,%edi
  0x00007fffe126a375: jmp     0x7fffe126a310
  ;; B45: #	B71 B46 &lt;- B23  Freq: 0.000100016

  0x00007fffe126a377: mov     %rbx,0x8(%rsp)
  0x00007fffe126a37c: movabs  $0x100000220,%rsi  ;   {metadata({type array char})}
  0x00007fffe126a386: mov     %r10d,%edx
  0x00007fffe126a389: mov     0x10(%rsp),%ebp
  0x00007fffe126a38d: mov     %r10d,0x4(%rsp)
  0x00007fffe126a392: nop
  0x00007fffe126a393: callq   0x7fffe11656e0    ; OopMap{off=1240}
                                                ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)
                                                ;   {runtime_call}
  ;; B46: #	B25 &lt;- B45  Freq: 0.000100014

  0x00007fffe126a398: mov     %rax,%rbp
  0x00007fffe126a39b: mov     0x8(%rsp),%rbx
  0x00007fffe126a3a0: jmpq    0x7fffe126a027    ;*invokestatic getChars
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B47: #	B72 B48 &lt;- B36  Freq: 0.000100016

  0x00007fffe126a3a5: movabs  $0x100001798,%rsi  ;   {metadata(&apos;java/lang/String&apos;)}
  0x00007fffe126a3af: callq   0x7fffe1106520    ; OopMap{rbp=Oop off=1268}
                                                ;*new  ; - java.lang.Integer::toString@38 (line 403)
                                                ;   {runtime_call}
  ;; B48: #	B38 &lt;- B47  Freq: 0.000100014

  0x00007fffe126a3b4: jmpq    0x7fffe126a1ce
  ;; B49: #	N1 &lt;- B26  Freq: 1.01328e-06

  0x00007fffe126a3b9: mov     $0xffffffe4,%esi
  0x00007fffe126a3be: mov     %r10d,0x8(%rsp)
  0x00007fffe126a3c3: mov     %r9d,0x18(%rsp)
  0x00007fffe126a3c8: mov     %ecx,0x1c(%rsp)
  0x00007fffe126a3cc: nop
  0x00007fffe126a3cd: nop
  0x00007fffe126a3ce: nop
  0x00007fffe126a3cf: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=1300}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  0x00007fffe126a3d4: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B50: #	N1 &lt;- B27  Freq: 1.01328e-06

  0x00007fffe126a3d9: mov     $0xffffffe4,%esi
  0x00007fffe126a3de: mov     %r10d,0x8(%rsp)
  0x00007fffe126a3e3: mov     %r9d,0x18(%rsp)
  0x00007fffe126a3e8: mov     %r8d,0x1c(%rsp)
  0x00007fffe126a3ed: nop
  0x00007fffe126a3ee: nop
  0x00007fffe126a3ef: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=1332}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  0x00007fffe126a3f4: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B51: #	B52 &lt;- B30  Freq: 3.33305e-07

  0x00007fffe126a3f9: mov     %r9d,%r10d
  ;; B52: #	B53 &lt;- B51 B67 B70  Freq: 3.33305e-07

  0x00007fffe126a3fc: mov     %r10d,%r9d
  ;; B53: #	N1 &lt;- B64 B31 B52  Freq: 8.15761e-07

  0x00007fffe126a3ff: mov     $0xffffffe4,%esi
  0x00007fffe126a404: mov     %r9d,0x8(%rsp)
  0x00007fffe126a409: mov     %r8d,0x18(%rsp)
  0x00007fffe126a40e: mov     %r11d,0x1c(%rsp)
  0x00007fffe126a413: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=1368}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  0x00007fffe126a418: callq   0x7ffff736b4ea    ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  ;; B54: #	N1 &lt;- B1  Freq: 4.76837e-07

  0x00007fffe126a41d: mov     $0xffffff65,%esi
  0x00007fffe126a422: mov     0x10(%rsp),%ebp
  0x00007fffe126a426: nop
  0x00007fffe126a427: callq   0x7fffe1107820    ; OopMap{off=1388}
                                                ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)
                                                ;   {runtime_call}
  0x00007fffe126a42c: callq   0x7ffff736b4ea    ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)
                                                ;   {runtime_call}
  ;; B55: #	N1 &lt;- B2  Freq: 4.76837e-07

  0x00007fffe126a431: mov     $0xffffff65,%esi
  0x00007fffe126a436: mov     0x10(%rsp),%ebp
  0x00007fffe126a43a: nop
  0x00007fffe126a43b: callq   0x7fffe1107820    ; OopMap{off=1408}
                                                ;*ifge
                                                ; - java.lang.Integer::toString@10 (line 400)
                                                ;   {runtime_call}
  0x00007fffe126a440: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.lang.Integer::getChars@7 (line 438)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  ;; B56: #	N1 &lt;- B25  Freq: 4.76837e-07

  0x00007fffe126a445: mov     $0xffffff65,%esi
  0x00007fffe126a44a: nop
  0x00007fffe126a44b: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=1424}
                                                ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  0x00007fffe126a450: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  ;; B57: #	B60 &lt;- B29  Freq: 3.37732e-07

  0x00007fffe126a455: mov     %r9d,%r10d
  0x00007fffe126a458: jmp     0x7fffe126a463
  ;; B58: #	B59 &lt;- B33  Freq: 1.60806e-07

  0x00007fffe126a45a: mov     %edx,%r8d
  0x00007fffe126a45d: mov     %edi,%r9d         ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B59: #	B60 &lt;- B58 B42  Freq: 1.68845e-07

  0x00007fffe126a460: mov     %r9d,%r10d
  ;; B60: #	N1 &lt;- B57 B66 B59  Freq: 5.06577e-07

  0x00007fffe126a463: mov     $0xffffffe4,%esi
  0x00007fffe126a468: mov     %r8d,0xc(%rsp)
  0x00007fffe126a46d: mov     %r10d,0x18(%rsp)
  0x00007fffe126a472: mov     %r11d,0x1c(%rsp)
  0x00007fffe126a477: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=1468}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  0x00007fffe126a47c: callq   0x7ffff736b4ea    ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  ;; B61: #	B62 &lt;- B39  Freq: 1.60806e-08

  0x00007fffe126a481: mov     %edi,%r9d
  0x00007fffe126a484: mov     %r8d,%r10d
  0x00007fffe126a487: mov     %edx,%r8d
  0x00007fffe126a48a: mov     %r10d,%edx
  ;; B62: #	B70 B63 &lt;- B61 B43  Freq: 2.41199e-08

  0x00007fffe126a48d: cmp     $0xffffffff,%r8d
  0x00007fffe126a491: jle     0x7fffe126a50d    ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B63: #	B64 &lt;- B62  Freq: 2.41198e-08

  ;; B64: #	B53 B65 &lt;- B63 B68 	Loop: B64-B68 inner post of N801 Freq: 3.61783e-08

  0x00007fffe126a493: cmp     0x4(%rsp),%r8d
  0x00007fffe126a498: jnb     0x7fffe126a3ff
  ;; B65: #	B36 B66 &lt;- B64  Freq: 3.61782e-08

  0x00007fffe126a49e: mov     %r11w,0x10(%rbp,%r8,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4a4: test    %r9d,%r9d
  0x00007fffe126a4a7: je      0x7fffe126a17d    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)

  ;; B66: #	B60 B67 &lt;- B65  Freq: 1.20585e-08

  0x00007fffe126a4ad: imull   $0xcccd,%r9d,%r10d
  0x00007fffe126a4b4: decl    %r8d              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4b7: shr     $0x13,%r10d       ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4bb: mov     %r10d,%edx
  0x00007fffe126a4be: shl     $0x3,%edx         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4c1: mov     %r10d,%ebx
  0x00007fffe126a4c4: shl     $0x1,%ebx         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4c6: mov     %ebx,%edi
  0x00007fffe126a4c8: add     %edx,%edi
  0x00007fffe126a4ca: mov     %r9d,%r11d
  0x00007fffe126a4cd: sub     %edi,%r11d        ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4d0: cmp     $0x24,%r11d
  0x00007fffe126a4d4: jnb     0x7fffe126a463
  ;; B67: #	B52 B68 &lt;- B66  Freq: 1.20584e-08

  0x00007fffe126a4d6: movsxd  %ebx,%r11
  0x00007fffe126a4d9: movsxd  %r9d,%r9
  0x00007fffe126a4dc: movsxd  %edx,%rbx
  0x00007fffe126a4df: add     %rbx,%r11
  0x00007fffe126a4e2: sub     %r11,%r9
  0x00007fffe126a4e5: movzwl  0x10(%rcx,%r9,2),%r11d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a4eb: cmp     $0xffffffff,%r8d
  0x00007fffe126a4ef: jle     0x7fffe126a3fc
  ;; B68: #	B64 &lt;- B67  Freq: 1.20584e-08

  0x00007fffe126a4f5: mov     %r10d,%r9d
  0x00007fffe126a4f8: jmp     0x7fffe126a493
  ;; B69: #	N1 &lt;- B12  Freq: 5.14375e-11

  0x00007fffe126a4fa: mov     $0xffffffe4,%esi
  0x00007fffe126a4ff: mov     0x10(%rsp),%ebp
  0x00007fffe126a503: callq   0x7fffe1107820    ; OopMap{off=1608}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {runtime_call}
  0x00007fffe126a508: callq   0x7ffff736b4ea    ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ;   {runtime_call}
  ;; B70: #	B52 &lt;- B62  Freq: 2.41199e-14

  0x00007fffe126a50d: mov     %edx,%r8d
  0x00007fffe126a510: decl    %r8d              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)

  0x00007fffe126a513: mov     %r9d,%r10d
  0x00007fffe126a516: jmpq    0x7fffe126a3fc    ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)

  ;; B71: #	B73 &lt;- B45  Freq: 1.00016e-09

  0x00007fffe126a51b: mov     %rax,%rsi
  0x00007fffe126a51e: jmp     0x7fffe126a523
  ;; B72: #	B73 &lt;- B47  Freq: 1.00016e-09

  0x00007fffe126a520: mov     %rax,%rsi         ;*new  ; - java.lang.Integer::toString@38 (line 403)

  ;; B73: #	N1 &lt;- B71 B72  Freq: 2.00033e-09

  0x00007fffe126a523: add     $0x30,%rsp
  0x00007fffe126a527: pop     %rbp
  0x00007fffe126a528: jmpq    0x7fffe11657a0    ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ;   {runtime_call}
  0x00007fffe126a52d: hlt
  0x00007fffe126a52e: hlt
  0x00007fffe126a52f: hlt
  0x00007fffe126a530: hlt
  0x00007fffe126a531: hlt
  0x00007fffe126a532: hlt
  0x00007fffe126a533: hlt
  0x00007fffe126a534: hlt
  0x00007fffe126a535: hlt
  0x00007fffe126a536: hlt
  0x00007fffe126a537: hlt
  0x00007fffe126a538: hlt
  0x00007fffe126a539: hlt
  0x00007fffe126a53a: hlt
  0x00007fffe126a53b: hlt
  0x00007fffe126a53c: hlt
  0x00007fffe126a53d: hlt
  0x00007fffe126a53e: hlt
  0x00007fffe126a53f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe126a540: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe126a545: callq   0x7fffe126a54a
  0x00007fffe126a54a: subq    $0x5,(%rsp)
  0x00007fffe126a54f: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe126a554: hlt
  0x00007fffe126a555: hlt
  0x00007fffe126a556: hlt
  0x00007fffe126a557: hlt
<nmethod compile_id='104' compiler='C2' level='4' entry='0x00007fffe1269ec0' size='3792' address='0x00007fffe1269d10' relocation_offset='304' insts_offset='432' stub_offset='2096' scopes_data_offset='2176' scopes_pcs_offset='2536' dependencies_offset='3736' handler_table_offset='3744' oops_offset='2120' method='java/lang/Integer toString (I)Ljava/lang/String;' bytes='48' count='46053' iicount='46053' stamp='119.980'/>
<make_not_entrant thread='140736956679936' compile_id='67' compiler='C1' level='2' stamp='119.980'/>
<writer thread='140737327351552'/>
<task_queued compile_id='106' method='java/io/PrintStream write (Ljava/lang/String;)V' bytes='83' count='46053' iicount='46053' stamp='119.985' comment='tiered' hot_count='46053'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1248050:
Code:
Argument 0 is unknown.RIP: 0x7fffe12481c0 Code size: 0x00000158
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe12481c0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe12481c7: push    %rbp
  0x00007fffe12481c8: sub     $0x30,%rsp
  0x00007fffe12481cc: movabs  $0x7ffff4ea25b8,%rax
  0x00007fffe12481d6: mov     0x8(%rax),%edi
  0x00007fffe12481d9: add     $0x8,%edi
  0x00007fffe12481dc: mov     %edi,0x8(%rax)
  0x00007fffe12481df: movabs  $0x7ffff4ea23d8,%rax  ;   {metadata({method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe12481e9: and     $0x3ff8,%edi
  0x00007fffe12481ef: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb0043090]
  0x00007fffe12481f2: je      0x7fffe1248209    ;*bipush
                                                ; - StackTopCache::add@0 (line 12)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 8]

  0x00007fffe12481f8: add     %edx,%esi
  0x00007fffe12481fa: mov     %rsi,%rax
  0x00007fffe12481fd: add     $0x30,%rsp
  0x00007fffe1248201: pop     %rbp
  0x00007fffe1248202: test    %eax,0x16db2ef8(%rip)  ;   {poll_return}
  0x00007fffe1248208: retq
  ;; CounterOverflowStub slow case
  0x00007fffe1248209: mov     %rax,0x8(%rsp)
  0x00007fffe124820e: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1248216: callq   0x7fffe11fe5a0    ; OopMap{off=91}
                                                ;*synchronization entry
                                                ; - StackTopCache::add@-1 (line 12)
                                                ;   {runtime_call}
  0x00007fffe124821b: jmp     0x7fffe12481f8
  0x00007fffe124821d: nop
  0x00007fffe124821e: nop
  ;; Unwind handler
  0x00007fffe124821f: mov     0x348(%r15),%rax
  0x00007fffe1248226: movabs  $0x0,%r10
  0x00007fffe1248230: mov     %r10,0x348(%r15)
  0x00007fffe1248237: movabs  $0x0,%r10
  0x00007fffe1248241: mov     %r10,0x350(%r15)
  0x00007fffe1248248: add     $0x30,%rsp
  0x00007fffe124824c: pop     %rbp
  0x00007fffe124824d: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1248252: hlt
  0x00007fffe1248253: hlt
  0x00007fffe1248254: hlt
  0x00007fffe1248255: hlt
  0x00007fffe1248256: hlt
  0x00007fffe1248257: hlt
  0x00007fffe1248258: hlt
  0x00007fffe1248259: hlt
  0x00007fffe124825a: hlt
  0x00007fffe124825b: hlt
  0x00007fffe124825c: hlt
  0x00007fffe124825d: hlt
  0x00007fffe124825e: hlt
  0x00007fffe124825f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1248260: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe124826a: movabs  $0xdead,%rcx
  0x00007fffe1248274: movabs  $0xdead,%rsi
  0x00007fffe124827e: movabs  $0xdead,%rdi
  0x00007fffe1248288: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe124828d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1248292: sub     $0x80,%rsp
  0x00007fffe1248299: mov     %rax,0x78(%rsp)
  0x00007fffe124829e: mov     %rcx,0x70(%rsp)
  0x00007fffe12482a3: mov     %rdx,0x68(%rsp)
  0x00007fffe12482a8: mov     %rbx,0x60(%rsp)
  0x00007fffe12482ad: mov     %rbp,0x50(%rsp)
  0x00007fffe12482b2: mov     %rsi,0x48(%rsp)
  0x00007fffe12482b7: mov     %rdi,0x40(%rsp)
  0x00007fffe12482bc: mov     %r8,0x38(%rsp)
  0x00007fffe12482c1: mov     %r9,0x30(%rsp)
  0x00007fffe12482c6: mov     %r10,0x28(%rsp)
  0x00007fffe12482cb: mov     %r11,0x20(%rsp)
  0x00007fffe12482d0: mov     %r12,0x18(%rsp)
  0x00007fffe12482d5: mov     %r13,0x10(%rsp)
  0x00007fffe12482da: mov     %r14,0x8(%rsp)
  0x00007fffe12482df: mov     %r15,(%rsp)
  0x00007fffe12482e3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12482ed: movabs  $0x7fffe124828d,%rsi  ;   {internal_word}
  0x00007fffe12482f7: mov     %rsp,%rdx
  0x00007fffe12482fa: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12482fe: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1248303: hlt
[Deopt Handler Code]
  0x00007fffe1248304: movabs  $0x7fffe1248304,%r10  ;   {section_word}
  0x00007fffe124830e: push    %r10
  0x00007fffe1248310: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1248315: hlt
  0x00007fffe1248316: hlt
  0x00007fffe1248317: hlt
<nmethod compile_id='74' compiler='C1' level='2' entry='0x00007fffe12481c0' size='824' address='0x00007fffe1248050' relocation_offset='304' insts_offset='368' stub_offset='528' scopes_data_offset='728' scopes_pcs_offset='752' dependencies_offset='816' oops_offset='712' method='StackTopCache add (II)I' bytes='9' count='23997' iicount='23997' stamp='120.011'/>
Decoding compiled method 0x00007fffe1259f90:
Code:
Argument 0 is unknown.RIP: 0x7fffe125a100 Code size: 0x00000158
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe125a100: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125a107: push    %rbp
  0x00007fffe125a108: sub     $0x30,%rsp
  0x00007fffe125a10c: movabs  $0x7ffff4ea25d8,%rax
  0x00007fffe125a116: mov     0x8(%rax),%edi
  0x00007fffe125a119: add     $0x8,%edi
  0x00007fffe125a11c: mov     %edi,0x8(%rax)
  0x00007fffe125a11f: movabs  $0x7ffff4ea2480,%rax  ;   {metadata({method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125a129: and     $0x3ff8,%edi
  0x00007fffe125a12f: cmp     $0x0,%edi
  ;;   22 branch [EQ] [CounterOverflowStub: 0x00007fffb0043090]
  0x00007fffe125a132: je      0x7fffe125a14a    ;*bipush
                                                ; - StackTopCache::add2@0 (line 18)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 8]

  0x00007fffe125a138: add     $0x8,%edx
  0x00007fffe125a13b: mov     %rdx,%rax
  0x00007fffe125a13e: add     $0x30,%rsp
  0x00007fffe125a142: pop     %rbp
  0x00007fffe125a143: test    %eax,0x16da0fb7(%rip)  ;   {poll_return} { 安全点轮询(Safepoint Polling) }
  0x00007fffe125a149: retq
  ;; CounterOverflowStub slow case
  0x00007fffe125a14a: mov     %rax,0x8(%rsp)
  0x00007fffe125a14f: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125a157: callq   0x7fffe11fe5a0    ; OopMap{off=92}
                                                ;*synchronization entry
                                                ; - StackTopCache::add2@-1 (line 18)
                                                ;   {runtime_call}
  0x00007fffe125a15c: jmp     0x7fffe125a138
  0x00007fffe125a15e: nop
  0x00007fffe125a15f: nop
  ;; Unwind handler
  0x00007fffe125a160: mov     0x348(%r15),%rax
  0x00007fffe125a167: movabs  $0x0,%r10
  0x00007fffe125a171: mov     %r10,0x348(%r15)
  0x00007fffe125a178: movabs  $0x0,%r10
  0x00007fffe125a182: mov     %r10,0x350(%r15)
  0x00007fffe125a189: add     $0x30,%rsp
  0x00007fffe125a18d: pop     %rbp
  0x00007fffe125a18e: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe125a193: hlt
  0x00007fffe125a194: hlt
  0x00007fffe125a195: hlt
  0x00007fffe125a196: hlt
  0x00007fffe125a197: hlt
  0x00007fffe125a198: hlt
  0x00007fffe125a199: hlt
  0x00007fffe125a19a: hlt
  0x00007fffe125a19b: hlt
  0x00007fffe125a19c: hlt
  0x00007fffe125a19d: hlt
  0x00007fffe125a19e: hlt
  0x00007fffe125a19f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe125a1a0: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe125a1aa: movabs  $0xdead,%rcx
  0x00007fffe125a1b4: movabs  $0xdead,%rsi
  0x00007fffe125a1be: movabs  $0xdead,%rdi
  0x00007fffe125a1c8: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125a1cd: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125a1d2: sub     $0x80,%rsp
  0x00007fffe125a1d9: mov     %rax,0x78(%rsp)
  0x00007fffe125a1de: mov     %rcx,0x70(%rsp)
  0x00007fffe125a1e3: mov     %rdx,0x68(%rsp)
  0x00007fffe125a1e8: mov     %rbx,0x60(%rsp)
  0x00007fffe125a1ed: mov     %rbp,0x50(%rsp)
  0x00007fffe125a1f2: mov     %rsi,0x48(%rsp)
  0x00007fffe125a1f7: mov     %rdi,0x40(%rsp)
  0x00007fffe125a1fc: mov     %r8,0x38(%rsp)
  0x00007fffe125a201: mov     %r9,0x30(%rsp)
  0x00007fffe125a206: mov     %r10,0x28(%rsp)
  0x00007fffe125a20b: mov     %r11,0x20(%rsp)
  0x00007fffe125a210: mov     %r12,0x18(%rsp)
  0x00007fffe125a215: mov     %r13,0x10(%rsp)
  0x00007fffe125a21a: mov     %r14,0x8(%rsp)
  0x00007fffe125a21f: mov     %r15,(%rsp)
  0x00007fffe125a223: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125a22d: movabs  $0x7fffe125a1cd,%rsi  ;   {internal_word}
  0x00007fffe125a237: mov     %rsp,%rdx
  0x00007fffe125a23a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125a23e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125a243: hlt
[Deopt Handler Code]
  0x00007fffe125a244: movabs  $0x7fffe125a244,%r10  ;   {section_word}
  0x00007fffe125a24e: push    %r10
  0x00007fffe125a250: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125a255: hlt
  0x00007fffe125a256: hlt
  0x00007fffe125a257: hlt
<nmethod compile_id='76' compiler='C1' level='2' entry='0x00007fffe125a100' size='824' address='0x00007fffe1259f90' relocation_offset='304' insts_offset='368' stub_offset='528' scopes_data_offset='728' scopes_pcs_offset='752' dependencies_offset='816' oops_offset='712' method='StackTopCache add2 (II)I' bytes='9' count='24921' iicount='24921' stamp='120.037'/>
Decoding compiled method 0x00007fffe1260f50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1261160 Code size: 0x00000620
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c23c00} &apos;write&apos; &apos;([BII)V&apos; in &apos;java/io/PrintStream&apos;
  # this:     rsi:rsi   = &apos;java/io/PrintStream&apos;
  # parm0:    rdx:rdx   = &apos;[B&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0x90]  (sp of caller)
  ;;  block B15 [0, 0]

  0x00007fffe1261160: mov     0x8(%rsi),%r10d
  0x00007fffe1261164: shl     $0x3,%r10
  0x00007fffe1261168: cmp     %rax,%r10
  0x00007fffe126116b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1261171: nop
  0x00007fffe1261172: nop
  0x00007fffe1261173: nop
  0x00007fffe1261174: nop
  0x00007fffe1261175: nop
  0x00007fffe1261176: nop
  0x00007fffe1261177: nop
  0x00007fffe1261178: nop
  0x00007fffe1261179: nop
  0x00007fffe126117a: nop
  0x00007fffe126117b: nop
  0x00007fffe126117c: nop
  0x00007fffe126117d: nop
  0x00007fffe126117e: nop
  0x00007fffe126117f: nop
[Verified Entry Point]
  0x00007fffe1261180: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1261187: push    %rbp
  0x00007fffe1261188: sub     $0x80,%rsp
  0x00007fffe126118f: mov     %rsi,0x48(%rsp)
  0x00007fffe1261194: movabs  $0x7ffff4d711f8,%rax
  0x00007fffe126119e: mov     0x8(%rax),%edi
  0x00007fffe12611a1: add     $0x8,%edi
  0x00007fffe12611a4: mov     %edi,0x8(%rax)
  0x00007fffe12611a7: movabs  $0x7ffff4c23c00,%rax  ;   {metadata({method} {0x00007ffff4c23c00} &apos;write&apos; &apos;([BII)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe12611b1: and     $0x3ff8,%edi
  0x00007fffe12611b7: cmp     $0x0,%edi
  ;;   26 branch [EQ] [CounterOverflowStub: 0x00007fffb0086b20]
  0x00007fffe12611ba: je      0x7fffe126154b    ;*aload_0
                                                ; - java.io.PrintStream::write@0 (line 478)

  ;;  block B16 [0, 0]

  ;;  block B0 [0, 4]

  0x00007fffe12611c0: lea     0x68(%rsp),%rdi
  0x00007fffe12611c5: mov     %rsi,0x8(%rdi)
  0x00007fffe12611c9: mov     (%rsi),%rax
  0x00007fffe12611cc: mov     %rax,%rbx
  0x00007fffe12611cf: and     $0x7,%rbx
  0x00007fffe12611d3: cmp     $0x5,%rbx
  0x00007fffe12611d7: jne     0x7fffe126125e
  0x00007fffe12611dd: mov     0x8(%rsi),%ebx
  0x00007fffe12611e0: shl     $0x3,%rbx
  0x00007fffe12611e4: mov     0xb0(%rbx),%rbx
  0x00007fffe12611eb: or      %r15,%rbx
  0x00007fffe12611ee: xor     %rax,%rbx
  0x00007fffe12611f1: and     $0xffffffffffffff87,%rbx
  0x00007fffe12611f5: je      0x7fffe1261286
  0x00007fffe12611fb: test    $0x7,%rbx
  0x00007fffe1261202: jne     0x7fffe126124b
  0x00007fffe1261204: test    $0x300,%rbx
  0x00007fffe126120b: jne     0x7fffe126122a
  0x00007fffe126120d: and     $0x37f,%rax
  0x00007fffe1261214: mov     %rax,%rbx
  0x00007fffe1261217: or      %r15,%rbx
  0x00007fffe126121a: lock cmpxchg %rbx,(%rsi)
  0x00007fffe126121f: jne     0x7fffe1261562
  0x00007fffe1261225: jmpq    0x7fffe1261286
  0x00007fffe126122a: mov     0x8(%rsi),%ebx
  0x00007fffe126122d: shl     $0x3,%rbx
  0x00007fffe1261231: mov     0xb0(%rbx),%rbx
  0x00007fffe1261238: or      %r15,%rbx
  0x00007fffe126123b: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1261240: jne     0x7fffe1261562
  0x00007fffe1261246: jmpq    0x7fffe1261286
  0x00007fffe126124b: mov     0x8(%rsi),%ebx
  0x00007fffe126124e: shl     $0x3,%rbx
  0x00007fffe1261252: mov     0xb0(%rbx),%rbx
  0x00007fffe1261259: lock cmpxchg %rbx,(%rsi)
  0x00007fffe126125e: mov     (%rsi),%rax
  0x00007fffe1261261: or      $0x1,%rax
  0x00007fffe1261265: mov     %rax,(%rdi)
  0x00007fffe1261268: lock cmpxchg %rdi,(%rsi)
  0x00007fffe126126d: je      0x7fffe1261286
  0x00007fffe1261273: sub     %rsp,%rax
  0x00007fffe1261276: and     $0xfffffffffffff007,%rax
  0x00007fffe126127d: mov     %rax,(%rdi)
  0x00007fffe1261280: jne     0x7fffe1261562    ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)

  0x00007fffe1261286: mov     0xc(%rsi),%edi
  0x00007fffe1261289: push    %r10
  0x00007fffe126128b: cmp     0x16af894e(%rip),%r12  ;   {external_word}
  0x00007fffe1261292: je      0x7fffe126130f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1261298: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126129d: sub     $0x80,%rsp
  0x00007fffe12612a4: mov     %rax,0x78(%rsp)
  0x00007fffe12612a9: mov     %rcx,0x70(%rsp)
  0x00007fffe12612ae: mov     %rdx,0x68(%rsp)
  0x00007fffe12612b3: mov     %rbx,0x60(%rsp)
  0x00007fffe12612b8: mov     %rbp,0x50(%rsp)
  0x00007fffe12612bd: mov     %rsi,0x48(%rsp)
  0x00007fffe12612c2: mov     %rdi,0x40(%rsp)
  0x00007fffe12612c7: mov     %r8,0x38(%rsp)
  0x00007fffe12612cc: mov     %r9,0x30(%rsp)
  0x00007fffe12612d1: mov     %r10,0x28(%rsp)
  0x00007fffe12612d6: mov     %r11,0x20(%rsp)
  0x00007fffe12612db: mov     %r12,0x18(%rsp)
  0x00007fffe12612e0: mov     %r13,0x10(%rsp)
  0x00007fffe12612e5: mov     %r14,0x8(%rsp)
  0x00007fffe12612ea: mov     %r15,(%rsp)
  0x00007fffe12612ee: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12612f8: movabs  $0x7fffe1261298,%rsi  ;   {internal_word}
  0x00007fffe1261302: mov     %rsp,%rdx
  0x00007fffe1261305: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1261309: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126130e: hlt
  0x00007fffe126130f: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)

  0x00007fffe1261311: cmp     $0x0,%rdi
  ;;   46 branch [EQ] [B13] 
  0x00007fffe1261315: je      0x7fffe1261424    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@6 (line 479)

  ;;  block B14 [17, 23]

  0x00007fffe126131b: mov     %rdi,%rsi         ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)

  0x00007fffe126131e: nop
  0x00007fffe126131f: nop
  0x00007fffe1261320: nop
  0x00007fffe1261321: nop
  0x00007fffe1261322: nop
  0x00007fffe1261323: nop
  0x00007fffe1261324: nop
  0x00007fffe1261325: movabs  $0xffffffffffffffff,%rax
  0x00007fffe126132f: callq   0x7fffe11060c0    ; OopMap{[72]=Oop [112]=Oop off=468}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@16 (line 480)
                                                ;   {virtual_call}
  0x00007fffe1261334: mov     0x48(%rsp),%rsi
  0x00007fffe1261339: movsbl  0x10(%rsi),%edi   ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@20 (line 481)

  0x00007fffe126133d: cmp     $0x0,%edi
  ;;   66 branch [EQ] [B6] 
  0x00007fffe1261340: je      0x7fffe12613e4    ;*ifeq
                                                ; - java.io.PrintStream::write@23 (line 481)

  ;;  block B5 [26, 33]

  0x00007fffe1261346: mov     0xc(%rsi),%edi
  0x00007fffe1261349: push    %r10
  0x00007fffe126134b: cmp     0x16af888e(%rip),%r12  ;   {external_word}
  0x00007fffe1261352: je      0x7fffe12613cf
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1261358: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126135d: sub     $0x80,%rsp
  0x00007fffe1261364: mov     %rax,0x78(%rsp)
  0x00007fffe1261369: mov     %rcx,0x70(%rsp)
  0x00007fffe126136e: mov     %rdx,0x68(%rsp)
  0x00007fffe1261373: mov     %rbx,0x60(%rsp)
  0x00007fffe1261378: mov     %rbp,0x50(%rsp)
  0x00007fffe126137d: mov     %rsi,0x48(%rsp)
  0x00007fffe1261382: mov     %rdi,0x40(%rsp)
  0x00007fffe1261387: mov     %r8,0x38(%rsp)
  0x00007fffe126138c: mov     %r9,0x30(%rsp)
  0x00007fffe1261391: mov     %r10,0x28(%rsp)
  0x00007fffe1261396: mov     %r11,0x20(%rsp)
  0x00007fffe126139b: mov     %r12,0x18(%rsp)
  0x00007fffe12613a0: mov     %r13,0x10(%rsp)
  0x00007fffe12613a5: mov     %r14,0x8(%rsp)
  0x00007fffe12613aa: mov     %r15,(%rsp)
  0x00007fffe12613ae: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12613b8: movabs  $0x7fffe1261358,%rsi  ;   {internal_word}
  0x00007fffe12613c2: mov     %rsp,%rdx
  0x00007fffe12613c5: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12613c9: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12613ce: hlt
  0x00007fffe12613cf: pop     %r10              ;*getfield out
                                                ; - java.io.PrintStream::write@27 (line 482)

  0x00007fffe12613d1: mov     %rdi,%rsi         ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)

  0x00007fffe12613d4: nop
  0x00007fffe12613d5: movabs  $0xffffffffffffffff,%rax
  0x00007fffe12613df: callq   0x7fffe11060c0    ; OopMap{[72]=Oop [112]=Oop off=644}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::write@30 (line 482)
                                                ;   {virtual_call}
  ;;  block B6 [33, 47]

  0x00007fffe12613e4: lea     0x68(%rsp),%rax
  0x00007fffe12613e9: mov     0x8(%rax),%rsi
  0x00007fffe12613ed: mov     (%rsi),%rdx
  0x00007fffe12613f0: and     $0x7,%rdx
  0x00007fffe12613f4: cmp     $0x5,%rdx
  0x00007fffe12613f8: je      0x7fffe1261415
  0x00007fffe12613fe: mov     (%rax),%rdx
  0x00007fffe1261401: test    %rdx,%rdx
  0x00007fffe1261404: je      0x7fffe1261415
  0x00007fffe126140a: lock cmpxchg %rdx,(%rsi)
  0x00007fffe126140f: jne     0x7fffe1261575    ;*monitorexit
                                                ; - java.io.PrintStream::write@35 (line 483)

  0x00007fffe1261415: add     $0x80,%rsp
  0x00007fffe126141c: pop     %rbp
  0x00007fffe126141d: test    %eax,0x16d99cdd(%rip)  ;   {poll_return}
  0x00007fffe1261423: retq
  ;;  block B13 [7, 16]

  0x00007fffe1261424: mov     %r8d,0x64(%rsp)
  0x00007fffe1261429: mov     %ecx,0x60(%rsp)
  0x00007fffe126142d: mov     %rdx,0x58(%rsp)
  ;;   94 move [metadata:0x0000000000000000|M] [rdx|M] [patch_normal] [bci:7]
  0x00007fffe1261432: nop
  0x00007fffe1261433: nop
  0x00007fffe1261434: nop
  0x00007fffe1261435: nop
  0x00007fffe1261436: nop
  0x00007fffe1261437: nop
  0x00007fffe1261438: jmpq    0x7fffe1261597    ;   {no_reloc}
  0x00007fffe126143d: add     %al,(%rax)
  0x00007fffe126143f: add     %al,(%rax)
  0x00007fffe1261441: add     %ch,%cl
  0x00007fffe1261443: pop     %rdx
  0x00007fffe1261444: add     %eax,(%rax)
  0x00007fffe1261446: add     %cl,0xffffffffffffffba(%rax)
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ;   {oop(&quot;Stream closed&quot;)}
  0x00007fffe1261449: pop     %rax
  0x00007fffe126144a: xlat    (%rbx)
  0x00007fffe126144b: xlat    (%rbx)
  0x00007fffe126144d: add     %al,(%rax)
  0x00007fffe126144f: add     %al,(%rax)
  0x00007fffe1261451: mov     %rax,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)

  0x00007fffe1261454: mov     %rax,0x50(%rsp)
  0x00007fffe1261459: nop
  0x00007fffe126145a: nop
  0x00007fffe126145b: nop
  0x00007fffe126145c: nop
  0x00007fffe126145d: nop
  0x00007fffe126145e: nop
  0x00007fffe126145f: callq   0x7fffe1105e80    ; OopMap{[72]=Oop [80]=Oop [88]=Oop [112]=Oop off=772}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.io.PrintStream::ensureOpen@13 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ;   {optimized virtual_call}
  0x00007fffe1261464: mov     0x50(%rsp),%rax   ; OopMap{[72]=Oop [88]=Oop [112]=Oop rax=Oop off=777}
                                                ;*athrow
                                                ; - java.io.PrintStream::ensureOpen@16 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)

  0x00007fffe1261469: movabs  $0x7fffe1261469,%rdx  ;   {section_word}
  0x00007fffe1261473: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe1261478: nop                       ;*athrow
                                                ; - java.io.PrintStream::ensureOpen@16 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)

  ;;  block B1 [39, 46]

  0x00007fffe1261479: mov     0x348(%r15),%rax
  0x00007fffe1261480: xor     %r10,%r10
  0x00007fffe1261483: mov     %r10,0x348(%r15)
  0x00007fffe126148a: xor     %r10,%r10
  0x00007fffe126148d: mov     %r10,0x350(%r15)
  0x00007fffe1261494: mov     %rax,%rdx
  0x00007fffe1261497: lea     0x68(%rsp),%rax
  0x00007fffe126149c: mov     0x8(%rax),%rdi
  0x00007fffe12614a0: mov     (%rdi),%rsi
  0x00007fffe12614a3: and     $0x7,%rsi
  0x00007fffe12614a7: cmp     $0x5,%rsi
  0x00007fffe12614ab: je      0x7fffe12614c8
  0x00007fffe12614b1: mov     (%rax),%rsi
  0x00007fffe12614b4: test    %rsi,%rsi
  0x00007fffe12614b7: je      0x7fffe12614c8
  0x00007fffe12614bd: lock cmpxchg %rsi,(%rdi)
  0x00007fffe12614c2: jne     0x7fffe12615ae    ;*monitorexit
                                                ; - java.io.PrintStream::write@43 (line 483)

  0x00007fffe12614c8: mov     %rdx,%rax         ; OopMap{[72]=Oop rax=Oop off=875}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)

  0x00007fffe12614cb: movabs  $0x7fffe12614cb,%rdx  ;   {section_word}
  0x00007fffe12614d5: callq   0x7fffe11f9740    ;   {runtime_call}
  0x00007fffe12614da: nop                       ;*athrow
                                                ; - java.io.PrintStream::write@46 (line 483)

  ;;  block B3 [61, 68]

  0x00007fffe12614db: mov     0x48(%rsp),%rsi
  0x00007fffe12614e0: mov     0x348(%r15),%rax
  0x00007fffe12614e7: xor     %r10,%r10
  0x00007fffe12614ea: mov     %r10,0x348(%r15)
  0x00007fffe12614f1: xor     %r10,%r10
  0x00007fffe12614f4: mov     %r10,0x350(%r15)
  0x00007fffe12614fb: movb    $0x1,0x11(%rsi)   ;*putfield trouble
                                                ; - java.io.PrintStream::write@65 (line 489)

  0x00007fffe12614ff: add     $0x80,%rsp
  0x00007fffe1261506: pop     %rbp
  0x00007fffe1261507: test    %eax,0x16d99bf3(%rip)  ;   {poll_return}
  0x00007fffe126150d: retq
  ;;  block B2 [50, 58]

  0x00007fffe126150e: mov     0x348(%r15),%rax
  0x00007fffe1261515: xor     %r10,%r10
  0x00007fffe1261518: mov     %r10,0x348(%r15)
  0x00007fffe126151f: xor     %r10,%r10
  0x00007fffe1261522: mov     %r10,0x350(%r15)
  0x00007fffe1261529: mov     0x268(%r15),%rsi  ;*invokestatic currentThread
                                                ; - java.io.PrintStream::write@52 (line 486)

  0x00007fffe1261530: cmp     (%rsi),%rax       ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::write@55 (line 486)
                                                ; implicit exception: dispatches to 0x00007fffe12615c1
  0x00007fffe1261533: nop
  0x00007fffe1261534: nop
  0x00007fffe1261535: nop
  0x00007fffe1261536: nop
  0x00007fffe1261537: callq   0x7fffe1105e80    ; OopMap{off=988}
                                                ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::write@55 (line 486)
                                                ;   {optimized virtual_call}
  ;;  block B10 [68, 68]

  0x00007fffe126153c: add     $0x80,%rsp
  0x00007fffe1261543: pop     %rbp
  0x00007fffe1261544: test    %eax,0x16d99bb6(%rip)  ;   {poll_return}
  0x00007fffe126154a: retq
  ;; CounterOverflowStub slow case
  0x00007fffe126154b: mov     %rax,0x8(%rsp)
  0x00007fffe1261550: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1261558: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [72]=Oop rdx=Oop off=1021}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 478)
                                                ;   {runtime_call}
  0x00007fffe126155d: jmpq    0x7fffe12611c0
  ;; MonitorEnterStub slow case
  0x00007fffe1261562: mov     %rsi,0x8(%rsp)
  0x00007fffe1261567: mov     %rdi,(%rsp)
  0x00007fffe126156b: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [72]=Oop rdx=Oop [112]=Oop off=1040}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::write@4 (line 478)
                                                ;   {runtime_call}
  0x00007fffe1261570: jmpq    0x7fffe1261286
  ;; MonitorExitStub slow case
  0x00007fffe1261575: lea     0x68(%rsp),%rax
  0x00007fffe126157a: mov     %rax,(%rsp)
  0x00007fffe126157e: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1261583: jmpq    0x7fffe1261415
  ;; PatchingStub slow case
  ;;  patch template
  0x00007fffe1261588: movabs  $0x0,%rdx         ;   {metadata(NULL)}
  ;; patch data encoded as movl
  0x00007fffe1261592: mov     $0xa050f00,%eax
  ;; patch entry point
  0x00007fffe1261597: callq   0x7fffe11fc960    ; OopMap{[72]=Oop [88]=Oop [112]=Oop off=1084}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ;   {runtime_call}
  0x00007fffe126159c: jmpq    0x7fffe1261438
  ;; NewInstanceStub slow case
  0x00007fffe12615a1: mov     %rdx,%rdx
  0x00007fffe12615a4: callq   0x7fffe11668a0    ; OopMap{[72]=Oop [88]=Oop [112]=Oop off=1097}
                                                ;*new  ; - java.io.PrintStream::ensureOpen@7 (line 325)
                                                ; - java.io.PrintStream::write@6 (line 479)
                                                ;   {runtime_call}
  0x00007fffe12615a9: jmpq    0x7fffe1261447
  ;; MonitorExitStub slow case
  0x00007fffe12615ae: lea     0x68(%rsp),%rax
  0x00007fffe12615b3: mov     %rax,(%rsp)
  0x00007fffe12615b7: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12615bc: jmpq    0x7fffe12614c8
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12615c1: callq   0x7fffe11670a0    ; OopMap{rsi=Oop off=1126}
                                                ;*invokevirtual interrupt
                                                ; - java.io.PrintStream::write@55 (line 486)
                                                ;   {runtime_call}
  0x00007fffe12615c6: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12615cb: sub     $0x80,%rsp
  0x00007fffe12615d2: mov     %rax,0x78(%rsp)
  0x00007fffe12615d7: mov     %rcx,0x70(%rsp)
  0x00007fffe12615dc: mov     %rdx,0x68(%rsp)
  0x00007fffe12615e1: mov     %rbx,0x60(%rsp)
  0x00007fffe12615e6: mov     %rbp,0x50(%rsp)
  0x00007fffe12615eb: mov     %rsi,0x48(%rsp)
  0x00007fffe12615f0: mov     %rdi,0x40(%rsp)
  0x00007fffe12615f5: mov     %r8,0x38(%rsp)
  0x00007fffe12615fa: mov     %r9,0x30(%rsp)
  0x00007fffe12615ff: mov     %r10,0x28(%rsp)
  0x00007fffe1261604: mov     %r11,0x20(%rsp)
  0x00007fffe1261609: mov     %r12,0x18(%rsp)
  0x00007fffe126160e: mov     %r13,0x10(%rsp)
  0x00007fffe1261613: mov     %r14,0x8(%rsp)
  0x00007fffe1261618: mov     %r15,(%rsp)
  0x00007fffe126161c: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1261626: movabs  $0x7fffe12615c6,%rsi  ;   {internal_word}
  0x00007fffe1261630: mov     %rsp,%rdx
  0x00007fffe1261633: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1261637: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126163c: hlt
  0x00007fffe126163d: nop
  0x00007fffe126163e: nop
  ;; Unwind handler
  0x00007fffe126163f: mov     0x348(%r15),%rax
  0x00007fffe1261646: movabs  $0x0,%r10
  0x00007fffe1261650: mov     %r10,0x348(%r15)
  0x00007fffe1261657: movabs  $0x0,%r10
  0x00007fffe1261661: mov     %r10,0x350(%r15)
  0x00007fffe1261668: add     $0x80,%rsp
  0x00007fffe126166f: pop     %rbp
  0x00007fffe1261670: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1261675: hlt
  0x00007fffe1261676: hlt
  0x00007fffe1261677: hlt
  0x00007fffe1261678: hlt
  0x00007fffe1261679: hlt
  0x00007fffe126167a: hlt
  0x00007fffe126167b: hlt
  0x00007fffe126167c: hlt
  0x00007fffe126167d: hlt
  0x00007fffe126167e: hlt
  0x00007fffe126167f: hlt
[Stub Code]
  0x00007fffe1261680: nop                       ;   {no_reloc}
  0x00007fffe1261681: nop
  0x00007fffe1261682: nop
  0x00007fffe1261683: nop
  0x00007fffe1261684: nop
  0x00007fffe1261685: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126168f: jmpq    0x7fffe126168f    ;   {runtime_call}
  0x00007fffe1261694: nop
  0x00007fffe1261695: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126169f: jmpq    0x7fffe126169f    ;   {runtime_call}
  0x00007fffe12616a4: nop
  0x00007fffe12616a5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12616af: jmpq    0x7fffe12616af    ;   {runtime_call}
  0x00007fffe12616b4: nop
  0x00007fffe12616b5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12616bf: jmpq    0x7fffe12616bf    ;   {runtime_call}
[Exception Handler]
  0x00007fffe12616c4: movabs  $0xdead,%rbx
  0x00007fffe12616ce: movabs  $0xdead,%rcx
  0x00007fffe12616d8: movabs  $0xdead,%rsi
  0x00007fffe12616e2: movabs  $0xdead,%rdi
  0x00007fffe12616ec: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12616f1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12616f6: sub     $0x80,%rsp
  0x00007fffe12616fd: mov     %rax,0x78(%rsp)
  0x00007fffe1261702: mov     %rcx,0x70(%rsp)
  0x00007fffe1261707: mov     %rdx,0x68(%rsp)
  0x00007fffe126170c: mov     %rbx,0x60(%rsp)
  0x00007fffe1261711: mov     %rbp,0x50(%rsp)
  0x00007fffe1261716: mov     %rsi,0x48(%rsp)
  0x00007fffe126171b: mov     %rdi,0x40(%rsp)
  0x00007fffe1261720: mov     %r8,0x38(%rsp)
  0x00007fffe1261725: mov     %r9,0x30(%rsp)
  0x00007fffe126172a: mov     %r10,0x28(%rsp)
  0x00007fffe126172f: mov     %r11,0x20(%rsp)
  0x00007fffe1261734: mov     %r12,0x18(%rsp)
  0x00007fffe1261739: mov     %r13,0x10(%rsp)
  0x00007fffe126173e: mov     %r14,0x8(%rsp)
  0x00007fffe1261743: mov     %r15,(%rsp)
  0x00007fffe1261747: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1261751: movabs  $0x7fffe12616f1,%rsi  ;   {internal_word}
  0x00007fffe126175b: mov     %rsp,%rdx
  0x00007fffe126175e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1261762: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1261767: hlt
[Deopt Handler Code]
  0x00007fffe1261768: movabs  $0x7fffe1261768,%r10  ;   {section_word}
  0x00007fffe1261772: push    %r10
  0x00007fffe1261774: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1261779: hlt
  0x00007fffe126177a: hlt
  0x00007fffe126177b: hlt
  0x00007fffe126177c: hlt
  0x00007fffe126177d: hlt
  0x00007fffe126177e: hlt
  0x00007fffe126177f: hlt
<nmethod compile_id='55' compiler='C1' level='2' entry='0x00007fffe1261160' size='3120' address='0x00007fffe1260f50' relocation_offset='304' insts_offset='528' stub_offset='1840' scopes_data_offset='2128' scopes_pcs_offset='2416' dependencies_offset='2912' handler_table_offset='2920' nul_chk_table_offset='3104' method='java/io/PrintStream write ([BII)V' bytes='69' count='56830' iicount='56830' stamp='120.078'/>
<writer thread='140737327351552'/>
<task_queued compile_id='107' method='StackTopCache add (II)I' bytes='9' count='25537' iicount='25537' level='1' stamp='120.081' comment='tiered' hot_count='25537'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1260c50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1260da0 Code size: 0x00000118
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe1260da0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1260da7: push    %rbp
  0x00007fffe1260da8: sub     $0x30,%rsp        ;*bipush
                                                ; - StackTopCache::add@0 (line 12)

  ;;  block B0 [0, 8]

  0x00007fffe1260dac: add     %edx,%esi
  0x00007fffe1260dae: mov     %rsi,%rax
  0x00007fffe1260db1: add     $0x30,%rsp
  0x00007fffe1260db5: pop     %rbp
  0x00007fffe1260db6: test    %eax,0x16d9a344(%rip)  ;   {poll_return}
  0x00007fffe1260dbc: retq
  0x00007fffe1260dbd: nop
  0x00007fffe1260dbe: nop
  ;; Unwind handler
  0x00007fffe1260dbf: mov     0x348(%r15),%rax
  0x00007fffe1260dc6: movabs  $0x0,%r10
  0x00007fffe1260dd0: mov     %r10,0x348(%r15)
  0x00007fffe1260dd7: movabs  $0x0,%r10
  0x00007fffe1260de1: mov     %r10,0x350(%r15)
  0x00007fffe1260de8: add     $0x30,%rsp
  0x00007fffe1260dec: pop     %rbp
  0x00007fffe1260ded: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1260df2: hlt
  0x00007fffe1260df3: hlt
  0x00007fffe1260df4: hlt
  0x00007fffe1260df5: hlt
  0x00007fffe1260df6: hlt
  0x00007fffe1260df7: hlt
  0x00007fffe1260df8: hlt
  0x00007fffe1260df9: hlt
  0x00007fffe1260dfa: hlt
  0x00007fffe1260dfb: hlt
  0x00007fffe1260dfc: hlt
  0x00007fffe1260dfd: hlt
  0x00007fffe1260dfe: hlt
  0x00007fffe1260dff: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe1260e00: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe1260e0a: movabs  $0xdead,%rcx
  0x00007fffe1260e14: movabs  $0xdead,%rsi
  0x00007fffe1260e1e: movabs  $0xdead,%rdi
  0x00007fffe1260e28: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1260e2d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1260e32: sub     $0x80,%rsp
  0x00007fffe1260e39: mov     %rax,0x78(%rsp)
  0x00007fffe1260e3e: mov     %rcx,0x70(%rsp)
  0x00007fffe1260e43: mov     %rdx,0x68(%rsp)
  0x00007fffe1260e48: mov     %rbx,0x60(%rsp)
  0x00007fffe1260e4d: mov     %rbp,0x50(%rsp)
  0x00007fffe1260e52: mov     %rsi,0x48(%rsp)
  0x00007fffe1260e57: mov     %rdi,0x40(%rsp)
  0x00007fffe1260e5c: mov     %r8,0x38(%rsp)
  0x00007fffe1260e61: mov     %r9,0x30(%rsp)
  0x00007fffe1260e66: mov     %r10,0x28(%rsp)
  0x00007fffe1260e6b: mov     %r11,0x20(%rsp)
  0x00007fffe1260e70: mov     %r12,0x18(%rsp)
  0x00007fffe1260e75: mov     %r13,0x10(%rsp)
  0x00007fffe1260e7a: mov     %r14,0x8(%rsp)
  0x00007fffe1260e7f: mov     %r15,(%rsp)
  0x00007fffe1260e83: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1260e8d: movabs  $0x7fffe1260e2d,%rsi  ;   {internal_word}
  0x00007fffe1260e97: mov     %rsp,%rdx
  0x00007fffe1260e9a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1260e9e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1260ea3: hlt
[Deopt Handler Code]
  0x00007fffe1260ea4: movabs  $0x7fffe1260ea4,%r10  ;   {section_word}
  0x00007fffe1260eae: push    %r10
  0x00007fffe1260eb0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1260eb5: hlt
  0x00007fffe1260eb6: hlt
  0x00007fffe1260eb7: hlt
<nmethod compile_id='107' compiler='C1' level='1' entry='0x00007fffe1260da0' size='696' address='0x00007fffe1260c50' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='632' scopes_pcs_offset='640' dependencies_offset='688' oops_offset='616' method='StackTopCache add (II)I' bytes='9' count='25870' iicount='25870' stamp='120.094'/>
<make_not_entrant thread='140736954574592' compile_id='74' compiler='C1' level='2' stamp='120.094'/>
Decoding compiled method 0x00007fffe125fd90:
Code:
Argument 0 is unknown.RIP: 0x7fffe125ffe0 Code size: 0x000008e0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c27350} &apos;write&apos; &apos;([BII)V&apos; in &apos;java/io/BufferedOutputStream&apos;
  # this:     rsi:rsi   = &apos;java/io/BufferedOutputStream&apos;
  # parm0:    rdx:rdx   = &apos;[B&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0xa0]  (sp of caller)
  ;;  block B12 [0, 0]

  0x00007fffe125ffe0: mov     0x8(%rsi),%r10d
  0x00007fffe125ffe4: shl     $0x3,%r10
  0x00007fffe125ffe8: cmp     %rax,%r10
  0x00007fffe125ffeb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe125fff1: nop
  0x00007fffe125fff2: nop
  0x00007fffe125fff3: nop
  0x00007fffe125fff4: nop
  0x00007fffe125fff5: nop
  0x00007fffe125fff6: nop
  0x00007fffe125fff7: nop
  0x00007fffe125fff8: nop
  0x00007fffe125fff9: nop
  0x00007fffe125fffa: nop
  0x00007fffe125fffb: nop
  0x00007fffe125fffc: nop
  0x00007fffe125fffd: nop
  0x00007fffe125fffe: nop
  0x00007fffe125ffff: nop
[Verified Entry Point]
  0x00007fffe1260000: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1260007: push    %rbp
  0x00007fffe1260008: sub     $0x90,%rsp
  0x00007fffe126000f: mov     %rsi,0x58(%rsp)
  0x00007fffe1260014: lea     0x70(%rsp),%rdi
  0x00007fffe1260019: mov     %rsi,0x8(%rdi)
  0x00007fffe126001d: mov     (%rsi),%rax
  0x00007fffe1260020: mov     %rax,%rbx
  0x00007fffe1260023: and     $0x7,%rbx
  0x00007fffe1260027: cmp     $0x5,%rbx
  0x00007fffe126002b: jne     0x7fffe12600b2
  0x00007fffe1260031: mov     0x8(%rsi),%ebx
  0x00007fffe1260034: shl     $0x3,%rbx
  0x00007fffe1260038: mov     0xb0(%rbx),%rbx
  0x00007fffe126003f: or      %r15,%rbx
  0x00007fffe1260042: xor     %rax,%rbx
  0x00007fffe1260045: and     $0xffffffffffffff87,%rbx
  0x00007fffe1260049: je      0x7fffe12600da
  0x00007fffe126004f: test    $0x7,%rbx
  0x00007fffe1260056: jne     0x7fffe126009f
  0x00007fffe1260058: test    $0x300,%rbx
  0x00007fffe126005f: jne     0x7fffe126007e
  0x00007fffe1260061: and     $0x37f,%rax
  0x00007fffe1260068: mov     %rax,%rbx
  0x00007fffe126006b: or      %r15,%rbx
  0x00007fffe126006e: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1260073: jne     0x7fffe1260654
  0x00007fffe1260079: jmpq    0x7fffe12600da
  0x00007fffe126007e: mov     0x8(%rsi),%ebx
  0x00007fffe1260081: shl     $0x3,%rbx
  0x00007fffe1260085: mov     0xb0(%rbx),%rbx
  0x00007fffe126008c: or      %r15,%rbx
  0x00007fffe126008f: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1260094: jne     0x7fffe1260654
  0x00007fffe126009a: jmpq    0x7fffe12600da
  0x00007fffe126009f: mov     0x8(%rsi),%ebx
  0x00007fffe12600a2: shl     $0x3,%rbx
  0x00007fffe12600a6: mov     0xb0(%rbx),%rbx
  0x00007fffe12600ad: lock cmpxchg %rbx,(%rsi)
  0x00007fffe12600b2: mov     (%rsi),%rax
  0x00007fffe12600b5: or      $0x1,%rax
  0x00007fffe12600b9: mov     %rax,(%rdi)
  0x00007fffe12600bc: lock cmpxchg %rdi,(%rsi)
  0x00007fffe12600c1: je      0x7fffe12600da
  0x00007fffe12600c7: sub     %rsp,%rax
  0x00007fffe12600ca: and     $0xfffffffffffff007,%rax
  0x00007fffe12600d1: mov     %rax,(%rdi)
  0x00007fffe12600d4: jne     0x7fffe1260654
  0x00007fffe12600da: movabs  $0x7ffff4d71218,%rdi
  0x00007fffe12600e4: mov     0x8(%rdi),%ebx
  0x00007fffe12600e7: add     $0x8,%ebx
  0x00007fffe12600ea: mov     %ebx,0x8(%rdi)
  0x00007fffe12600ed: movabs  $0x7ffff4c27350,%rdi  ;   {metadata({method} {0x00007ffff4c27350} &apos;write&apos; &apos;([BII)V&apos; in &apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe12600f7: and     $0x3ff8,%ebx
  0x00007fffe12600fd: cmp     $0x0,%ebx
  ;;   30 branch [EQ] [CounterOverflowStub: 0x00007fffb02cce00]
  0x00007fffe1260100: je      0x7fffe1260667    ;*iload_3
                                                ; - java.io.BufferedOutputStream::write@0 (line 117)

  ;;  block B13 [0, 0]

  ;;  block B0 [0, 6]

  0x00007fffe1260106: mov     0x14(%rsi),%edi
  0x00007fffe1260109: push    %r10
  0x00007fffe126010b: cmp     0x16af9ace(%rip),%r12  ;   {external_word}
  0x00007fffe1260112: je      0x7fffe126018f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1260118: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126011d: sub     $0x80,%rsp
  0x00007fffe1260124: mov     %rax,0x78(%rsp)
  0x00007fffe1260129: mov     %rcx,0x70(%rsp)
  0x00007fffe126012e: mov     %rdx,0x68(%rsp)
  0x00007fffe1260133: mov     %rbx,0x60(%rsp)
  0x00007fffe1260138: mov     %rbp,0x50(%rsp)
  0x00007fffe126013d: mov     %rsi,0x48(%rsp)
  0x00007fffe1260142: mov     %rdi,0x40(%rsp)
  0x00007fffe1260147: mov     %r8,0x38(%rsp)
  0x00007fffe126014c: mov     %r9,0x30(%rsp)
  0x00007fffe1260151: mov     %r10,0x28(%rsp)
  0x00007fffe1260156: mov     %r11,0x20(%rsp)
  0x00007fffe126015b: mov     %r12,0x18(%rsp)
  0x00007fffe1260160: mov     %r13,0x10(%rsp)
  0x00007fffe1260165: mov     %r14,0x8(%rsp)
  0x00007fffe126016a: mov     %r15,(%rsp)
  0x00007fffe126016e: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1260178: movabs  $0x7fffe1260118,%rsi  ;   {internal_word}
  0x00007fffe1260182: mov     %rsp,%rdx
  0x00007fffe1260185: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1260189: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126018e: hlt
  0x00007fffe126018f: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@2 (line 117)

  0x00007fffe1260191: mov     0xc(%rdi),%ebx    ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ; implicit exception: dispatches to 0x00007fffe126067e
  0x00007fffe1260194: cmp     %ebx,%r8d
  ;;   48 branch [LT] [B2] 
  0x00007fffe1260197: jl      0x7fffe12601ae    ;*if_icmplt
                                                ; - java.io.BufferedOutputStream::write@6 (line 117)

  ;;  block B1 [9, 4]

  0x00007fffe126019d: mov     0x10(%rsi),%ebx   ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::write@10 (line 121)

  0x00007fffe12601a0: cmp     $0x0,%ebx
  ;;   58 branch [LE] [B8] 
  0x00007fffe12601a3: jle     0x7fffe1260576
  ;;   60 branch [AL] [B7] 
  0x00007fffe12601a9: jmpq    0x7fffe12604a5    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::write@10 (line 121)

  ;;  block B2 [24, 35]

  0x00007fffe12601ae: mov     0x10(%rsi),%eax   ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@31 (line 125)

  0x00007fffe12601b1: sub     %eax,%ebx
  0x00007fffe12601b3: cmp     %ebx,%r8d
  ;;   76 branch [GT] [B3] 
  0x00007fffe12601b6: jnle    0x7fffe12601cf    ;*if_icmple
                                                ; - java.io.BufferedOutputStream::write@35 (line 125)

  ;;  block B15 [42, 42]

  0x00007fffe12601bc: mov     %r8d,0x6c(%rsp)
  0x00007fffe12601c1: mov     %ecx,0x68(%rsp)
  0x00007fffe12601c5: mov     %rdx,0x60(%rsp)
  ;;   82 branch [AL] [B4] 
  0x00007fffe12601ca: jmpq    0x7fffe12602a0    ;*aload_1
                                                ; - java.io.BufferedOutputStream::write@42 (line 128)

  ;;  block B3 [38, 4]

  0x00007fffe12601cf: cmp     $0x0,%eax
  0x00007fffe12601d2: mov     %r8d,0x6c(%rsp)
  0x00007fffe12601d7: mov     %ecx,0x68(%rsp)
  0x00007fffe12601db: mov     %rdx,0x60(%rsp)
  ;;   88 branch [LE] [B4] 
  0x00007fffe12601e0: jle     0x7fffe12602a0    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::write@39 (line 126)

  ;;  block B10 [7, 28]

  0x00007fffe12601e6: mov     0xc(%rsi),%ebx
  0x00007fffe12601e9: push    %r10
  0x00007fffe12601eb: cmp     0x16af99ee(%rip),%r12  ;   {external_word}
  0x00007fffe12601f2: je      0x7fffe126026f
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12601f8: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12601fd: sub     $0x80,%rsp
  0x00007fffe1260204: mov     %rax,0x78(%rsp)
  0x00007fffe1260209: mov     %rcx,0x70(%rsp)
  0x00007fffe126020e: mov     %rdx,0x68(%rsp)
  0x00007fffe1260213: mov     %rbx,0x60(%rsp)
  0x00007fffe1260218: mov     %rbp,0x50(%rsp)
  0x00007fffe126021d: mov     %rsi,0x48(%rsp)
  0x00007fffe1260222: mov     %rdi,0x40(%rsp)
  0x00007fffe1260227: mov     %r8,0x38(%rsp)
  0x00007fffe126022c: mov     %r9,0x30(%rsp)
  0x00007fffe1260231: mov     %r10,0x28(%rsp)
  0x00007fffe1260236: mov     %r11,0x20(%rsp)
  0x00007fffe126023b: mov     %r12,0x18(%rsp)
  0x00007fffe1260240: mov     %r13,0x10(%rsp)
  0x00007fffe1260245: mov     %r14,0x8(%rsp)
  0x00007fffe126024a: mov     %r15,(%rsp)
  0x00007fffe126024e: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1260258: movabs  $0x7fffe12601f8,%rsi  ;   {internal_word}
  0x00007fffe1260262: mov     %rsp,%rdx
  0x00007fffe1260265: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1260269: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126026e: hlt
  0x00007fffe126026f: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::write@39 (line 126)

  0x00007fffe1260271: mov     %rdi,%rdx
  0x00007fffe1260274: mov     $0x0,%ecx
  0x00007fffe1260279: mov     %rax,%r8
  0x00007fffe126027c: mov     %rbx,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::write@39 (line 126)

  0x00007fffe126027f: nop
  0x00007fffe1260280: nop
  0x00007fffe1260281: nop
  0x00007fffe1260282: nop
  0x00007fffe1260283: nop
  0x00007fffe1260284: nop
  0x00007fffe1260285: movabs  $0xffffffffffffffff,%rax
  0x00007fffe126028f: callq   0x7fffe11060c0    ; OopMap{[88]=Oop [96]=Oop [120]=Oop off=692}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::write@39 (line 126)
                                                ;   {virtual_call}
  0x00007fffe1260294: mov     0x58(%rsp),%rsi
  0x00007fffe1260299: movl    $0x0,0x10(%rsi)   ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::write@39 (line 126)

  ;;  block B4 [42, 66]

  0x00007fffe12602a0: mov     0x14(%rsi),%ecx
  0x00007fffe12602a3: push    %r10
  0x00007fffe12602a5: cmp     0x16af9934(%rip),%r12  ;   {external_word}
  0x00007fffe12602ac: je      0x7fffe1260329
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12602b2: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12602b7: sub     $0x80,%rsp
  0x00007fffe12602be: mov     %rax,0x78(%rsp)
  0x00007fffe12602c3: mov     %rcx,0x70(%rsp)
  0x00007fffe12602c8: mov     %rdx,0x68(%rsp)
  0x00007fffe12602cd: mov     %rbx,0x60(%rsp)
  0x00007fffe12602d2: mov     %rbp,0x50(%rsp)
  0x00007fffe12602d7: mov     %rsi,0x48(%rsp)
  0x00007fffe12602dc: mov     %rdi,0x40(%rsp)
  0x00007fffe12602e1: mov     %r8,0x38(%rsp)
  0x00007fffe12602e6: mov     %r9,0x30(%rsp)
  0x00007fffe12602eb: mov     %r10,0x28(%rsp)
  0x00007fffe12602f0: mov     %r11,0x20(%rsp)
  0x00007fffe12602f5: mov     %r12,0x18(%rsp)
  0x00007fffe12602fa: mov     %r13,0x10(%rsp)
  0x00007fffe12602ff: mov     %r14,0x8(%rsp)
  0x00007fffe1260304: mov     %r15,(%rsp)
  0x00007fffe1260308: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1260312: movabs  $0x7fffe12602b2,%rsi  ;   {internal_word}
  0x00007fffe126031c: mov     %rsp,%rdx
  0x00007fffe126031f: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1260323: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1260328: hlt
  0x00007fffe1260329: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::write@45 (line 128)

  0x00007fffe126032b: mov     0x10(%rsi),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@49 (line 128)

  0x00007fffe126032f: mov     0x60(%rsp),%rsi
  0x00007fffe1260334: mov     0x68(%rsp),%edx
  0x00007fffe1260338: mov     0x6c(%rsp),%r9d
  0x00007fffe126033d: test    %rsi,%rsi
  0x00007fffe1260340: je      0x7fffe12606fa
  0x00007fffe1260346: test    %rcx,%rcx
  0x00007fffe1260349: je      0x7fffe12606fa
  0x00007fffe126034f: test    %edx,%edx
  0x00007fffe1260351: jl      0x7fffe12606fa
  0x00007fffe1260357: test    %r8d,%r8d
  0x00007fffe126035a: jl      0x7fffe12606fa
  0x00007fffe1260360: lea     (%rdx,%r9),%rdi
  0x00007fffe1260364: cmp     0xc(%rsi),%edi
  0x00007fffe1260367: jnbe    0x7fffe12606fa
  0x00007fffe126036d: lea     (%r8,%r9),%rdi
  0x00007fffe1260371: cmp     0xc(%rcx),%edi
  0x00007fffe1260374: jnbe    0x7fffe12606fa
  0x00007fffe126037a: test    %r9d,%r9d
  0x00007fffe126037d: jl      0x7fffe12606fa
  0x00007fffe1260383: je      0x7fffe1260456
  0x00007fffe1260389: movsxd  %edx,%rdx
  0x00007fffe126038c: movsxd  %r8d,%r8
  0x00007fffe126038f: movabs  $0x1000007f0,%rdi  ;   {metadata({type array byte})}
  0x00007fffe1260399: shr     $0x3,%rdi
  0x00007fffe126039d: cmp     0x8(%rcx),%edi
  0x00007fffe12603a0: jne     0x7fffe12603af
  0x00007fffe12603a6: cmp     0x8(%rsi),%edi
  0x00007fffe12603a9: je      0x7fffe1260426
  0x00007fffe12603af: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12603b4: sub     $0x80,%rsp
  0x00007fffe12603bb: mov     %rax,0x78(%rsp)
  0x00007fffe12603c0: mov     %rcx,0x70(%rsp)
  0x00007fffe12603c5: mov     %rdx,0x68(%rsp)
  0x00007fffe12603ca: mov     %rbx,0x60(%rsp)
  0x00007fffe12603cf: mov     %rbp,0x50(%rsp)
  0x00007fffe12603d4: mov     %rsi,0x48(%rsp)
  0x00007fffe12603d9: mov     %rdi,0x40(%rsp)
  0x00007fffe12603de: mov     %r8,0x38(%rsp)
  0x00007fffe12603e3: mov     %r9,0x30(%rsp)
  0x00007fffe12603e8: mov     %r10,0x28(%rsp)
  0x00007fffe12603ed: mov     %r11,0x20(%rsp)
  0x00007fffe12603f2: mov     %r12,0x18(%rsp)
  0x00007fffe12603f7: mov     %r13,0x10(%rsp)
  0x00007fffe12603fc: mov     %r14,0x8(%rsp)
  0x00007fffe1260401: mov     %r15,(%rsp)
  0x00007fffe1260405: movabs  $0x7ffff7615288,%rdi  ;   {external_word}
  0x00007fffe126040f: movabs  $0x7fffe12603af,%rsi  ;   {internal_word}
  0x00007fffe1260419: mov     %rsp,%rdx
  0x00007fffe126041c: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1260420: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1260425: hlt
  0x00007fffe1260426: lea     0x10(%rsi,%rdx),%rdi
  0x00007fffe126042b: lea     0x10(%rcx,%r8),%rsi
  0x00007fffe1260430: mov     %r9,%rdx
  0x00007fffe1260433: test    $0xf,%esp
  0x00007fffe1260439: je      0x7fffe1260451
  0x00007fffe126043f: sub     $0x8,%rsp
  0x00007fffe1260443: callq   0x7fffe1140ce0    ;   {runtime_call}
  0x00007fffe1260448: add     $0x8,%rsp
  0x00007fffe126044c: jmpq    0x7fffe1260456
  0x00007fffe1260451: callq   0x7fffe1140ce0    ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ;   {runtime_call}
  0x00007fffe1260456: mov     0x58(%rsp),%rsi
  0x00007fffe126045b: mov     0x10(%rsi),%eax   ;*getfield count
                                                ; - java.io.BufferedOutputStream::write@58 (line 129)

  0x00007fffe126045e: add     0x6c(%rsp),%eax
  0x00007fffe1260462: mov     %eax,0x10(%rsi)   ;*putfield count
                                                ; - java.io.BufferedOutputStream::write@63 (line 129)

  0x00007fffe1260465: lea     0x70(%rsp),%rax
  0x00007fffe126046a: mov     0x8(%rax),%rcx
  0x00007fffe126046e: mov     (%rcx),%rdx
  0x00007fffe1260471: and     $0x7,%rdx
  0x00007fffe1260475: cmp     $0x5,%rdx
  0x00007fffe1260479: je      0x7fffe1260496
  0x00007fffe126047f: mov     (%rax),%rdx
  0x00007fffe1260482: test    %rdx,%rdx
  0x00007fffe1260485: je      0x7fffe1260496
  0x00007fffe126048b: lock cmpxchg %rdx,(%rcx)
  0x00007fffe1260490: jne     0x7fffe126070f
  0x00007fffe1260496: add     $0x90,%rsp
  0x00007fffe126049d: pop     %rbp
  0x00007fffe126049e: test    %eax,0x16d9ac5c(%rip)  ;   {poll_return}
  0x00007fffe12604a4: retq                      ;*return
                                                ; - java.io.BufferedOutputStream::write@66 (line 130)

  ;;  block B7 [7, 28]

  0x00007fffe12604a5: mov     %r8d,0x6c(%rsp)
  0x00007fffe12604aa: mov     %ecx,0x68(%rsp)
  0x00007fffe12604ae: mov     %rdx,0x60(%rsp)
  0x00007fffe12604b3: mov     0xc(%rsi),%eax
  0x00007fffe12604b6: push    %r10
  0x00007fffe12604b8: cmp     0x16af9721(%rip),%r12  ;   {external_word}
  0x00007fffe12604bf: je      0x7fffe126053c
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe12604c5: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12604ca: sub     $0x80,%rsp
  0x00007fffe12604d1: mov     %rax,0x78(%rsp)
  0x00007fffe12604d6: mov     %rcx,0x70(%rsp)
  0x00007fffe12604db: mov     %rdx,0x68(%rsp)
  0x00007fffe12604e0: mov     %rbx,0x60(%rsp)
  0x00007fffe12604e5: mov     %rbp,0x50(%rsp)
  0x00007fffe12604ea: mov     %rsi,0x48(%rsp)
  0x00007fffe12604ef: mov     %rdi,0x40(%rsp)
  0x00007fffe12604f4: mov     %r8,0x38(%rsp)
  0x00007fffe12604f9: mov     %r9,0x30(%rsp)
  0x00007fffe12604fe: mov     %r10,0x28(%rsp)
  0x00007fffe1260503: mov     %r11,0x20(%rsp)
  0x00007fffe1260508: mov     %r12,0x18(%rsp)
  0x00007fffe126050d: mov     %r13,0x10(%rsp)
  0x00007fffe1260512: mov     %r14,0x8(%rsp)
  0x00007fffe1260517: mov     %r15,(%rsp)
  0x00007fffe126051b: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1260525: movabs  $0x7fffe12604c5,%rsi  ;   {internal_word}
  0x00007fffe126052f: mov     %rsp,%rdx
  0x00007fffe1260532: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1260536: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126053b: hlt
  0x00007fffe126053c: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::write@10 (line 121)

  0x00007fffe126053e: mov     %rdi,%rdx
  0x00007fffe1260541: mov     $0x0,%ecx
  0x00007fffe1260546: mov     %rbx,%r8
  0x00007fffe1260549: mov     %rax,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::write@10 (line 121)

  0x00007fffe126054c: nop
  0x00007fffe126054d: movabs  $0xffffffffffffffff,%rax
  0x00007fffe1260557: callq   0x7fffe11060c0    ; OopMap{[96]=Oop [88]=Oop [120]=Oop off=1404}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::write@10 (line 121)
                                                ;   {virtual_call}
  0x00007fffe126055c: mov     0x58(%rsp),%rsi
  0x00007fffe1260561: movl    $0x0,0x10(%rsi)   ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::write@10 (line 121)

  0x00007fffe1260568: mov     0x6c(%rsp),%r8d
  0x00007fffe126056d: mov     0x68(%rsp),%ecx
  0x00007fffe1260571: mov     0x60(%rsp),%rdx
  ;;  block B8 [28, 23]

  0x00007fffe1260576: mov     0xc(%rsi),%esi
  0x00007fffe1260579: push    %r10
  0x00007fffe126057b: cmp     0x16af965e(%rip),%r12  ;   {external_word}
  0x00007fffe1260582: je      0x7fffe12605ff
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1260588: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126058d: sub     $0x80,%rsp
  0x00007fffe1260594: mov     %rax,0x78(%rsp)
  0x00007fffe1260599: mov     %rcx,0x70(%rsp)
  0x00007fffe126059e: mov     %rdx,0x68(%rsp)
  0x00007fffe12605a3: mov     %rbx,0x60(%rsp)
  0x00007fffe12605a8: mov     %rbp,0x50(%rsp)
  0x00007fffe12605ad: mov     %rsi,0x48(%rsp)
  0x00007fffe12605b2: mov     %rdi,0x40(%rsp)
  0x00007fffe12605b7: mov     %r8,0x38(%rsp)
  0x00007fffe12605bc: mov     %r9,0x30(%rsp)
  0x00007fffe12605c1: mov     %r10,0x28(%rsp)
  0x00007fffe12605c6: mov     %r11,0x20(%rsp)
  0x00007fffe12605cb: mov     %r12,0x18(%rsp)
  0x00007fffe12605d0: mov     %r13,0x10(%rsp)
  0x00007fffe12605d5: mov     %r14,0x8(%rsp)
  0x00007fffe12605da: mov     %r15,(%rsp)
  0x00007fffe12605de: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12605e8: movabs  $0x7fffe1260588,%rsi  ;   {internal_word}
  0x00007fffe12605f2: mov     %rsp,%rdx
  0x00007fffe12605f5: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12605f9: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12605fe: hlt
  0x00007fffe12605ff: pop     %r10              ;*getfield out
                                                ; - java.io.BufferedOutputStream::write@14 (line 122)

  0x00007fffe1260601: nop
  0x00007fffe1260602: nop
  0x00007fffe1260603: nop
  0x00007fffe1260604: nop
  0x00007fffe1260605: movabs  $0xffffffffffffffff,%rax
  0x00007fffe126060f: callq   0x7fffe11060c0    ; OopMap{[120]=Oop off=1588}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::write@20 (line 122)
                                                ;   {virtual_call}
  0x00007fffe1260614: lea     0x70(%rsp),%rax
  0x00007fffe1260619: mov     0x8(%rax),%rdi
  0x00007fffe126061d: mov     (%rdi),%rsi
  0x00007fffe1260620: and     $0x7,%rsi
  0x00007fffe1260624: cmp     $0x5,%rsi
  0x00007fffe1260628: je      0x7fffe1260645
  0x00007fffe126062e: mov     (%rax),%rsi
  0x00007fffe1260631: test    %rsi,%rsi
  0x00007fffe1260634: je      0x7fffe1260645
  0x00007fffe126063a: lock cmpxchg %rsi,(%rdi)
  0x00007fffe126063f: jne     0x7fffe1260722    ;*return
                                                ; - java.io.BufferedOutputStream::write@23 (line 123)

  0x00007fffe1260645: add     $0x90,%rsp
  0x00007fffe126064c: pop     %rbp
  0x00007fffe126064d: test    %eax,0x16d9aaad(%rip)  ;   {poll_return}
  0x00007fffe1260653: retq
  ;; MonitorEnterStub slow case
  0x00007fffe1260654: mov     %rsi,0x8(%rsp)
  0x00007fffe1260659: mov     %rdi,(%rsp)
  0x00007fffe126065d: callq   0x7fffe11fb2a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop [120]=Oop off=1666}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ;   {runtime_call}
  0x00007fffe1260662: jmpq    0x7fffe12600da
  ;; CounterOverflowStub slow case
  0x00007fffe1260667: mov     %rdi,0x8(%rsp)
  0x00007fffe126066c: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1260674: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop [120]=Oop off=1689}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::write@-1 (line 117)
                                                ;   {runtime_call}
  0x00007fffe1260679: jmpq    0x7fffe1260106
  ;; ImplicitNullCheckStub slow case
  0x00007fffe126067e: callq   0x7fffe11670a0    ; OopMap{rsi=Oop [88]=Oop rdx=Oop rdi=Oop [120]=Oop off=1699}
                                                ;*arraylength
                                                ; - java.io.BufferedOutputStream::write@5 (line 117)
                                                ;   {runtime_call}
  0x00007fffe1260683: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1260688: sub     $0x80,%rsp
  0x00007fffe126068f: mov     %rax,0x78(%rsp)
  0x00007fffe1260694: mov     %rcx,0x70(%rsp)
  0x00007fffe1260699: mov     %rdx,0x68(%rsp)
  0x00007fffe126069e: mov     %rbx,0x60(%rsp)
  0x00007fffe12606a3: mov     %rbp,0x50(%rsp)
  0x00007fffe12606a8: mov     %rsi,0x48(%rsp)
  0x00007fffe12606ad: mov     %rdi,0x40(%rsp)
  0x00007fffe12606b2: mov     %r8,0x38(%rsp)
  0x00007fffe12606b7: mov     %r9,0x30(%rsp)
  0x00007fffe12606bc: mov     %r10,0x28(%rsp)
  0x00007fffe12606c1: mov     %r11,0x20(%rsp)
  0x00007fffe12606c6: mov     %r12,0x18(%rsp)
  0x00007fffe12606cb: mov     %r13,0x10(%rsp)
  0x00007fffe12606d0: mov     %r14,0x8(%rsp)
  0x00007fffe12606d5: mov     %r15,(%rsp)
  0x00007fffe12606d9: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe12606e3: movabs  $0x7fffe1260683,%rsi  ;   {internal_word}
  0x00007fffe12606ed: mov     %rsp,%rdx
  0x00007fffe12606f0: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12606f4: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12606f9: hlt
  ;; ArrayCopyStub slow case
  0x00007fffe12606fa: nop
  0x00007fffe12606fb: nop
  0x00007fffe12606fc: nop
  0x00007fffe12606fd: nop
  0x00007fffe12606fe: nop
  0x00007fffe12606ff: callq   0x7fffe1106300    ; OopMap{[88]=Oop [120]=Oop off=1828}
                                                ;*invokestatic arraycopy
                                                ; - java.io.BufferedOutputStream::write@53 (line 128)
                                                ;   {static_call}
  0x00007fffe1260704: incl    0x16abb91e(%rip)  ;   {external_word}
  0x00007fffe126070a: jmpq    0x7fffe1260456
  ;; MonitorExitStub slow case
  0x00007fffe126070f: lea     0x70(%rsp),%rax
  0x00007fffe1260714: mov     %rax,(%rsp)
  0x00007fffe1260718: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe126071d: jmpq    0x7fffe1260496
  ;; MonitorExitStub slow case
  0x00007fffe1260722: lea     0x70(%rsp),%rax
  0x00007fffe1260727: mov     %rax,(%rsp)
  0x00007fffe126072b: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe1260730: jmpq    0x7fffe1260645
  0x00007fffe1260735: nop
  0x00007fffe1260736: nop
  ;; Unwind handler
  0x00007fffe1260737: mov     0x348(%r15),%rax
  0x00007fffe126073e: movabs  $0x0,%r10
  0x00007fffe1260748: mov     %r10,0x348(%r15)
  0x00007fffe126074f: movabs  $0x0,%r10
  0x00007fffe1260759: mov     %r10,0x350(%r15)
  0x00007fffe1260760: mov     %rax,%rbx
  0x00007fffe1260763: lea     0x70(%rsp),%rax
  0x00007fffe1260768: mov     0x8(%rax),%rsi
  0x00007fffe126076c: mov     (%rsi),%rdi
  0x00007fffe126076f: and     $0x7,%rdi
  0x00007fffe1260773: cmp     $0x5,%rdi
  0x00007fffe1260777: je      0x7fffe1260794
  0x00007fffe126077d: mov     (%rax),%rdi
  0x00007fffe1260780: test    %rdi,%rdi
  0x00007fffe1260783: je      0x7fffe1260794
  0x00007fffe1260789: lock cmpxchg %rdi,(%rsi)
  0x00007fffe126078e: jne     0x7fffe12607a4
  0x00007fffe1260794: mov     %rbx,%rax
  0x00007fffe1260797: add     $0x90,%rsp
  0x00007fffe126079e: pop     %rbp
  0x00007fffe126079f: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe12607a4: lea     0x70(%rsp),%rax
  0x00007fffe12607a9: mov     %rax,(%rsp)
  0x00007fffe12607ad: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12607b2: jmp     0x7fffe1260794
  0x00007fffe12607b4: hlt
  0x00007fffe12607b5: hlt
  0x00007fffe12607b6: hlt
  0x00007fffe12607b7: hlt
  0x00007fffe12607b8: hlt
  0x00007fffe12607b9: hlt
  0x00007fffe12607ba: hlt
  0x00007fffe12607bb: hlt
  0x00007fffe12607bc: hlt
  0x00007fffe12607bd: hlt
  0x00007fffe12607be: hlt
  0x00007fffe12607bf: hlt
[Stub Code]
  0x00007fffe12607c0: nop                       ;   {no_reloc}
  0x00007fffe12607c1: nop
  0x00007fffe12607c2: nop
  0x00007fffe12607c3: nop
  0x00007fffe12607c4: nop
  0x00007fffe12607c5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12607cf: jmpq    0x7fffe12607cf    ;   {runtime_call}
  0x00007fffe12607d4: nop
  0x00007fffe12607d5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12607df: jmpq    0x7fffe12607df    ;   {runtime_call}
  0x00007fffe12607e4: nop
  0x00007fffe12607e5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12607ef: jmpq    0x7fffe12607ef    ;   {runtime_call}
  0x00007fffe12607f4: nop
  0x00007fffe12607f5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe12607ff: jmpq    0x7fffe12607ff    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1260804: movabs  $0xdead,%rbx
  0x00007fffe126080e: movabs  $0xdead,%rcx
  0x00007fffe1260818: movabs  $0xdead,%rsi
  0x00007fffe1260822: movabs  $0xdead,%rdi
  0x00007fffe126082c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe1260831: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1260836: sub     $0x80,%rsp
  0x00007fffe126083d: mov     %rax,0x78(%rsp)
  0x00007fffe1260842: mov     %rcx,0x70(%rsp)
  0x00007fffe1260847: mov     %rdx,0x68(%rsp)
  0x00007fffe126084c: mov     %rbx,0x60(%rsp)
  0x00007fffe1260851: mov     %rbp,0x50(%rsp)
  0x00007fffe1260856: mov     %rsi,0x48(%rsp)
  0x00007fffe126085b: mov     %rdi,0x40(%rsp)
  0x00007fffe1260860: mov     %r8,0x38(%rsp)
  0x00007fffe1260865: mov     %r9,0x30(%rsp)
  0x00007fffe126086a: mov     %r10,0x28(%rsp)
  0x00007fffe126086f: mov     %r11,0x20(%rsp)
  0x00007fffe1260874: mov     %r12,0x18(%rsp)
  0x00007fffe1260879: mov     %r13,0x10(%rsp)
  0x00007fffe126087e: mov     %r14,0x8(%rsp)
  0x00007fffe1260883: mov     %r15,(%rsp)
  0x00007fffe1260887: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1260891: movabs  $0x7fffe1260831,%rsi  ;   {internal_word}
  0x00007fffe126089b: mov     %rsp,%rdx
  0x00007fffe126089e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe12608a2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe12608a7: hlt
[Deopt Handler Code]
  0x00007fffe12608a8: movabs  $0x7fffe12608a8,%r10  ;   {section_word}
  0x00007fffe12608b2: push    %r10
  0x00007fffe12608b4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe12608b9: hlt
  0x00007fffe12608ba: hlt
  0x00007fffe12608bb: hlt
  0x00007fffe12608bc: hlt
  0x00007fffe12608bd: hlt
  0x00007fffe12608be: hlt
  0x00007fffe12608bf: hlt
<nmethod compile_id='56' compiler='C1' level='2' entry='0x00007fffe125ffe0' size='3704' address='0x00007fffe125fd90' relocation_offset='304' insts_offset='592' stub_offset='2608' scopes_data_offset='2888' scopes_pcs_offset='3152' dependencies_offset='3680' nul_chk_table_offset='3688' method='java/io/BufferedOutputStream write ([BII)V' bytes='67' count='56830' iicount='56830' stamp='120.150'/>
<writer thread='140737327351552'/>
<task_queued compile_id='108' method='StackTopCache add2 (II)I' bytes='9' count='26457' iicount='26457' level='1' stamp='120.150' comment='tiered' hot_count='26457'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe125e590:
Code:
Argument 0 is unknown.RIP: 0x7fffe125e6e0 Code size: 0x00000118
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe125e6e0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125e6e7: push    %rbp
  0x00007fffe125e6e8: sub     $0x30,%rsp        ;*bipush
                                                ; - StackTopCache::add2@0 (line 18)

  ;;  block B0 [0, 8]

  0x00007fffe125e6ec: add     $0x8,%edx
  0x00007fffe125e6ef: mov     %rdx,%rax
  0x00007fffe125e6f2: add     $0x30,%rsp
  0x00007fffe125e6f6: pop     %rbp
  0x00007fffe125e6f7: test    %eax,0x16d9ca03(%rip)  ;   {poll_return}
  0x00007fffe125e6fd: retq
  0x00007fffe125e6fe: nop
  0x00007fffe125e6ff: nop
  ;; Unwind handler
  0x00007fffe125e700: mov     0x348(%r15),%rax
  0x00007fffe125e707: movabs  $0x0,%r10
  0x00007fffe125e711: mov     %r10,0x348(%r15)
  0x00007fffe125e718: movabs  $0x0,%r10
  0x00007fffe125e722: mov     %r10,0x350(%r15)
  0x00007fffe125e729: add     $0x30,%rsp
  0x00007fffe125e72d: pop     %rbp
  0x00007fffe125e72e: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe125e733: hlt
  0x00007fffe125e734: hlt
  0x00007fffe125e735: hlt
  0x00007fffe125e736: hlt
  0x00007fffe125e737: hlt
  0x00007fffe125e738: hlt
  0x00007fffe125e739: hlt
  0x00007fffe125e73a: hlt
  0x00007fffe125e73b: hlt
  0x00007fffe125e73c: hlt
  0x00007fffe125e73d: hlt
  0x00007fffe125e73e: hlt
  0x00007fffe125e73f: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe125e740: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe125e74a: movabs  $0xdead,%rcx
  0x00007fffe125e754: movabs  $0xdead,%rsi
  0x00007fffe125e75e: movabs  $0xdead,%rdi
  0x00007fffe125e768: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125e76d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125e772: sub     $0x80,%rsp
  0x00007fffe125e779: mov     %rax,0x78(%rsp)
  0x00007fffe125e77e: mov     %rcx,0x70(%rsp)
  0x00007fffe125e783: mov     %rdx,0x68(%rsp)
  0x00007fffe125e788: mov     %rbx,0x60(%rsp)
  0x00007fffe125e78d: mov     %rbp,0x50(%rsp)
  0x00007fffe125e792: mov     %rsi,0x48(%rsp)
  0x00007fffe125e797: mov     %rdi,0x40(%rsp)
  0x00007fffe125e79c: mov     %r8,0x38(%rsp)
  0x00007fffe125e7a1: mov     %r9,0x30(%rsp)
  0x00007fffe125e7a6: mov     %r10,0x28(%rsp)
  0x00007fffe125e7ab: mov     %r11,0x20(%rsp)
  0x00007fffe125e7b0: mov     %r12,0x18(%rsp)
  0x00007fffe125e7b5: mov     %r13,0x10(%rsp)
  0x00007fffe125e7ba: mov     %r14,0x8(%rsp)
  0x00007fffe125e7bf: mov     %r15,(%rsp)
  0x00007fffe125e7c3: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125e7cd: movabs  $0x7fffe125e76d,%rsi  ;   {internal_word}
  0x00007fffe125e7d7: mov     %rsp,%rdx
  0x00007fffe125e7da: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125e7de: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125e7e3: hlt
[Deopt Handler Code]
  0x00007fffe125e7e4: movabs  $0x7fffe125e7e4,%r10  ;   {section_word}
  0x00007fffe125e7ee: push    %r10
  0x00007fffe125e7f0: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125e7f5: hlt
  0x00007fffe125e7f6: hlt
  0x00007fffe125e7f7: hlt
<nmethod compile_id='108' compiler='C1' level='1' entry='0x00007fffe125e6e0' size='696' address='0x00007fffe125e590' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='632' scopes_pcs_offset='640' dependencies_offset='688' oops_offset='616' method='StackTopCache add2 (II)I' bytes='9' count='27469' iicount='27469' stamp='120.176'/>
<make_not_entrant thread='140736954574592' compile_id='76' compiler='C1' level='2' stamp='120.176'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe126d150:
Code:
Argument 0 is unknown.RIP: 0x7fffe126d340 Code size: 0x00000e08
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c24010} &apos;newLine&apos; &apos;()V&apos; in &apos;java/io/PrintStream&apos;
  #           [sp+0x80]  (sp of caller)
  ;; N1350: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe126d340: mov     0x8(%rsi),%r10d
  0x00007fffe126d344: shl     $0x3,%r10
  0x00007fffe126d348: cmp     %r10,%rax
  0x00007fffe126d34b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe126d351: nop
  0x00007fffe126d352: nop
  0x00007fffe126d353: nop
  0x00007fffe126d354: nop
  0x00007fffe126d355: nop
  0x00007fffe126d356: nop
  0x00007fffe126d357: nop
  0x00007fffe126d358: nop
  0x00007fffe126d359: nop
  0x00007fffe126d35a: nop
  0x00007fffe126d35b: nop
  0x00007fffe126d35c: nop
  0x00007fffe126d35d: nop
  0x00007fffe126d35e: nop
  0x00007fffe126d35f: nop
[Verified Entry Point]
  ;; B1: #	B46 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe126d360: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe126d367: push    %rbp
  0x00007fffe126d368: sub     $0x70,%rsp        ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)

  0x00007fffe126d36c: mov     %rsi,0x28(%rsp)
  0x00007fffe126d371: mov     (%rsi),%rax
  0x00007fffe126d374: mov     %rax,%r10
  0x00007fffe126d377: and     $0x7,%r10
  0x00007fffe126d37b: cmp     $0x5,%r10
  0x00007fffe126d37f: jne     0x7fffe126d71e
  ;; B2: #	B48 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe126d385: mov     $0x200051d4,%r11d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe126d38b: movabs  $0x0,%r10
  0x00007fffe126d395: lea     (%r10,%r11,8),%r10
  0x00007fffe126d399: mov     0xb0(%r10),%r10
  0x00007fffe126d3a0: mov     %r10,%r11
  0x00007fffe126d3a3: or      %r15,%r11
  0x00007fffe126d3a6: mov     %r11,%r8
  0x00007fffe126d3a9: xor     %rax,%r8
  0x00007fffe126d3ac: test    $0xffffffffffffff87,%r8
  0x00007fffe126d3b3: jne     0x7fffe126d789    ;*monitorenter
                                                ; - java.io.PrintStream::newLine@3 (line 542)

  ;; B3: #	B80 B4 &lt;- B47 B46 B2 B52  Freq: 1

  0x00007fffe126d3b9: mov     0x28(%rsp),%r10
  0x00007fffe126d3be: mov     0xc(%r10),%r11d   ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  0x00007fffe126d3c2: test    %r11d,%r11d
  0x00007fffe126d3c5: je      0x7fffe126dc66    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)

  ;; B4: #	B86 B5 &lt;- B3  Freq: 1

  0x00007fffe126d3cb: mov     0x18(%r10),%r14d  ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@9 (line 544)

  0x00007fffe126d3cf: mov     0x24(%r14),%r10d  ;*getfield lineSeparator
                                                ; - java.io.BufferedWriter::newLine@2 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; implicit exception: dispatches to 0x00007fffe126dd61
  ;; B5: #	B87 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe126d3d3: mov     %r10d,0x30(%rsp)
  0x00007fffe126d3d8: mov     0xc(%r10),%r11d   ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; implicit exception: dispatches to 0x00007fffe126dd75
  ;; B6: #	B88 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe126d3dc: mov     0xc(%r11),%r13d   ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; implicit exception: dispatches to 0x00007fffe126dd89
  ;; B7: #	B89 B8 &lt;- B6  Freq: 0.999996

  0x00007fffe126d3e0: mov     0x10(%r14),%r11d  ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d3e4: mov     %r11d,0x34(%rsp)
  0x00007fffe126d3e9: mov     (%r11),%rax       ; implicit exception: dispatches to 0x00007fffe126dd9d
  ;; B8: #	B54 B9 &lt;- B7  Freq: 0.999995

  0x00007fffe126d3ec: mov     %rax,%r10
  0x00007fffe126d3ef: and     $0x7,%r10
  0x00007fffe126d3f3: mov     0x30(%rsp),%r8d
  0x00007fffe126d3f8: mov     %r8,%r11          ;*getfield lineSeparator
                                                ; - java.io.BufferedWriter::newLine@2 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d3fb: mov     0x34(%rsp),%r8d
  0x00007fffe126d400: mov     %r8,%rcx          ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d403: mov     %r14,%r8          ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@9 (line 544)

  0x00007fffe126d406: cmp     $0x5,%r10
  0x00007fffe126d40a: jne     0x7fffe126d7be
  ;; B9: #	B56 B10 &lt;- B8  Freq: 0.999994

  0x00007fffe126d410: mov     0x34(%rsp),%r9d
  0x00007fffe126d415: mov     0x8(%r9),%r9d
  0x00007fffe126d419: movabs  $0x0,%r10
  0x00007fffe126d423: lea     (%r10,%r9,8),%r10
  0x00007fffe126d427: mov     0xb0(%r10),%r10
  0x00007fffe126d42e: mov     %r10,%r9
  0x00007fffe126d431: or      %r15,%r9
  0x00007fffe126d434: mov     %r9,%rbx
  0x00007fffe126d437: xor     %rax,%rbx
  0x00007fffe126d43a: test    $0xffffffffffffff87,%rbx
  0x00007fffe126d441: jne     0x7fffe126d8a4    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B10: #	B81 B11 &lt;- B55 B54 B9 B60  Freq: 0.999995

  0x00007fffe126d447: mov     0x1c(%r14),%ebp   ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d44b: test    %ebp,%ebp
  0x00007fffe126d44d: je      0x7fffe126dc85    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B11: #	B22 B12 &lt;- B10  Freq: 0.999995

  0x00007fffe126d453: test    %r13d,%r13d
  0x00007fffe126d456: jle     0x7fffe126d4ed    ;*if_icmpge
                                                ; - java.io.BufferedWriter::write@24 (line 224)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B12: #	B83 B13 &lt;- B11  Freq: 0.499997

  0x00007fffe126d45c: mov     0x18(%r14),%r9d   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d460: mov     0x14(%r14),%ebp
  0x00007fffe126d464: sub     %r9d,%ebp         ;*isub
                                                ; - java.io.BufferedWriter::write@36 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d467: cmp     %r13d,%ebp
  0x00007fffe126d46a: jl      0x7fffe126dcb9    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B13: #	B92 B14 &lt;- B12  Freq: 0.499997

  0x00007fffe126d470: mov     0x30(%rsp),%r10d
  0x00007fffe126d475: mov     0xc(%r10),%ebx    ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d479: mov     0xc(%rbx),%edi    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; implicit exception: dispatches to 0x00007fffe126dded
  ;; B14: #	B84 B15 &lt;- B13  Freq: 0.499997

  0x00007fffe126d47c: mov     0x20(%r14),%ebp   ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d480: cmp     %edi,%r13d
  0x00007fffe126d483: jnle    0x7fffe126dcf5    ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B15: #	B93 B16 &lt;- B14  Freq: 0.499997

  0x00007fffe126d489: mov     0xc(%rbp),%r10d   ; implicit exception: dispatches to 0x00007fffe126de0d
  ;; B16: #	B78 B17 &lt;- B15  Freq: 0.499996

  0x00007fffe126d48d: mov     %rcx,(%rsp)
  0x00007fffe126d491: mov     %rbp,%rcx         ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d494: mov     %rbx,%rax         ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d497: test    %r9d,%r9d
  0x00007fffe126d49a: jl      0x7fffe126dbcd
  ;; B17: #	B78 B18 &lt;- B16  Freq: 0.499995

  0x00007fffe126d4a0: cmp     %r13d,%edi
  0x00007fffe126d4a3: jb      0x7fffe126dbcd
  ;; B18: #	B78 B19 &lt;- B17  Freq: 0.499995

  0x00007fffe126d4a9: mov     %r13d,%edx
  0x00007fffe126d4ac: add     %r9d,%edx
  0x00007fffe126d4af: cmp     %edx,%r10d
  0x00007fffe126d4b2: jb      0x7fffe126dbcd
  ;; B19: #	B20 &lt;- B18  Freq: 0.499994

  0x00007fffe126d4b8: lea     0x10(%rbp,%r9,2),%rsi
  0x00007fffe126d4bd: lea     0x10(%rbx),%rdi
  0x00007fffe126d4c1: movsxd  %r13d,%rdx
  0x00007fffe126d4c4: movabs  $0x7fffe1141060,%r10
  0x00007fffe126d4ce: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B20: #	B85 B21 &lt;- B19 B79  Freq: 0.499996

  0x00007fffe126d4d1: mov     0x18(%r14),%r10d  ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@75 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d4d5: mov     0x14(%r14),%r11d  ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d4d9: add     %r13d,%r10d       ;*iadd
                                                ; - java.io.BufferedWriter::write@80 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d4dc: mov     %r10d,0x18(%r14)  ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d4e0: cmp     %r11d,%r10d
  0x00007fffe126d4e3: jnl     0x7fffe126dd39    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B21: #	B22 &lt;- B20  Freq: 0.499996

  0x00007fffe126d4e9: mov     (%rsp),%rcx
  ;; B22: #	B61 B23 &lt;- B21 B11  Freq: 0.999993

  0x00007fffe126d4ed: mov     $0x7,%r10d
  0x00007fffe126d4f3: mov     0x34(%rsp),%r8d
  0x00007fffe126d4f8: and     (%r8),%r10
  0x00007fffe126d4fb: cmp     $0x5,%r10
  0x00007fffe126d4ff: jne     0x7fffe126d8dc    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B23: #	B43 B24 &lt;- B62 B61 B22  Freq: 0.999993

  0x00007fffe126d505: mov     0x28(%rsp),%r10
  0x00007fffe126d50a: mov     0x18(%r10),%r11d  ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@16 (line 545)

  0x00007fffe126d50e: test    %r11d,%r11d
  0x00007fffe126d511: je      0x7fffe126d6f1    ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B24: #	B99 B25 &lt;- B23  Freq: 0.999992

  0x00007fffe126d517: mov     %r11,%rsi         ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@16 (line 545)

  0x00007fffe126d51a: mov     %r10,%rbp
  0x00007fffe126d51d: mov     %r10,(%rsp)
  0x00007fffe126d521: nop
  0x00007fffe126d522: nop
  0x00007fffe126d523: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [40]=Oop off=488}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ;   {optimized virtual_call}
  ;; B25: #	B44 B26 &lt;- B24  Freq: 0.999972

  0x00007fffe126d528: mov     0x1c(%rbp),%r10d  ;*getfield charOut
                                                ; - java.io.PrintStream::newLine@23 (line 546)

  0x00007fffe126d52c: test    %r10d,%r10d
  0x00007fffe126d52f: je      0x7fffe126d709    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)

  ;; B26: #	B100 B27 &lt;- B25  Freq: 0.999971

  0x00007fffe126d535: mov     %r10,%rsi         ;*getfield charOut
                                                ; - java.io.PrintStream::newLine@23 (line 546)

  0x00007fffe126d538: nop
  0x00007fffe126d539: nop
  0x00007fffe126d53a: nop
  0x00007fffe126d53b: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [40]=Oop off=512}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ;   {optimized virtual_call}
  ;; B27: #	B82 B28 &lt;- B26  Freq: 0.999951

  0x00007fffe126d540: movzbl  0x10(%rbp),%ebp   ;*getfield autoFlush
                                                ; - java.io.PrintStream::newLine@30 (line 547)

  0x00007fffe126d544: test    %ebp,%ebp
  0x00007fffe126d546: je      0x7fffe126dca9    ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)

  ;; B28: #	B90 B29 &lt;- B27  Freq: 0.999951

  0x00007fffe126d54c: mov     (%rsp),%r10
  0x00007fffe126d550: mov     0xc(%r10),%ebp    ;*getfield out
                                                ; - java.io.PrintStream::newLine@37 (line 548)

  0x00007fffe126d554: mov     0x8(%rbp),%r10d   ; implicit exception: dispatches to 0x00007fffe126ddbd
  ;; B29: #	B63 B30 &lt;- B28  Freq: 0.99995

  0x00007fffe126d558: cmp     $0x2000524d,%r10d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe126d55f: jne     0x7fffe126d982
  ;; B30: #	B65 B31 &lt;- B29  Freq: 0.999949

  0x00007fffe126d565: mov     %rbp,%r10         ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d568: mov     (%r10),%rax
  0x00007fffe126d56b: mov     %rax,%r11
  0x00007fffe126d56e: and     $0x7,%r11
  0x00007fffe126d572: cmp     $0x5,%r11
  0x00007fffe126d576: jne     0x7fffe126d996
  ;; B31: #	B67 B32 &lt;- B30  Freq: 0.999948

  0x00007fffe126d57c: mov     $0x2000524d,%r11d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe126d582: shl     $0x3,%r11
  0x00007fffe126d586: mov     0xb0(%r11),%r11
  0x00007fffe126d58d: mov     %r11,%r8
  0x00007fffe126d590: or      %r15,%r8
  0x00007fffe126d593: mov     %r8,%r9
  0x00007fffe126d596: xor     %rax,%r9
  0x00007fffe126d599: test    $0xffffffffffffff87,%r9
  0x00007fffe126d5a0: jne     0x7fffe126da0e    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  ;; B32: #	B35 B33 &lt;- B66 B65 B31 B71  Freq: 0.999949

  0x00007fffe126d5a6: mov     0x10(%r10),%r8d   ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d5aa: mov     0xc(%r10),%r9d    ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d5ae: test    %r8d,%r8d
  0x00007fffe126d5b1: jnle    0x7fffe126d5d5    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  ;; B33: #	B39 B34 &lt;- B32  Freq: 0.333344

  0x00007fffe126d5b3: test    %r9d,%r9d
  0x00007fffe126d5b6: jne     0x7fffe126d6aa
  ;; B34: #	N1350 &lt;- B38 B33  Freq: 1.01321e-06

  0x00007fffe126d5bc: mov     $0xfffffff6,%esi
  0x00007fffe126d5c1: mov     (%rsp),%rbp
  0x00007fffe126d5c5: mov     %r10,0x10(%rsp)
  0x00007fffe126d5ca: nop
  0x00007fffe126d5cb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=Oop off=656}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126d5d0: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  ;; B35: #	B91 B36 &lt;- B32  Freq: 0.666604

  0x00007fffe126d5d5: mov     0x14(%r10),%ebp   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d5d9: mov     0x8(%r9),%r11d    ; implicit exception: dispatches to 0x00007fffe126ddd1
  ;; B36: #	B77 B37 &lt;- B35  Freq: 0.666604

  0x00007fffe126d5dd: cmp     $0x20004f38,%r11d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe126d5e4: jne     0x7fffe126dba9    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  ;; B37: #	B101 B38 &lt;- B36  Freq: 0.666603

  0x00007fffe126d5ea: mov     %rbp,%rdx
  0x00007fffe126d5ed: push    %r10
  0x00007fffe126d5ef: cmp     0x16aec5ea(%rip),%r12  ;   {external_word}
  0x00007fffe126d5f6: je      0x7fffe126d673
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe126d5fc: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126d601: sub     $0x80,%rsp
  0x00007fffe126d608: mov     %rax,0x78(%rsp)
  0x00007fffe126d60d: mov     %rcx,0x70(%rsp)
  0x00007fffe126d612: mov     %rdx,0x68(%rsp)
  0x00007fffe126d617: mov     %rbx,0x60(%rsp)
  0x00007fffe126d61c: mov     %rbp,0x50(%rsp)
  0x00007fffe126d621: mov     %rsi,0x48(%rsp)
  0x00007fffe126d626: mov     %rdi,0x40(%rsp)
  0x00007fffe126d62b: mov     %r8,0x38(%rsp)
  0x00007fffe126d630: mov     %r9,0x30(%rsp)
  0x00007fffe126d635: mov     %r10,0x28(%rsp)
  0x00007fffe126d63a: mov     %r11,0x20(%rsp)
  0x00007fffe126d63f: mov     %r12,0x18(%rsp)
  0x00007fffe126d644: mov     %r13,0x10(%rsp)
  0x00007fffe126d649: mov     %r14,0x8(%rsp)
  0x00007fffe126d64e: mov     %r15,(%rsp)
  0x00007fffe126d652: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe126d65c: movabs  $0x7fffe126d5fc,%rsi  ;   {internal_word}
  0x00007fffe126d666: mov     %rsp,%rdx
  0x00007fffe126d669: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126d66d: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126d672: hlt
  0x00007fffe126d673: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d675: mov     %r9,%rsi          ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d678: movzbl  0xc(%rsi),%r9d    ;*getfield append
                                                ; - java.io.FileOutputStream::write@5 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d67d: xor     %ecx,%ecx
  0x00007fffe126d67f: mov     (%rsp),%rbp
  0x00007fffe126d683: mov     %r10,0x10(%rsp)
  0x00007fffe126d688: mov     %r10,0x18(%rsp)
  0x00007fffe126d68d: nop
  0x00007fffe126d68e: nop
  0x00007fffe126d68f: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=Oop [40]=Oop off=852}
                                                ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {optimized virtual_call}
  ;; B38: #	B34 B39 &lt;- B37  Freq: 0.66659

  0x00007fffe126d694: mov     0x10(%rsp),%r10
  0x00007fffe126d699: mov     %r12d,0x10(%r10)  ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d69d: mov     0xc(%r10),%r9d    ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126d6a1: test    %r9d,%r9d
  0x00007fffe126d6a4: je      0x7fffe126d5bc    ;*return
                                                ; - java.io.BufferedOutputStream::flushBuffer@28 (line 85)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  ;; B39: #	B72 B40 &lt;- B38 B33  Freq: 0.999933

  0x00007fffe126d6aa: mov     0x8(%r9),%r8d
  0x00007fffe126d6ae: cmp     $0x20004f38,%r8d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe126d6b5: jne     0x7fffe126da3d
  ;; B40: #	B73 B41 &lt;- B39  Freq: 0.999932

  0x00007fffe126d6bb: mov     $0x7,%r11d
  0x00007fffe126d6c1: and     (%r10),%r11
  0x00007fffe126d6c4: cmp     $0x5,%r11
  0x00007fffe126d6c8: jne     0x7fffe126da5d
  ;; B41: #	B75 B42 &lt;- B74 B73 B40  Freq: 0.999932

  0x00007fffe126d6ce: mov     $0x7,%r10d
  0x00007fffe126d6d4: mov     (%rsp),%r11
  0x00007fffe126d6d8: and     (%r11),%r10
  0x00007fffe126d6db: cmp     $0x5,%r10
  0x00007fffe126d6df: jne     0x7fffe126db03    ;*monitorexit
                                                ; - java.io.PrintStream::newLine@44 (line 549)

  ;; B42: #	N1350 &lt;- B76 B75 B41  Freq: 0.999932

  0x00007fffe126d6e5: add     $0x70,%rsp
  0x00007fffe126d6e9: pop     %rbp
  0x00007fffe126d6ea: test    %eax,0x16d8d910(%rip)  ;   {poll_return}
  0x00007fffe126d6f0: retq
  ;; B43: #	N1350 &lt;- B23  Freq: 1.01327e-06

  0x00007fffe126d6f1: mov     $0xfffffff6,%esi
  0x00007fffe126d6f6: mov     %r10,(%rsp)
  0x00007fffe126d6fa: mov     %r10,0x8(%rsp)
  0x00007fffe126d6ff: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop off=964}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ;   {runtime_call}
  0x00007fffe126d704: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ;   {runtime_call}
  ;; B44: #	N1350 &lt;- B25  Freq: 1.01325e-06

  0x00007fffe126d709: mov     $0xfffffff6,%esi
  0x00007fffe126d70e: nop
  0x00007fffe126d70f: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=980}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ;   {runtime_call}
  0x00007fffe126d714: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ;   {runtime_call}
  ;; B45: #	B46 &lt;- B48  Freq: 9.99999e-13

  0x00007fffe126d719: lock cmpxchg %r10,(%rsi)
  ;; B46: #	B3 B47 &lt;- B1 B45  Freq: 1e-06

  0x00007fffe126d71e: lea     0x50(%rsp),%rbx
  0x00007fffe126d723: mov     (%rsi),%rax
  0x00007fffe126d726: test    $0x2,%rax
  0x00007fffe126d72c: jne     0x7fffe126d752
  0x00007fffe126d72e: or      $0x1,%rax
  0x00007fffe126d732: mov     %rax,(%rbx)
  0x00007fffe126d735: lock cmpxchg %rbx,(%rsi)
  0x00007fffe126d73a: je      0x7fffe126d76b
  0x00007fffe126d740: sub     %rsp,%rax
  0x00007fffe126d743: and     $0xfffffffffffff007,%rax
  0x00007fffe126d74a: mov     %rax,(%rbx)
  0x00007fffe126d74d: jmpq    0x7fffe126d76b
  0x00007fffe126d752: movq    $0x3,(%rbx)
  0x00007fffe126d759: mov     %rax,%rbx
  0x00007fffe126d75c: mov     0x16(%rbx),%rax
  0x00007fffe126d760: test    %rax,%rax
  0x00007fffe126d763: jne     0x7fffe126d76b
  0x00007fffe126d765: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126d76b: je      0x7fffe126d3b9
  ;; B47: #	B3 &lt;- B51 B46  Freq: 2e-12

  0x00007fffe126d771: lea     0x50(%rsp),%rdx
  0x00007fffe126d776: mov     %rsi,(%rsp)
  0x00007fffe126d77a: mov     %rsi,0x8(%rsp)
  0x00007fffe126d77f: callq   0x7fffe11658a0    ; OopMap{[0]=Oop [8]=Oop [40]=Oop off=1092}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::newLine@3 (line 542)
                                                ;   {runtime_call}
  0x00007fffe126d784: jmpq    0x7fffe126d3b9
  ;; B48: #	B45 B49 &lt;- B2  Freq: 9.99999e-07

  0x00007fffe126d789: test    $0x7,%r8
  0x00007fffe126d790: jne     0x7fffe126d719
  ;; B49: #	B51 B50 &lt;- B48  Freq: 9.99998e-07

  0x00007fffe126d792: test    $0x300,%r8
  0x00007fffe126d799: jne     0x7fffe126d7a8
  ;; B50: #	B51 &lt;- B49  Freq: 9.99997e-07

  0x00007fffe126d79b: and     $0x37f,%rax
  0x00007fffe126d7a2: mov     %rax,%r11
  0x00007fffe126d7a5: or      %r15,%r11
  ;; B51: #	B47 B52 &lt;- B50 B49  Freq: 9.99998e-07

  0x00007fffe126d7a8: lock cmpxchg %r11,(%rsi)
  0x00007fffe126d7ad: jne     0x7fffe126d771
  ;; B52: #	B3 &lt;- B51  Freq: 9.99997e-07

  0x00007fffe126d7af: jmpq    0x7fffe126d3b9
  ;; B53: #	B54 &lt;- B56  Freq: 9.99994e-13

  0x00007fffe126d7b4: mov     0x34(%rsp),%r9d
  0x00007fffe126d7b9: lock cmpxchg %r10,(%r9)
  ;; B54: #	B10 B55 &lt;- B8 B53  Freq: 9.99996e-07

  0x00007fffe126d7be: lea     0x58(%rsp),%rbx
  0x00007fffe126d7c3: mov     (%rcx),%rax
  0x00007fffe126d7c6: test    $0x2,%rax
  0x00007fffe126d7cc: jne     0x7fffe126d7f2
  0x00007fffe126d7ce: or      $0x1,%rax
  0x00007fffe126d7d2: mov     %rax,(%rbx)
  0x00007fffe126d7d5: lock cmpxchg %rbx,(%rcx)
  0x00007fffe126d7da: je      0x7fffe126d80b
  0x00007fffe126d7e0: sub     %rsp,%rax
  0x00007fffe126d7e3: and     $0xfffffffffffff007,%rax
  0x00007fffe126d7ea: mov     %rax,(%rbx)
  0x00007fffe126d7ed: jmpq    0x7fffe126d80b
  0x00007fffe126d7f2: movq    $0x3,(%rbx)
  0x00007fffe126d7f9: mov     %rax,%rbx
  0x00007fffe126d7fc: mov     0x16(%rbx),%rax
  0x00007fffe126d800: test    %rax,%rax
  0x00007fffe126d803: jne     0x7fffe126d80b
  0x00007fffe126d805: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126d80b: je      0x7fffe126d447
  ;; B55: #	B10 &lt;- B59 B54  Freq: 1.99999e-12

  0x00007fffe126d811: mov     %r8,0x20(%rsp)
  0x00007fffe126d816: mov     %rcx,0x18(%rsp)
  0x00007fffe126d81b: mov     %r11,0x10(%rsp)
  0x00007fffe126d820: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126d825: mov     0x34(%rsp),%eax
  0x00007fffe126d829: mov     %eax,0xc(%rsp)
  0x00007fffe126d82d: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126d832: mov     %r13d,0x8(%rsp)
  0x00007fffe126d837: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126d83c: mov     0x30(%rsp),%eax
  0x00007fffe126d840: mov     %eax,0x4(%rsp)
  0x00007fffe126d844: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126d849: mov     %r14d,(%rsp)
  0x00007fffe126d84d: mov     0x28(%rsp),%rbp
  0x00007fffe126d852: mov     %rcx,%rsi
  0x00007fffe126d855: lea     0x58(%rsp),%rdx
  0x00007fffe126d85a: nop
  0x00007fffe126d85b: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=NarrowOop [4]=NarrowOop [12]=NarrowOop [16]=Oop [24]=Oop [32]=Oop [40]=Oop off=1312}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126d860: mov     (%rsp),%r14d
  0x00007fffe126d864: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126d869: mov     0x4(%rsp),%eax
  0x00007fffe126d86d: mov     %eax,0x30(%rsp)
  0x00007fffe126d871: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126d876: mov     0x8(%rsp),%r13d
  0x00007fffe126d87b: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126d880: mov     0xc(%rsp),%eax
  0x00007fffe126d884: mov     %eax,0x34(%rsp)
  0x00007fffe126d888: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126d88d: mov     0x10(%rsp),%r11
  0x00007fffe126d892: mov     0x18(%rsp),%r10
  0x00007fffe126d897: mov     0x20(%rsp),%r8
  0x00007fffe126d89c: mov     %r10,%rcx
  0x00007fffe126d89f: jmpq    0x7fffe126d447
  ;; B56: #	B53 B57 &lt;- B9  Freq: 9.99994e-07

  0x00007fffe126d8a4: test    $0x7,%rbx
  0x00007fffe126d8ab: jne     0x7fffe126d7b4
  ;; B57: #	B59 B58 &lt;- B56  Freq: 9.99993e-07

  0x00007fffe126d8b1: test    $0x300,%rbx
  0x00007fffe126d8b8: jne     0x7fffe126d8c7
  ;; B58: #	B59 &lt;- B57  Freq: 9.99992e-07

  0x00007fffe126d8ba: and     $0x37f,%rax
  0x00007fffe126d8c1: mov     %rax,%r9
  0x00007fffe126d8c4: or      %r15,%r9
  ;; B59: #	B55 B60 &lt;- B58 B57  Freq: 9.99993e-07

  0x00007fffe126d8c7: mov     0x34(%rsp),%r10d
  0x00007fffe126d8cc: lock cmpxchg %r9,(%r10)
  0x00007fffe126d8d1: jne     0x7fffe126d811
  ;; B60: #	B10 &lt;- B59  Freq: 9.99992e-07

  0x00007fffe126d8d7: jmpq    0x7fffe126d447
  ;; B61: #	B23 B62 &lt;- B22  Freq: 9.99993e-07

  0x00007fffe126d8dc: lea     0x58(%rsp),%rax
  0x00007fffe126d8e1: cmpq    $0x0,(%rax)
  0x00007fffe126d8e8: je      0x7fffe126d962
  0x00007fffe126d8ee: mov     (%rcx),%r10
  0x00007fffe126d8f1: test    $0x2,%r10
  0x00007fffe126d8f8: je      0x7fffe126d95a
  0x00007fffe126d8fa: mov     0x16(%r10),%rax
  0x00007fffe126d8fe: xor     %r15,%rax
  0x00007fffe126d901: or      0x26(%r10),%rax
  0x00007fffe126d905: jne     0x7fffe126d962
  0x00007fffe126d907: mov     0x36(%r10),%rax
  0x00007fffe126d90b: or      0x3e(%r10),%rax
  0x00007fffe126d90f: jne     0x7fffe126d91b
  0x00007fffe126d911: movq    $0x0,0x16(%r10)
  0x00007fffe126d919: jmp     0x7fffe126d962
  0x00007fffe126d91b: cmpq    $0x0,0x46(%r10)
  0x00007fffe126d923: je      0x7fffe126d94e
  0x00007fffe126d925: movq    $0x0,0x16(%r10)
  0x00007fffe126d92d: lock addl $0x0,(%rsp)
  0x00007fffe126d932: cmpq    $0x0,0x46(%r10)
  0x00007fffe126d93a: jne     0x7fffe126d953
  0x00007fffe126d93c: movabs  $0x0,%rax
  0x00007fffe126d946: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126d94c: jne     0x7fffe126d953
  0x00007fffe126d94e: or      $0x1,%eax
  0x00007fffe126d951: jmp     0x7fffe126d962
  0x00007fffe126d953: test    $0x0,%eax
  0x00007fffe126d958: jmp     0x7fffe126d962
  0x00007fffe126d95a: mov     (%rax),%r10
  0x00007fffe126d95d: lock cmpxchg %r10,(%rcx)
  0x00007fffe126d962: je      0x7fffe126d505
  ;; B62: #	B23 &lt;- B61  Freq: 9.99993e-13

  0x00007fffe126d968: mov     %rcx,%rdi
  0x00007fffe126d96b: lea     0x58(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d970: movabs  $0x7ffff744655c,%r10
  0x00007fffe126d97a: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126d97d: jmpq    0x7fffe126d505
  ;; B63: #	N1350 &lt;- B29  Freq: 9.9995e-07

  0x00007fffe126d982: mov     $0xffffffde,%esi
  0x00007fffe126d987: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop off=1612}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126d98c: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  ;; B64: #	B65 &lt;- B67  Freq: 9.99948e-13

  0x00007fffe126d991: lock cmpxchg %r11,(%r10)
  ;; B65: #	B32 B66 &lt;- B30 B64  Freq: 9.9995e-07

  0x00007fffe126d996: lea     0x58(%rsp),%rbx
  0x00007fffe126d99b: mov     (%r10),%rax
  0x00007fffe126d99e: test    $0x2,%rax
  0x00007fffe126d9a4: jne     0x7fffe126d9ca
  0x00007fffe126d9a6: or      $0x1,%rax
  0x00007fffe126d9aa: mov     %rax,(%rbx)
  0x00007fffe126d9ad: lock cmpxchg %rbx,(%r10)
  0x00007fffe126d9b2: je      0x7fffe126d9e3
  0x00007fffe126d9b8: sub     %rsp,%rax
  0x00007fffe126d9bb: and     $0xfffffffffffff007,%rax
  0x00007fffe126d9c2: mov     %rax,(%rbx)
  0x00007fffe126d9c5: jmpq    0x7fffe126d9e3
  0x00007fffe126d9ca: movq    $0x3,(%rbx)
  0x00007fffe126d9d1: mov     %rax,%rbx
  0x00007fffe126d9d4: mov     0x16(%rbx),%rax
  0x00007fffe126d9d8: test    %rax,%rax
  0x00007fffe126d9db: jne     0x7fffe126d9e3
  0x00007fffe126d9dd: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126d9e3: je      0x7fffe126d5a6
  ;; B66: #	B32 &lt;- B70 B65  Freq: 1.9999e-12

  0x00007fffe126d9e9: mov     %r10,%rsi
  0x00007fffe126d9ec: lea     0x58(%rsp),%rdx
  0x00007fffe126d9f1: mov     (%rsp),%rbp
  0x00007fffe126d9f5: mov     %r10,0x18(%rsp)
  0x00007fffe126d9fa: mov     %r10,0x20(%rsp)
  0x00007fffe126d9ff: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=Oop [24]=Oop [32]=Oop [40]=Oop off=1732}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126da04: mov     0x18(%rsp),%r10
  0x00007fffe126da09: jmpq    0x7fffe126d5a6
  ;; B67: #	B64 B68 &lt;- B31  Freq: 9.99948e-07

  0x00007fffe126da0e: test    $0x7,%r9
  0x00007fffe126da15: jne     0x7fffe126d991
  ;; B68: #	B70 B69 &lt;- B67  Freq: 9.99947e-07

  0x00007fffe126da1b: test    $0x300,%r9
  0x00007fffe126da22: jne     0x7fffe126da31
  ;; B69: #	B70 &lt;- B68  Freq: 9.99946e-07

  0x00007fffe126da24: and     $0x37f,%rax
  0x00007fffe126da2b: mov     %rax,%r8
  0x00007fffe126da2e: or      %r15,%r8
  ;; B70: #	B66 B71 &lt;- B69 B68  Freq: 9.99947e-07

  0x00007fffe126da31: lock cmpxchg %r8,(%r10)
  0x00007fffe126da36: jne     0x7fffe126d9e9
  ;; B71: #	B32 &lt;- B70  Freq: 9.99946e-07

  0x00007fffe126da38: jmpq    0x7fffe126d5a6
  ;; B72: #	N1350 &lt;- B39  Freq: 9.99933e-07

  0x00007fffe126da3d: mov     $0xffffffde,%esi
  0x00007fffe126da42: mov     (%rsp),%rbp
  0x00007fffe126da46: mov     %r9d,0x10(%rsp)
  0x00007fffe126da4b: mov     %r10,0x18(%rsp)
  0x00007fffe126da50: nop
  0x00007fffe126da51: nop
  0x00007fffe126da52: nop
  0x00007fffe126da53: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=NarrowOop [24]=Oop off=1816}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126da58: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  ;; B73: #	B41 B74 &lt;- B40  Freq: 9.99932e-07

  0x00007fffe126da5d: lea     0x58(%rsp),%rax
  0x00007fffe126da62: cmpq    $0x0,(%rax)
  0x00007fffe126da69: je      0x7fffe126dae3
  0x00007fffe126da6f: mov     (%r10),%r11
  0x00007fffe126da72: test    $0x2,%r11
  0x00007fffe126da79: je      0x7fffe126dadb
  0x00007fffe126da7b: mov     0x16(%r11),%rax
  0x00007fffe126da7f: xor     %r15,%rax
  0x00007fffe126da82: or      0x26(%r11),%rax
  0x00007fffe126da86: jne     0x7fffe126dae3
  0x00007fffe126da88: mov     0x36(%r11),%rax
  0x00007fffe126da8c: or      0x3e(%r11),%rax
  0x00007fffe126da90: jne     0x7fffe126da9c
  0x00007fffe126da92: movq    $0x0,0x16(%r11)
  0x00007fffe126da9a: jmp     0x7fffe126dae3
  0x00007fffe126da9c: cmpq    $0x0,0x46(%r11)
  0x00007fffe126daa4: je      0x7fffe126dacf
  0x00007fffe126daa6: movq    $0x0,0x16(%r11)
  0x00007fffe126daae: lock addl $0x0,(%rsp)
  0x00007fffe126dab3: cmpq    $0x0,0x46(%r11)
  0x00007fffe126dabb: jne     0x7fffe126dad4
  0x00007fffe126dabd: movabs  $0x0,%rax
  0x00007fffe126dac7: lock cmpxchg %r15,0x16(%r11)
  0x00007fffe126dacd: jne     0x7fffe126dad4
  0x00007fffe126dacf: or      $0x1,%eax
  0x00007fffe126dad2: jmp     0x7fffe126dae3
  0x00007fffe126dad4: test    $0x0,%eax
  0x00007fffe126dad9: jmp     0x7fffe126dae3
  0x00007fffe126dadb: mov     (%rax),%r11
  0x00007fffe126dade: lock cmpxchg %r11,(%r10)
  0x00007fffe126dae3: je      0x7fffe126d6ce
  ;; B74: #	B41 &lt;- B73  Freq: 9.99932e-13

  0x00007fffe126dae9: mov     %r10,%rdi
  0x00007fffe126daec: lea     0x58(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126daf1: movabs  $0x7ffff744655c,%r10
  0x00007fffe126dafb: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126dafe: jmpq    0x7fffe126d6ce
  ;; B75: #	B42 B76 &lt;- B41  Freq: 9.99932e-07

  0x00007fffe126db03: lea     0x50(%rsp),%rax
  0x00007fffe126db08: cmpq    $0x0,(%rax)
  0x00007fffe126db0f: je      0x7fffe126db89
  0x00007fffe126db15: mov     (%r11),%r10
  0x00007fffe126db18: test    $0x2,%r10
  0x00007fffe126db1f: je      0x7fffe126db81
  0x00007fffe126db21: mov     0x16(%r10),%rax
  0x00007fffe126db25: xor     %r15,%rax
  0x00007fffe126db28: or      0x26(%r10),%rax
  0x00007fffe126db2c: jne     0x7fffe126db89
  0x00007fffe126db2e: mov     0x36(%r10),%rax
  0x00007fffe126db32: or      0x3e(%r10),%rax
  0x00007fffe126db36: jne     0x7fffe126db42
  0x00007fffe126db38: movq    $0x0,0x16(%r10)
  0x00007fffe126db40: jmp     0x7fffe126db89
  0x00007fffe126db42: cmpq    $0x0,0x46(%r10)
  0x00007fffe126db4a: je      0x7fffe126db75
  0x00007fffe126db4c: movq    $0x0,0x16(%r10)
  0x00007fffe126db54: lock addl $0x0,(%rsp)
  0x00007fffe126db59: cmpq    $0x0,0x46(%r10)
  0x00007fffe126db61: jne     0x7fffe126db7a
  0x00007fffe126db63: movabs  $0x0,%rax
  0x00007fffe126db6d: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126db73: jne     0x7fffe126db7a
  0x00007fffe126db75: or      $0x1,%eax
  0x00007fffe126db78: jmp     0x7fffe126db89
  0x00007fffe126db7a: test    $0x0,%eax
  0x00007fffe126db7f: jmp     0x7fffe126db89
  0x00007fffe126db81: mov     (%rax),%r10
  0x00007fffe126db84: lock cmpxchg %r10,(%r11)
  0x00007fffe126db89: je      0x7fffe126d6e5
  ;; B76: #	B42 &lt;- B75  Freq: 9.99932e-13

  0x00007fffe126db8f: mov     %r11,%rdi
  0x00007fffe126db92: lea     0x50(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::newLine@3 (line 542)

  0x00007fffe126db97: movabs  $0x7ffff744655c,%r10
  0x00007fffe126dba1: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::newLine@44 (line 549)

  0x00007fffe126dba4: jmpq    0x7fffe126d6e5
  ;; B77: #	N1350 &lt;- B36  Freq: 6.66604e-07

  0x00007fffe126dba9: mov     $0xffffffde,%esi
  0x00007fffe126dbae: mov     %r10,0x20(%rsp)
  0x00007fffe126dbb3: mov     %r10,0x28(%rsp)
  0x00007fffe126dbb8: mov     %r9d,0x30(%rsp)
  0x00007fffe126dbbd: mov     %r8d,0x34(%rsp)
  0x00007fffe126dbc2: nop
  0x00007fffe126dbc3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [32]=Oop [40]=Oop [48]=NarrowOop off=2184}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126dbc8: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B78: #	B97 B79 &lt;- B18 B16 B17  Freq: 1.49999e-06

  0x00007fffe126dbcd: mov     %r8,%rbx
  0x00007fffe126dbd0: pushq   (%rsp)
  0x00007fffe126dbd4: popq    0x18(%rsp)
  0x00007fffe126dbd9: mov     %r11,%r10
  0x00007fffe126dbdc: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126dbe1: mov     0x34(%rsp),%eax
  0x00007fffe126dbe5: mov     %eax,0x10(%rsp)
  0x00007fffe126dbe9: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126dbee: mov     %r13d,0xc(%rsp)
  0x00007fffe126dbf3: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126dbf8: mov     0x30(%rsp),%eax
  0x00007fffe126dbfc: mov     %eax,0x8(%rsp)
  0x00007fffe126dc00: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126dc05: mov     %r14d,%ebp
  0x00007fffe126dc08: pushq   0x28(%rsp)
  0x00007fffe126dc0d: popq    (%rsp)
  0x00007fffe126dc11: mov     %rax,%rsi
  0x00007fffe126dc14: xor     %edx,%edx
  0x00007fffe126dc16: mov     %r9d,%r8d
  0x00007fffe126dc19: mov     %r13d,%r9d
  0x00007fffe126dc1c: mov     %rbx,0x30(%rsp)
  0x00007fffe126dc21: mov     %r10,0x38(%rsp)
  0x00007fffe126dc26: nop
  0x00007fffe126dc27: callq   0x7fffe1169ba0    ; OopMap{rbp=NarrowOop [0]=Oop [8]=NarrowOop [16]=NarrowOop [24]=Oop [40]=Oop [48]=Oop [56]=Oop off=2284}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B79: #	B20 &lt;- B78  Freq: 1.49996e-06

  0x00007fffe126dc2c: mov     %ebp,%r14d
  0x00007fffe126dc2f: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126dc34: mov     0x8(%rsp),%eax
  0x00007fffe126dc38: mov     %eax,0x30(%rsp)
  0x00007fffe126dc3c: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126dc41: mov     0xc(%rsp),%r13d
  0x00007fffe126dc46: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126dc4b: mov     0x10(%rsp),%eax
  0x00007fffe126dc4f: mov     %eax,0x34(%rsp)
  0x00007fffe126dc53: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126dc58: pushq   0x18(%rsp)
  0x00007fffe126dc5d: popq    (%rsp)
  0x00007fffe126dc61: jmpq    0x7fffe126d4d1
  ;; B80: #	N1350 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe126dc66: mov     $0xffffff65,%esi
  0x00007fffe126dc6b: mov     %r10,(%rsp)
  0x00007fffe126dc6f: mov     %r10,0x8(%rsp)
  0x00007fffe126dc74: mov     %r11d,0x10(%rsp)
  0x00007fffe126dc79: nop
  0x00007fffe126dc7a: nop
  0x00007fffe126dc7b: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=NarrowOop off=2368}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ;   {runtime_call}
  0x00007fffe126dc80: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ;   {runtime_call}
  ;; B81: #	N1350 &lt;- B10  Freq: 4.76835e-07

  0x00007fffe126dc85: mov     $0xffffff65,%esi
  0x00007fffe126dc8a: pushq   0x28(%rsp)
  0x00007fffe126dc8f: popq    (%rsp)
  0x00007fffe126dc93: mov     %r14d,0x18(%rsp)
  0x00007fffe126dc98: mov     %r13d,0x20(%rsp)
  0x00007fffe126dc9d: nop
  0x00007fffe126dc9e: nop
  0x00007fffe126dc9f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop [48]=NarrowOop [52]=NarrowOop off=2404}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dca4: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B82: #	N1350 &lt;- B27  Freq: 4.76814e-07

  0x00007fffe126dca9: mov     $0xffffff65,%esi
  0x00007fffe126dcae: nop
  0x00007fffe126dcaf: callq   0x7fffe1107820    ; OopMap{[0]=Oop off=2420}
                                                ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)
                                                ;   {runtime_call}
  0x00007fffe126dcb4: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)
                                                ;   {runtime_call}
  ;; B83: #	N1350 &lt;- B12  Freq: 2.38417e-07

  0x00007fffe126dcb9: mov     $0xffffff65,%esi
  0x00007fffe126dcbe: pushq   0x28(%rsp)
  0x00007fffe126dcc3: popq    (%rsp)
  0x00007fffe126dcc7: mov     %r14d,0x18(%rsp)
  0x00007fffe126dccc: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126dcd1: mov     0x30(%rsp),%eax
  0x00007fffe126dcd5: mov     %eax,0x1c(%rsp)
  0x00007fffe126dcd9: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126dcde: mov     %r13d,0x2c(%rsp)
  0x00007fffe126dce3: mov     %r13d,0x30(%rsp)
  0x00007fffe126dce8: nop
  0x00007fffe126dce9: nop
  0x00007fffe126dcea: nop
  0x00007fffe126dceb: callq   0x7fffe1107820    ; OopMap{[0]=Oop [24]=NarrowOop [28]=NarrowOop [52]=NarrowOop off=2480}
                                                ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dcf0: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B84: #	N1350 &lt;- B14  Freq: 2.38417e-07

  0x00007fffe126dcf5: mov     $0xffffff65,%esi
  0x00007fffe126dcfa: pushq   0x28(%rsp)
  0x00007fffe126dcff: popq    (%rsp)
  0x00007fffe126dd03: mov     %r14d,0x18(%rsp)
  0x00007fffe126dd08: mov     %r13d,0x28(%rsp)
  0x00007fffe126dd0d: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126dd12: mov     0x34(%rsp),%eax
  0x00007fffe126dd16: mov     %eax,0x2c(%rsp)
  0x00007fffe126dd1a: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126dd1f: mov     %r13d,0x34(%rsp)
  0x00007fffe126dd24: mov     %r9d,0x38(%rsp)
  0x00007fffe126dd29: mov     %edi,0x40(%rsp)
  0x00007fffe126dd2d: nop
  0x00007fffe126dd2e: nop
  0x00007fffe126dd2f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=NarrowOop [44]=NarrowOop [48]=NarrowOop off=2548}
                                                ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dd34: callq   0x7ffff736b4ea    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B85: #	N1350 &lt;- B20  Freq: 2.38417e-07

  0x00007fffe126dd39: mov     $0xffffff65,%esi
  0x00007fffe126dd3e: mov     0x28(%rsp),%rbp
  0x00007fffe126dd43: mov     %r14d,0x10(%rsp)
  0x00007fffe126dd48: mov     %r13d,0x20(%rsp)
  0x00007fffe126dd4d: mov     %r10d,0x24(%rsp)
  0x00007fffe126dd52: mov     %r11d,0x28(%rsp)
  0x00007fffe126dd57: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=NarrowOop [48]=NarrowOop [52]=NarrowOop off=2588}
                                                ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dd5c: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B86: #	N1350 &lt;- B4  Freq: 1.01328e-06

  0x00007fffe126dd61: mov     $0xfffffff6,%esi
  0x00007fffe126dd66: mov     0x28(%rsp),%rbp
  0x00007fffe126dd6b: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2608}
                                                ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dd70: callq   0x7ffff736b4ea    ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B87: #	N1350 &lt;- B5  Freq: 1.01328e-06

  0x00007fffe126dd75: mov     $0xfffffff6,%esi
  0x00007fffe126dd7a: mov     0x28(%rsp),%rbp
  0x00007fffe126dd7f: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2628}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dd84: callq   0x7ffff736b4ea    ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B88: #	N1350 &lt;- B6  Freq: 1.01328e-06

  0x00007fffe126dd89: mov     $0xfffffff6,%esi
  0x00007fffe126dd8e: mov     0x28(%rsp),%rbp
  0x00007fffe126dd93: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2648}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126dd98: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B89: #	N1350 &lt;- B7  Freq: 1.01328e-06

  0x00007fffe126dd9d: mov     $0xfffffff6,%esi
  0x00007fffe126dda2: mov     0x28(%rsp),%rbp
  0x00007fffe126dda7: mov     %r14d,0x10(%rsp)
  0x00007fffe126ddac: mov     %r13d,0x18(%rsp)
  0x00007fffe126ddb1: nop
  0x00007fffe126ddb2: nop
  0x00007fffe126ddb3: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=NarrowOop [48]=NarrowOop off=2680}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126ddb8: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B90: #	N1350 &lt;- B28  Freq: 1.01323e-06

  0x00007fffe126ddbd: mov     $0xfffffff6,%esi
  0x00007fffe126ddc2: mov     (%rsp),%rbp
  0x00007fffe126ddc6: nop
  0x00007fffe126ddc7: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2700}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126ddcc: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  ;; B91: #	N1350 &lt;- B35  Freq: 6.75456e-07

  0x00007fffe126ddd1: mov     $0xfffffff6,%esi
  0x00007fffe126ddd6: mov     %r10,0x18(%rsp)
  0x00007fffe126dddb: mov     %r8d,0x20(%rsp)
  0x00007fffe126dde0: nop
  0x00007fffe126dde1: nop
  0x00007fffe126dde2: nop
  0x00007fffe126dde3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [24]=Oop off=2728}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  0x00007fffe126dde8: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ;   {runtime_call}
  ;; B92: #	N1350 &lt;- B13  Freq: 5.06637e-07

  0x00007fffe126dded: mov     $0xfffffff6,%esi
  0x00007fffe126ddf2: mov     0x28(%rsp),%rbp
  0x00007fffe126ddf7: mov     %r14d,0x10(%rsp)
  0x00007fffe126ddfc: mov     %r13d,0x20(%rsp)
  0x00007fffe126de01: nop
  0x00007fffe126de02: nop
  0x00007fffe126de03: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=NarrowOop [48]=NarrowOop [52]=NarrowOop off=2760}
                                                ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126de08: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B93: #	N1350 &lt;- B15  Freq: 5.06636e-07

  0x00007fffe126de0d: mov     $0xfffffff6,%esi
  0x00007fffe126de12: mov     0x28(%rsp),%rbp
  0x00007fffe126de17: mov     %r14d,0x10(%rsp)
  0x00007fffe126de1c: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126de21: mov     0x30(%rsp),%eax
  0x00007fffe126de25: mov     %eax,0x14(%rsp)
  0x00007fffe126de29: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126de2e: mov     %r13d,0x20(%rsp)
  0x00007fffe126de33: mov     %ebx,0x28(%rsp)
  0x00007fffe126de37: mov     %r9d,0x2c(%rsp)
  0x00007fffe126de3c: mov     %r13d,0x30(%rsp)
  0x00007fffe126de41: nop
  0x00007fffe126de42: nop
  0x00007fffe126de43: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=NarrowOop [20]=NarrowOop [40]=NarrowOop [52]=NarrowOop off=2824}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  0x00007fffe126de48: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ;   {runtime_call}
  ;; B94: #	N1350 &lt;- B104  Freq: 2.66657e-10

  0x00007fffe126de4d: mov     $0xffffffbd,%esi
  0x00007fffe126de52: mov     0x28(%rsp),%rbp
  0x00007fffe126de57: mov     %rax,(%rsp)
  0x00007fffe126de5b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=2848}
                                                ;*astore_1
                                                ; - java.io.PrintStream::newLine@66 (line 554)
                                                ;   {runtime_call}
  0x00007fffe126de60: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ;   {runtime_call}
  ;; B95: #	N1350 &lt;- B104  Freq: 2.66657e-10

  0x00007fffe126de65: mov     $0xffffffbd,%esi
  0x00007fffe126de6a: mov     %rax,%rbp
  0x00007fffe126de6d: nop
  0x00007fffe126de6e: nop
  0x00007fffe126de6f: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2868}
                                                ;*astore_1
                                                ; - java.io.PrintStream::newLine@56 (line 551)
                                                ;   {runtime_call}
  0x00007fffe126de74: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ;   {runtime_call}
  ;; B96: #	N1350 &lt;- B104  Freq: 2.66657e-10

  0x00007fffe126de79: mov     %rax,%rsi
  0x00007fffe126de7c: add     $0x70,%rsp
  0x00007fffe126de80: pop     %rbp
  0x00007fffe126de81: jmpq    0x7fffe11657a0    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ;   {runtime_call}
  ;; B97: #	B109 B98 &lt;- B78  Freq: 1.49999e-11

  0x00007fffe126de86: mov     %rax,%rbx
  0x00007fffe126de89: mov     $0x7,%r10d
  0x00007fffe126de8f: mov     0x10(%rsp),%r11d
  0x00007fffe126de94: and     (%r11),%r10
  0x00007fffe126de97: cmp     $0x5,%r10
  0x00007fffe126de9b: jne     0x7fffe126e03c    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  ;; B98: #	B103 &lt;- B110 B109 B97  Freq: 1.49999e-11

  0x00007fffe126dea1: mov     %rbx,%rbp
  0x00007fffe126dea4: jmp     0x7fffe126ded4    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)

  ;; B99: #	B103 &lt;- B24  Freq: 9.99992e-06

  0x00007fffe126dea6: mov     %rax,%rbp
  0x00007fffe126dea9: mov     %rax,%rbx
  0x00007fffe126deac: jmp     0x7fffe126ded4    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)

  ;; B100: #	B103 &lt;- B26  Freq: 9.99971e-06

  0x00007fffe126deae: mov     %rax,%rbp
  0x00007fffe126deb1: mov     %rax,%rbx
  0x00007fffe126deb4: jmp     0x7fffe126ded4    ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  ;; B101: #	B107 B102 &lt;- B37  Freq: 6.66603e-06

  0x00007fffe126deb6: mov     %rax,%rbx
  0x00007fffe126deb9: mov     $0x7,%r10d
  0x00007fffe126debf: mov     0x10(%rsp),%r11
  0x00007fffe126dec4: and     (%r11),%r10
  0x00007fffe126dec7: cmp     $0x5,%r10
  0x00007fffe126decb: jne     0x7fffe126df96    ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)

  ;; B102: #	B103 &lt;- B108 B107 B101  Freq: 6.66603e-06

  0x00007fffe126ded1: mov     %rbx,%rbp
  ;; B103: #	B105 B104 &lt;- B98 B99 B100 B102  Freq: 2.66657e-05

  0x00007fffe126ded4: mov     $0x7,%r10d
  0x00007fffe126deda: mov     0x28(%rsp),%r11
  0x00007fffe126dedf: and     (%r11),%r10
  0x00007fffe126dee2: cmp     $0x5,%r10
  0x00007fffe126dee6: jne     0x7fffe126def0    ;*monitorexit
                                                ; - java.io.PrintStream::newLine@50 (line 549)

  ;; B104: #	B94 B96 B95 &lt;- B106 B105 B103  Freq: 2.66657e-05

  0x00007fffe126dee8: mov     %rbx,%rsi
  0x00007fffe126deeb: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [40]=Oop off=2992}
                                                ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ;   {runtime_call}
  ;; B105: #	B104 B106 &lt;- B103  Freq: 2.66657e-11

  0x00007fffe126def0: lea     0x50(%rsp),%rax
  0x00007fffe126def5: cmpq    $0x0,(%rax)
  0x00007fffe126defc: je      0x7fffe126df76
  0x00007fffe126df02: mov     (%r11),%r10
  0x00007fffe126df05: test    $0x2,%r10
  0x00007fffe126df0c: je      0x7fffe126df6e
  0x00007fffe126df0e: mov     0x16(%r10),%rax
  0x00007fffe126df12: xor     %r15,%rax
  0x00007fffe126df15: or      0x26(%r10),%rax
  0x00007fffe126df19: jne     0x7fffe126df76
  0x00007fffe126df1b: mov     0x36(%r10),%rax
  0x00007fffe126df1f: or      0x3e(%r10),%rax
  0x00007fffe126df23: jne     0x7fffe126df2f
  0x00007fffe126df25: movq    $0x0,0x16(%r10)
  0x00007fffe126df2d: jmp     0x7fffe126df76
  0x00007fffe126df2f: cmpq    $0x0,0x46(%r10)
  0x00007fffe126df37: je      0x7fffe126df62
  0x00007fffe126df39: movq    $0x0,0x16(%r10)
  0x00007fffe126df41: lock addl $0x0,(%rsp)
  0x00007fffe126df46: cmpq    $0x0,0x46(%r10)
  0x00007fffe126df4e: jne     0x7fffe126df67
  0x00007fffe126df50: movabs  $0x0,%rax
  0x00007fffe126df5a: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126df60: jne     0x7fffe126df67
  0x00007fffe126df62: or      $0x1,%eax
  0x00007fffe126df65: jmp     0x7fffe126df76
  0x00007fffe126df67: test    $0x0,%eax
  0x00007fffe126df6c: jmp     0x7fffe126df76
  0x00007fffe126df6e: mov     (%rax),%r10
  0x00007fffe126df71: lock cmpxchg %r10,(%r11)
  0x00007fffe126df76: je      0x7fffe126dee8
  ;; B106: #	B104 &lt;- B105  Freq: 2.66657e-17

  0x00007fffe126df7c: mov     %r11,%rdi
  0x00007fffe126df7f: lea     0x50(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::newLine@3 (line 542)

  0x00007fffe126df84: movabs  $0x7ffff744655c,%r10
  0x00007fffe126df8e: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::newLine@50 (line 549)

  0x00007fffe126df91: jmpq    0x7fffe126dee8
  ;; B107: #	B102 B108 &lt;- B101  Freq: 6.66603e-12

  0x00007fffe126df96: lea     0x58(%rsp),%rax
  0x00007fffe126df9b: cmpq    $0x0,(%rax)
  0x00007fffe126dfa2: je      0x7fffe126e01c
  0x00007fffe126dfa8: mov     (%r11),%r10
  0x00007fffe126dfab: test    $0x2,%r10
  0x00007fffe126dfb2: je      0x7fffe126e014
  0x00007fffe126dfb4: mov     0x16(%r10),%rax
  0x00007fffe126dfb8: xor     %r15,%rax
  0x00007fffe126dfbb: or      0x26(%r10),%rax
  0x00007fffe126dfbf: jne     0x7fffe126e01c
  0x00007fffe126dfc1: mov     0x36(%r10),%rax
  0x00007fffe126dfc5: or      0x3e(%r10),%rax
  0x00007fffe126dfc9: jne     0x7fffe126dfd5
  0x00007fffe126dfcb: movq    $0x0,0x16(%r10)
  0x00007fffe126dfd3: jmp     0x7fffe126e01c
  0x00007fffe126dfd5: cmpq    $0x0,0x46(%r10)
  0x00007fffe126dfdd: je      0x7fffe126e008
  0x00007fffe126dfdf: movq    $0x0,0x16(%r10)
  0x00007fffe126dfe7: lock addl $0x0,(%rsp)
  0x00007fffe126dfec: cmpq    $0x0,0x46(%r10)
  0x00007fffe126dff4: jne     0x7fffe126e00d
  0x00007fffe126dff6: movabs  $0x0,%rax
  0x00007fffe126e000: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126e006: jne     0x7fffe126e00d
  0x00007fffe126e008: or      $0x1,%eax
  0x00007fffe126e00b: jmp     0x7fffe126e01c
  0x00007fffe126e00d: test    $0x0,%eax
  0x00007fffe126e012: jmp     0x7fffe126e01c
  0x00007fffe126e014: mov     (%rax),%r10
  0x00007fffe126e017: lock cmpxchg %r10,(%r11)
  0x00007fffe126e01c: je      0x7fffe126ded1
  ;; B108: #	B102 &lt;- B107  Freq: 6.66603e-18

  0x00007fffe126e022: mov     %r11,%rdi
  0x00007fffe126e025: lea     0x58(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)

  0x00007fffe126e02a: movabs  $0x7ffff744655c,%r10
  0x00007fffe126e034: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)

  0x00007fffe126e037: jmpq    0x7fffe126ded1
  ;; B109: #	B98 B110 &lt;- B97  Freq: 1.49999e-17

  0x00007fffe126e03c: mov     0x18(%rsp),%r11
  0x00007fffe126e041: lea     0x58(%rsp),%rax
  0x00007fffe126e046: cmpq    $0x0,(%rax)
  0x00007fffe126e04d: je      0x7fffe126e0c7
  0x00007fffe126e053: mov     (%r11),%r10
  0x00007fffe126e056: test    $0x2,%r10
  0x00007fffe126e05d: je      0x7fffe126e0bf
  0x00007fffe126e05f: mov     0x16(%r10),%rax
  0x00007fffe126e063: xor     %r15,%rax
  0x00007fffe126e066: or      0x26(%r10),%rax
  0x00007fffe126e06a: jne     0x7fffe126e0c7
  0x00007fffe126e06c: mov     0x36(%r10),%rax
  0x00007fffe126e070: or      0x3e(%r10),%rax
  0x00007fffe126e074: jne     0x7fffe126e080
  0x00007fffe126e076: movq    $0x0,0x16(%r10)
  0x00007fffe126e07e: jmp     0x7fffe126e0c7
  0x00007fffe126e080: cmpq    $0x0,0x46(%r10)
  0x00007fffe126e088: je      0x7fffe126e0b3
  0x00007fffe126e08a: movq    $0x0,0x16(%r10)
  0x00007fffe126e092: lock addl $0x0,(%rsp)
  0x00007fffe126e097: cmpq    $0x0,0x46(%r10)
  0x00007fffe126e09f: jne     0x7fffe126e0b8
  0x00007fffe126e0a1: movabs  $0x0,%rax
  0x00007fffe126e0ab: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126e0b1: jne     0x7fffe126e0b8
  0x00007fffe126e0b3: or      $0x1,%eax
  0x00007fffe126e0b6: jmp     0x7fffe126e0c7
  0x00007fffe126e0b8: test    $0x0,%eax
  0x00007fffe126e0bd: jmp     0x7fffe126e0c7
  0x00007fffe126e0bf: mov     (%rax),%r10
  0x00007fffe126e0c2: lock cmpxchg %r10,(%r11)
  0x00007fffe126e0c7: je      0x7fffe126dea1
  ;; B110: #	B98 &lt;- B109  Freq: 1.49999e-23

  0x00007fffe126e0cd: mov     %r11,%rdi
  0x00007fffe126e0d0: lea     0x58(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126e0d5: movabs  $0x7ffff744655c,%r10
  0x00007fffe126e0df: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)

  0x00007fffe126e0e2: jmpq    0x7fffe126dea1
  0x00007fffe126e0e7: hlt
  0x00007fffe126e0e8: hlt
  0x00007fffe126e0e9: hlt
  0x00007fffe126e0ea: hlt
  0x00007fffe126e0eb: hlt
  0x00007fffe126e0ec: hlt
  0x00007fffe126e0ed: hlt
  0x00007fffe126e0ee: hlt
  0x00007fffe126e0ef: hlt
  0x00007fffe126e0f0: hlt
  0x00007fffe126e0f1: hlt
  0x00007fffe126e0f2: hlt
  0x00007fffe126e0f3: hlt
  0x00007fffe126e0f4: hlt
  0x00007fffe126e0f5: hlt
  0x00007fffe126e0f6: hlt
  0x00007fffe126e0f7: hlt
  0x00007fffe126e0f8: hlt
  0x00007fffe126e0f9: hlt
  0x00007fffe126e0fa: hlt
  0x00007fffe126e0fb: hlt
  0x00007fffe126e0fc: hlt
  0x00007fffe126e0fd: hlt
  0x00007fffe126e0fe: hlt
  0x00007fffe126e0ff: hlt
[Stub Code]
  0x00007fffe126e100: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe126e10a: jmpq    0x7fffe126e10a    ;   {runtime_call}
  0x00007fffe126e10f: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126e119: jmpq    0x7fffe126e119    ;   {runtime_call}
  0x00007fffe126e11e: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126e128: jmpq    0x7fffe126e128    ;   {runtime_call}
[Exception Handler]
  0x00007fffe126e12d: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe126e132: callq   0x7fffe126e137
  0x00007fffe126e137: subq    $0x5,(%rsp)
  0x00007fffe126e13c: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe126e141: hlt
  0x00007fffe126e142: hlt
  0x00007fffe126e143: hlt
  0x00007fffe126e144: hlt
  0x00007fffe126e145: hlt
  0x00007fffe126e146: hlt
  0x00007fffe126e147: hlt
<nmethod compile_id='105' compiler='C2' level='4' entry='0x00007fffe126d340' size='7904' address='0x00007fffe126d150' relocation_offset='304' insts_offset='496' stub_offset='4016' scopes_data_offset='4232' scopes_pcs_offset='5640' dependencies_offset='7672' handler_table_offset='7688' nul_chk_table_offset='7832' method='java/io/PrintStream newLine ()V' bytes='73' count='65648' iicount='65648' stamp='120.315'/>
<make_not_entrant thread='140736956679936' compile_id='71' compiler='C1' level='2' stamp='120.315'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe125e190:
Code:
Argument 0 is unknown.RIP: 0x7fffe125e300 Code size: 0x00000198
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b566f0} &apos;flip&apos; &apos;()Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x40]  (sp of caller)
  ;;  block B1 [0, 0]

  0x00007fffe125e300: mov     0x8(%rsi),%r10d
  0x00007fffe125e304: shl     $0x3,%r10
  0x00007fffe125e308: cmp     %rax,%r10
  0x00007fffe125e30b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe125e311: nop
  0x00007fffe125e312: nop
  0x00007fffe125e313: nop
  0x00007fffe125e314: nop
  0x00007fffe125e315: nop
  0x00007fffe125e316: nop
  0x00007fffe125e317: nop
  0x00007fffe125e318: nop
  0x00007fffe125e319: nop
  0x00007fffe125e31a: nop
  0x00007fffe125e31b: nop
  0x00007fffe125e31c: nop
  0x00007fffe125e31d: nop
  0x00007fffe125e31e: nop
  0x00007fffe125e31f: nop
[Verified Entry Point]
  0x00007fffe125e320: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125e327: push    %rbp
  0x00007fffe125e328: sub     $0x30,%rsp
  0x00007fffe125e32c: movabs  $0x7ffff4d711d8,%rax
  0x00007fffe125e336: mov     0x8(%rax),%edi
  0x00007fffe125e339: add     $0x8,%edi
  0x00007fffe125e33c: mov     %edi,0x8(%rax)
  0x00007fffe125e33f: movabs  $0x7ffff4b566f0,%rax  ;   {metadata({method} {0x00007ffff4b566f0} &apos;flip&apos; &apos;()Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;)}
  0x00007fffe125e349: and     $0x3ff8,%edi
  0x00007fffe125e34f: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0244760]
  0x00007fffe125e352: je      0x7fffe125e37b    ;*aload_0
                                                ; - java.nio.Buffer::flip@0 (line 357)

  ;;  block B2 [0, 0]

  ;;  block B0 [0, 19]

  0x00007fffe125e358: mov     0x18(%rsi),%eax   ;*getfield position
                                                ; - java.nio.Buffer::flip@2 (line 357)

  0x00007fffe125e35b: mov     %eax,0x1c(%rsi)   ;*putfield limit
                                                ; - java.nio.Buffer::flip@5 (line 357)

  0x00007fffe125e35e: movl    $0x0,0x18(%rsi)   ;*putfield position
                                                ; - java.nio.Buffer::flip@10 (line 358)

  0x00007fffe125e365: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::flip@15 (line 359)

  0x00007fffe125e36c: mov     %rsi,%rax
  0x00007fffe125e36f: add     $0x30,%rsp
  0x00007fffe125e373: pop     %rbp
  0x00007fffe125e374: test    %eax,0x16d9cd86(%rip)  ;   {poll_return}
  0x00007fffe125e37a: retq
  ;; CounterOverflowStub slow case
  0x00007fffe125e37b: mov     %rax,0x8(%rsp)
  0x00007fffe125e380: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125e388: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=141}
                                                ;*synchronization entry
                                                ; - java.nio.Buffer::flip@-1 (line 357)
                                                ;   {runtime_call}
  0x00007fffe125e38d: jmp     0x7fffe125e358
  0x00007fffe125e38f: nop
  0x00007fffe125e390: nop
  ;; Unwind handler
  0x00007fffe125e391: mov     0x348(%r15),%rax
  0x00007fffe125e398: movabs  $0x0,%r10
  0x00007fffe125e3a2: mov     %r10,0x348(%r15)
  0x00007fffe125e3a9: movabs  $0x0,%r10
  0x00007fffe125e3b3: mov     %r10,0x350(%r15)
  0x00007fffe125e3ba: add     $0x30,%rsp
  0x00007fffe125e3be: pop     %rbp
  0x00007fffe125e3bf: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe125e3c4: hlt
  0x00007fffe125e3c5: hlt
  0x00007fffe125e3c6: hlt
  0x00007fffe125e3c7: hlt
  0x00007fffe125e3c8: hlt
  0x00007fffe125e3c9: hlt
  0x00007fffe125e3ca: hlt
  0x00007fffe125e3cb: hlt
  0x00007fffe125e3cc: hlt
  0x00007fffe125e3cd: hlt
  0x00007fffe125e3ce: hlt
  0x00007fffe125e3cf: hlt
  0x00007fffe125e3d0: hlt
  0x00007fffe125e3d1: hlt
  0x00007fffe125e3d2: hlt
  0x00007fffe125e3d3: hlt
  0x00007fffe125e3d4: hlt
  0x00007fffe125e3d5: hlt
  0x00007fffe125e3d6: hlt
  0x00007fffe125e3d7: hlt
  0x00007fffe125e3d8: hlt
  0x00007fffe125e3d9: hlt
  0x00007fffe125e3da: hlt
  0x00007fffe125e3db: hlt
  0x00007fffe125e3dc: hlt
  0x00007fffe125e3dd: hlt
  0x00007fffe125e3de: hlt
  0x00007fffe125e3df: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe125e3e0: movabs  $0xdead,%rbx      ;   {no_reloc}
  0x00007fffe125e3ea: movabs  $0xdead,%rcx
  0x00007fffe125e3f4: movabs  $0xdead,%rsi
  0x00007fffe125e3fe: movabs  $0xdead,%rdi
  0x00007fffe125e408: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125e40d: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125e412: sub     $0x80,%rsp
  0x00007fffe125e419: mov     %rax,0x78(%rsp)
  0x00007fffe125e41e: mov     %rcx,0x70(%rsp)
  0x00007fffe125e423: mov     %rdx,0x68(%rsp)
  0x00007fffe125e428: mov     %rbx,0x60(%rsp)
  0x00007fffe125e42d: mov     %rbp,0x50(%rsp)
  0x00007fffe125e432: mov     %rsi,0x48(%rsp)
  0x00007fffe125e437: mov     %rdi,0x40(%rsp)
  0x00007fffe125e43c: mov     %r8,0x38(%rsp)
  0x00007fffe125e441: mov     %r9,0x30(%rsp)
  0x00007fffe125e446: mov     %r10,0x28(%rsp)
  0x00007fffe125e44b: mov     %r11,0x20(%rsp)
  0x00007fffe125e450: mov     %r12,0x18(%rsp)
  0x00007fffe125e455: mov     %r13,0x10(%rsp)
  0x00007fffe125e45a: mov     %r14,0x8(%rsp)
  0x00007fffe125e45f: mov     %r15,(%rsp)
  0x00007fffe125e463: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125e46d: movabs  $0x7fffe125e40d,%rsi  ;   {internal_word}
  0x00007fffe125e477: mov     %rsp,%rdx
  0x00007fffe125e47a: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125e47e: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125e483: hlt
[Deopt Handler Code]
  0x00007fffe125e484: movabs  $0x7fffe125e484,%r10  ;   {section_word}
  0x00007fffe125e48e: push    %r10
  0x00007fffe125e490: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125e495: hlt
  0x00007fffe125e496: hlt
  0x00007fffe125e497: hlt
<nmethod compile_id='54' compiler='C1' level='2' entry='0x00007fffe125e300' size='968' address='0x00007fffe125e190' relocation_offset='304' insts_offset='368' stub_offset='592' scopes_data_offset='784' scopes_pcs_offset='832' dependencies_offset='960' method='java/nio/Buffer flip ()Ljava/nio/Buffer;' bytes='20' count='51233' iicount='51233' stamp='120.327'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe12720d0:
Code:
Argument 0 is unknown.RIP: 0x7fffe1272340 Code size: 0x00001920
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;
  # this:     rsi:rsi   = &apos;java/io/PrintStream&apos;
  # parm0:    rdx       = int
  #           [sp+0xa0]  (sp of caller)
  ;; N3233: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1272340: mov     0x8(%rsi),%r10d
  0x00007fffe1272344: shl     $0x3,%r10
  0x00007fffe1272348: cmp     %r10,%rax
  0x00007fffe127234b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe1272351: nop
  0x00007fffe1272352: nop
  0x00007fffe1272353: nop
  0x00007fffe1272354: nop
  0x00007fffe1272355: nop
  0x00007fffe1272356: nop
  0x00007fffe1272357: nop
  0x00007fffe1272358: nop
  0x00007fffe1272359: nop
  0x00007fffe127235a: nop
  0x00007fffe127235b: nop
  0x00007fffe127235c: nop
  0x00007fffe127235d: nop
  0x00007fffe127235e: nop
  0x00007fffe127235f: nop
[Verified Entry Point]
  ;; B1: #	B118 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe1272360: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1272367: push    %rbp
  0x00007fffe1272368: sub     $0x90,%rsp        ;*synchronization entry
                                                ; - java.io.PrintStream::println@-1 (line 735)

  0x00007fffe127236f: mov     %edx,%ebp
  0x00007fffe1272371: mov     %rsi,0x8(%rsp)
  0x00007fffe1272376: mov     (%rsi),%rax
  0x00007fffe1272379: mov     %rax,%r10
  0x00007fffe127237c: and     $0x7,%r10
  0x00007fffe1272380: cmp     $0x5,%r10
  0x00007fffe1272384: jne     0x7fffe1272cb6
  ;; B2: #	B120 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe127238a: mov     $0x200051d4,%r10d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe1272390: shl     $0x3,%r10
  0x00007fffe1272394: mov     0xb0(%r10),%r10
  0x00007fffe127239b: mov     %r10,%r11
  0x00007fffe127239e: or      %r15,%r11
  0x00007fffe12723a1: mov     %r11,%r8
  0x00007fffe12723a4: xor     %rax,%r8
  0x00007fffe12723a7: test    $0xffffffffffffff87,%r8
  0x00007fffe12723ae: jne     0x7fffe1272d19    ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)

  ;; B3: #	B169 B4 &lt;- B119 B118 B2 B124  Freq: 1

  0x00007fffe12723b4: mov     %ebp,%r8d
  0x00007fffe12723b7: cmp     $0x80000000,%r8d
  0x00007fffe12723be: je      0x7fffe12733ad    ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B4: #	B170 B5 &lt;- B3  Freq: 1

  0x00007fffe12723c4: test    %r8d,%r8d
  0x00007fffe12723c7: jl      0x7fffe12733c9    ;*ifge
                                                ; - java.lang.Integer::toString@10 (line 400)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B5: #	B24 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe12723cd: movabs  $0xd73af3c0,%r10  ;   {oop([I)}
  0x00007fffe12723d7: mov     0x10(%r10),%r9d
  0x00007fffe12723db: cmp     %r9d,%r8d
  0x00007fffe12723de: jle     0x7fffe12724ba
  ;; B6: #	B23 B7 &lt;- B5  Freq: 0.333303

  0x00007fffe12723e4: mov     0x14(%r10),%r9d
  0x00007fffe12723e8: cmp     %r9d,%r8d
  0x00007fffe12723eb: jle     0x7fffe12724ad
  ;; B7: #	B22 B8 &lt;- B6  Freq: 0.111091

  0x00007fffe12723f1: mov     0x18(%r10),%r9d
  0x00007fffe12723f5: cmp     %r9d,%r8d
  0x00007fffe12723f8: jle     0x7fffe12724a0
  ;; B8: #	B21 B9 &lt;- B7  Freq: 0.0370268

  0x00007fffe12723fe: mov     0x1c(%r10),%r9d
  0x00007fffe1272402: cmp     %r9d,%r8d
  0x00007fffe1272405: jle     0x7fffe1272493
  ;; B9: #	B20 B10 &lt;- B8  Freq: 0.0123412

  0x00007fffe127240b: mov     0x20(%r10),%r9d
  0x00007fffe127240f: cmp     %r9d,%r8d
  0x00007fffe1272412: jle     0x7fffe1272486
  ;; B10: #	B19 B11 &lt;- B9  Freq: 0.00411334

  0x00007fffe1272414: mov     0x24(%r10),%r9d
  0x00007fffe1272418: cmp     %r9d,%r8d
  0x00007fffe127241b: jle     0x7fffe1272479
  ;; B11: #	B18 B12 &lt;- B10  Freq: 0.00137099

  0x00007fffe127241d: mov     0x28(%r10),%r9d
  0x00007fffe1272421: cmp     %r9d,%r8d
  0x00007fffe1272424: jle     0x7fffe127246c
  ;; B12: #	B17 B13 &lt;- B11  Freq: 0.000456954

  0x00007fffe1272426: mov     0x2c(%r10),%r9d
  0x00007fffe127242a: cmp     %r9d,%r8d
  0x00007fffe127242d: jle     0x7fffe127245f
  ;; B13: #	B16 B14 &lt;- B12  Freq: 0.000152304

  0x00007fffe127242f: mov     0x30(%r10),%r9d
  0x00007fffe1272433: cmp     %r9d,%r8d
  0x00007fffe1272436: jle     0x7fffe1272452
  ;; B14: #	B195 B15 &lt;- B13  Freq: 5.07634e-05

  0x00007fffe1272438: mov     0x34(%r10),%r11d
  0x00007fffe127243c: cmp     %r11d,%r8d
  0x00007fffe127243f: jnle    0x7fffe127366c    ;*if_icmpgt
                                                ; - java.lang.Integer::stringSize@8 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B15: #	B25 &lt;- B14  Freq: 5.07634e-05

  0x00007fffe1272445: mov     $0xa,%r10d
  0x00007fffe127244b: mov     %r10d,0x30(%rsp)
  0x00007fffe1272450: jmp     0x7fffe12724c5
  ;; B16: #	B25 &lt;- B13  Freq: 0.000101541

  0x00007fffe1272452: mov     $0x9,%r10d
  0x00007fffe1272458: mov     %r10d,0x30(%rsp)
  0x00007fffe127245d: jmp     0x7fffe12724c5
  ;; B17: #	B25 &lt;- B12  Freq: 0.00030465

  0x00007fffe127245f: mov     $0x8,%r10d
  0x00007fffe1272465: mov     %r10d,0x30(%rsp)
  0x00007fffe127246a: jmp     0x7fffe12724c5
  ;; B18: #	B25 &lt;- B11  Freq: 0.000914034

  0x00007fffe127246c: mov     $0x7,%r10d
  0x00007fffe1272472: mov     %r10d,0x30(%rsp)
  0x00007fffe1272477: jmp     0x7fffe12724c5
  ;; B19: #	B25 &lt;- B10  Freq: 0.00274235

  0x00007fffe1272479: mov     $0x6,%r11d
  0x00007fffe127247f: mov     %r11d,0x30(%rsp)
  0x00007fffe1272484: jmp     0x7fffe12724c5
  ;; B20: #	B25 &lt;- B9  Freq: 0.00822781

  0x00007fffe1272486: mov     $0x5,%r11d
  0x00007fffe127248c: mov     %r11d,0x30(%rsp)
  0x00007fffe1272491: jmp     0x7fffe12724c5
  ;; B21: #	B25 &lt;- B8  Freq: 0.0246857

  0x00007fffe1272493: mov     $0x4,%r11d
  0x00007fffe1272499: mov     %r11d,0x30(%rsp)
  0x00007fffe127249e: jmp     0x7fffe12724c5
  ;; B22: #	B25 &lt;- B7  Freq: 0.0740638

  0x00007fffe12724a0: mov     $0x3,%r11d
  0x00007fffe12724a6: mov     %r11d,0x30(%rsp)
  0x00007fffe12724ab: jmp     0x7fffe12724c5
  ;; B23: #	B25 &lt;- B6  Freq: 0.222212

  0x00007fffe12724ad: mov     $0x2,%r11d
  0x00007fffe12724b3: mov     %r11d,0x30(%rsp)
  0x00007fffe12724b8: jmp     0x7fffe12724c5
  ;; B24: #	B25 &lt;- B5  Freq: 0.666696

  0x00007fffe12724ba: mov     $0x1,%r10d
  0x00007fffe12724c0: mov     %r10d,0x30(%rsp)  ;*iadd
                                                ; - java.lang.Integer::stringSize@13 (line 474)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B25: #	B108 B26 &lt;- B23 B22 B18 B20 B16 B21 B17 B19 B15 B24  Freq: 0.999999

  0x00007fffe12724c5: mov     0x70(%r15),%r10
  0x00007fffe12724c9: movsxd  0x30(%rsp),%r11
  0x00007fffe12724ce: vmovq   %r11,%xmm0
  0x00007fffe12724d3: mov     %r11,%rbp
  0x00007fffe12724d6: shl     $0x1,%rbp
  0x00007fffe12724d9: mov     %rbp,%rcx
  0x00007fffe12724dc: add     $0x17,%rcx
  0x00007fffe12724e0: mov     %rcx,%r11
  0x00007fffe12724e3: and     $0xfffffffffffffff8,%r11
  0x00007fffe12724e7: mov     %r10,%rbx
  0x00007fffe12724ea: add     %r11,%rbx
  0x00007fffe12724ed: cmp     0x80(%r15),%rbx
  0x00007fffe12724f4: jnb     0x7fffe1272bc7
  ;; B26: #	B27 &lt;- B25  Freq: 0.999899

  0x00007fffe12724fa: mov     %rbx,0x70(%r15)
  0x00007fffe12724fe: prefetchw 0x100(%rbx)
  0x00007fffe1272505: movq    $0x1,(%r10)
  0x00007fffe127250c: prefetchw 0x140(%rbx)
  0x00007fffe1272513: movl    $0x20000044,0x8(%r10)  ;   {metadata({type array char})}
  0x00007fffe127251b: mov     0x30(%rsp),%r9d
  0x00007fffe1272520: mov     %r9d,0xc(%r10)
  0x00007fffe1272524: prefetchw 0x180(%rbx)
  0x00007fffe127252b: mov     %r10,%rdi
  0x00007fffe127252e: add     $0x10,%rdi
  0x00007fffe1272532: shr     $0x3,%rcx
  0x00007fffe1272536: add     $0xfffffffffffffffe,%rcx
  0x00007fffe127253a: xor     %rax,%rax
  0x00007fffe127253d: shl     $0x3,%rcx
  0x00007fffe1272541: rep stosb (%rdi)          ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B27: #	B171 B28 &lt;- B109 B26  Freq: 0.999999

  0x00007fffe1272544: cmp     $0x10000,%r8d
  0x00007fffe127254b: jnl     0x7fffe12733e5    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B28: #	B111 B29 &lt;- B27  Freq: 0.999999

  0x00007fffe1272551: imull   $0xcccd,%r8d,%ebx
  0x00007fffe1272558: mov     0x30(%rsp),%edx
  0x00007fffe127255c: decl    %edx              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127255e: shr     $0x13,%ebx        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272561: mov     %ebx,%r11d
  0x00007fffe1272564: shl     $0x1,%r11d        ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272567: mov     %ebx,%ecx
  0x00007fffe1272569: shl     $0x3,%ecx         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127256c: mov     %ecx,%esi
  0x00007fffe127256e: add     %r11d,%esi
  0x00007fffe1272571: mov     %r8d,%r9d
  0x00007fffe1272574: sub     %esi,%r9d         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272577: cmp     $0x24,%r9d
  0x00007fffe127257b: jnb     0x7fffe1272c0d
  ;; B29: #	B112 B30 &lt;- B28  Freq: 0.999998

  0x00007fffe1272581: movsxd  %ecx,%r9
  0x00007fffe1272584: movsxd  %r11d,%r11
  0x00007fffe1272587: add     %r11,%r9
  0x00007fffe127258a: movsxd  %r8d,%r11
  0x00007fffe127258d: sub     %r9,%r11
  0x00007fffe1272590: movabs  $0xd73af1b8,%rdi  ;   {oop([C)}
  0x00007fffe127259a: movzwl  0x10(%rdi,%r11,2),%r11d  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725a0: cmp     0x30(%rsp),%edx
  0x00007fffe12725a4: jnb     0x7fffe1272c39
  ;; B30: #	B39 B31 &lt;- B29  Freq: 0.999997

  0x00007fffe12725aa: mov     %r11w,0xe(%r10,%rbp)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725b0: test    %ebx,%ebx
  0x00007fffe12725b2: je      0x7fffe127269a    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B31: #	B180 B32 &lt;- B30  Freq: 0.333306

  0x00007fffe12725b8: imull   $0xcccd,%ebx,%r11d
  0x00007fffe12725bf: mov     0x30(%rsp),%edx
  0x00007fffe12725c3: add     $0xfffffffe,%edx  ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725c6: shr     $0x13,%r11d       ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725ca: mov     %r11d,%r9d
  0x00007fffe12725cd: shl     $0x3,%r9d         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725d1: mov     %r11d,%r8d
  0x00007fffe12725d4: shl     $0x1,%r8d         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725d7: mov     %r8d,%esi
  0x00007fffe12725da: add     %r9d,%esi
  0x00007fffe12725dd: mov     %ebx,%ecx
  0x00007fffe12725df: sub     %esi,%ecx         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725e1: cmp     $0x24,%ecx
  0x00007fffe12725e4: jnb     0x7fffe1273525
  ;; B32: #	B166 B33 &lt;- B31  Freq: 0.333305

  0x00007fffe12725ea: movsxd  %r8d,%r8
  0x00007fffe12725ed: movsxd  %r9d,%r9
  0x00007fffe12725f0: add     %r9,%r8
  0x00007fffe12725f3: movsxd  %ebx,%r9
  0x00007fffe12725f6: sub     %r8,%r9
  0x00007fffe12725f9: movzwl  0x10(%rdi,%r9,2),%ecx  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12725ff: test    %edx,%edx
  0x00007fffe1272601: jl      0x7fffe1273379
  ;; B33: #	B34 &lt;- B32  Freq: 0.333305

  0x00007fffe1272607: mov     $0x7,%r14d
  0x00007fffe127260d: nop
  0x00007fffe127260e: nop
  0x00007fffe127260f: nop                       ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B34: #	B168 B35 &lt;- B33 B38 	Loop: B34-B38 inner pre of N2819 Freq: 0.476133

  0x00007fffe1272610: cmp     0x30(%rsp),%edx
  0x00007fffe1272614: jnb     0x7fffe127337f
  ;; B35: #	B40 B36 &lt;- B34  Freq: 0.476133

  0x00007fffe127261a: mov     %cx,0x10(%r10,%rdx,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272620: test    %r11d,%r11d
  0x00007fffe1272623: je      0x7fffe12726a0    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B36: #	B181 B37 &lt;- B35  Freq: 0.158698

  0x00007fffe1272625: mov     %r10,%rbp
  0x00007fffe1272628: imull   $0xcccd,%r11d,%ebx
  0x00007fffe127262f: mov     %edx,%r9d
  0x00007fffe1272632: decl    %r9d              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272635: shr     $0x13,%ebx        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272638: mov     %ebx,%r10d
  0x00007fffe127263b: shl     $0x3,%r10d        ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127263f: mov     %ebx,%esi
  0x00007fffe1272641: shl     $0x1,%esi         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272643: mov     %esi,%r8d
  0x00007fffe1272646: add     %r10d,%r8d
  0x00007fffe1272649: mov     %r11d,%ecx
  0x00007fffe127264c: sub     %r8d,%ecx         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127264f: cmp     $0x24,%ecx
  0x00007fffe1272652: jnb     0x7fffe127352a
  ;; B37: #	B102 B38 &lt;- B36  Freq: 0.158698

  0x00007fffe1272658: movsxd  %esi,%r8
  0x00007fffe127265b: movsxd  %r10d,%r10
  0x00007fffe127265e: add     %r10,%r8
  0x00007fffe1272661: mov     0x30(%rsp),%r10d
  0x00007fffe1272666: add     $0xfffffffd,%r10d
  0x00007fffe127266a: movsxd  %r11d,%r11
  0x00007fffe127266d: sub     %r8,%r11
  0x00007fffe1272670: movzwl  0x10(%rdi,%r11,2),%ecx  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272676: mov     $0xffffffff,%r8d
  0x00007fffe127267c: cmp     %r8d,%r10d
  0x00007fffe127267f: cmovl   %r8d,%r10d
  0x00007fffe1272683: cmp     %r10d,%r9d
  0x00007fffe1272686: jle     0x7fffe1272b4f
  ;; B38: #	B34 &lt;- B37  Freq: 0.142828

  0x00007fffe127268c: mov     %ebx,%r11d
  0x00007fffe127268f: mov     %r9d,%edx
  0x00007fffe1272692: mov     %rbp,%r10
  0x00007fffe1272695: jmpq    0x7fffe1272610
  ;; B39: #	B40 &lt;- B30  Freq: 0.666691

  0x00007fffe127269a: mov     $0x7,%r14d        ;*synchronization entry
                                                ; - java.lang.Integer::toString@-1 (line 398)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B40: #	B172 B41 &lt;- B191 B35 B104 B39  Freq: 0.999995

  0x00007fffe12726a0: mov     0x8(%rsp),%r11
  0x00007fffe12726a5: mov     0xc(%r11),%r11d   ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12726a9: test    %r11d,%r11d
  0x00007fffe12726ac: je      0x7fffe127340d    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B41: #	B198 B42 &lt;- B40  Freq: 0.999995

  0x00007fffe12726b2: mov     0x8(%rsp),%r11
  0x00007fffe12726b7: mov     0x18(%r11),%r13d  ;*getfield textOut
                                                ; - java.io.PrintStream::write@9 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12726bb: mov     0x10(%r13),%r11d  ; implicit exception: dispatches to 0x00007fffe12736a5
  ;; B42: #	B199 B43 &lt;- B41  Freq: 0.999994

  0x00007fffe12726bf: mov     %r11d,0x40(%rsp)
  0x00007fffe12726c4: mov     (%r11),%rax       ; implicit exception: dispatches to 0x00007fffe12736c1
  ;; B43: #	B126 B44 &lt;- B42  Freq: 0.999993

  0x00007fffe12726c7: mov     %rax,%r11
  0x00007fffe12726ca: and     $0x7,%r11
  0x00007fffe12726ce: mov     0x40(%rsp),%r8d
  0x00007fffe12726d3: mov     %r8,%rdi          ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12726d6: mov     %r13,%rbp         ;*getfield textOut
                                                ; - java.io.PrintStream::write@9 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12726d9: cmp     $0x5,%r11
  0x00007fffe12726dd: jne     0x7fffe1272d4e
  ;; B44: #	B128 B45 &lt;- B43  Freq: 0.999992

  0x00007fffe12726e3: mov     0x8(%r8),%r11d
  0x00007fffe12726e7: shl     $0x3,%r11
  0x00007fffe12726eb: mov     0xb0(%r11),%r11
  0x00007fffe12726f2: mov     %r11,%r8
  0x00007fffe12726f5: or      %r15,%r8
  0x00007fffe12726f8: mov     %r8,%r9
  0x00007fffe12726fb: xor     %rax,%r9
  0x00007fffe12726fe: test    $0xffffffffffffff87,%r9
  0x00007fffe1272705: jne     0x7fffe1272e10    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B45: #	B173 B46 &lt;- B127 B126 B44 B132  Freq: 0.999993

  0x00007fffe127270b: mov     0x1c(%r13),%r11d  ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127270f: test    %r11d,%r11d
  0x00007fffe1272712: je      0x7fffe127342d    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B46: #	B174 B47 &lt;- B45  Freq: 0.999992

  0x00007fffe1272718: mov     0x18(%r13),%r8d   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127271c: mov     0x14(%r13),%r11d
  0x00007fffe1272720: sub     %r8d,%r11d        ;*isub
                                                ; - java.io.BufferedWriter::write@36 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272723: cmp     0x30(%rsp),%r11d
  0x00007fffe1272728: jl      0x7fffe1273465    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B47: #	B200 B48 &lt;- B46  Freq: 0.999992

  0x00007fffe127272e: mov     0x20(%r13),%r9d
  0x00007fffe1272732: mov     0xc(%r9),%r11d    ; implicit exception: dispatches to 0x00007fffe12736e9
  ;; B48: #	B133 B49 &lt;- B47  Freq: 0.999991

  0x00007fffe1272736: mov     %r9,%rcx          ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272739: test    %r8d,%r8d
  0x00007fffe127273c: jl      0x7fffe1272e48
  ;; B49: #	B133 B50 &lt;- B48  Freq: 0.99999

  0x00007fffe1272742: mov     %rdi,(%rsp)
  0x00007fffe1272746: mov     %r10,0x48(%rsp)
  0x00007fffe127274b: mov     0x30(%rsp),%ebx
  0x00007fffe127274f: add     %r8d,%ebx
  0x00007fffe1272752: cmp     %ebx,%r11d
  0x00007fffe1272755: jb      0x7fffe1272e48
  ;; B50: #	B51 &lt;- B49  Freq: 0.999989

  0x00007fffe127275b: lea     0x10(%r9,%r8,2),%rsi
  0x00007fffe1272760: mov     %r10,%rdi
  0x00007fffe1272763: add     $0x10,%rdi
  0x00007fffe1272767: vmovq   %xmm0,%rdx
  0x00007fffe127276c: movabs  $0x7fffe1141060,%r10
  0x00007fffe1272776: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B51: #	B175 B52 &lt;- B50 B134  Freq: 0.999991

  0x00007fffe1272779: mov     0x30(%rsp),%r10d
  0x00007fffe127277e: add     0x18(%r13),%r10d  ;*iadd
                                                ; - java.io.BufferedWriter::write@80 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272782: mov     %r10d,0x18(%r13)  ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272786: mov     0x14(%r13),%r8d   ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127278a: cmp     %r8d,%r10d
  0x00007fffe127278d: jnl     0x7fffe1273495
  ;; B52: #	B135 B53 &lt;- B51  Freq: 0.99999

  0x00007fffe1272793: mov     $0x7,%r10d
  0x00007fffe1272799: mov     0x40(%rsp),%r8d
  0x00007fffe127279e: and     (%r8),%r10
  0x00007fffe12727a1: cmp     $0x5,%r10
  0x00007fffe12727a5: jne     0x7fffe1272eb5    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B53: #	B113 B54 &lt;- B136 B135 B52  Freq: 0.99999

  0x00007fffe12727ab: mov     0x8(%rsp),%r10
  0x00007fffe12727b0: mov     0x18(%r10),%r10d  ;*getfield textOut
                                                ; - java.io.PrintStream::write@17 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12727b4: test    %r10d,%r10d
  0x00007fffe12727b7: je      0x7fffe1272c65    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B54: #	B223 B55 &lt;- B53  Freq: 0.999989

  0x00007fffe12727bd: mov     %r14,0x18(%rsp)   ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12727c2: mov     %r10,%rsi         ;*getfield textOut
                                                ; - java.io.PrintStream::write@17 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12727c5: mov     0x8(%rsp),%r10
  0x00007fffe12727ca: mov     %r10,%rbp
  0x00007fffe12727cd: nop
  0x00007fffe12727ce: nop
  0x00007fffe12727cf: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [8]=Oop [72]=Oop off=1172}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {optimized virtual_call}
  ;; B55: #	B114 B56 &lt;- B54  Freq: 0.999969

  0x00007fffe12727d4: mov     %rbp,%r10
  0x00007fffe12727d7: mov     0x1c(%r10),%r11d  ;*getfield charOut
                                                ; - java.io.PrintStream::write@24 (line 527)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12727db: test    %r11d,%r11d
  0x00007fffe12727de: je      0x7fffe1272c79    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B56: #	B224 B57 &lt;- B55  Freq: 0.999968

  0x00007fffe12727e4: mov     %r11,%rsi
  0x00007fffe12727e7: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [8]=Oop [72]=Oop off=1196}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {optimized virtual_call}
  ;; B57: #	B176 B58 &lt;- B56  Freq: 0.999948

  0x00007fffe12727ec: mov     %rbp,%r13
  0x00007fffe12727ef: movzbl  0x10(%rbp),%r11d  ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@31 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe12727f4: test    %r11d,%r11d
  0x00007fffe12727f7: je      0x7fffe12734b9    ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B58: #	B59 &lt;- B57  Freq: 0.999948

  0x00007fffe12727fd: xor     %r11d,%r11d       ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B59: #	B110 B60 &lt;- B58 B60 	Loop: B59-B60 inner  Freq: 2.90421

  0x00007fffe1272800: mov     0x48(%rsp),%r10
  0x00007fffe1272805: movzwl  0x10(%r10,%r11,2),%r8d  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127280b: cmp     $0xa,%r8d
  0x00007fffe127280f: je      0x7fffe1272bf6    ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B60: #	B59 B61 &lt;- B59  Freq: 2.90421

  0x00007fffe1272815: incl    %r11d             ;*iinc
                                                ; - java.lang.String::indexOf@55 (line 1557)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272818: cmp     0x30(%rsp),%r11d
  0x00007fffe127281d: jl      0x7fffe1272800    ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B61: #	B177 B62 &lt;- B60  Freq: 0.999945

  0x00007fffe127281f: mov     0xc(%r13),%r11d   ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272823: test    %r11d,%r11d
  0x00007fffe1272826: je      0x7fffe12734cd    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B62: #	B201 B63 &lt;- B61  Freq: 0.999944

  0x00007fffe127282c: mov     0x18(%r13),%ebp   ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@9 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272830: mov     0x24(%rbp),%r9d   ;*getfield lineSeparator
                                                ; - java.io.BufferedWriter::newLine@2 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; implicit exception: dispatches to 0x00007fffe1273719
  ;; B63: #	B202 B64 &lt;- B62  Freq: 0.999943

  0x00007fffe1272834: mov     0xc(%r9),%r10d    ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; implicit exception: dispatches to 0x00007fffe127372d
  ;; B64: #	B203 B65 &lt;- B63  Freq: 0.999942

  0x00007fffe1272838: mov     0xc(%r10),%r11d   ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; implicit exception: dispatches to 0x00007fffe1273741
  ;; B65: #	B204 B66 &lt;- B64  Freq: 0.999941

  0x00007fffe127283c: mov     0x10(%rbp),%ecx
  0x00007fffe127283f: mov     (%rcx),%rax       ; implicit exception: dispatches to 0x00007fffe1273755
  ;; B66: #	B138 B67 &lt;- B65  Freq: 0.99994

  0x00007fffe1272842: mov     %rax,%r10
  0x00007fffe1272845: and     $0x7,%r10
  0x00007fffe1272849: mov     %rcx,%rsi         ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe127284c: mov     %r9,%rdx          ;*getfield lineSeparator
                                                ; - java.io.BufferedWriter::newLine@2 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe127284f: mov     %rbp,%r8          ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@9 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272852: mov     %r8,0x50(%rsp)
  0x00007fffe1272857: cmp     $0x5,%r10
  0x00007fffe127285b: jne     0x7fffe1272f6b
  ;; B67: #	B140 B68 &lt;- B66  Freq: 0.999939

  0x00007fffe1272861: mov     0x8(%rcx),%r8d
  0x00007fffe1272865: movabs  $0x0,%r10
  0x00007fffe127286f: lea     (%r10,%r8,8),%r10
  0x00007fffe1272873: mov     0xb0(%r10),%r10
  0x00007fffe127287a: mov     %r10,%r8
  0x00007fffe127287d: or      %r15,%r8
  0x00007fffe1272880: mov     %r8,%rbx
  0x00007fffe1272883: xor     %rax,%rbx
  0x00007fffe1272886: test    $0xffffffffffffff87,%rbx
  0x00007fffe127288d: jne     0x7fffe127300f    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B68: #	B178 B69 &lt;- B139 B138 B67 B144  Freq: 0.99994

  0x00007fffe1272893: mov     0x1c(%rbp),%r10d  ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272897: test    %r10d,%r10d
  0x00007fffe127289a: je      0x7fffe12734e5    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B69: #	B80 B70 &lt;- B68  Freq: 0.99994

  0x00007fffe12728a0: test    %r11d,%r11d
  0x00007fffe12728a3: jle     0x7fffe1272961    ;*if_icmpge
                                                ; - java.io.BufferedWriter::write@24 (line 224)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B70: #	B184 B71 &lt;- B69  Freq: 0.49997

  0x00007fffe12728a9: mov     0x18(%rbp),%r8d   ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12728ad: mov     0x14(%rbp),%r10d
  0x00007fffe12728b1: sub     %r8d,%r10d        ;*isub
                                                ; - java.io.BufferedWriter::write@36 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12728b4: cmp     %r11d,%r10d
  0x00007fffe12728b7: jl      0x7fffe1273561    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B71: #	B207 B72 &lt;- B70  Freq: 0.49997

  0x00007fffe12728bd: mov     0xc(%r9),%edi     ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12728c1: mov     0xc(%rdi),%ebx    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; implicit exception: dispatches to 0x00007fffe12737a9
  ;; B72: #	B185 B73 &lt;- B71  Freq: 0.499969

  0x00007fffe12728c4: mov     0x20(%rbp),%eax   ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12728c7: cmp     %ebx,%r11d
  0x00007fffe12728ca: jnle    0x7fffe1273595    ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B73: #	B208 B74 &lt;- B72  Freq: 0.499969

  0x00007fffe12728d0: mov     0xc(%rax),%r10d   ; implicit exception: dispatches to 0x00007fffe12737d1
  ;; B74: #	B164 B75 &lt;- B73  Freq: 0.499968

  0x00007fffe12728d4: mov     %rsi,0x20(%rsp)
  0x00007fffe12728d9: mov     %ecx,0x2c(%rsp)
  0x00007fffe12728dd: mov     %r11d,0x30(%rsp)
  0x00007fffe12728e2: mov     %r9d,0x28(%rsp)
  0x00007fffe12728e7: mov     %ebp,0x10(%rsp)
  0x00007fffe12728eb: mov     %r13,0x8(%rsp)
  0x00007fffe12728f0: mov     %rax,%rcx         ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12728f3: mov     %rdi,%r11         ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12728f6: test    %r8d,%r8d
  0x00007fffe12728f9: jl      0x7fffe1273359
  ;; B75: #	B164 B76 &lt;- B74  Freq: 0.499968

  0x00007fffe12728ff: cmp     0x30(%rsp),%ebx
  0x00007fffe1272903: jb      0x7fffe1273359
  ;; B76: #	B164 B77 &lt;- B75  Freq: 0.499967

  0x00007fffe1272909: mov     0x30(%rsp),%r9d
  0x00007fffe127290e: add     %r8d,%r9d
  0x00007fffe1272911: cmp     %r9d,%r10d
  0x00007fffe1272914: jb      0x7fffe1273359
  ;; B77: #	B78 &lt;- B76  Freq: 0.499967

  0x00007fffe127291a: lea     0x10(%rax,%r8,2),%rsi
  0x00007fffe127291f: lea     0x10(%rdi),%rdi
  0x00007fffe1272923: movsxd  0x30(%rsp),%rdx
  0x00007fffe1272928: movabs  $0x7fffe1141060,%r10
  0x00007fffe1272932: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B78: #	B186 B79 &lt;- B77 B165  Freq: 0.499968

  0x00007fffe1272935: mov     0x10(%rsp),%ebp
  0x00007fffe1272939: mov     0x18(%rbp),%r10d  ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@75 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe127293d: mov     0x14(%rbp),%r9d   ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272941: add     0x30(%rsp),%r10d  ;*iadd
                                                ; - java.io.BufferedWriter::write@80 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272946: mov     %r10d,0x18(%rbp)  ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe127294a: cmp     %r9d,%r10d
  0x00007fffe127294d: jnl     0x7fffe12735d1    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B79: #	B80 &lt;- B78  Freq: 0.499968

  0x00007fffe1272953: mov     0x8(%rsp),%r13
  0x00007fffe1272958: mov     0x2c(%rsp),%ecx
  0x00007fffe127295c: mov     0x20(%rsp),%rsi
  ;; B80: #	B145 B81 &lt;- B79 B69  Freq: 0.999938

  0x00007fffe1272961: mov     $0x7,%r10d
  0x00007fffe1272967: and     (%rcx),%r10
  0x00007fffe127296a: cmp     $0x5,%r10
  0x00007fffe127296e: jne     0x7fffe127303e    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B81: #	B115 B82 &lt;- B146 B145 B80  Freq: 0.999938

  0x00007fffe1272974: mov     0x18(%r13),%r11d  ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@16 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272978: test    %r11d,%r11d
  0x00007fffe127297b: je      0x7fffe1272c89    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B82: #	B230 B83 &lt;- B81  Freq: 0.999937

  0x00007fffe1272981: mov     %r13,0x8(%rsp)    ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272986: mov     %r11,%rsi         ;*getfield textOut
                                                ; - java.io.PrintStream::newLine@16 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272989: mov     %r13,%rbp
  0x00007fffe127298c: nop
  0x00007fffe127298d: nop
  0x00007fffe127298e: nop
  0x00007fffe127298f: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [8]=Oop off=1620}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {optimized virtual_call}
  ;; B83: #	B116 B84 &lt;- B82  Freq: 0.999917

  0x00007fffe1272994: mov     %rbp,%r11
  0x00007fffe1272997: mov     0x1c(%r11),%r10d  ;*getfield charOut
                                                ; - java.io.PrintStream::newLine@23 (line 546)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe127299b: test    %r10d,%r10d
  0x00007fffe127299e: je      0x7fffe1272ca1    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B84: #	B231 B85 &lt;- B83  Freq: 0.999916

  0x00007fffe12729a4: mov     %r10,%rsi
  0x00007fffe12729a7: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [8]=Oop off=1644}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {optimized virtual_call}
  ;; B85: #	B179 B86 &lt;- B84  Freq: 0.999896

  0x00007fffe12729ac: movzbl  0x10(%rbp),%r10d  ;*getfield autoFlush
                                                ; - java.io.PrintStream::newLine@30 (line 547)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12729b1: test    %r10d,%r10d
  0x00007fffe12729b4: je      0x7fffe1273511    ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B86: #	B205 B87 &lt;- B85  Freq: 0.999895

  0x00007fffe12729ba: mov     0xc(%rbp),%r11d   ;*getfield out
                                                ; - java.io.PrintStream::newLine@37 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12729be: mov     0x8(%r11),%r10d   ; implicit exception: dispatches to 0x00007fffe1273779
  ;; B87: #	B147 B88 &lt;- B86  Freq: 0.999894

  0x00007fffe12729c2: cmp     $0x2000524d,%r10d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe12729c9: jne     0x7fffe12730ea
  ;; B88: #	B149 B89 &lt;- B87  Freq: 0.999893

  0x00007fffe12729cf: mov     %r11,%r9          ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12729d2: mov     (%r9),%rax
  0x00007fffe12729d5: mov     %rax,%r10
  0x00007fffe12729d8: and     $0x7,%r10
  0x00007fffe12729dc: cmp     $0x5,%r10
  0x00007fffe12729e0: jne     0x7fffe1273106
  ;; B89: #	B151 B90 &lt;- B88  Freq: 0.999892

  0x00007fffe12729e6: mov     $0x2000524d,%r11d  ;   {metadata(&apos;java/io/BufferedOutputStream&apos;)}
  0x00007fffe12729ec: movabs  $0x0,%r10
  0x00007fffe12729f6: lea     (%r10,%r11,8),%r10
  0x00007fffe12729fa: mov     0xb0(%r10),%r10
  0x00007fffe1272a01: mov     %r10,%r11
  0x00007fffe1272a04: or      %r15,%r11
  0x00007fffe1272a07: mov     %r11,%r8
  0x00007fffe1272a0a: xor     %rax,%r8
  0x00007fffe1272a0d: test    $0xffffffffffffff87,%r8
  0x00007fffe1272a14: jne     0x7fffe1273179    ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B90: #	B93 B91 &lt;- B150 B149 B89 B155  Freq: 0.999893

  0x00007fffe1272a1a: mov     0x10(%r9),%r8d    ;*getfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@1 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272a1e: mov     0xc(%r9),%r10d    ;*getfield out
                                                ; - java.io.BufferedOutputStream::flushBuffer@8 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272a22: test    %r8d,%r8d
  0x00007fffe1272a25: jnle    0x7fffe1272a35    ;*ifle
                                                ; - java.io.BufferedOutputStream::flushBuffer@4 (line 81)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B91: #	B162 B92 &lt;- B90  Freq: 0.333326

  0x00007fffe1272a27: test    %r10d,%r10d
  0x00007fffe1272a2a: je      0x7fffe127331a    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B92: #	B98 &lt;- B91  Freq: 0.333326

  0x00007fffe1272a30: jmpq    0x7fffe1272b09
  ;; B93: #	B206 B94 &lt;- B90  Freq: 0.666567

  0x00007fffe1272a35: mov     0x14(%r9),%r11d   ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272a39: mov     0x8(%r10),%ebx    ; implicit exception: dispatches to 0x00007fffe1273789
  ;; B94: #	B163 B95 &lt;- B93  Freq: 0.666567

  0x00007fffe1272a3d: cmp     $0x20004f38,%ebx  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1272a43: jne     0x7fffe1273331    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B95: #	B232 B96 &lt;- B94  Freq: 0.666566

  0x00007fffe1272a49: mov     %r9,(%rsp)
  0x00007fffe1272a4d: mov     %r11,%rdx
  0x00007fffe1272a50: push    %r10
  0x00007fffe1272a52: cmp     0x16ae7187(%rip),%r12  ;   {external_word}
  0x00007fffe1272a59: je      0x7fffe1272ad6
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1272a5f: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1272a64: sub     $0x80,%rsp
  0x00007fffe1272a6b: mov     %rax,0x78(%rsp)
  0x00007fffe1272a70: mov     %rcx,0x70(%rsp)
  0x00007fffe1272a75: mov     %rdx,0x68(%rsp)
  0x00007fffe1272a7a: mov     %rbx,0x60(%rsp)
  0x00007fffe1272a7f: mov     %rbp,0x50(%rsp)
  0x00007fffe1272a84: mov     %rsi,0x48(%rsp)
  0x00007fffe1272a89: mov     %rdi,0x40(%rsp)
  0x00007fffe1272a8e: mov     %r8,0x38(%rsp)
  0x00007fffe1272a93: mov     %r9,0x30(%rsp)
  0x00007fffe1272a98: mov     %r10,0x28(%rsp)
  0x00007fffe1272a9d: mov     %r11,0x20(%rsp)
  0x00007fffe1272aa2: mov     %r12,0x18(%rsp)
  0x00007fffe1272aa7: mov     %r13,0x10(%rsp)
  0x00007fffe1272aac: mov     %r14,0x8(%rsp)
  0x00007fffe1272ab1: mov     %r15,(%rsp)
  0x00007fffe1272ab5: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1272abf: movabs  $0x7fffe1272a5f,%rsi  ;   {internal_word}
  0x00007fffe1272ac9: mov     %rsp,%rdx
  0x00007fffe1272acc: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1272ad0: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1272ad5: hlt
  0x00007fffe1272ad6: pop     %r10              ;*getfield buf
                                                ; - java.io.BufferedOutputStream::flushBuffer@12 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272ad8: mov     %r10,%rsi         ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272adb: movzbl  0xc(%rsi),%r9d    ;*getfield append
                                                ; - java.io.FileOutputStream::write@5 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272ae0: xor     %ecx,%ecx
  0x00007fffe1272ae2: mov     (%rsp),%r10
  0x00007fffe1272ae6: mov     %r10,%rbp
  0x00007fffe1272ae9: nop
  0x00007fffe1272aea: nop
  0x00007fffe1272aeb: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [8]=Oop off=1968}
                                                ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {optimized virtual_call}
  ;; B96: #	B161 B97 &lt;- B95  Freq: 0.666553

  0x00007fffe1272af0: mov     %rbp,%r9
  0x00007fffe1272af3: mov     %r12d,0x10(%r9)   ;*putfield count
                                                ; - java.io.BufferedOutputStream::flushBuffer@25 (line 83)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272af7: mov     0xc(%r9),%r10d    ;*getfield out
                                                ; - java.io.BufferedOutputStream::flush@5 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1272afb: test    %r10d,%r10d
  0x00007fffe1272afe: je      0x7fffe1273315
  ;; B97: #	B98 &lt;- B96  Freq: 0.666552

  0x00007fffe1272b04: mov     0x8(%rsp),%rbp    ;*return
                                                ; - java.io.BufferedOutputStream::flushBuffer@28 (line 85)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B98: #	B156 B99 &lt;- B97 B92  Freq: 0.999878

  0x00007fffe1272b09: mov     0x8(%r10),%r11d
  0x00007fffe1272b0d: cmp     $0x20004f38,%r11d  ;   {metadata(&apos;java/io/FileOutputStream&apos;)}
  0x00007fffe1272b14: jne     0x7fffe12731a8
  ;; B99: #	B157 B100 &lt;- B98  Freq: 0.999877

  0x00007fffe1272b1a: mov     $0x7,%r10d
  0x00007fffe1272b20: and     (%r9),%r10
  0x00007fffe1272b23: cmp     $0x5,%r10
  0x00007fffe1272b27: jne     0x7fffe12731c1
  ;; B100: #	B159 B101 &lt;- B158 B157 B99  Freq: 0.999877

  0x00007fffe1272b2d: mov     0x18(%rsp),%r10
  0x00007fffe1272b32: and     0x0(%rbp),%r10
  0x00007fffe1272b36: cmp     $0x5,%r10
  0x00007fffe1272b3a: jne     0x7fffe127326d    ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)

  ;; B101: #	N3233 &lt;- B160 B159 B100  Freq: 0.999877

  0x00007fffe1272b40: add     $0x90,%rsp
  0x00007fffe1272b47: pop     %rbp
  0x00007fffe1272b48: test    %eax,0x16d884b2(%rip)  ;   {poll_return}
  0x00007fffe1272b4e: retq
  ;; B102: #	B187 B103 &lt;- B37  Freq: 0.0158698

  0x00007fffe1272b4f: cmp     $0xffffffff,%r9d
  0x00007fffe1272b53: jle     0x7fffe12735ed
  ;; B103: #	B104 &lt;- B102  Freq: 0.0158698

  0x00007fffe1272b59: nop
  0x00007fffe1272b5a: nop
  0x00007fffe1272b5b: nop
  0x00007fffe1272b5c: nop
  0x00007fffe1272b5d: nop
  0x00007fffe1272b5e: nop
  0x00007fffe1272b5f: nop                       ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B104: #	B40 B105 &lt;- B103 B107 	Loop: B104-B107 inner main of N605 Freq: 0.0238037

  0x00007fffe1272b60: mov     %rbp,%r10
  0x00007fffe1272b63: mov     %cx,0x10(%rbp,%r9,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272b69: test    %ebx,%ebx
  0x00007fffe1272b6b: je      0x7fffe12726a0    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B105: #	B182 B106 &lt;- B104  Freq: 0.00793395

  0x00007fffe1272b71: imull   $0xcccd,%ebx,%r11d
  0x00007fffe1272b78: mov     %r9d,%edx
  0x00007fffe1272b7b: decl    %edx              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272b7d: shr     $0x13,%r11d       ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272b81: mov     %r11d,%r8d
  0x00007fffe1272b84: shl     $0x1,%r8d         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272b87: mov     %r11d,%r10d
  0x00007fffe1272b8a: shl     $0x3,%r10d        ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272b8e: mov     %r10d,%eax
  0x00007fffe1272b91: add     %r8d,%eax
  0x00007fffe1272b94: mov     %ebx,%ecx
  0x00007fffe1272b96: sub     %eax,%ecx         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272b98: cmp     $0x24,%ecx
  0x00007fffe1272b9b: jnb     0x7fffe1273530
  ;; B106: #	B188 B107 &lt;- B105  Freq: 0.00793395

  0x00007fffe1272ba1: movsxd  %r10d,%rcx
  0x00007fffe1272ba4: movsxd  %ebx,%r10
  0x00007fffe1272ba7: movsxd  %r8d,%r8
  0x00007fffe1272baa: add     %r8,%rcx
  0x00007fffe1272bad: sub     %rcx,%r10
  0x00007fffe1272bb0: movzwl  0x10(%rdi,%r10,2),%ecx  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272bb6: cmp     $0xffffffff,%edx
  0x00007fffe1272bb9: jle     0x7fffe12735f9
  ;; B107: #	B104 &lt;- B106  Freq: 0.00793394

  0x00007fffe1272bbf: mov     %edx,%r9d
  0x00007fffe1272bc2: mov     %r11d,%ebx
  0x00007fffe1272bc5: jmp     0x7fffe1272b60
  ;; B108: #	B213 B109 &lt;- B25  Freq: 0.000100016

  0x00007fffe1272bc7: vmovsd  %xmm0,0x10(%rsp)
  0x00007fffe1272bcd: mov     %r8d,(%rsp)
  0x00007fffe1272bd1: movabs  $0x100000220,%rsi  ;   {metadata({type array char})}
  0x00007fffe1272bdb: mov     0x30(%rsp),%edx
  0x00007fffe1272bdf: callq   0x7fffe11656e0    ; OopMap{[8]=Oop off=2212}
                                                ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B109: #	B27 &lt;- B108  Freq: 0.000100014

  0x00007fffe1272be4: mov     (%rsp),%r8d
  0x00007fffe1272be8: vmovsd  0x10(%rsp),%xmm0
  0x00007fffe1272bee: mov     %rax,%r10
  0x00007fffe1272bf1: jmpq    0x7fffe1272544
  ;; B110: #	N3233 &lt;- B59  Freq: 2.94278e-06

  0x00007fffe1272bf6: mov     $0xffffff65,%esi
  0x00007fffe1272bfb: mov     %r13,%rbp
  0x00007fffe1272bfe: mov     %r11d,0x20(%rsp)
  0x00007fffe1272c03: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2248}
                                                ;*iflt
                                                ; - java.io.PrintStream::write@43 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1272c08: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B111: #	N3233 &lt;- B28  Freq: 1.01328e-06

  0x00007fffe1272c0d: mov     $0xffffffe4,%esi
  0x00007fffe1272c12: mov     0x8(%rsp),%rbp
  0x00007fffe1272c17: mov     %r10,0x20(%rsp)
  0x00007fffe1272c1c: mov     %ebx,0x28(%rsp)
  0x00007fffe1272c20: mov     %r10,0x30(%rsp)
  0x00007fffe1272c25: mov     %edx,0x38(%rsp)
  0x00007fffe1272c29: mov     %r9d,0x3c(%rsp)
  0x00007fffe1272c2e: nop
  0x00007fffe1272c2f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=Oop [48]=Oop off=2292}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1272c34: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B112: #	N3233 &lt;- B29  Freq: 1.01328e-06

  0x00007fffe1272c39: mov     $0xffffffe4,%esi
  0x00007fffe1272c3e: mov     0x8(%rsp),%rbp
  0x00007fffe1272c43: mov     %r10,0x20(%rsp)
  0x00007fffe1272c48: mov     %ebx,0x28(%rsp)
  0x00007fffe1272c4c: mov     %r10,0x30(%rsp)
  0x00007fffe1272c51: mov     %edx,0x38(%rsp)
  0x00007fffe1272c55: mov     %r11d,0x3c(%rsp)
  0x00007fffe1272c5a: nop
  0x00007fffe1272c5b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=Oop [48]=Oop off=2336}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1272c60: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B113: #	N3233 &lt;- B53  Freq: 1.01327e-06

  0x00007fffe1272c65: mov     $0xfffffff6,%esi
  0x00007fffe1272c6a: mov     0x8(%rsp),%rbp
  0x00007fffe1272c6f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [72]=Oop off=2356}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1272c74: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B114: #	N3233 &lt;- B55  Freq: 1.01325e-06

  0x00007fffe1272c79: mov     $0xfffffff6,%esi
  0x00007fffe1272c7e: nop
  0x00007fffe1272c7f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [72]=Oop off=2372}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1272c84: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B115: #	N3233 &lt;- B81  Freq: 1.01322e-06

  0x00007fffe1272c89: mov     $0xfffffff6,%esi
  0x00007fffe1272c8e: mov     %r13,(%rsp)
  0x00007fffe1272c92: mov     %r13,0x8(%rsp)
  0x00007fffe1272c97: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop off=2396}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1272c9c: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B116: #	N3233 &lt;- B83  Freq: 1.01319e-06

  0x00007fffe1272ca1: mov     $0xfffffff6,%esi
  0x00007fffe1272ca6: nop
  0x00007fffe1272ca7: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2412}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1272cac: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B117: #	B118 &lt;- B120  Freq: 9.99999e-13

  0x00007fffe1272cb1: lock cmpxchg %r10,(%rsi)
  ;; B118: #	B3 B119 &lt;- B1 B117  Freq: 1e-06

  0x00007fffe1272cb6: lea     0x70(%rsp),%rbx
  0x00007fffe1272cbb: mov     (%rsi),%rax
  0x00007fffe1272cbe: test    $0x2,%rax
  0x00007fffe1272cc4: jne     0x7fffe1272cea
  0x00007fffe1272cc6: or      $0x1,%rax
  0x00007fffe1272cca: mov     %rax,(%rbx)
  0x00007fffe1272ccd: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1272cd2: je      0x7fffe1272d03
  0x00007fffe1272cd8: sub     %rsp,%rax
  0x00007fffe1272cdb: and     $0xfffffffffffff007,%rax
  0x00007fffe1272ce2: mov     %rax,(%rbx)
  0x00007fffe1272ce5: jmpq    0x7fffe1272d03
  0x00007fffe1272cea: movq    $0x3,(%rbx)
  0x00007fffe1272cf1: mov     %rax,%rbx
  0x00007fffe1272cf4: mov     0x16(%rbx),%rax
  0x00007fffe1272cf8: test    %rax,%rax
  0x00007fffe1272cfb: jne     0x7fffe1272d03
  0x00007fffe1272cfd: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1272d03: je      0x7fffe12723b4
  ;; B119: #	B3 &lt;- B123 B118  Freq: 2e-12

  0x00007fffe1272d09: lea     0x70(%rsp),%rdx
  0x00007fffe1272d0e: nop
  0x00007fffe1272d0f: callq   0x7fffe11658a0    ; OopMap{[8]=Oop off=2516}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ;   {runtime_call}
  0x00007fffe1272d14: jmpq    0x7fffe12723b4
  ;; B120: #	B117 B121 &lt;- B2  Freq: 9.99999e-07

  0x00007fffe1272d19: test    $0x7,%r8
  0x00007fffe1272d20: jne     0x7fffe1272cb1
  ;; B121: #	B123 B122 &lt;- B120  Freq: 9.99998e-07

  0x00007fffe1272d22: test    $0x300,%r8
  0x00007fffe1272d29: jne     0x7fffe1272d38
  ;; B122: #	B123 &lt;- B121  Freq: 9.99997e-07

  0x00007fffe1272d2b: and     $0x37f,%rax
  0x00007fffe1272d32: mov     %rax,%r11
  0x00007fffe1272d35: or      %r15,%r11
  ;; B123: #	B119 B124 &lt;- B122 B121  Freq: 9.99998e-07

  0x00007fffe1272d38: lock cmpxchg %r11,(%rsi)
  0x00007fffe1272d3d: jne     0x7fffe1272d09
  ;; B124: #	B3 &lt;- B123  Freq: 9.99997e-07

  0x00007fffe1272d3f: jmpq    0x7fffe12723b4
  ;; B125: #	B126 &lt;- B128  Freq: 9.99992e-13

  0x00007fffe1272d44: mov     0x40(%rsp),%r8d
  0x00007fffe1272d49: lock cmpxchg %r11,(%r8)
  ;; B126: #	B45 B127 &lt;- B43 B125  Freq: 9.99994e-07

  0x00007fffe1272d4e: lea     0x80(%rsp),%rbx
  0x00007fffe1272d56: mov     (%rdi),%rax
  0x00007fffe1272d59: test    $0x2,%rax
  0x00007fffe1272d5f: jne     0x7fffe1272d85
  0x00007fffe1272d61: or      $0x1,%rax
  0x00007fffe1272d65: mov     %rax,(%rbx)
  0x00007fffe1272d68: lock cmpxchg %rbx,(%rdi)
  0x00007fffe1272d6d: je      0x7fffe1272d9e
  0x00007fffe1272d73: sub     %rsp,%rax
  0x00007fffe1272d76: and     $0xfffffffffffff007,%rax
  0x00007fffe1272d7d: mov     %rax,(%rbx)
  0x00007fffe1272d80: jmpq    0x7fffe1272d9e
  0x00007fffe1272d85: movq    $0x3,(%rbx)
  0x00007fffe1272d8c: mov     %rax,%rbx
  0x00007fffe1272d8f: mov     0x16(%rbx),%rax
  0x00007fffe1272d93: test    %rax,%rax
  0x00007fffe1272d96: jne     0x7fffe1272d9e
  0x00007fffe1272d98: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1272d9e: je      0x7fffe127270b
  ;; B127: #	B45 &lt;- B131 B126  Freq: 1.99998e-12

  0x00007fffe1272da4: mov     %rdi,0x38(%rsp)
  0x00007fffe1272da9: mov     0x40(%rsp),%r8d
  0x00007fffe1272dae: mov     %r8d,0x34(%rsp)
  0x00007fffe1272db3: mov     %r13d,0x14(%rsp)
  0x00007fffe1272db8: mov     %r14,0x28(%rsp)
  0x00007fffe1272dbd: vmovsd  %xmm0,0x20(%rsp)
  0x00007fffe1272dc3: mov     %r10,0x18(%rsp)
  0x00007fffe1272dc8: mov     0x8(%rsp),%r10
  0x00007fffe1272dcd: mov     %r10,(%rsp)
  0x00007fffe1272dd1: mov     %rdi,%rsi
  0x00007fffe1272dd4: lea     0x80(%rsp),%rdx
  0x00007fffe1272ddc: nop
  0x00007fffe1272ddd: nop
  0x00007fffe1272dde: nop
  0x00007fffe1272ddf: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [20]=NarrowOop [24]=Oop [52]=NarrowOop [56]=Oop off=2724}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1272de4: mov     0x18(%rsp),%r10
  0x00007fffe1272de9: vmovsd  0x20(%rsp),%xmm0
  0x00007fffe1272def: mov     0x28(%rsp),%r14
  0x00007fffe1272df4: mov     0x14(%rsp),%r13d
  0x00007fffe1272df9: mov     0x34(%rsp),%r11d
  0x00007fffe1272dfe: mov     %r11d,0x40(%rsp)
  0x00007fffe1272e03: mov     0x38(%rsp),%r11
  0x00007fffe1272e08: mov     %r11,%rdi
  0x00007fffe1272e0b: jmpq    0x7fffe127270b
  ;; B128: #	B125 B129 &lt;- B44  Freq: 9.99992e-07

  0x00007fffe1272e10: test    $0x7,%r9
  0x00007fffe1272e17: jne     0x7fffe1272d44
  ;; B129: #	B131 B130 &lt;- B128  Freq: 9.99991e-07

  0x00007fffe1272e1d: test    $0x300,%r9
  0x00007fffe1272e24: jne     0x7fffe1272e33
  ;; B130: #	B131 &lt;- B129  Freq: 9.9999e-07

  0x00007fffe1272e26: and     $0x37f,%rax
  0x00007fffe1272e2d: mov     %rax,%r8
  0x00007fffe1272e30: or      %r15,%r8
  ;; B131: #	B127 B132 &lt;- B130 B129  Freq: 9.99991e-07

  0x00007fffe1272e33: mov     0x40(%rsp),%r11d
  0x00007fffe1272e38: lock cmpxchg %r8,(%r11)
  0x00007fffe1272e3d: jne     0x7fffe1272da4
  ;; B132: #	B45 &lt;- B131  Freq: 9.9999e-07

  0x00007fffe1272e43: jmpq    0x7fffe127270b
  ;; B133: #	B221 B134 &lt;- B49 B48  Freq: 1.99998e-06

  0x00007fffe1272e48: mov     %rdi,0x28(%rsp)
  0x00007fffe1272e4d: mov     0x40(%rsp),%r11d
  0x00007fffe1272e52: mov     %r11d,0x20(%rsp)
  0x00007fffe1272e57: mov     %r13d,0x4(%rsp)
  0x00007fffe1272e5c: mov     %r14,0x18(%rsp)
  0x00007fffe1272e61: mov     %r10,0x10(%rsp)
  0x00007fffe1272e66: mov     0x30(%rsp),%r11d
  0x00007fffe1272e6b: mov     %r11d,(%rsp)
  0x00007fffe1272e6f: mov     %r10,%rsi
  0x00007fffe1272e72: xor     %edx,%edx
  0x00007fffe1272e74: mov     0x30(%rsp),%r9d
  0x00007fffe1272e79: nop
  0x00007fffe1272e7a: nop
  0x00007fffe1272e7b: callq   0x7fffe1169ba0    ; OopMap{rbp=Oop [4]=NarrowOop [8]=Oop [16]=Oop [32]=NarrowOop [40]=Oop off=2880}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B134: #	B51 &lt;- B133  Freq: 1.99994e-06

  0x00007fffe1272e80: mov     (%rsp),%r11d
  0x00007fffe1272e84: mov     %r11d,0x30(%rsp)
  0x00007fffe1272e89: mov     0x10(%rsp),%r10
  0x00007fffe1272e8e: mov     %r10,0x48(%rsp)
  0x00007fffe1272e93: mov     0x18(%rsp),%r14
  0x00007fffe1272e98: mov     0x4(%rsp),%r13d
  0x00007fffe1272e9d: mov     0x20(%rsp),%r10d
  0x00007fffe1272ea2: mov     %r10d,0x40(%rsp)
  0x00007fffe1272ea7: mov     0x28(%rsp),%r10
  0x00007fffe1272eac: mov     %r10,(%rsp)
  0x00007fffe1272eb0: jmpq    0x7fffe1272779
  ;; B135: #	B53 B136 &lt;- B52  Freq: 9.9999e-07

  0x00007fffe1272eb5: lea     0x80(%rsp),%rax
  0x00007fffe1272ebd: mov     (%rsp),%r11
  0x00007fffe1272ec1: cmpq    $0x0,(%rax)
  0x00007fffe1272ec8: je      0x7fffe1272f42
  0x00007fffe1272ece: mov     (%r11),%r10
  0x00007fffe1272ed1: test    $0x2,%r10
  0x00007fffe1272ed8: je      0x7fffe1272f3a
  0x00007fffe1272eda: mov     0x16(%r10),%rax
  0x00007fffe1272ede: xor     %r15,%rax
  0x00007fffe1272ee1: or      0x26(%r10),%rax
  0x00007fffe1272ee5: jne     0x7fffe1272f42
  0x00007fffe1272ee7: mov     0x36(%r10),%rax
  0x00007fffe1272eeb: or      0x3e(%r10),%rax
  0x00007fffe1272eef: jne     0x7fffe1272efb
  0x00007fffe1272ef1: movq    $0x0,0x16(%r10)
  0x00007fffe1272ef9: jmp     0x7fffe1272f42
  0x00007fffe1272efb: cmpq    $0x0,0x46(%r10)
  0x00007fffe1272f03: je      0x7fffe1272f2e
  0x00007fffe1272f05: movq    $0x0,0x16(%r10)
  0x00007fffe1272f0d: lock addl $0x0,(%rsp)
  0x00007fffe1272f12: cmpq    $0x0,0x46(%r10)
  0x00007fffe1272f1a: jne     0x7fffe1272f33
  0x00007fffe1272f1c: movabs  $0x0,%rax
  0x00007fffe1272f26: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1272f2c: jne     0x7fffe1272f33
  0x00007fffe1272f2e: or      $0x1,%eax
  0x00007fffe1272f31: jmp     0x7fffe1272f42
  0x00007fffe1272f33: test    $0x0,%eax
  0x00007fffe1272f38: jmp     0x7fffe1272f42
  0x00007fffe1272f3a: mov     (%rax),%r10
  0x00007fffe1272f3d: lock cmpxchg %r10,(%r11)
  0x00007fffe1272f42: je      0x7fffe12727ab
  ;; B136: #	B53 &lt;- B135  Freq: 9.9999e-13

  0x00007fffe1272f48: mov     (%rsp),%rdi
  0x00007fffe1272f4c: lea     0x80(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272f54: movabs  $0x7ffff744655c,%r10
  0x00007fffe1272f5e: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1272f61: jmpq    0x7fffe12727ab
  ;; B137: #	B138 &lt;- B140  Freq: 9.99939e-13

  0x00007fffe1272f66: lock cmpxchg %r10,(%rcx)
  ;; B138: #	B68 B139 &lt;- B66 B137  Freq: 9.99941e-07

  0x00007fffe1272f6b: lea     0x80(%rsp),%rbx
  0x00007fffe1272f73: mov     (%rsi),%rax
  0x00007fffe1272f76: test    $0x2,%rax
  0x00007fffe1272f7c: jne     0x7fffe1272fa2
  0x00007fffe1272f7e: or      $0x1,%rax
  0x00007fffe1272f82: mov     %rax,(%rbx)
  0x00007fffe1272f85: lock cmpxchg %rbx,(%rsi)
  0x00007fffe1272f8a: je      0x7fffe1272fbb
  0x00007fffe1272f90: sub     %rsp,%rax
  0x00007fffe1272f93: and     $0xfffffffffffff007,%rax
  0x00007fffe1272f9a: mov     %rax,(%rbx)
  0x00007fffe1272f9d: jmpq    0x7fffe1272fbb
  0x00007fffe1272fa2: movq    $0x3,(%rbx)
  0x00007fffe1272fa9: mov     %rax,%rbx
  0x00007fffe1272fac: mov     0x16(%rbx),%rax
  0x00007fffe1272fb0: test    %rax,%rax
  0x00007fffe1272fb3: jne     0x7fffe1272fbb
  0x00007fffe1272fb5: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1272fbb: je      0x7fffe1272893
  ;; B139: #	B68 &lt;- B143 B138  Freq: 1.99988e-12

  0x00007fffe1272fc1: mov     %rdx,0x20(%rsp)
  0x00007fffe1272fc6: mov     %rsi,0x10(%rsp)
  0x00007fffe1272fcb: mov     %ecx,0xc(%rsp)
  0x00007fffe1272fcf: mov     %r11d,0x8(%rsp)
  0x00007fffe1272fd4: mov     %r9d,0x4(%rsp)
  0x00007fffe1272fd9: mov     %ebp,(%rsp)
  0x00007fffe1272fdc: mov     %r13,%rbp
  0x00007fffe1272fdf: lea     0x80(%rsp),%rdx
  0x00007fffe1272fe7: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=NarrowOop [4]=NarrowOop [12]=NarrowOop [16]=Oop [32]=Oop [80]=Oop off=3244}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1272fec: mov     %rbp,%r13
  0x00007fffe1272fef: mov     (%rsp),%ebp
  0x00007fffe1272ff2: mov     0x4(%rsp),%r9d
  0x00007fffe1272ff7: mov     0x8(%rsp),%r11d
  0x00007fffe1272ffc: mov     0xc(%rsp),%ecx
  0x00007fffe1273000: mov     0x10(%rsp),%rsi
  0x00007fffe1273005: mov     0x20(%rsp),%rdx
  0x00007fffe127300a: jmpq    0x7fffe1272893
  ;; B140: #	B137 B141 &lt;- B67  Freq: 9.99939e-07

  0x00007fffe127300f: test    $0x7,%rbx
  0x00007fffe1273016: jne     0x7fffe1272f66
  ;; B141: #	B143 B142 &lt;- B140  Freq: 9.99938e-07

  0x00007fffe127301c: test    $0x300,%rbx
  0x00007fffe1273023: jne     0x7fffe1273032
  ;; B142: #	B143 &lt;- B141  Freq: 9.99937e-07

  0x00007fffe1273025: and     $0x37f,%rax
  0x00007fffe127302c: mov     %rax,%r8
  0x00007fffe127302f: or      %r15,%r8
  ;; B143: #	B139 B144 &lt;- B142 B141  Freq: 9.99938e-07

  0x00007fffe1273032: lock cmpxchg %r8,(%rcx)
  0x00007fffe1273037: jne     0x7fffe1272fc1
  ;; B144: #	B68 &lt;- B143  Freq: 9.99937e-07

  0x00007fffe1273039: jmpq    0x7fffe1272893
  ;; B145: #	B81 B146 &lt;- B80  Freq: 9.99938e-07

  0x00007fffe127303e: lea     0x80(%rsp),%rax
  0x00007fffe1273046: cmpq    $0x0,(%rax)
  0x00007fffe127304d: je      0x7fffe12730c7
  0x00007fffe1273053: mov     (%rsi),%r10
  0x00007fffe1273056: test    $0x2,%r10
  0x00007fffe127305d: je      0x7fffe12730bf
  0x00007fffe127305f: mov     0x16(%r10),%rax
  0x00007fffe1273063: xor     %r15,%rax
  0x00007fffe1273066: or      0x26(%r10),%rax
  0x00007fffe127306a: jne     0x7fffe12730c7
  0x00007fffe127306c: mov     0x36(%r10),%rax
  0x00007fffe1273070: or      0x3e(%r10),%rax
  0x00007fffe1273074: jne     0x7fffe1273080
  0x00007fffe1273076: movq    $0x0,0x16(%r10)
  0x00007fffe127307e: jmp     0x7fffe12730c7
  0x00007fffe1273080: cmpq    $0x0,0x46(%r10)
  0x00007fffe1273088: je      0x7fffe12730b3
  0x00007fffe127308a: movq    $0x0,0x16(%r10)
  0x00007fffe1273092: lock addl $0x0,(%rsp)
  0x00007fffe1273097: cmpq    $0x0,0x46(%r10)
  0x00007fffe127309f: jne     0x7fffe12730b8
  0x00007fffe12730a1: movabs  $0x0,%rax
  0x00007fffe12730ab: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12730b1: jne     0x7fffe12730b8
  0x00007fffe12730b3: or      $0x1,%eax
  0x00007fffe12730b6: jmp     0x7fffe12730c7
  0x00007fffe12730b8: test    $0x0,%eax
  0x00007fffe12730bd: jmp     0x7fffe12730c7
  0x00007fffe12730bf: mov     (%rax),%r10
  0x00007fffe12730c2: lock cmpxchg %r10,(%rsi)
  0x00007fffe12730c7: je      0x7fffe1272974
  ;; B146: #	B81 &lt;- B145  Freq: 9.99938e-13

  0x00007fffe12730cd: mov     %rsi,%rdi
  0x00007fffe12730d0: lea     0x80(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12730d8: movabs  $0x7ffff744655c,%r10
  0x00007fffe12730e2: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe12730e5: jmpq    0x7fffe1272974
  ;; B147: #	N3233 &lt;- B87  Freq: 9.99894e-07

  0x00007fffe12730ea: mov     $0xffffffde,%esi
  0x00007fffe12730ef: mov     %r11d,0x18(%rsp)
  0x00007fffe12730f4: nop
  0x00007fffe12730f5: nop
  0x00007fffe12730f6: nop
  0x00007fffe12730f7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [24]=NarrowOop off=3516}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12730fc: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B148: #	B149 &lt;- B151  Freq: 9.99892e-13

  0x00007fffe1273101: lock cmpxchg %r10,(%r9)
  ;; B149: #	B90 B150 &lt;- B88 B148  Freq: 9.99894e-07

  0x00007fffe1273106: lea     0x80(%rsp),%rbx
  0x00007fffe127310e: mov     (%r9),%rax
  0x00007fffe1273111: test    $0x2,%rax
  0x00007fffe1273117: jne     0x7fffe127313d
  0x00007fffe1273119: or      $0x1,%rax
  0x00007fffe127311d: mov     %rax,(%rbx)
  0x00007fffe1273120: lock cmpxchg %rbx,(%r9)
  0x00007fffe1273125: je      0x7fffe1273156
  0x00007fffe127312b: sub     %rsp,%rax
  0x00007fffe127312e: and     $0xfffffffffffff007,%rax
  0x00007fffe1273135: mov     %rax,(%rbx)
  0x00007fffe1273138: jmpq    0x7fffe1273156
  0x00007fffe127313d: movq    $0x3,(%rbx)
  0x00007fffe1273144: mov     %rax,%rbx
  0x00007fffe1273147: mov     0x16(%rbx),%rax
  0x00007fffe127314b: test    %rax,%rax
  0x00007fffe127314e: jne     0x7fffe1273156
  0x00007fffe1273150: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe1273156: je      0x7fffe1272a1a
  ;; B150: #	B90 &lt;- B154 B149  Freq: 1.99979e-12

  0x00007fffe127315c: mov     %r9,(%rsp)
  0x00007fffe1273160: mov     %r9,%rsi
  0x00007fffe1273163: lea     0x80(%rsp),%rdx
  0x00007fffe127316b: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=Oop [8]=Oop off=3632}
                                                ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273170: mov     (%rsp),%r9
  0x00007fffe1273174: jmpq    0x7fffe1272a1a
  ;; B151: #	B148 B152 &lt;- B89  Freq: 9.99892e-07

  0x00007fffe1273179: test    $0x7,%r8
  0x00007fffe1273180: jne     0x7fffe1273101
  ;; B152: #	B154 B153 &lt;- B151  Freq: 9.99891e-07

  0x00007fffe1273186: test    $0x300,%r8
  0x00007fffe127318d: jne     0x7fffe127319c
  ;; B153: #	B154 &lt;- B152  Freq: 9.9989e-07

  0x00007fffe127318f: and     $0x37f,%rax
  0x00007fffe1273196: mov     %rax,%r11
  0x00007fffe1273199: or      %r15,%r11
  ;; B154: #	B150 B155 &lt;- B153 B152  Freq: 9.99891e-07

  0x00007fffe127319c: lock cmpxchg %r11,(%r9)
  0x00007fffe12731a1: jne     0x7fffe127315c
  ;; B155: #	B90 &lt;- B154  Freq: 9.9989e-07

  0x00007fffe12731a3: jmpq    0x7fffe1272a1a
  ;; B156: #	N3233 &lt;- B98  Freq: 9.99878e-07

  0x00007fffe12731a8: mov     $0xffffffde,%esi
  0x00007fffe12731ad: mov     %r10d,0x20(%rsp)
  0x00007fffe12731b2: mov     %r9,0x28(%rsp)
  0x00007fffe12731b7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=NarrowOop [40]=Oop off=3708}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12731bc: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B157: #	B100 B158 &lt;- B99  Freq: 9.99877e-07

  0x00007fffe12731c1: lea     0x80(%rsp),%rax
  0x00007fffe12731c9: cmpq    $0x0,(%rax)
  0x00007fffe12731d0: je      0x7fffe127324a
  0x00007fffe12731d6: mov     (%r9),%r10
  0x00007fffe12731d9: test    $0x2,%r10
  0x00007fffe12731e0: je      0x7fffe1273242
  0x00007fffe12731e2: mov     0x16(%r10),%rax
  0x00007fffe12731e6: xor     %r15,%rax
  0x00007fffe12731e9: or      0x26(%r10),%rax
  0x00007fffe12731ed: jne     0x7fffe127324a
  0x00007fffe12731ef: mov     0x36(%r10),%rax
  0x00007fffe12731f3: or      0x3e(%r10),%rax
  0x00007fffe12731f7: jne     0x7fffe1273203
  0x00007fffe12731f9: movq    $0x0,0x16(%r10)
  0x00007fffe1273201: jmp     0x7fffe127324a
  0x00007fffe1273203: cmpq    $0x0,0x46(%r10)
  0x00007fffe127320b: je      0x7fffe1273236
  0x00007fffe127320d: movq    $0x0,0x16(%r10)
  0x00007fffe1273215: lock addl $0x0,(%rsp)
  0x00007fffe127321a: cmpq    $0x0,0x46(%r10)
  0x00007fffe1273222: jne     0x7fffe127323b
  0x00007fffe1273224: movabs  $0x0,%rax
  0x00007fffe127322e: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1273234: jne     0x7fffe127323b
  0x00007fffe1273236: or      $0x1,%eax
  0x00007fffe1273239: jmp     0x7fffe127324a
  0x00007fffe127323b: test    $0x0,%eax
  0x00007fffe1273240: jmp     0x7fffe127324a
  0x00007fffe1273242: mov     (%rax),%r10
  0x00007fffe1273245: lock cmpxchg %r10,(%r9)
  0x00007fffe127324a: je      0x7fffe1272b2d
  ;; B158: #	B100 &lt;- B157  Freq: 9.99877e-13

  0x00007fffe1273250: mov     %r9,%rdi
  0x00007fffe1273253: lea     0x80(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe127325b: movabs  $0x7ffff744655c,%r10
  0x00007fffe1273265: callq   %r10              ;*return
                                                ; - java.io.BufferedOutputStream::flush@11 (line 142)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1273268: jmpq    0x7fffe1272b2d
  ;; B159: #	B101 B160 &lt;- B100  Freq: 9.99877e-07

  0x00007fffe127326d: lea     0x70(%rsp),%rax
  0x00007fffe1273272: cmpq    $0x0,(%rax)
  0x00007fffe1273279: je      0x7fffe12732f5
  0x00007fffe127327f: mov     0x0(%rbp),%r10
  0x00007fffe1273283: test    $0x2,%r10
  0x00007fffe127328a: je      0x7fffe12732ec
  0x00007fffe127328c: mov     0x16(%r10),%rax
  0x00007fffe1273290: xor     %r15,%rax
  0x00007fffe1273293: or      0x26(%r10),%rax
  0x00007fffe1273297: jne     0x7fffe12732f5
  0x00007fffe1273299: mov     0x36(%r10),%rax
  0x00007fffe127329d: or      0x3e(%r10),%rax
  0x00007fffe12732a1: jne     0x7fffe12732ad
  0x00007fffe12732a3: movq    $0x0,0x16(%r10)
  0x00007fffe12732ab: jmp     0x7fffe12732f5
  0x00007fffe12732ad: cmpq    $0x0,0x46(%r10)
  0x00007fffe12732b5: je      0x7fffe12732e0
  0x00007fffe12732b7: movq    $0x0,0x16(%r10)
  0x00007fffe12732bf: lock addl $0x0,(%rsp)
  0x00007fffe12732c4: cmpq    $0x0,0x46(%r10)
  0x00007fffe12732cc: jne     0x7fffe12732e5
  0x00007fffe12732ce: movabs  $0x0,%rax
  0x00007fffe12732d8: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12732de: jne     0x7fffe12732e5
  0x00007fffe12732e0: or      $0x1,%eax
  0x00007fffe12732e3: jmp     0x7fffe12732f5
  0x00007fffe12732e5: test    $0x0,%eax
  0x00007fffe12732ea: jmp     0x7fffe12732f5
  0x00007fffe12732ec: mov     (%rax),%r10
  0x00007fffe12732ef: lock cmpxchg %r10,0x0(%rbp)
  0x00007fffe12732f5: je      0x7fffe1272b40
  ;; B160: #	B101 &lt;- B159  Freq: 9.99877e-13

  0x00007fffe12732fb: mov     %rbp,%rdi
  0x00007fffe12732fe: lea     0x70(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)

  0x00007fffe1273303: movabs  $0x7ffff744655c,%r10
  0x00007fffe127330d: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)

  0x00007fffe1273310: jmpq    0x7fffe1272b40
  ;; B161: #	B162 &lt;- B96  Freq: 6.75404e-07

  0x00007fffe1273315: mov     0x8(%rsp),%rbp
  ;; B162: #	N3233 &lt;- B161 B91  Freq: 1.01316e-06

  0x00007fffe127331a: mov     $0xfffffff6,%esi
  0x00007fffe127331f: mov     %r9,0x20(%rsp)
  0x00007fffe1273324: nop
  0x00007fffe1273325: nop
  0x00007fffe1273326: nop
  0x00007fffe1273327: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=Oop off=4076}
                                                ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe127332c: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.BufferedOutputStream::flush@8 (line 141)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B163: #	N3233 &lt;- B94  Freq: 6.66567e-07

  0x00007fffe1273331: mov     $0xffffffde,%esi
  0x00007fffe1273336: mov     %r9,0x28(%rsp)
  0x00007fffe127333b: mov     %r9,0x30(%rsp)
  0x00007fffe1273340: mov     %r10d,0x38(%rsp)
  0x00007fffe1273345: mov     %r11d,0x3c(%rsp)
  0x00007fffe127334a: mov     %r8d,0x40(%rsp)
  0x00007fffe127334f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=Oop [48]=Oop [56]=NarrowOop [60]=NarrowOop off=4116}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273354: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B164: #	B228 B165 &lt;- B76 B74 B75  Freq: 1.4999e-06

  0x00007fffe1273359: mov     0x50(%rsp),%rbp
  0x00007fffe127335e: mov     %rdx,(%rsp)
  0x00007fffe1273362: mov     %r11,%rsi
  0x00007fffe1273365: xor     %edx,%edx
  0x00007fffe1273367: mov     0x30(%rsp),%r9d
  0x00007fffe127336c: nop
  0x00007fffe127336d: nop
  0x00007fffe127336e: nop
  0x00007fffe127336f: callq   0x7fffe1169ba0    ; OopMap{rbp=Oop [0]=Oop [8]=Oop [16]=NarrowOop [32]=Oop [40]=NarrowOop [44]=NarrowOop off=4148}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B165: #	B78 &lt;- B164  Freq: 1.49987e-06

  0x00007fffe1273374: jmpq    0x7fffe1272935
  ;; B166: #	B167 &lt;- B32  Freq: 3.33305e-07

  0x00007fffe1273379: mov     %r11d,%r8d
  ;; B167: #	B168 &lt;- B166 B193 B197  Freq: 3.33305e-07

  0x00007fffe127337c: mov     %r8d,%r11d
  ;; B168: #	N3233 &lt;- B196 B34 B167  Freq: 8.15761e-07

  0x00007fffe127337f: mov     $0xffffffe4,%esi
  0x00007fffe1273384: mov     0x8(%rsp),%rbp
  0x00007fffe1273389: mov     %r10,0x20(%rsp)
  0x00007fffe127338e: mov     %r11d,0x28(%rsp)
  0x00007fffe1273393: mov     %r10,0x30(%rsp)
  0x00007fffe1273398: mov     %edx,0x38(%rsp)
  0x00007fffe127339c: mov     %ecx,0x3c(%rsp)
  0x00007fffe12733a0: nop
  0x00007fffe12733a1: nop
  0x00007fffe12733a2: nop
  0x00007fffe12733a3: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=Oop [48]=Oop off=4200}
                                                ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12733a8: callq   0x7ffff736b4ea    ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B169: #	N3233 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe12733ad: mov     $0xffffff65,%esi
  0x00007fffe12733b2: mov     0x8(%rsp),%rbp
  0x00007fffe12733b7: mov     %r8d,0x1c(%rsp)
  0x00007fffe12733bc: nop
  0x00007fffe12733bd: nop
  0x00007fffe12733be: nop
  0x00007fffe12733bf: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=4228}
                                                ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12733c4: callq   0x7ffff736b4ea    ;*if_icmpne
                                                ; - java.lang.Integer::toString@3 (line 398)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B170: #	N3233 &lt;- B4  Freq: 4.76837e-07

  0x00007fffe12733c9: mov     $0xffffff65,%esi
  0x00007fffe12733ce: mov     0x8(%rsp),%rbp
  0x00007fffe12733d3: mov     %r8d,0x1c(%rsp)
  0x00007fffe12733d8: nop
  0x00007fffe12733d9: nop
  0x00007fffe12733da: nop
  0x00007fffe12733db: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=4256}
                                                ;*ifge
                                                ; - java.lang.Integer::toString@10 (line 400)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12733e0: callq   0x7ffff736b4ea    ;*ifge
                                                ; - java.lang.Integer::getChars@7 (line 438)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B171: #	N3233 &lt;- B27  Freq: 4.76837e-07

  0x00007fffe12733e5: mov     $0xffffff65,%esi
  0x00007fffe12733ea: mov     0x8(%rsp),%rbp
  0x00007fffe12733ef: mov     %r10,0x28(%rsp)
  0x00007fffe12733f4: mov     0x30(%rsp),%r10d
  0x00007fffe12733f9: mov     %r10d,0x24(%rsp)
  0x00007fffe12733fe: mov     %r8d,0x30(%rsp)
  0x00007fffe1273403: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=Oop off=4296}
                                                ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273408: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.lang.Integer::getChars@20 (line 444)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B172: #	N3233 &lt;- B40  Freq: 4.76835e-07

  0x00007fffe127340d: mov     $0xffffff65,%esi
  0x00007fffe1273412: mov     0x8(%rsp),%rbp
  0x00007fffe1273417: mov     %r11d,0x28(%rsp)
  0x00007fffe127341c: mov     %r10,0x30(%rsp)
  0x00007fffe1273421: nop
  0x00007fffe1273422: nop
  0x00007fffe1273423: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=NarrowOop [48]=Oop off=4328}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273428: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B173: #	N3233 &lt;- B45  Freq: 4.76834e-07

  0x00007fffe127342d: mov     $0xffffff65,%esi
  0x00007fffe1273432: mov     0x8(%rsp),%rbp
  0x00007fffe1273437: mov     %r13d,0x28(%rsp)
  0x00007fffe127343c: mov     0x30(%rsp),%r9d
  0x00007fffe1273441: mov     %r9d,0x2c(%rsp)
  0x00007fffe1273446: mov     0x40(%rsp),%r8d
  0x00007fffe127344b: mov     %r8d,0x34(%rsp)
  0x00007fffe1273450: mov     %r11d,0x38(%rsp)
  0x00007fffe1273455: mov     %r10,0x40(%rsp)
  0x00007fffe127345a: nop
  0x00007fffe127345b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=NarrowOop [52]=NarrowOop [56]=NarrowOop [64]=Oop off=4384}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273460: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B174: #	N3233 &lt;- B46  Freq: 4.76833e-07

  0x00007fffe1273465: mov     $0xffffff65,%esi
  0x00007fffe127346a: mov     0x8(%rsp),%rbp
  0x00007fffe127346f: mov     %r13d,0x28(%rsp)
  0x00007fffe1273474: mov     0x40(%rsp),%r9d
  0x00007fffe1273479: mov     %r9d,0x34(%rsp)
  0x00007fffe127347e: mov     %r11d,0x40(%rsp)
  0x00007fffe1273483: mov     %r10,0x48(%rsp)
  0x00007fffe1273488: nop
  0x00007fffe1273489: nop
  0x00007fffe127348a: nop
  0x00007fffe127348b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=NarrowOop [52]=NarrowOop [72]=Oop off=4432}
                                                ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273490: callq   0x7ffff736b4ea    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B175: #	N3233 &lt;- B51  Freq: 4.76833e-07

  0x00007fffe1273495: mov     $0xffffff65,%esi
  0x00007fffe127349a: mov     0x8(%rsp),%rbp
  0x00007fffe127349f: mov     %r13d,0x28(%rsp)
  0x00007fffe12734a4: mov     %r10d,0x38(%rsp)
  0x00007fffe12734a9: mov     %r8d,0x3c(%rsp)
  0x00007fffe12734ae: nop
  0x00007fffe12734af: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=NarrowOop [64]=NarrowOop [72]=Oop off=4468}
                                                ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12734b4: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B176: #	N3233 &lt;- B57  Freq: 4.76812e-07

  0x00007fffe12734b9: mov     $0xffffff65,%esi
  0x00007fffe12734be: mov     %r11d,0x20(%rsp)
  0x00007fffe12734c3: callq   0x7fffe1107820    ; OopMap{rbp=Oop [72]=Oop off=4488}
                                                ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12734c8: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B177: #	N3233 &lt;- B61  Freq: 4.76811e-07

  0x00007fffe12734cd: mov     $0xffffff65,%esi
  0x00007fffe12734d2: mov     %r13,%rbp
  0x00007fffe12734d5: mov     %r11d,0x20(%rsp)
  0x00007fffe12734da: nop
  0x00007fffe12734db: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=NarrowOop off=4512}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12734e0: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::newLine@5 (line 543)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B178: #	N3233 &lt;- B68  Freq: 4.76809e-07

  0x00007fffe12734e5: mov     $0xffffff65,%esi
  0x00007fffe12734ea: mov     %r13,0x8(%rsp)
  0x00007fffe12734ef: mov     %r13,0x10(%rsp)
  0x00007fffe12734f4: mov     %r9d,0x28(%rsp)
  0x00007fffe12734f9: mov     %r11d,0x2c(%rsp)
  0x00007fffe12734fe: mov     %ecx,0x34(%rsp)
  0x00007fffe1273502: mov     %r10d,0x38(%rsp)
  0x00007fffe1273507: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=NarrowOop [52]=NarrowOop [56]=NarrowOop off=4556}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe127350c: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B179: #	N3233 &lt;- B85  Freq: 4.76788e-07

  0x00007fffe1273511: mov     $0xffffff65,%esi
  0x00007fffe1273516: mov     %r10d,0x18(%rsp)
  0x00007fffe127351b: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=4576}
                                                ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273520: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::newLine@33 (line 547)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B180: #	B183 &lt;- B31  Freq: 3.37732e-07

  0x00007fffe1273525: mov     %r11d,%r8d
  0x00007fffe1273528: jmp     0x7fffe1273536
  ;; B181: #	B182 &lt;- B36  Freq: 1.60806e-07

  0x00007fffe127352a: mov     %r9d,%edx
  0x00007fffe127352d: mov     %ebx,%r11d        ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B182: #	B183 &lt;- B181 B105  Freq: 1.68845e-07

  0x00007fffe1273530: mov     %r11d,%r8d
  0x00007fffe1273533: mov     %rbp,%r10
  ;; B183: #	N3233 &lt;- B180 B192 B182  Freq: 5.06577e-07

  0x00007fffe1273536: mov     $0xffffffe4,%esi
  0x00007fffe127353b: mov     0x8(%rsp),%rbp
  0x00007fffe1273540: mov     %r10,0x20(%rsp)
  0x00007fffe1273545: mov     %r10,0x30(%rsp)
  0x00007fffe127354a: mov     %edx,0x2c(%rsp)
  0x00007fffe127354e: mov     %r8d,0x38(%rsp)
  0x00007fffe1273553: mov     %ecx,0x3c(%rsp)
  0x00007fffe1273557: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=Oop [48]=Oop off=4636}
                                                ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe127355c: callq   0x7ffff736b4ea    ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B184: #	N3233 &lt;- B70  Freq: 2.38404e-07

  0x00007fffe1273561: mov     $0xffffff65,%esi
  0x00007fffe1273566: mov     %r13,0x8(%rsp)
  0x00007fffe127356b: mov     %r13,0x10(%rsp)
  0x00007fffe1273570: mov     %r9d,0x28(%rsp)
  0x00007fffe1273575: mov     %ecx,0x34(%rsp)
  0x00007fffe1273579: mov     %r11d,0x3c(%rsp)
  0x00007fffe127357e: mov     %r10d,0x40(%rsp)
  0x00007fffe1273583: mov     %r11d,0x44(%rsp)
  0x00007fffe1273588: nop
  0x00007fffe1273589: nop
  0x00007fffe127358a: nop
  0x00007fffe127358b: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=NarrowOop [52]=NarrowOop off=4688}
                                                ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273590: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B185: #	N3233 &lt;- B72  Freq: 2.38404e-07

  0x00007fffe1273595: mov     $0xffffff65,%esi
  0x00007fffe127359a: mov     %r13,0x8(%rsp)
  0x00007fffe127359f: mov     %r13,0x10(%rsp)
  0x00007fffe12735a4: mov     %r11d,0x34(%rsp)
  0x00007fffe12735a9: mov     %ecx,0x38(%rsp)
  0x00007fffe12735ad: mov     %r9d,0x3c(%rsp)
  0x00007fffe12735b2: mov     %r11d,0x40(%rsp)
  0x00007fffe12735b7: mov     %eax,0x44(%rsp)
  0x00007fffe12735bb: mov     %r8d,0x48(%rsp)
  0x00007fffe12735c0: mov     %ebx,0x50(%rsp)
  0x00007fffe12735c4: nop
  0x00007fffe12735c5: nop
  0x00007fffe12735c6: nop
  0x00007fffe12735c7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [56]=NarrowOop [60]=NarrowOop [68]=NarrowOop off=4748}
                                                ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12735cc: callq   0x7ffff736b4ea    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B186: #	N3233 &lt;- B78  Freq: 2.38403e-07

  0x00007fffe12735d1: mov     $0xffffff65,%esi
  0x00007fffe12735d6: mov     %r10d,0x38(%rsp)
  0x00007fffe12735db: mov     %r9d,0x3c(%rsp)
  0x00007fffe12735e0: nop
  0x00007fffe12735e1: nop
  0x00007fffe12735e2: nop
  0x00007fffe12735e3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [40]=NarrowOop [44]=NarrowOop off=4776}
                                                ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12735e8: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B187: #	B188 &lt;- B102  Freq: 1.60806e-08

  0x00007fffe12735ed: mov     %ebx,%r11d
  0x00007fffe12735f0: mov     %edx,%r8d
  0x00007fffe12735f3: mov     %r9d,%edx
  0x00007fffe12735f6: mov     %r8d,%r9d
  ;; B188: #	B197 B189 &lt;- B187 B106  Freq: 2.41199e-08

  0x00007fffe12735f9: cmp     $0xffffffff,%edx
  0x00007fffe12735fc: jle     0x7fffe1273695    ;*iload_0
                                                ; - java.lang.Integer::getChars@75 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B189: #	B190 &lt;- B188  Freq: 2.41198e-08

  ;; B190: #	B196 B191 &lt;- B189 B194 	Loop: B190-B194 inner post of N2819 Freq: 3.61783e-08

  0x00007fffe1273602: cmp     0x30(%rsp),%edx
  0x00007fffe1273606: jnb     0x7fffe127368d
  ;; B191: #	B40 B192 &lt;- B190  Freq: 3.61782e-08

  0x00007fffe127360c: mov     %rbp,%r10
  0x00007fffe127360f: mov     %cx,0x10(%rbp,%rdx,2)  ;*castore
                                                ; - java.lang.Integer::getChars@106 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273614: test    %r11d,%r11d
  0x00007fffe1273617: je      0x7fffe12726a0    ;*ifne
                                                ; - java.lang.Integer::getChars@110 (line 460)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B192: #	B183 B193 &lt;- B191  Freq: 1.20585e-08

  0x00007fffe127361d: imull   $0xcccd,%r11d,%r8d
  0x00007fffe1273624: decl    %edx              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273626: shr     $0x13,%r8d        ;*iushr
                                                ; - java.lang.Integer::getChars@81 (line 456)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127362a: mov     %r8d,%r9d
  0x00007fffe127362d: shl     $0x3,%r9d         ;*ishl
                                                ; - java.lang.Integer::getChars@86 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273631: mov     %r8d,%esi
  0x00007fffe1273634: shl     $0x1,%esi         ;*ishl
                                                ; - java.lang.Integer::getChars@89 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273636: mov     %esi,%ebx
  0x00007fffe1273638: add     %r9d,%ebx
  0x00007fffe127363b: mov     %r11d,%ecx
  0x00007fffe127363e: sub     %ebx,%ecx         ;*isub
                                                ; - java.lang.Integer::getChars@91 (line 457)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273640: cmp     $0x24,%ecx
  0x00007fffe1273643: jnb     0x7fffe1273536
  ;; B193: #	B167 B194 &lt;- B192  Freq: 1.20584e-08

  0x00007fffe1273649: movsxd  %esi,%rcx
  0x00007fffe127364c: movsxd  %r11d,%r11
  0x00007fffe127364f: movsxd  %r9d,%r9
  0x00007fffe1273652: add     %r9,%rcx
  0x00007fffe1273655: sub     %rcx,%r11
  0x00007fffe1273658: movzwl  0x10(%rdi,%r11,2),%ecx  ;*caload
                                                ; - java.lang.Integer::getChars@105 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127365e: cmp     $0xffffffff,%edx
  0x00007fffe1273661: jle     0x7fffe127337c
  ;; B194: #	B190 &lt;- B193  Freq: 1.20584e-08

  0x00007fffe1273667: mov     %r8d,%r11d
  0x00007fffe127366a: jmp     0x7fffe1273602
  ;; B195: #	N3233 &lt;- B14  Freq: 5.14375e-11

  0x00007fffe127366c: mov     $0xffffffe4,%esi
  0x00007fffe1273671: mov     0x8(%rsp),%rbp
  0x00007fffe1273676: mov     %r8d,0x1c(%rsp)
  0x00007fffe127367b: mov     %r8d,0x20(%rsp)
  0x00007fffe1273680: nop
  0x00007fffe1273681: nop
  0x00007fffe1273682: nop
  0x00007fffe1273683: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=4936}
                                                ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273688: callq   0x7ffff736b4ea    ;*iaload
                                                ; - java.lang.Integer::stringSize@7 (line 473)
                                                ; - java.lang.Integer::toString@24 (line 400)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B196: #	B168 &lt;- B190  Freq: 3.66587e-14

  0x00007fffe127368d: mov     %rbp,%r10
  0x00007fffe1273690: jmpq    0x7fffe127337f
  ;; B197: #	B167 &lt;- B188  Freq: 2.41199e-14

  0x00007fffe1273695: mov     %r9d,%edx
  0x00007fffe1273698: decl    %edx              ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe127369a: mov     %r11d,%r8d
  0x00007fffe127369d: mov     %rbp,%r10
  0x00007fffe12736a0: jmpq    0x7fffe127337c
  ;; B198: #	N3233 &lt;- B41  Freq: 1.01327e-06

  0x00007fffe12736a5: mov     $0xfffffff6,%esi
  0x00007fffe12736aa: mov     0x8(%rsp),%rbp
  0x00007fffe12736af: mov     %r10,0x28(%rsp)
  0x00007fffe12736b4: nop
  0x00007fffe12736b5: nop
  0x00007fffe12736b6: nop
  0x00007fffe12736b7: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=Oop off=4988}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12736bc: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B199: #	N3233 &lt;- B42  Freq: 1.01327e-06

  0x00007fffe12736c1: mov     $0xfffffff6,%esi
  0x00007fffe12736c6: mov     0x8(%rsp),%rbp
  0x00007fffe12736cb: mov     %r13d,0x28(%rsp)
  0x00007fffe12736d0: mov     0x30(%rsp),%r11d
  0x00007fffe12736d5: mov     %r11d,0x2c(%rsp)
  0x00007fffe12736da: mov     %r10,0x30(%rsp)
  0x00007fffe12736df: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=NarrowOop [48]=Oop off=5028}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe12736e4: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B200: #	N3233 &lt;- B47  Freq: 1.01327e-06

  0x00007fffe12736e9: mov     $0xfffffff6,%esi
  0x00007fffe12736ee: mov     0x8(%rsp),%rbp
  0x00007fffe12736f3: mov     %r13d,0x28(%rsp)
  0x00007fffe12736f8: mov     0x40(%rsp),%r9d
  0x00007fffe12736fd: mov     %r9d,0x38(%rsp)
  0x00007fffe1273702: mov     %r8d,0x3c(%rsp)
  0x00007fffe1273707: mov     %r10,0x50(%rsp)
  0x00007fffe127370c: nop
  0x00007fffe127370d: nop
  0x00007fffe127370e: nop
  0x00007fffe127370f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [40]=NarrowOop [56]=NarrowOop [80]=Oop off=5076}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273714: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B201: #	N3233 &lt;- B62  Freq: 1.01322e-06

  0x00007fffe1273719: mov     $0xfffffff6,%esi
  0x00007fffe127371e: mov     %r13,%rbp
  0x00007fffe1273721: nop
  0x00007fffe1273722: nop
  0x00007fffe1273723: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=5096}
                                                ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273728: callq   0x7ffff736b4ea    ;*invokevirtual newLine
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B202: #	N3233 &lt;- B63  Freq: 1.01322e-06

  0x00007fffe127372d: mov     $0xfffffff6,%esi
  0x00007fffe1273732: mov     %r13,%rbp
  0x00007fffe1273735: nop
  0x00007fffe1273736: nop
  0x00007fffe1273737: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=5116}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe127373c: callq   0x7ffff736b4ea    ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B203: #	N3233 &lt;- B64  Freq: 1.01322e-06

  0x00007fffe1273741: mov     $0xfffffff6,%esi
  0x00007fffe1273746: mov     %r13,%rbp
  0x00007fffe1273749: nop
  0x00007fffe127374a: nop
  0x00007fffe127374b: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=5136}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273750: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B204: #	N3233 &lt;- B65  Freq: 1.01322e-06

  0x00007fffe1273755: mov     $0xfffffff6,%esi
  0x00007fffe127375a: mov     %r13,0x8(%rsp)
  0x00007fffe127375f: mov     %r13,0x10(%rsp)
  0x00007fffe1273764: mov     %r9d,0x28(%rsp)
  0x00007fffe1273769: mov     %r11d,0x2c(%rsp)
  0x00007fffe127376e: nop
  0x00007fffe127376f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=NarrowOop off=5172}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273774: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B205: #	N3233 &lt;- B86  Freq: 1.01317e-06

  0x00007fffe1273779: mov     $0xfffffff6,%esi
  0x00007fffe127377e: nop
  0x00007fffe127377f: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=5188}
                                                ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273784: callq   0x7ffff736b4ea    ;*invokevirtual flush
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B206: #	N3233 &lt;- B93  Freq: 6.75419e-07

  0x00007fffe1273789: mov     $0xfffffff6,%esi
  0x00007fffe127378e: mov     %r9,0x20(%rsp)
  0x00007fffe1273793: mov     %r11d,0x28(%rsp)
  0x00007fffe1273798: mov     %r8d,0x2c(%rsp)
  0x00007fffe127379d: nop
  0x00007fffe127379e: nop
  0x00007fffe127379f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [32]=Oop [40]=NarrowOop off=5220}
                                                ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12737a4: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B207: #	N3233 &lt;- B71  Freq: 5.06609e-07

  0x00007fffe12737a9: mov     $0xfffffff6,%esi
  0x00007fffe12737ae: mov     %r13,0x8(%rsp)
  0x00007fffe12737b3: mov     %r13,0x10(%rsp)
  0x00007fffe12737b8: mov     %r9d,0x28(%rsp)
  0x00007fffe12737bd: mov     %r11d,0x34(%rsp)
  0x00007fffe12737c2: mov     %ecx,0x38(%rsp)
  0x00007fffe12737c6: nop
  0x00007fffe12737c7: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=NarrowOop [56]=NarrowOop off=5260}
                                                ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe12737cc: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B208: #	N3233 &lt;- B73  Freq: 5.06608e-07

  0x00007fffe12737d1: mov     $0xfffffff6,%esi
  0x00007fffe12737d6: mov     %r13,0x8(%rsp)
  0x00007fffe12737db: mov     %r13,0x10(%rsp)
  0x00007fffe12737e0: mov     %r9d,0x28(%rsp)
  0x00007fffe12737e5: mov     %r11d,0x34(%rsp)
  0x00007fffe12737ea: mov     %ecx,0x38(%rsp)
  0x00007fffe12737ee: mov     %edi,0x3c(%rsp)
  0x00007fffe12737f2: mov     %r8d,0x40(%rsp)
  0x00007fffe12737f7: mov     %r11d,0x44(%rsp)
  0x00007fffe12737fc: nop
  0x00007fffe12737fd: nop
  0x00007fffe12737fe: nop
  0x00007fffe12737ff: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [40]=NarrowOop [56]=NarrowOop [60]=NarrowOop off=5316}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273804: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B209: #	N3233 &lt;- B234  Freq: 2.66642e-10

  0x00007fffe1273809: mov     $0xffffffbd,%esi
  0x00007fffe127380e: mov     0x8(%rsp),%rbp
  0x00007fffe1273813: mov     %rax,0x8(%rsp)
  0x00007fffe1273818: nop
  0x00007fffe1273819: nop
  0x00007fffe127381a: nop
  0x00007fffe127381b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [8]=Oop off=5344}
                                                ;*astore_1
                                                ; - java.io.PrintStream::newLine@56 (line 551)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273820: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B210: #	N3233 &lt;- B234  Freq: 2.66642e-10

  0x00007fffe1273825: mov     $0xffffffbd,%esi
  0x00007fffe127382a: mov     %rax,0x10(%rsp)
  0x00007fffe127382f: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop off=5364}
                                                ;*astore_1
                                                ; - java.io.PrintStream::newLine@66 (line 554)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  0x00007fffe1273834: callq   0x7ffff736b4ea    ;*return
                                                ; - java.io.PrintStream::write@82 (line 538)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B211: #	B214 &lt;- B225  Freq: 1.99996e-10

  0x00007fffe1273839: mov     0x18(%rsp),%r10
  0x00007fffe127383e: jmp     0x7fffe1273850    ;*return
                                                ; - java.io.PrintStream::newLine@72 (line 557)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B212: #	B215 &lt;- B234  Freq: 2.66642e-10

  0x00007fffe1273840: mov     %rax,%rbx
  0x00007fffe1273843: mov     0x18(%rsp),%r10
  0x00007fffe1273848: jmp     0x7fffe1273853    ;*newarray
                                                ; - java.lang.Integer::toString@29 (line 401)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B213: #	B214 &lt;- B108  Freq: 1.00016e-09

  0x00007fffe127384a: mov     $0x7,%r10d        ;*synchronization entry
                                                ; - java.io.PrintStream::print@-1 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B214: #	B215 &lt;- B213 B211  Freq: 1.20016e-09

  0x00007fffe1273850: mov     %rax,%rbx
  ;; B215: #	B217 B216 &lt;- B214 B212  Freq: 1.4668e-09

  0x00007fffe1273853: mov     0x8(%rsp),%r11
  0x00007fffe1273858: and     (%r11),%r10
  0x00007fffe127385b: cmp     $0x5,%r10
  0x00007fffe127385f: jne     0x7fffe1273871    ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)

  ;; B216: #	N3233 &lt;- B218 B217 B215  Freq: 1.4668e-09

  0x00007fffe1273861: mov     %rbx,%rsi
  0x00007fffe1273864: add     $0x90,%rsp
  0x00007fffe127386b: pop     %rbp
  0x00007fffe127386c: jmpq    0x7fffe11657a0    ;   {runtime_call}
  ;; B217: #	B216 B218 &lt;- B215  Freq: 1.4668e-15

  0x00007fffe1273871: lea     0x70(%rsp),%rax
  0x00007fffe1273876: cmpq    $0x0,(%rax)
  0x00007fffe127387d: je      0x7fffe12738f7
  0x00007fffe1273883: mov     (%r11),%r10
  0x00007fffe1273886: test    $0x2,%r10
  0x00007fffe127388d: je      0x7fffe12738ef
  0x00007fffe127388f: mov     0x16(%r10),%rax
  0x00007fffe1273893: xor     %r15,%rax
  0x00007fffe1273896: or      0x26(%r10),%rax
  0x00007fffe127389a: jne     0x7fffe12738f7
  0x00007fffe127389c: mov     0x36(%r10),%rax
  0x00007fffe12738a0: or      0x3e(%r10),%rax
  0x00007fffe12738a4: jne     0x7fffe12738b0
  0x00007fffe12738a6: movq    $0x0,0x16(%r10)
  0x00007fffe12738ae: jmp     0x7fffe12738f7
  0x00007fffe12738b0: cmpq    $0x0,0x46(%r10)
  0x00007fffe12738b8: je      0x7fffe12738e3
  0x00007fffe12738ba: movq    $0x0,0x16(%r10)
  0x00007fffe12738c2: lock addl $0x0,(%rsp)
  0x00007fffe12738c7: cmpq    $0x0,0x46(%r10)
  0x00007fffe12738cf: jne     0x7fffe12738e8
  0x00007fffe12738d1: movabs  $0x0,%rax
  0x00007fffe12738db: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12738e1: jne     0x7fffe12738e8
  0x00007fffe12738e3: or      $0x1,%eax
  0x00007fffe12738e6: jmp     0x7fffe12738f7
  0x00007fffe12738e8: test    $0x0,%eax
  0x00007fffe12738ed: jmp     0x7fffe12738f7
  0x00007fffe12738ef: mov     (%rax),%r10
  0x00007fffe12738f2: lock cmpxchg %r10,(%r11)
  0x00007fffe12738f7: je      0x7fffe1273861
  ;; B218: #	B216 &lt;- B217  Freq: 1.4668e-21

  0x00007fffe12738fd: mov     0x8(%rsp),%rdi
  0x00007fffe1273902: lea     0x70(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)

  0x00007fffe1273907: movabs  $0x7ffff744655c,%r10
  0x00007fffe1273911: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)

  0x00007fffe1273914: jmpq    0x7fffe1273861    ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B219: #	N3233 &lt;- B225  Freq: 1.99996e-10

  0x00007fffe1273919: mov     $0xffffffbd,%esi
  0x00007fffe127391e: mov     0x8(%rsp),%rbp
  0x00007fffe1273923: mov     %rax,0x18(%rsp)
  0x00007fffe1273928: nop
  0x00007fffe1273929: nop
  0x00007fffe127392a: nop
  0x00007fffe127392b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [24]=Oop off=5616}
                                                ;*astore_2
                                                ; - java.io.PrintStream::write@76 (line 535)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe1273930: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B220: #	N3233 &lt;- B225  Freq: 1.99996e-10

  0x00007fffe1273935: mov     $0xffffffbd,%esi
  0x00007fffe127393a: mov     0x8(%rsp),%rbp
  0x00007fffe127393f: mov     %rax,0x10(%rsp)
  0x00007fffe1273944: nop
  0x00007fffe1273945: nop
  0x00007fffe1273946: nop
  0x00007fffe1273947: callq   0x7fffe1107820    ; OopMap{rbp=Oop [16]=Oop off=5644}
                                                ;*astore_2
                                                ; - java.io.PrintStream::write@66 (line 532)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  0x00007fffe127394c: callq   0x7ffff736b4ea    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B221: #	B226 B222 &lt;- B133  Freq: 1.99998e-11

  0x00007fffe1273951: mov     %rax,%rbx
  0x00007fffe1273954: mov     $0x7,%r10d
  0x00007fffe127395a: mov     0x20(%rsp),%r11d
  0x00007fffe127395f: and     (%r11),%r10
  0x00007fffe1273962: cmp     $0x5,%r10
  0x00007fffe1273966: jne     0x7fffe1273984    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B222: #	B225 &lt;- B227 B226 B221  Freq: 1.99998e-11

  0x00007fffe1273968: mov     %rbx,%rbp
  0x00007fffe127396b: mov     %rbx,%rsi
  0x00007fffe127396e: jmp     0x7fffe127397e    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B223: #	B225 &lt;- B54  Freq: 9.99989e-06

  0x00007fffe1273970: mov     %rax,%rbp
  0x00007fffe1273973: mov     %rax,%rsi
  0x00007fffe1273976: jmp     0x7fffe127397e    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B224: #	B225 &lt;- B56  Freq: 9.99968e-06

  0x00007fffe1273978: mov     %rax,%rbp
  0x00007fffe127397b: mov     %rax,%rsi         ;*monitorexit
                                                ; - java.io.PrintStream::write@60 (line 530)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  ;; B225: #	B211 B220 B219 &lt;- B222 B223 B224  Freq: 1.99996e-05

  0x00007fffe127397e: nop
  0x00007fffe127397f: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [8]=Oop off=5700}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ;   {runtime_call}
  ;; B226: #	B222 B227 &lt;- B221  Freq: 1.99998e-17

  0x00007fffe1273984: mov     0x28(%rsp),%r11
  0x00007fffe1273989: lea     0x80(%rsp),%rax
  0x00007fffe1273991: cmpq    $0x0,(%rax)
  0x00007fffe1273998: je      0x7fffe1273a12
  0x00007fffe127399e: mov     (%r11),%r10
  0x00007fffe12739a1: test    $0x2,%r10
  0x00007fffe12739a8: je      0x7fffe1273a0a
  0x00007fffe12739aa: mov     0x16(%r10),%rax
  0x00007fffe12739ae: xor     %r15,%rax
  0x00007fffe12739b1: or      0x26(%r10),%rax
  0x00007fffe12739b5: jne     0x7fffe1273a12
  0x00007fffe12739b7: mov     0x36(%r10),%rax
  0x00007fffe12739bb: or      0x3e(%r10),%rax
  0x00007fffe12739bf: jne     0x7fffe12739cb
  0x00007fffe12739c1: movq    $0x0,0x16(%r10)
  0x00007fffe12739c9: jmp     0x7fffe1273a12
  0x00007fffe12739cb: cmpq    $0x0,0x46(%r10)
  0x00007fffe12739d3: je      0x7fffe12739fe
  0x00007fffe12739d5: movq    $0x0,0x16(%r10)
  0x00007fffe12739dd: lock addl $0x0,(%rsp)
  0x00007fffe12739e2: cmpq    $0x0,0x46(%r10)
  0x00007fffe12739ea: jne     0x7fffe1273a03
  0x00007fffe12739ec: movabs  $0x0,%rax
  0x00007fffe12739f6: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe12739fc: jne     0x7fffe1273a03
  0x00007fffe12739fe: or      $0x1,%eax
  0x00007fffe1273a01: jmp     0x7fffe1273a12
  0x00007fffe1273a03: test    $0x0,%eax
  0x00007fffe1273a08: jmp     0x7fffe1273a12
  0x00007fffe1273a0a: mov     (%rax),%r10
  0x00007fffe1273a0d: lock cmpxchg %r10,(%r11)
  0x00007fffe1273a12: je      0x7fffe1273968
  ;; B227: #	B222 &lt;- B226  Freq: 1.99998e-23

  0x00007fffe1273a18: mov     %r11,%rdi
  0x00007fffe1273a1b: lea     0x80(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273a23: movabs  $0x7ffff744655c,%r10
  0x00007fffe1273a2d: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273a30: jmpq    0x7fffe1273968    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B228: #	B237 B229 &lt;- B164  Freq: 1.4999e-11

  0x00007fffe1273a35: mov     %rax,%rbx
  0x00007fffe1273a38: mov     $0x7,%r10d
  0x00007fffe1273a3e: mov     0x2c(%rsp),%r8d
  0x00007fffe1273a43: and     (%r8),%r10
  0x00007fffe1273a46: cmp     $0x5,%r10
  0x00007fffe1273a4a: jne     0x7fffe1273b34    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B229: #	B234 &lt;- B238 B237 B228  Freq: 1.4999e-11

  0x00007fffe1273a50: mov     %rbx,%rbp
  0x00007fffe1273a53: mov     %rbx,%rsi
  0x00007fffe1273a56: jmp     0x7fffe1273a83    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@19 (line 545)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B230: #	B234 &lt;- B82  Freq: 9.99937e-06

  0x00007fffe1273a58: mov     %rax,%rbp
  0x00007fffe1273a5b: mov     %rax,%rsi
  0x00007fffe1273a5e: jmp     0x7fffe1273a83    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::newLine@26 (line 546)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B231: #	B234 &lt;- B84  Freq: 9.99916e-06

  0x00007fffe1273a60: mov     %rax,%rbp
  0x00007fffe1273a63: mov     %rax,%rsi
  0x00007fffe1273a66: jmp     0x7fffe1273a83    ;*invokespecial writeBytes
                                                ; - java.io.FileOutputStream::write@8 (line 326)
                                                ; - java.io.BufferedOutputStream::flushBuffer@20 (line 82)
                                                ; - java.io.BufferedOutputStream::flush@1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B232: #	B235 B233 &lt;- B95  Freq: 6.66566e-06

  0x00007fffe1273a68: mov     %rax,%rbx
  0x00007fffe1273a6b: mov     $0x7,%r10d
  0x00007fffe1273a71: mov     %rbp,%r11
  0x00007fffe1273a74: and     (%r11),%r10
  0x00007fffe1273a77: cmp     $0x5,%r10
  0x00007fffe1273a7b: jne     0x7fffe1273a88    ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)
                                                ; - java.io.PrintStream::println@10 (line 737)

  ;; B233: #	B234 &lt;- B236 B235 B232  Freq: 6.66566e-06

  0x00007fffe1273a7d: mov     %rbx,%rbp
  0x00007fffe1273a80: mov     %rbx,%rsi
  ;; B234: #	B212 B210 B209 &lt;- B229 B230 B231 B233  Freq: 2.66642e-05

  0x00007fffe1273a83: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [8]=Oop off=5960}
                                                ;*athrow
                                                ; - java.io.PrintStream::newLine@52 (line 549)
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ;   {runtime_call}
  ;; B235: #	B233 B236 &lt;- B232  Freq: 6.66566e-12

  0x00007fffe1273a88: lea     0x80(%rsp),%rax
  0x00007fffe1273a90: cmpq    $0x0,(%rax)
  0x00007fffe1273a97: je      0x7fffe1273b11
  0x00007fffe1273a9d: mov     (%r11),%r10
  0x00007fffe1273aa0: test    $0x2,%r10
  0x00007fffe1273aa7: je      0x7fffe1273b09
  0x00007fffe1273aa9: mov     0x16(%r10),%rax
  0x00007fffe1273aad: xor     %r15,%rax
  0x00007fffe1273ab0: or      0x26(%r10),%rax
  0x00007fffe1273ab4: jne     0x7fffe1273b11
  0x00007fffe1273ab6: mov     0x36(%r10),%rax
  0x00007fffe1273aba: or      0x3e(%r10),%rax
  0x00007fffe1273abe: jne     0x7fffe1273aca
  0x00007fffe1273ac0: movq    $0x0,0x16(%r10)
  0x00007fffe1273ac8: jmp     0x7fffe1273b11
  0x00007fffe1273aca: cmpq    $0x0,0x46(%r10)
  0x00007fffe1273ad2: je      0x7fffe1273afd
  0x00007fffe1273ad4: movq    $0x0,0x16(%r10)
  0x00007fffe1273adc: lock addl $0x0,(%rsp)
  0x00007fffe1273ae1: cmpq    $0x0,0x46(%r10)
  0x00007fffe1273ae9: jne     0x7fffe1273b02
  0x00007fffe1273aeb: movabs  $0x0,%rax
  0x00007fffe1273af5: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1273afb: jne     0x7fffe1273b02
  0x00007fffe1273afd: or      $0x1,%eax
  0x00007fffe1273b00: jmp     0x7fffe1273b11
  0x00007fffe1273b02: test    $0x0,%eax
  0x00007fffe1273b07: jmp     0x7fffe1273b11
  0x00007fffe1273b09: mov     (%rax),%r10
  0x00007fffe1273b0c: lock cmpxchg %r10,(%r11)
  0x00007fffe1273b11: je      0x7fffe1273a7d
  ;; B236: #	B233 &lt;- B235  Freq: 6.66566e-18

  0x00007fffe1273b17: mov     %r11,%rdi
  0x00007fffe1273b1a: lea     0x80(%rsp),%rsi   ;*synchronization entry
                                                ; - java.io.BufferedOutputStream::flush@-1 (line 140)
                                                ; - java.io.PrintStream::newLine@40 (line 548)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1273b22: movabs  $0x7ffff744655c,%r10
  0x00007fffe1273b2c: callq   %r10              ;*synchronization entry
                                                ; - java.io.PrintStream::newLine@-1 (line 542)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1273b2f: jmpq    0x7fffe1273a7d
  ;; B237: #	B229 B238 &lt;- B228  Freq: 1.4999e-17

  0x00007fffe1273b34: mov     0x20(%rsp),%r11
  0x00007fffe1273b39: lea     0x80(%rsp),%rax
  0x00007fffe1273b41: cmpq    $0x0,(%rax)
  0x00007fffe1273b48: je      0x7fffe1273bc2
  0x00007fffe1273b4e: mov     (%r11),%r10
  0x00007fffe1273b51: test    $0x2,%r10
  0x00007fffe1273b58: je      0x7fffe1273bba
  0x00007fffe1273b5a: mov     0x16(%r10),%rax
  0x00007fffe1273b5e: xor     %r15,%rax
  0x00007fffe1273b61: or      0x26(%r10),%rax
  0x00007fffe1273b65: jne     0x7fffe1273bc2
  0x00007fffe1273b67: mov     0x36(%r10),%rax
  0x00007fffe1273b6b: or      0x3e(%r10),%rax
  0x00007fffe1273b6f: jne     0x7fffe1273b7b
  0x00007fffe1273b71: movq    $0x0,0x16(%r10)
  0x00007fffe1273b79: jmp     0x7fffe1273bc2
  0x00007fffe1273b7b: cmpq    $0x0,0x46(%r10)
  0x00007fffe1273b83: je      0x7fffe1273bae
  0x00007fffe1273b85: movq    $0x0,0x16(%r10)
  0x00007fffe1273b8d: lock addl $0x0,(%rsp)
  0x00007fffe1273b92: cmpq    $0x0,0x46(%r10)
  0x00007fffe1273b9a: jne     0x7fffe1273bb3
  0x00007fffe1273b9c: movabs  $0x0,%rax
  0x00007fffe1273ba6: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe1273bac: jne     0x7fffe1273bb3
  0x00007fffe1273bae: or      $0x1,%eax
  0x00007fffe1273bb1: jmp     0x7fffe1273bc2
  0x00007fffe1273bb3: test    $0x0,%eax
  0x00007fffe1273bb8: jmp     0x7fffe1273bc2
  0x00007fffe1273bba: mov     (%rax),%r10
  0x00007fffe1273bbd: lock cmpxchg %r10,(%r11)
  0x00007fffe1273bc2: je      0x7fffe1273a50
  ;; B238: #	B229 &lt;- B237  Freq: 1.4999e-23

  0x00007fffe1273bc8: mov     %r11,%rdi
  0x00007fffe1273bcb: lea     0x80(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1273bd3: movabs  $0x7ffff744655c,%r10
  0x00007fffe1273bdd: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.BufferedWriter::newLine@5 (line 243)
                                                ; - java.io.PrintStream::newLine@12 (line 544)
                                                ; - java.io.PrintStream::println@10 (line 737)

  0x00007fffe1273be0: jmpq    0x7fffe1273a50    ;*iinc
                                                ; - java.lang.Integer::getChars@95 (line 458)
                                                ; - java.lang.Integer::toString@35 (line 402)
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)

  0x00007fffe1273be5: hlt
  0x00007fffe1273be6: hlt
  0x00007fffe1273be7: hlt
  0x00007fffe1273be8: hlt
  0x00007fffe1273be9: hlt
  0x00007fffe1273bea: hlt
  0x00007fffe1273beb: hlt
  0x00007fffe1273bec: hlt
  0x00007fffe1273bed: hlt
  0x00007fffe1273bee: hlt
  0x00007fffe1273bef: hlt
  0x00007fffe1273bf0: hlt
  0x00007fffe1273bf1: hlt
  0x00007fffe1273bf2: hlt
  0x00007fffe1273bf3: hlt
  0x00007fffe1273bf4: hlt
  0x00007fffe1273bf5: hlt
  0x00007fffe1273bf6: hlt
  0x00007fffe1273bf7: hlt
  0x00007fffe1273bf8: hlt
  0x00007fffe1273bf9: hlt
  0x00007fffe1273bfa: hlt
  0x00007fffe1273bfb: hlt
  0x00007fffe1273bfc: hlt
  0x00007fffe1273bfd: hlt
  0x00007fffe1273bfe: hlt
  0x00007fffe1273bff: hlt
[Stub Code]
  0x00007fffe1273c00: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe1273c0a: jmpq    0x7fffe1273c0a    ;   {runtime_call}
  0x00007fffe1273c0f: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1273c19: jmpq    0x7fffe1273c19    ;   {runtime_call}
  0x00007fffe1273c1e: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1273c28: jmpq    0x7fffe1273c28    ;   {runtime_call}
  0x00007fffe1273c2d: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1273c37: jmpq    0x7fffe1273c37    ;   {runtime_call}
  0x00007fffe1273c3c: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe1273c46: jmpq    0x7fffe1273c46    ;   {runtime_call}
[Exception Handler]
  0x00007fffe1273c4b: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe1273c50: callq   0x7fffe1273c55
  0x00007fffe1273c55: subq    $0x5,(%rsp)
  0x00007fffe1273c5a: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1273c5f: hlt
<nmethod compile_id='103' compiler='C2' level='4' entry='0x00007fffe1272340' size='15512' address='0x00007fffe12720d0' relocation_offset='304' insts_offset='624' stub_offset='6960' scopes_data_offset='7304' scopes_pcs_offset='10888' dependencies_offset='15112' handler_table_offset='15128' nul_chk_table_offset='15416' oops_offset='7056' method='java/io/PrintStream println (I)V' bytes='24' count='74237' iicount='74237' stamp='120.557'/>
<make_not_entrant thread='140736955627264' compile_id='64' compiler='C1' level='2' stamp='120.557'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe126cb50:
Code:
Argument 0 is unknown.RIP: 0x7fffe126cce0 Code size: 0x000002f0
[Entry Point]
[Constants]
  # {method} {0x00007ffff4d54a88} &apos;&lt;init&gt;&apos; &apos;([CII)V&apos; in &apos;java/nio/HeapCharBuffer&apos;
  # this:     rsi:rsi   = &apos;java/nio/HeapCharBuffer&apos;
  # parm0:    rdx:rdx   = &apos;[C&apos;
  # parm1:    rcx       = int
  # parm2:    r8        = int
  #           [sp+0xa0]  (sp of caller)
  ;;  block B3 [0, 0]

  0x00007fffe126cce0: mov     0x8(%rsi),%r10d
  0x00007fffe126cce4: shl     $0x3,%r10
  0x00007fffe126cce8: cmp     %rax,%r10
  0x00007fffe126cceb: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe126ccf1: nop
  0x00007fffe126ccf2: nop
  0x00007fffe126ccf3: nop
  0x00007fffe126ccf4: nop
  0x00007fffe126ccf5: nop
  0x00007fffe126ccf6: nop
  0x00007fffe126ccf7: nop
  0x00007fffe126ccf8: nop
  0x00007fffe126ccf9: nop
  0x00007fffe126ccfa: nop
  0x00007fffe126ccfb: nop
  0x00007fffe126ccfc: nop
  0x00007fffe126ccfd: nop
  0x00007fffe126ccfe: nop
  0x00007fffe126ccff: nop
[Verified Entry Point]
  0x00007fffe126cd00: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe126cd07: push    %rbp
  0x00007fffe126cd08: sub     $0x90,%rsp
  0x00007fffe126cd0f: movabs  $0x7ffff4d562a0,%r9
  0x00007fffe126cd19: mov     0x8(%r9),%edi
  0x00007fffe126cd1d: add     $0x8,%edi
  0x00007fffe126cd20: mov     %edi,0x8(%r9)
  0x00007fffe126cd24: movabs  $0x7ffff4d54a88,%r9  ;   {metadata({method} {0x00007ffff4d54a88} &apos;&lt;init&gt;&apos; &apos;([CII)V&apos; in &apos;java/nio/HeapCharBuffer&apos;)}
  0x00007fffe126cd2e: and     $0x3ff8,%edi
  0x00007fffe126cd34: cmp     $0x0,%edi
  ;;   26 branch [EQ] [CounterOverflowStub: 0x00007fffb05ad900]
  0x00007fffe126cd37: je      0x7fffe126ce28    ;*aload_0
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@0 (line 70)

  ;;  block B4 [0, 0]

  ;;  block B0 [0, 13]

  0x00007fffe126cd3d: mov     0xc(%rdx),%r9d    ;*arraylength
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@7 (line 70)
                                                ; implicit exception: dispatches to 0x00007fffe126ce3f
  0x00007fffe126cd41: add     %ecx,%r8d
  0x00007fffe126cd44: mov     %rdx,0x78(%rsp)
  0x00007fffe126cd49: mov     $0xffffffff,%edx
  0x00007fffe126cd4e: mov     %rsi,%rbx
  0x00007fffe126cd51: mov     %rbx,%rsi         ;*invokespecial &lt;init&gt;
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)

  0x00007fffe126cd54: mov     %rbx,0x70(%rsp)
  0x00007fffe126cd59: nop
  0x00007fffe126cd5a: nop
  0x00007fffe126cd5b: nop
  0x00007fffe126cd5c: nop
  0x00007fffe126cd5d: nop
  0x00007fffe126cd5e: nop
  0x00007fffe126cd5f: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [120]=Oop off=132}
                                                ;*invokespecial &lt;init&gt;
                                                ; - java.nio.CharBuffer::&lt;init&gt;@6 (line 281)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)
                                                ;   {optimized virtual_call}
  0x00007fffe126cd64: mov     0x70(%rsp),%rsi
  0x00007fffe126cd69: mov     0x78(%rsp),%rdx
  0x00007fffe126cd6e: mov     %rdx,%r10
  0x00007fffe126cd71: push    %r10
  0x00007fffe126cd73: cmp     0x16aece66(%rip),%r12  ;   {external_word}
  0x00007fffe126cd7a: je      0x7fffe126cdf7
  ;; MacroAssembler::encode_heap_oop: heap base corrupted?
  0x00007fffe126cd80: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126cd85: sub     $0x80,%rsp
  0x00007fffe126cd8c: mov     %rax,0x78(%rsp)
  0x00007fffe126cd91: mov     %rcx,0x70(%rsp)
  0x00007fffe126cd96: mov     %rdx,0x68(%rsp)
  0x00007fffe126cd9b: mov     %rbx,0x60(%rsp)
  0x00007fffe126cda0: mov     %rbp,0x50(%rsp)
  0x00007fffe126cda5: mov     %rsi,0x48(%rsp)
  0x00007fffe126cdaa: mov     %rdi,0x40(%rsp)
  0x00007fffe126cdaf: mov     %r8,0x38(%rsp)
  0x00007fffe126cdb4: mov     %r9,0x30(%rsp)
  0x00007fffe126cdb9: mov     %r10,0x28(%rsp)
  0x00007fffe126cdbe: mov     %r11,0x20(%rsp)
  0x00007fffe126cdc3: mov     %r12,0x18(%rsp)
  0x00007fffe126cdc8: mov     %r13,0x10(%rsp)
  0x00007fffe126cdcd: mov     %r14,0x8(%rsp)
  0x00007fffe126cdd2: mov     %r15,(%rsp)
  0x00007fffe126cdd6: movabs  $0x7ffff7837a30,%rdi  ;   {external_word}
  0x00007fffe126cde0: movabs  $0x7fffe126cd80,%rsi  ;   {internal_word}
  0x00007fffe126cdea: mov     %rsp,%rdx
  0x00007fffe126cded: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126cdf1: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126cdf6: hlt
  0x00007fffe126cdf7: pop     %r10
  0x00007fffe126cdf9: mov     %r10d,0x2c(%rsi)
  0x00007fffe126cdfd: mov     %rsi,%rdi
  0x00007fffe126ce00: shr     $0x9,%rdi
  0x00007fffe126ce04: movabs  $0x7ffff591e000,%rbx
  0x00007fffe126ce0e: movb    $0x0,(%rdi,%rbx)  ;*putfield hb
                                                ; - java.nio.CharBuffer::&lt;init&gt;@12 (line 282)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)

  0x00007fffe126ce12: movl    $0x0,0x24(%rsi)   ;*putfield offset
                                                ; - java.nio.CharBuffer::&lt;init&gt;@18 (line 283)
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@10 (line 70)

  0x00007fffe126ce19: add     $0x90,%rsp
  0x00007fffe126ce20: pop     %rbp
  0x00007fffe126ce21: test    %eax,0x16d8e2d9(%rip)  ;   {poll_return}
  0x00007fffe126ce27: retq
  ;; CounterOverflowStub slow case
  0x00007fffe126ce28: mov     %r9,0x8(%rsp)
  0x00007fffe126ce2d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe126ce35: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop rdx=Oop off=346}
                                                ;*synchronization entry
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@-1 (line 70)
                                                ;   {runtime_call}
  0x00007fffe126ce3a: jmpq    0x7fffe126cd3d
  ;; ImplicitNullCheckStub slow case
  0x00007fffe126ce3f: callq   0x7fffe11670a0    ; OopMap{rsi=Oop rdx=Oop off=356}
                                                ;*arraylength
                                                ; - java.nio.HeapCharBuffer::&lt;init&gt;@7 (line 70)
                                                ;   {runtime_call}
  0x00007fffe126ce44: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126ce49: sub     $0x80,%rsp
  0x00007fffe126ce50: mov     %rax,0x78(%rsp)
  0x00007fffe126ce55: mov     %rcx,0x70(%rsp)
  0x00007fffe126ce5a: mov     %rdx,0x68(%rsp)
  0x00007fffe126ce5f: mov     %rbx,0x60(%rsp)
  0x00007fffe126ce64: mov     %rbp,0x50(%rsp)
  0x00007fffe126ce69: mov     %rsi,0x48(%rsp)
  0x00007fffe126ce6e: mov     %rdi,0x40(%rsp)
  0x00007fffe126ce73: mov     %r8,0x38(%rsp)
  0x00007fffe126ce78: mov     %r9,0x30(%rsp)
  0x00007fffe126ce7d: mov     %r10,0x28(%rsp)
  0x00007fffe126ce82: mov     %r11,0x20(%rsp)
  0x00007fffe126ce87: mov     %r12,0x18(%rsp)
  0x00007fffe126ce8c: mov     %r13,0x10(%rsp)
  0x00007fffe126ce91: mov     %r14,0x8(%rsp)
  0x00007fffe126ce96: mov     %r15,(%rsp)
  0x00007fffe126ce9a: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe126cea4: movabs  $0x7fffe126ce44,%rsi  ;   {internal_word}
  0x00007fffe126ceae: mov     %rsp,%rdx
  0x00007fffe126ceb1: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126ceb5: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126ceba: hlt
  0x00007fffe126cebb: nop
  0x00007fffe126cebc: nop
  ;; Unwind handler
  0x00007fffe126cebd: mov     0x348(%r15),%rax
  0x00007fffe126cec4: movabs  $0x0,%r10
  0x00007fffe126cece: mov     %r10,0x348(%r15)
  0x00007fffe126ced5: movabs  $0x0,%r10
  0x00007fffe126cedf: mov     %r10,0x350(%r15)
  0x00007fffe126cee6: add     $0x90,%rsp
  0x00007fffe126ceed: pop     %rbp
  0x00007fffe126ceee: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe126cef3: hlt
  0x00007fffe126cef4: hlt
  0x00007fffe126cef5: hlt
  0x00007fffe126cef6: hlt
  0x00007fffe126cef7: hlt
  0x00007fffe126cef8: hlt
  0x00007fffe126cef9: hlt
  0x00007fffe126cefa: hlt
  0x00007fffe126cefb: hlt
  0x00007fffe126cefc: hlt
  0x00007fffe126cefd: hlt
  0x00007fffe126cefe: hlt
  0x00007fffe126ceff: hlt
[Stub Code]
  0x00007fffe126cf00: nop                       ;   {no_reloc}
  0x00007fffe126cf01: nop
  0x00007fffe126cf02: nop
  0x00007fffe126cf03: nop
  0x00007fffe126cf04: nop
  0x00007fffe126cf05: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126cf0f: jmpq    0x7fffe126cf0f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe126cf14: movabs  $0xdead,%rbx
  0x00007fffe126cf1e: movabs  $0xdead,%rcx
  0x00007fffe126cf28: movabs  $0xdead,%rsi
  0x00007fffe126cf32: movabs  $0xdead,%rdi
  0x00007fffe126cf3c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe126cf41: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe126cf46: sub     $0x80,%rsp
  0x00007fffe126cf4d: mov     %rax,0x78(%rsp)
  0x00007fffe126cf52: mov     %rcx,0x70(%rsp)
  0x00007fffe126cf57: mov     %rdx,0x68(%rsp)
  0x00007fffe126cf5c: mov     %rbx,0x60(%rsp)
  0x00007fffe126cf61: mov     %rbp,0x50(%rsp)
  0x00007fffe126cf66: mov     %rsi,0x48(%rsp)
  0x00007fffe126cf6b: mov     %rdi,0x40(%rsp)
  0x00007fffe126cf70: mov     %r8,0x38(%rsp)
  0x00007fffe126cf75: mov     %r9,0x30(%rsp)
  0x00007fffe126cf7a: mov     %r10,0x28(%rsp)
  0x00007fffe126cf7f: mov     %r11,0x20(%rsp)
  0x00007fffe126cf84: mov     %r12,0x18(%rsp)
  0x00007fffe126cf89: mov     %r13,0x10(%rsp)
  0x00007fffe126cf8e: mov     %r14,0x8(%rsp)
  0x00007fffe126cf93: mov     %r15,(%rsp)
  0x00007fffe126cf97: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe126cfa1: movabs  $0x7fffe126cf41,%rsi  ;   {internal_word}
  0x00007fffe126cfab: mov     %rsp,%rdx
  0x00007fffe126cfae: and     $0xfffffffffffffff0,%rsp
  0x00007fffe126cfb2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe126cfb7: hlt
[Deopt Handler Code]
  0x00007fffe126cfb8: movabs  $0x7fffe126cfb8,%r10  ;   {section_word}
  0x00007fffe126cfc2: push    %r10
  0x00007fffe126cfc4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe126cfc9: hlt
  0x00007fffe126cfca: hlt
  0x00007fffe126cfcb: hlt
  0x00007fffe126cfcc: hlt
  0x00007fffe126cfcd: hlt
  0x00007fffe126cfce: hlt
  0x00007fffe126cfcf: hlt
<nmethod compile_id='27' compiler='C1' level='2' entry='0x00007fffe126cce0' size='1464' address='0x00007fffe126cb50' relocation_offset='304' insts_offset='400' stub_offset='944' scopes_data_offset='1176' scopes_pcs_offset='1280' dependencies_offset='1440' nul_chk_table_offset='1448' method='java/nio/HeapCharBuffer &lt;init&gt; ([CII)V' bytes='14' count='28849' iicount='28849' stamp='120.568'/>
<writer thread='140736955627264'/>
Decoding compiled method 0x00007fffe125df10:
Code:
Argument 0 is unknown.RIP: 0x7fffe125e060 Code size: 0x00000078
[Entry Point]
[Constants]
  # {method} {0x00007ffff4b56628} &apos;clear&apos; &apos;()Ljava/nio/Buffer;&apos; in &apos;java/nio/Buffer&apos;
  #           [sp+0x20]  (sp of caller)
  ;; N23: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe125e060: mov     0x8(%rsi),%r10d
  0x00007fffe125e064: shl     $0x3,%r10
  0x00007fffe125e068: cmp     %r10,%rax
  0x00007fffe125e06b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe125e071: nop
  0x00007fffe125e072: nop
  0x00007fffe125e073: nop
  0x00007fffe125e074: nop
  0x00007fffe125e075: nop
  0x00007fffe125e076: nop
  0x00007fffe125e077: nop
  0x00007fffe125e078: nop
  0x00007fffe125e079: nop
  0x00007fffe125e07a: nop
  0x00007fffe125e07b: nop
  0x00007fffe125e07c: nop
  0x00007fffe125e07d: nop
  0x00007fffe125e07e: nop
  0x00007fffe125e07f: nop
[Verified Entry Point]
  ;; B1: #	N23 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe125e080: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125e087: push    %rbp
  0x00007fffe125e088: sub     $0x10,%rsp        ;*synchronization entry
                                                ; - java.nio.Buffer::clear@-1 (line 329)

  0x00007fffe125e08c: mov     %r12d,0x18(%rsi)  ;*putfield position
                                                ; - java.nio.Buffer::clear@2 (line 329)

  0x00007fffe125e090: mov     0x20(%rsi),%r11d
  0x00007fffe125e094: mov     %r11d,0x1c(%rsi)  ;*putfield limit
                                                ; - java.nio.Buffer::clear@10 (line 330)

  0x00007fffe125e098: movl    $0xffffffff,0xc(%rsi)  ;*putfield mark
                                                ; - java.nio.Buffer::clear@15 (line 331)

  0x00007fffe125e09f: mov     %rsi,%rax
  0x00007fffe125e0a2: add     $0x10,%rsp
  0x00007fffe125e0a6: pop     %rbp
  0x00007fffe125e0a7: test    %eax,0x16d9cf53(%rip)  ;   {poll_return}
  0x00007fffe125e0ad: retq
  0x00007fffe125e0ae: hlt
  0x00007fffe125e0af: hlt
  0x00007fffe125e0b0: hlt
  0x00007fffe125e0b1: hlt
  0x00007fffe125e0b2: hlt
  0x00007fffe125e0b3: hlt
  0x00007fffe125e0b4: hlt
  0x00007fffe125e0b5: hlt
  0x00007fffe125e0b6: hlt
  0x00007fffe125e0b7: hlt
  0x00007fffe125e0b8: hlt
  0x00007fffe125e0b9: hlt
  0x00007fffe125e0ba: hlt
  0x00007fffe125e0bb: hlt
  0x00007fffe125e0bc: hlt
  0x00007fffe125e0bd: hlt
  0x00007fffe125e0be: hlt
  0x00007fffe125e0bf: hlt
[Exception Handler]
[Stub Code]
  0x00007fffe125e0c0: jmpq    0x7fffe1004ee0    ;   {no_reloc}
[Deopt Handler Code]
  0x00007fffe125e0c5: callq   0x7fffe125e0ca
  0x00007fffe125e0ca: subq    $0x5,(%rsp)
  0x00007fffe125e0cf: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125e0d4: hlt
  0x00007fffe125e0d5: hlt
  0x00007fffe125e0d6: hlt
  0x00007fffe125e0d7: hlt
<nmethod compile_id='99' compiler='C2' level='4' entry='0x00007fffe125e060' size='600' address='0x00007fffe125df10' relocation_offset='304' insts_offset='336' stub_offset='432' scopes_data_offset='464' scopes_pcs_offset='496' dependencies_offset='592' method='java/nio/Buffer clear ()Ljava/nio/Buffer;' bytes='20' count='51233' iicount='51233' stamp='120.602'/>
<make_not_entrant thread='140736955627264' compile_id='61' compiler='C1' level='2' stamp='120.602'/>
<writer thread='140736956679936'/>
Decoding compiled method 0x00007fffe126b290:
Code:
Argument 0 is unknown.RIP: 0x7fffe126b440 Code size: 0x00000a18
[Entry Point]
[Constants]
  # {method} {0x00007ffff4c23ed0} &apos;write&apos; &apos;(Ljava/lang/String;)V&apos; in &apos;java/io/PrintStream&apos;
  # this:     rsi:rsi   = &apos;java/io/PrintStream&apos;
  # parm0:    rdx:rdx   = &apos;java/lang/String&apos;
  #           [sp+0x90]  (sp of caller)
  ;; N1097: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe126b440: mov     0x8(%rsi),%r10d
  0x00007fffe126b444: shl     $0x3,%r10
  0x00007fffe126b448: cmp     %r10,%rax
  0x00007fffe126b44b: jne     0x7fffe1105c40    ;   {runtime_call}
  0x00007fffe126b451: nop
  0x00007fffe126b452: nop
  0x00007fffe126b453: nop
  0x00007fffe126b454: nop
  0x00007fffe126b455: nop
  0x00007fffe126b456: nop
  0x00007fffe126b457: nop
  0x00007fffe126b458: nop
  0x00007fffe126b459: nop
  0x00007fffe126b45a: nop
  0x00007fffe126b45b: nop
  0x00007fffe126b45c: nop
  0x00007fffe126b45d: nop
  0x00007fffe126b45e: nop
  0x00007fffe126b45f: nop
[Verified Entry Point]
  ;; B1: #	B44 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1

  0x00007fffe126b460: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe126b467: push    %rbp
  0x00007fffe126b468: sub     $0x80,%rsp        ;*synchronization entry
                                                ; - java.io.PrintStream::write@-1 (line 523)

  0x00007fffe126b46f: mov     %rdx,(%rsp)
  0x00007fffe126b473: mov     %rsi,0x28(%rsp)
  0x00007fffe126b478: mov     (%rsi),%rax
  0x00007fffe126b47b: mov     %rax,%r10
  0x00007fffe126b47e: and     $0x7,%r10
  0x00007fffe126b482: cmp     $0x5,%r10
  0x00007fffe126b486: jne     0x7fffe126b70a
  ;; B2: #	B46 B3 &lt;- B1  Freq: 0.999999

  0x00007fffe126b48c: mov     $0x200051d4,%r10d  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe126b492: shl     $0x3,%r10
  0x00007fffe126b496: mov     0xb0(%r10),%r10
  0x00007fffe126b49d: mov     %r10,%r11
  0x00007fffe126b4a0: or      %r15,%r11
  0x00007fffe126b4a3: mov     %r11,%r8
  0x00007fffe126b4a6: xor     %rax,%r8
  0x00007fffe126b4a9: test    $0xffffffffffffff87,%r8
  0x00007fffe126b4b0: jne     0x7fffe126b779    ;*monitorenter
                                                ; - java.io.PrintStream::write@3 (line 523)

  ;; B3: #	B65 B4 &lt;- B45 B44 B2 B50  Freq: 1

  0x00007fffe126b4b6: mov     0x28(%rsp),%r10
  0x00007fffe126b4bb: mov     0xc(%r10),%ebp    ;*getfield out
                                                ; - java.io.PrintStream::ensureOpen@1 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)

  0x00007fffe126b4bf: test    %ebp,%ebp
  0x00007fffe126b4c1: je      0x7fffe126ba6f    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)

  ;; B4: #	B71 B5 &lt;- B3  Freq: 1

  0x00007fffe126b4c7: mov     0x18(%r10),%r13d  ;*getfield textOut
                                                ; - java.io.PrintStream::write@9 (line 525)

  0x00007fffe126b4cb: mov     0x10(%r13),%r11d  ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; implicit exception: dispatches to 0x00007fffe126bb61
  ;; B5: #	B72 B6 &lt;- B4  Freq: 0.999999

  0x00007fffe126b4cf: mov     %r11d,0x38(%rsp)
  0x00007fffe126b4d4: mov     (%rsp),%r10
  0x00007fffe126b4d8: mov     0xc(%r10),%r10d   ;*getfield value
                                                ; - java.lang.String::length@1 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; implicit exception: dispatches to 0x00007fffe126bb75
  ;; B6: #	B73 B7 &lt;- B5  Freq: 0.999997

  0x00007fffe126b4dc: mov     0xc(%r10),%r14d   ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; implicit exception: dispatches to 0x00007fffe126bb89
  ;; B7: #	B74 B8 &lt;- B6  Freq: 0.999996

  0x00007fffe126b4e0: mov     (%r11),%rax       ; implicit exception: dispatches to 0x00007fffe126bb9d
  ;; B8: #	B52 B9 &lt;- B7  Freq: 0.999995

  0x00007fffe126b4e3: mov     %rax,%r10
  0x00007fffe126b4e6: and     $0x7,%r10
  0x00007fffe126b4ea: mov     %r11,%r9          ;*getfield lock
                                                ; - java.io.BufferedWriter::write@1 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b4ed: mov     %r13,%r8          ;*getfield textOut
                                                ; - java.io.PrintStream::write@9 (line 525)

  0x00007fffe126b4f0: cmp     $0x5,%r10
  0x00007fffe126b4f4: jne     0x7fffe126b7b2
  ;; B9: #	B54 B10 &lt;- B8  Freq: 0.999994

  0x00007fffe126b4fa: mov     0x8(%r11),%r11d
  0x00007fffe126b4fe: movabs  $0x0,%r10
  0x00007fffe126b508: lea     (%r10,%r11,8),%r10
  0x00007fffe126b50c: mov     0xb0(%r10),%r10
  0x00007fffe126b513: mov     %r10,%r11
  0x00007fffe126b516: or      %r15,%r11
  0x00007fffe126b519: mov     %r11,%rcx
  0x00007fffe126b51c: xor     %rax,%rcx
  0x00007fffe126b51f: test    $0xffffffffffffff87,%rcx
  0x00007fffe126b526: jne     0x7fffe126b86e    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B10: #	B66 B11 &lt;- B53 B52 B9 B58  Freq: 0.999995

  0x00007fffe126b52c: mov     0x1c(%r13),%ebp   ;*getfield out
                                                ; - java.io.BufferedWriter::ensureOpen@1 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b530: test    %ebp,%ebp
  0x00007fffe126b532: je      0x7fffe126ba89    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B11: #	B22 B12 &lt;- B10  Freq: 0.999995

  0x00007fffe126b538: test    %r14d,%r14d
  0x00007fffe126b53b: jle     0x7fffe126b5d3    ;*if_icmpge
                                                ; - java.io.BufferedWriter::write@24 (line 224)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B12: #	B68 B13 &lt;- B11  Freq: 0.499997

  0x00007fffe126b541: mov     0x18(%r13),%r10d  ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@33 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b545: mov     0x14(%r13),%ebp
  0x00007fffe126b549: sub     %r10d,%ebp        ;*isub
                                                ; - java.io.BufferedWriter::write@36 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b54c: cmp     %r14d,%ebp
  0x00007fffe126b54f: jl      0x7fffe126bac9    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B13: #	B76 B14 &lt;- B12  Freq: 0.499997

  0x00007fffe126b555: mov     (%rsp),%r11
  0x00007fffe126b559: mov     0xc(%r11),%ebx    ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b55d: mov     0xc(%rbx),%r11d   ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ; implicit exception: dispatches to 0x00007fffe126bbd5
  ;; B14: #	B69 B15 &lt;- B13  Freq: 0.499997

  0x00007fffe126b561: mov     0x20(%r13),%ebp   ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b565: cmp     %r11d,%r14d
  0x00007fffe126b568: jnle    0x7fffe126bb05    ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B15: #	B77 B16 &lt;- B14  Freq: 0.499997

  0x00007fffe126b56e: mov     0xc(%rbp),%edx    ; implicit exception: dispatches to 0x00007fffe126bbf5
  ;; B16: #	B63 B17 &lt;- B15  Freq: 0.499996

  0x00007fffe126b571: mov     %r9,0x8(%rsp)
  0x00007fffe126b576: mov     %rbp,%rcx         ;*getfield cb
                                                ; - java.io.BufferedWriter::write@56 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b579: mov     %rbx,%r9          ;*getfield value
                                                ; - java.lang.String::getChars@15 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b57c: test    %r10d,%r10d
  0x00007fffe126b57f: jl      0x7fffe126b9f1
  ;; B17: #	B63 B18 &lt;- B16  Freq: 0.499995

  0x00007fffe126b585: cmp     %r14d,%r11d
  0x00007fffe126b588: jb      0x7fffe126b9f1
  ;; B18: #	B63 B19 &lt;- B17  Freq: 0.499995

  0x00007fffe126b58e: mov     %r14d,%r11d
  0x00007fffe126b591: add     %r10d,%r11d
  0x00007fffe126b594: cmp     %r11d,%edx
  0x00007fffe126b597: jb      0x7fffe126b9f1
  ;; B19: #	B20 &lt;- B18  Freq: 0.499994

  0x00007fffe126b59d: lea     0x10(%rbp,%r10,2),%rsi
  0x00007fffe126b5a2: lea     0x10(%rbx),%rdi
  0x00007fffe126b5a6: movsxd  %r14d,%rdx
  0x00007fffe126b5a9: movabs  $0x7fffe1141060,%r10
  0x00007fffe126b5b3: callq   %r10              ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B20: #	B70 B21 &lt;- B19 B64  Freq: 0.499996

  0x00007fffe126b5b6: mov     0x18(%r13),%r11d  ;*getfield nextChar
                                                ; - java.io.BufferedWriter::write@75 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b5ba: mov     0x14(%r13),%r10d  ;*getfield nChars
                                                ; - java.io.BufferedWriter::write@89 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b5be: add     %r14d,%r11d       ;*iadd
                                                ; - java.io.BufferedWriter::write@80 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b5c1: mov     %r11d,0x18(%r13)  ;*putfield nextChar
                                                ; - java.io.BufferedWriter::write@81 (line 228)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b5c5: cmp     %r10d,%r11d
  0x00007fffe126b5c8: jnl     0x7fffe126bb39    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B21: #	B22 &lt;- B20  Freq: 0.499996

  0x00007fffe126b5ce: mov     0x8(%rsp),%r9
  ;; B22: #	B59 B23 &lt;- B21 B11  Freq: 0.999993

  0x00007fffe126b5d3: mov     $0x7,%r10d
  0x00007fffe126b5d9: mov     0x38(%rsp),%r8d
  0x00007fffe126b5de: and     (%r8),%r10
  0x00007fffe126b5e1: cmp     $0x5,%r10
  0x00007fffe126b5e5: jne     0x7fffe126b8a5    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B23: #	B40 B24 &lt;- B60 B59 B22  Freq: 0.999993

  0x00007fffe126b5eb: mov     0x28(%rsp),%r10
  0x00007fffe126b5f0: mov     0x18(%r10),%r11d  ;*getfield textOut
                                                ; - java.io.PrintStream::write@17 (line 526)

  0x00007fffe126b5f4: test    %r11d,%r11d
  0x00007fffe126b5f7: je      0x7fffe126b6b9    ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B24: #	B83 B25 &lt;- B23  Freq: 0.999992

  0x00007fffe126b5fd: mov     %r11,%rsi         ;*getfield textOut
                                                ; - java.io.PrintStream::write@17 (line 526)

  0x00007fffe126b600: mov     %r10,%rbp
  0x00007fffe126b603: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [40]=Oop off=456}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ;   {optimized virtual_call}
  ;; B25: #	B41 B26 &lt;- B24  Freq: 0.999972

  0x00007fffe126b608: mov     %rbp,%r11
  0x00007fffe126b60b: mov     0x1c(%r11),%r10d  ;*getfield charOut
                                                ; - java.io.PrintStream::write@24 (line 527)

  0x00007fffe126b60f: test    %r10d,%r10d
  0x00007fffe126b612: je      0x7fffe126b6d5    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)

  ;; B26: #	B84 B27 &lt;- B25  Freq: 0.999971

  0x00007fffe126b618: mov     %r10,%rsi
  0x00007fffe126b61b: callq   0x7fffe1105e80    ; OopMap{rbp=Oop [0]=Oop [40]=Oop off=480}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ;   {optimized virtual_call}
  ;; B27: #	B67 B28 &lt;- B26  Freq: 0.999951

  0x00007fffe126b620: mov     %rbp,%r9
  0x00007fffe126b623: movzbl  0x10(%r9),%ebp    ;*getfield autoFlush
                                                ; - java.io.PrintStream::write@31 (line 528)

  0x00007fffe126b628: test    %ebp,%ebp
  0x00007fffe126b62a: je      0x7fffe126baad    ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)

  ;; B28: #	B75 B29 &lt;- B27  Freq: 0.999951

  0x00007fffe126b630: mov     (%rsp),%r10
  0x00007fffe126b634: mov     0xc(%r10),%r11d   ;*getfield value
                                                ; - java.lang.String::indexOf@1 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  0x00007fffe126b638: mov     0xc(%r11),%ebp    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ; implicit exception: dispatches to 0x00007fffe126bbbd
  ;; B29: #	B37 B30 &lt;- B28  Freq: 0.99995

  0x00007fffe126b63c: test    %ebp,%ebp
  0x00007fffe126b63e: jle     0x7fffe126b690    ;*if_icmplt
                                                ; - java.lang.String::indexOf@17 (line 1548)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  ;; B30: #	B42 B31 &lt;- B29  Freq: 0.999246

  0x00007fffe126b640: test    %ebp,%ebp
  0x00007fffe126b642: jbe     0x7fffe126b6e5
  ;; B31: #	B42 B32 &lt;- B30  Freq: 0.999245

  0x00007fffe126b648: mov     %ebp,%r10d
  0x00007fffe126b64b: decl    %r10d
  0x00007fffe126b64e: cmp     %ebp,%r10d
  0x00007fffe126b651: jnb     0x7fffe126b6e5
  ;; B32: #	B33 &lt;- B31  Freq: 0.999244

  0x00007fffe126b657: mov     $0x7,%ecx
  0x00007fffe126b65c: xor     %r10d,%r10d
  0x00007fffe126b65f: nop                       ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  ;; B33: #	B38 B34 &lt;- B32 B34 	Loop: B33-B34 inner  Freq: 2.90115

  0x00007fffe126b660: movzwl  0x10(%r11,%r10,2),%r8d  ;*caload
                                                ; - java.lang.String::indexOf@47 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  0x00007fffe126b666: cmp     $0xa,%r8d
  0x00007fffe126b66a: je      0x7fffe126b697    ;*if_icmpne
                                                ; - java.lang.String::indexOf@49 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  ;; B34: #	B33 B35 &lt;- B33  Freq: 2.90061

  0x00007fffe126b66c: incl    %r10d             ;*iinc
                                                ; - java.lang.String::indexOf@55 (line 1557)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)

  0x00007fffe126b66f: cmp     %ebp,%r10d
  0x00007fffe126b672: jl      0x7fffe126b660
  ;; B35: #	B61 B36 &lt;- B37 B38 B34  Freq: 0.999948

  0x00007fffe126b674: and     (%r9),%rcx
  0x00007fffe126b677: cmp     $0x5,%rcx
  0x00007fffe126b67b: jne     0x7fffe126b94b    ;*monitorexit
                                                ; - java.io.PrintStream::write@54 (line 530)

  ;; B36: #	N1097 &lt;- B62 B61 B35  Freq: 0.999948

  0x00007fffe126b681: add     $0x80,%rsp
  0x00007fffe126b688: pop     %rbp
  0x00007fffe126b689: test    %eax,0x16d8f971(%rip)  ;   {poll_return}
  0x00007fffe126b68f: retq
  ;; B37: #	B35 &lt;- B29  Freq: 0.000703717

  0x00007fffe126b690: mov     $0x7,%ecx
  0x00007fffe126b695: jmp     0x7fffe126b674
  ;; B38: #	B35 B39 &lt;- B33  Freq: 0.000536577

  0x00007fffe126b697: test    %r10d,%r10d
  0x00007fffe126b69a: jl      0x7fffe126b674    ;*iflt
                                                ; - java.io.PrintStream::write@43 (line 528)

  ;; B39: #	N1097 &lt;- B38  Freq: 2.5586e-10

  0x00007fffe126b69c: mov     $0xffffff65,%esi
  0x00007fffe126b6a1: mov     %r10d,%ebp
  0x00007fffe126b6a4: mov     %r9,0x8(%rsp)
  0x00007fffe126b6a9: mov     %r9,0x10(%rsp)
  0x00007fffe126b6ae: nop
  0x00007fffe126b6af: callq   0x7fffe1107820    ; OopMap{[8]=Oop [16]=Oop off=628}
                                                ;*iflt
                                                ; - java.io.PrintStream::write@43 (line 528)
                                                ;   {runtime_call}
  0x00007fffe126b6b4: callq   0x7ffff736b4ea    ;   {runtime_call}
  ;; B40: #	N1097 &lt;- B23  Freq: 1.01327e-06

  0x00007fffe126b6b9: mov     $0xfffffff6,%esi
  0x00007fffe126b6be: mov     %r10,0x8(%rsp)
  0x00007fffe126b6c3: mov     %r10,0x10(%rsp)
  0x00007fffe126b6c8: nop
  0x00007fffe126b6c9: nop
  0x00007fffe126b6ca: nop
  0x00007fffe126b6cb: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [16]=Oop off=656}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ;   {runtime_call}
  0x00007fffe126b6d0: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)
                                                ;   {runtime_call}
  ;; B41: #	N1097 &lt;- B25  Freq: 1.01325e-06

  0x00007fffe126b6d5: mov     $0xfffffff6,%esi
  0x00007fffe126b6da: nop
  0x00007fffe126b6db: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=672}
                                                ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ;   {runtime_call}
  0x00007fffe126b6e0: callq   0x7ffff736b4ea    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)
                                                ;   {runtime_call}
  ;; B42: #	N1097 &lt;- B31 B30  Freq: 2.01176e-06

  0x00007fffe126b6e5: mov     $0xffffff86,%esi
  0x00007fffe126b6ea: mov     %r11d,(%rsp)
  0x00007fffe126b6ee: mov     %r9,0x10(%rsp)
  0x00007fffe126b6f3: mov     %r9,0x18(%rsp)
  0x00007fffe126b6f8: nop
  0x00007fffe126b6f9: nop
  0x00007fffe126b6fa: nop
  0x00007fffe126b6fb: callq   0x7fffe1107820    ; OopMap{[0]=NarrowOop [16]=Oop [24]=Oop off=704}
                                                ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ;   {runtime_call}
  0x00007fffe126b700: callq   0x7ffff736b4ea    ;*aload
                                                ; - java.lang.String::indexOf@43 (line 1558)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ;   {runtime_call}
  ;; B43: #	B44 &lt;- B46  Freq: 9.99999e-13

  0x00007fffe126b705: lock cmpxchg %r10,(%rsi)
  ;; B44: #	B3 B45 &lt;- B1 B43  Freq: 1e-06

  0x00007fffe126b70a: lea     0x60(%rsp),%rbx
  0x00007fffe126b70f: mov     (%rsi),%rax
  0x00007fffe126b712: test    $0x2,%rax
  0x00007fffe126b718: jne     0x7fffe126b73e
  0x00007fffe126b71a: or      $0x1,%rax
  0x00007fffe126b71e: mov     %rax,(%rbx)
  0x00007fffe126b721: lock cmpxchg %rbx,(%rsi)
  0x00007fffe126b726: je      0x7fffe126b757
  0x00007fffe126b72c: sub     %rsp,%rax
  0x00007fffe126b72f: and     $0xfffffffffffff007,%rax
  0x00007fffe126b736: mov     %rax,(%rbx)
  0x00007fffe126b739: jmpq    0x7fffe126b757
  0x00007fffe126b73e: movq    $0x3,(%rbx)
  0x00007fffe126b745: mov     %rax,%rbx
  0x00007fffe126b748: mov     0x16(%rbx),%rax
  0x00007fffe126b74c: test    %rax,%rax
  0x00007fffe126b74f: jne     0x7fffe126b757
  0x00007fffe126b751: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126b757: je      0x7fffe126b4b6
  ;; B45: #	B3 &lt;- B49 B44  Freq: 2e-12

  0x00007fffe126b75d: lea     0x60(%rsp),%rdx
  0x00007fffe126b762: mov     %rsi,0x8(%rsp)
  0x00007fffe126b767: mov     %rsi,0x10(%rsp)
  0x00007fffe126b76c: nop
  0x00007fffe126b76d: nop
  0x00007fffe126b76e: nop
  0x00007fffe126b76f: callq   0x7fffe11658a0    ; OopMap{[0]=Oop [8]=Oop [16]=Oop [40]=Oop off=820}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::write@3 (line 523)
                                                ;   {runtime_call}
  0x00007fffe126b774: jmpq    0x7fffe126b4b6
  ;; B46: #	B43 B47 &lt;- B2  Freq: 9.99999e-07

  0x00007fffe126b779: test    $0x7,%r8
  0x00007fffe126b780: jne     0x7fffe126b705
  ;; B47: #	B49 B48 &lt;- B46  Freq: 9.99998e-07

  0x00007fffe126b786: test    $0x300,%r8
  0x00007fffe126b78d: jne     0x7fffe126b79c
  ;; B48: #	B49 &lt;- B47  Freq: 9.99997e-07

  0x00007fffe126b78f: and     $0x37f,%rax
  0x00007fffe126b796: mov     %rax,%r11
  0x00007fffe126b799: or      %r15,%r11
  ;; B49: #	B45 B50 &lt;- B48 B47  Freq: 9.99998e-07

  0x00007fffe126b79c: lock cmpxchg %r11,(%rsi)
  0x00007fffe126b7a1: jne     0x7fffe126b75d
  ;; B50: #	B3 &lt;- B49  Freq: 9.99997e-07

  0x00007fffe126b7a3: jmpq    0x7fffe126b4b6
  ;; B51: #	B52 &lt;- B54  Freq: 9.99994e-13

  0x00007fffe126b7a8: mov     0x38(%rsp),%r11d
  0x00007fffe126b7ad: lock cmpxchg %r10,(%r11)
  ;; B52: #	B10 B53 &lt;- B8 B51  Freq: 9.99996e-07

  0x00007fffe126b7b2: lea     0x68(%rsp),%rbx
  0x00007fffe126b7b7: mov     (%r9),%rax
  0x00007fffe126b7ba: test    $0x2,%rax
  0x00007fffe126b7c0: jne     0x7fffe126b7e6
  0x00007fffe126b7c2: or      $0x1,%rax
  0x00007fffe126b7c6: mov     %rax,(%rbx)
  0x00007fffe126b7c9: lock cmpxchg %rbx,(%r9)
  0x00007fffe126b7ce: je      0x7fffe126b7ff
  0x00007fffe126b7d4: sub     %rsp,%rax
  0x00007fffe126b7d7: and     $0xfffffffffffff007,%rax
  0x00007fffe126b7de: mov     %rax,(%rbx)
  0x00007fffe126b7e1: jmpq    0x7fffe126b7ff
  0x00007fffe126b7e6: movq    $0x3,(%rbx)
  0x00007fffe126b7ed: mov     %rax,%rbx
  0x00007fffe126b7f0: mov     0x16(%rbx),%rax
  0x00007fffe126b7f4: test    %rax,%rax
  0x00007fffe126b7f7: jne     0x7fffe126b7ff
  0x00007fffe126b7f9: lock cmpxchg %r15,0x16(%rbx)
  0x00007fffe126b7ff: je      0x7fffe126b52c
  ;; B53: #	B10 &lt;- B57 B52  Freq: 1.99999e-12

  0x00007fffe126b805: mov     %r8,0x20(%rsp)
  0x00007fffe126b80a: mov     %r9,0x18(%rsp)
  0x00007fffe126b80f: mov     %r14d,0x10(%rsp)
  0x00007fffe126b814: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126b819: mov     0x38(%rsp),%eax
  0x00007fffe126b81d: mov     %eax,0xc(%rsp)
  0x00007fffe126b821: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126b826: mov     %r13d,0x8(%rsp)
  0x00007fffe126b82b: mov     0x28(%rsp),%rbp
  0x00007fffe126b830: mov     %r9,%rsi
  0x00007fffe126b833: lea     0x68(%rsp),%rdx
  0x00007fffe126b838: nop
  0x00007fffe126b839: nop
  0x00007fffe126b83a: nop
  0x00007fffe126b83b: callq   0x7fffe11658a0    ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop [32]=Oop [40]=Oop off=1024}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126b840: mov     0x8(%rsp),%r13d
  0x00007fffe126b845: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126b84a: mov     0xc(%rsp),%eax
  0x00007fffe126b84e: mov     %eax,0x38(%rsp)
  0x00007fffe126b852: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126b857: mov     0x10(%rsp),%r14d
  0x00007fffe126b85c: mov     0x18(%rsp),%r10
  0x00007fffe126b861: mov     0x20(%rsp),%r8
  0x00007fffe126b866: mov     %r10,%r9
  0x00007fffe126b869: jmpq    0x7fffe126b52c
  ;; B54: #	B51 B55 &lt;- B9  Freq: 9.99994e-07

  0x00007fffe126b86e: test    $0x7,%rcx
  0x00007fffe126b875: jne     0x7fffe126b7a8
  ;; B55: #	B57 B56 &lt;- B54  Freq: 9.99993e-07

  0x00007fffe126b87b: test    $0x300,%rcx
  0x00007fffe126b882: jne     0x7fffe126b891
  ;; B56: #	B57 &lt;- B55  Freq: 9.99992e-07

  0x00007fffe126b884: and     $0x37f,%rax
  0x00007fffe126b88b: mov     %rax,%r11
  0x00007fffe126b88e: or      %r15,%r11
  ;; B57: #	B53 B58 &lt;- B56 B55  Freq: 9.99993e-07

  0x00007fffe126b891: mov     0x38(%rsp),%ecx
  0x00007fffe126b895: lock cmpxchg %r11,(%rcx)
  0x00007fffe126b89a: jne     0x7fffe126b805
  ;; B58: #	B10 &lt;- B57  Freq: 9.99992e-07

  0x00007fffe126b8a0: jmpq    0x7fffe126b52c
  ;; B59: #	B23 B60 &lt;- B22  Freq: 9.99993e-07

  0x00007fffe126b8a5: lea     0x68(%rsp),%rax
  0x00007fffe126b8aa: cmpq    $0x0,(%rax)
  0x00007fffe126b8b1: je      0x7fffe126b92b
  0x00007fffe126b8b7: mov     (%r9),%r10
  0x00007fffe126b8ba: test    $0x2,%r10
  0x00007fffe126b8c1: je      0x7fffe126b923
  0x00007fffe126b8c3: mov     0x16(%r10),%rax
  0x00007fffe126b8c7: xor     %r15,%rax
  0x00007fffe126b8ca: or      0x26(%r10),%rax
  0x00007fffe126b8ce: jne     0x7fffe126b92b
  0x00007fffe126b8d0: mov     0x36(%r10),%rax
  0x00007fffe126b8d4: or      0x3e(%r10),%rax
  0x00007fffe126b8d8: jne     0x7fffe126b8e4
  0x00007fffe126b8da: movq    $0x0,0x16(%r10)
  0x00007fffe126b8e2: jmp     0x7fffe126b92b
  0x00007fffe126b8e4: cmpq    $0x0,0x46(%r10)
  0x00007fffe126b8ec: je      0x7fffe126b917
  0x00007fffe126b8ee: movq    $0x0,0x16(%r10)
  0x00007fffe126b8f6: lock addl $0x0,(%rsp)
  0x00007fffe126b8fb: cmpq    $0x0,0x46(%r10)
  0x00007fffe126b903: jne     0x7fffe126b91c
  0x00007fffe126b905: movabs  $0x0,%rax
  0x00007fffe126b90f: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126b915: jne     0x7fffe126b91c
  0x00007fffe126b917: or      $0x1,%eax
  0x00007fffe126b91a: jmp     0x7fffe126b92b
  0x00007fffe126b91c: test    $0x0,%eax
  0x00007fffe126b921: jmp     0x7fffe126b92b
  0x00007fffe126b923: mov     (%rax),%r10
  0x00007fffe126b926: lock cmpxchg %r10,(%r9)
  0x00007fffe126b92b: je      0x7fffe126b5eb
  ;; B60: #	B23 &lt;- B59  Freq: 9.99993e-13

  0x00007fffe126b931: mov     %r9,%rdi
  0x00007fffe126b934: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b939: movabs  $0x7ffff744655c,%r10
  0x00007fffe126b943: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@104 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126b946: jmpq    0x7fffe126b5eb
  ;; B61: #	B36 B62 &lt;- B35  Freq: 9.99948e-07

  0x00007fffe126b94b: lea     0x60(%rsp),%rax
  0x00007fffe126b950: cmpq    $0x0,(%rax)
  0x00007fffe126b957: je      0x7fffe126b9d1
  0x00007fffe126b95d: mov     (%r9),%r10
  0x00007fffe126b960: test    $0x2,%r10
  0x00007fffe126b967: je      0x7fffe126b9c9
  0x00007fffe126b969: mov     0x16(%r10),%rax
  0x00007fffe126b96d: xor     %r15,%rax
  0x00007fffe126b970: or      0x26(%r10),%rax
  0x00007fffe126b974: jne     0x7fffe126b9d1
  0x00007fffe126b976: mov     0x36(%r10),%rax
  0x00007fffe126b97a: or      0x3e(%r10),%rax
  0x00007fffe126b97e: jne     0x7fffe126b98a
  0x00007fffe126b980: movq    $0x0,0x16(%r10)
  0x00007fffe126b988: jmp     0x7fffe126b9d1
  0x00007fffe126b98a: cmpq    $0x0,0x46(%r10)
  0x00007fffe126b992: je      0x7fffe126b9bd
  0x00007fffe126b994: movq    $0x0,0x16(%r10)
  0x00007fffe126b99c: lock addl $0x0,(%rsp)
  0x00007fffe126b9a1: cmpq    $0x0,0x46(%r10)
  0x00007fffe126b9a9: jne     0x7fffe126b9c2
  0x00007fffe126b9ab: movabs  $0x0,%rax
  0x00007fffe126b9b5: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126b9bb: jne     0x7fffe126b9c2
  0x00007fffe126b9bd: or      $0x1,%eax
  0x00007fffe126b9c0: jmp     0x7fffe126b9d1
  0x00007fffe126b9c2: test    $0x0,%eax
  0x00007fffe126b9c7: jmp     0x7fffe126b9d1
  0x00007fffe126b9c9: mov     (%rax),%r10
  0x00007fffe126b9cc: lock cmpxchg %r10,(%r9)
  0x00007fffe126b9d1: je      0x7fffe126b681
  ;; B62: #	B36 &lt;- B61  Freq: 9.99948e-13

  0x00007fffe126b9d7: mov     %r9,%rdi
  0x00007fffe126b9da: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@3 (line 523)

  0x00007fffe126b9df: movabs  $0x7ffff744655c,%r10
  0x00007fffe126b9e9: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@54 (line 530)

  0x00007fffe126b9ec: jmpq    0x7fffe126b681
  ;; B63: #	B81 B64 &lt;- B18 B16 B17  Freq: 1.49999e-06

  0x00007fffe126b9f1: mov     %r10d,%r11d
  0x00007fffe126b9f4: mov     %r8,%r10
  0x00007fffe126b9f7: pushq   0x8(%rsp)
  0x00007fffe126b9fc: popq    0x18(%rsp)
  0x00007fffe126ba01: mov     %r14d,0x10(%rsp)
  0x00007fffe126ba06: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126ba0b: mov     0x38(%rsp),%eax
  0x00007fffe126ba0f: mov     %eax,0xc(%rsp)
  0x00007fffe126ba13: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126ba18: mov     %r13d,0x8(%rsp)
  0x00007fffe126ba1d: mov     (%rsp),%rbp
  0x00007fffe126ba21: mov     %r9,%rsi
  0x00007fffe126ba24: xor     %edx,%edx
  0x00007fffe126ba26: mov     %r11d,%r8d
  0x00007fffe126ba29: mov     %r14d,%r9d
  0x00007fffe126ba2c: pushq   0x28(%rsp)
  0x00007fffe126ba31: popq    (%rsp)
  0x00007fffe126ba35: mov     %r10,0x30(%rsp)
  0x00007fffe126ba3a: nop
  0x00007fffe126ba3b: callq   0x7fffe1169ba0    ; OopMap{rbp=Oop [0]=Oop [8]=NarrowOop [12]=NarrowOop [24]=Oop [40]=Oop [48]=Oop off=1536}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B64: #	B20 &lt;- B63  Freq: 1.49996e-06

  0x00007fffe126ba40: mov     %rbp,(%rsp)
  0x00007fffe126ba44: mov     0x8(%rsp),%r13d
  0x00007fffe126ba49: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126ba4e: mov     0xc(%rsp),%eax
  0x00007fffe126ba52: mov     %eax,0x38(%rsp)
  0x00007fffe126ba56: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126ba5b: mov     0x10(%rsp),%r14d
  0x00007fffe126ba60: pushq   0x18(%rsp)
  0x00007fffe126ba65: popq    0x8(%rsp)
  0x00007fffe126ba6a: jmpq    0x7fffe126b5b6
  ;; B65: #	N1097 &lt;- B3  Freq: 4.76837e-07

  0x00007fffe126ba6f: mov     $0xffffff65,%esi
  0x00007fffe126ba74: mov     %r10,0x10(%rsp)
  0x00007fffe126ba79: mov     %r10,0x18(%rsp)
  0x00007fffe126ba7e: nop
  0x00007fffe126ba7f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [16]=Oop [24]=Oop off=1604}
                                                ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ;   {runtime_call}
  0x00007fffe126ba84: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.PrintStream::ensureOpen@4 (line 324)
                                                ; - java.io.PrintStream::write@5 (line 524)
                                                ;   {runtime_call}
  ;; B66: #	N1097 &lt;- B10  Freq: 4.76835e-07

  0x00007fffe126ba89: mov     $0xffffff65,%esi
  0x00007fffe126ba8e: pushq   0x28(%rsp)
  0x00007fffe126ba93: popq    0x8(%rsp)
  0x00007fffe126ba98: mov     %r13d,0x20(%rsp)
  0x00007fffe126ba9d: mov     %r14d,0x24(%rsp)
  0x00007fffe126baa2: nop
  0x00007fffe126baa3: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [32]=NarrowOop [56]=NarrowOop off=1640}
                                                ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126baa8: callq   0x7ffff736b4ea    ;*ifnonnull
                                                ; - java.io.BufferedWriter::ensureOpen@4 (line 115)
                                                ; - java.io.BufferedWriter::write@9 (line 221)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B67: #	N1097 &lt;- B27  Freq: 4.76814e-07

  0x00007fffe126baad: mov     $0xffffff65,%esi
  0x00007fffe126bab2: mov     %r9,0x10(%rsp)
  0x00007fffe126bab7: mov     %r9,0x18(%rsp)
  0x00007fffe126babc: nop
  0x00007fffe126babd: nop
  0x00007fffe126babe: nop
  0x00007fffe126babf: callq   0x7fffe1107820    ; OopMap{[0]=Oop [16]=Oop [24]=Oop off=1668}
                                                ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)
                                                ;   {runtime_call}
  0x00007fffe126bac4: callq   0x7ffff736b4ea    ;*ifeq
                                                ; - java.io.PrintStream::write@34 (line 528)
                                                ;   {runtime_call}
  ;; B68: #	N1097 &lt;- B12  Freq: 2.38417e-07

  0x00007fffe126bac9: mov     $0xffffff65,%esi
  0x00007fffe126bace: pushq   0x28(%rsp)
  0x00007fffe126bad3: popq    0x8(%rsp)
  0x00007fffe126bad8: mov     %r13d,0x20(%rsp)
  0x00007fffe126badd: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126bae2: mov     0x38(%rsp),%eax
  0x00007fffe126bae6: mov     %eax,0x34(%rsp)
  0x00007fffe126baea: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126baef: mov     %r14d,0x38(%rsp)
  0x00007fffe126baf4: mov     %r14d,0x3c(%rsp)
  0x00007fffe126baf9: nop
  0x00007fffe126bafa: nop
  0x00007fffe126bafb: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop [32]=NarrowOop [52]=NarrowOop off=1728}
                                                ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bb00: callq   0x7ffff736b4ea    ;*if_icmpge
                                                ; - java.io.BufferedWriter::min@2 (line 153)
                                                ; - java.io.BufferedWriter::write@42 (line 225)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B69: #	N1097 &lt;- B14  Freq: 2.38417e-07

  0x00007fffe126bb05: mov     $0xffffff65,%esi
  0x00007fffe126bb0a: pushq   0x28(%rsp)
  0x00007fffe126bb0f: popq    0x8(%rsp)
  0x00007fffe126bb14: mov     %r13d,0x20(%rsp)
  0x00007fffe126bb19: mov     %r14d,0x34(%rsp)
  0x00007fffe126bb1e: mov     %r14d,0x3c(%rsp)
  0x00007fffe126bb23: mov     %r10d,0x48(%rsp)
  0x00007fffe126bb28: mov     %r11d,0x50(%rsp)
  0x00007fffe126bb2d: nop
  0x00007fffe126bb2e: nop
  0x00007fffe126bb2f: callq   0x7fffe1107820    ; OopMap{rbp=NarrowOop [0]=Oop [8]=Oop [32]=NarrowOop [56]=NarrowOop off=1780}
                                                ;*if_icmple
                                                ; - java.lang.String::getChars@19 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bb34: callq   0x7ffff736b4ea    ;*invokevirtual getChars
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B70: #	N1097 &lt;- B20  Freq: 2.38417e-07

  0x00007fffe126bb39: mov     $0xffffff65,%esi
  0x00007fffe126bb3e: mov     0x28(%rsp),%rbp
  0x00007fffe126bb43: mov     %r13d,0x18(%rsp)
  0x00007fffe126bb48: mov     %r14d,0x2c(%rsp)
  0x00007fffe126bb4d: mov     %r11d,0x30(%rsp)
  0x00007fffe126bb52: mov     %r10d,0x34(%rsp)
  0x00007fffe126bb57: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [56]=NarrowOop off=1820}
                                                ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bb5c: callq   0x7ffff736b4ea    ;*if_icmplt
                                                ; - java.io.BufferedWriter::write@92 (line 229)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B71: #	N1097 &lt;- B4  Freq: 1.01328e-06

  0x00007fffe126bb61: mov     $0xfffffff6,%esi
  0x00007fffe126bb66: mov     %r10,%rbp
  0x00007fffe126bb69: nop
  0x00007fffe126bb6a: nop
  0x00007fffe126bb6b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=1840}
                                                ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bb70: callq   0x7ffff736b4ea    ;*invokevirtual write
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B72: #	N1097 &lt;- B5  Freq: 1.01328e-06

  0x00007fffe126bb75: mov     $0xfffffff6,%esi
  0x00007fffe126bb7a: mov     0x28(%rsp),%rbp
  0x00007fffe126bb7f: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=1860}
                                                ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bb84: callq   0x7ffff736b4ea    ;*invokevirtual length
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B73: #	N1097 &lt;- B6  Freq: 1.01328e-06

  0x00007fffe126bb89: mov     $0xfffffff6,%esi
  0x00007fffe126bb8e: mov     0x28(%rsp),%rbp
  0x00007fffe126bb93: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=1880}
                                                ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bb98: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::length@4 (line 622)
                                                ; - java.io.Writer::write@4 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B74: #	N1097 &lt;- B7  Freq: 1.01328e-06

  0x00007fffe126bb9d: mov     $0xfffffff6,%esi
  0x00007fffe126bba2: mov     0x28(%rsp),%rbp
  0x00007fffe126bba7: mov     %r13d,0x18(%rsp)
  0x00007fffe126bbac: mov     %r14d,0x1c(%rsp)
  0x00007fffe126bbb1: nop
  0x00007fffe126bbb2: nop
  0x00007fffe126bbb3: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [24]=NarrowOop off=1912}
                                                ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bbb8: callq   0x7ffff736b4ea    ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B75: #	N1097 &lt;- B28  Freq: 1.01323e-06

  0x00007fffe126bbbd: mov     $0xfffffff6,%esi
  0x00007fffe126bbc2: mov     %r9,(%rsp)
  0x00007fffe126bbc6: mov     %r9,0x8(%rsp)
  0x00007fffe126bbcb: callq   0x7fffe1107820    ; OopMap{[0]=Oop [8]=Oop off=1936}
                                                ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ;   {runtime_call}
  0x00007fffe126bbd0: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::indexOf@4 (line 1545)
                                                ; - java.lang.String::indexOf@3 (line 1502)
                                                ; - java.io.PrintStream::write@40 (line 528)
                                                ;   {runtime_call}
  ;; B76: #	N1097 &lt;- B13  Freq: 5.06637e-07

  0x00007fffe126bbd5: mov     $0xfffffff6,%esi
  0x00007fffe126bbda: mov     0x28(%rsp),%rbp
  0x00007fffe126bbdf: mov     %r13d,0x18(%rsp)
  0x00007fffe126bbe4: mov     %r14d,0x2c(%rsp)
  0x00007fffe126bbe9: nop
  0x00007fffe126bbea: nop
  0x00007fffe126bbeb: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [56]=NarrowOop off=1968}
                                                ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bbf0: callq   0x7ffff736b4ea    ;*arraylength
                                                ; - java.lang.String::getChars@18 (line 819)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B77: #	N1097 &lt;- B15  Freq: 5.06636e-07

  0x00007fffe126bbf5: mov     $0xfffffff6,%esi
  0x00007fffe126bbfa: mov     0x28(%rsp),%rbp
  0x00007fffe126bbff: mov     %r13d,0x18(%rsp)
  0x00007fffe126bc04: mov     %r14d,0x2c(%rsp)
  0x00007fffe126bc09: mov     %rax,0xfffffffffffffff8(%rsp)
  0x00007fffe126bc0e: mov     0x38(%rsp),%eax
  0x00007fffe126bc12: mov     %eax,0x30(%rsp)
  0x00007fffe126bc16: mov     0xfffffffffffffff8(%rsp),%rax
  0x00007fffe126bc1b: mov     %ebx,0x34(%rsp)
  0x00007fffe126bc1f: mov     %r10d,0x38(%rsp)
  0x00007fffe126bc24: mov     %r14d,0x3c(%rsp)
  0x00007fffe126bc29: nop
  0x00007fffe126bc2a: nop
  0x00007fffe126bc2b: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop [24]=NarrowOop [48]=NarrowOop [52]=NarrowOop off=2032}
                                                ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  0x00007fffe126bc30: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ;   {runtime_call}
  ;; B78: #	N1097 &lt;- B86  Freq: 1.99996e-10

  0x00007fffe126bc35: mov     $0xffffffbd,%esi
  0x00007fffe126bc3a: mov     %rax,%rbp
  0x00007fffe126bc3d: nop
  0x00007fffe126bc3e: nop
  0x00007fffe126bc3f: callq   0x7fffe1107820    ; OopMap{rbp=Oop off=2052}
                                                ;*astore_2
                                                ; - java.io.PrintStream::write@66 (line 532)
                                                ;   {runtime_call}
  0x00007fffe126bc44: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ;   {runtime_call}
  ;; B79: #	N1097 &lt;- B86  Freq: 1.99996e-10

  0x00007fffe126bc49: mov     $0xffffffbd,%esi
  0x00007fffe126bc4e: mov     %rax,(%rsp)
  0x00007fffe126bc52: nop
  0x00007fffe126bc53: callq   0x7fffe1107820    ; OopMap{rbp=Oop [0]=Oop off=2072}
                                                ;*astore_2
                                                ; - java.io.PrintStream::write@76 (line 535)
                                                ;   {runtime_call}
  0x00007fffe126bc58: callq   0x7ffff736b4ea    ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ;   {runtime_call}
  ;; B80: #	N1097 &lt;- B86  Freq: 1.99996e-10

  0x00007fffe126bc5d: mov     %rax,%rsi
  0x00007fffe126bc60: add     $0x80,%rsp
  0x00007fffe126bc67: pop     %rbp
  0x00007fffe126bc68: jmpq    0x7fffe11657a0    ;*invokestatic arraycopy
                                                ; - java.lang.String::getChars@58 (line 825)
                                                ; - java.io.BufferedWriter::write@63 (line 226)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)
                                                ;   {runtime_call}
  ;; B81: #	B89 B82 &lt;- B63  Freq: 1.49999e-11

  0x00007fffe126bc6d: mov     %rax,%rbx
  0x00007fffe126bc70: mov     $0x7,%r10d
  0x00007fffe126bc76: mov     0xc(%rsp),%r8d
  0x00007fffe126bc7b: and     (%r8),%r10
  0x00007fffe126bc7e: cmp     $0x5,%r10
  0x00007fffe126bc82: jne     0x7fffe126bd64    ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  ;; B82: #	B85 &lt;- B90 B89 B81  Freq: 1.49999e-11

  0x00007fffe126bc88: mov     %rbx,(%rsp)
  0x00007fffe126bc8c: jmp     0x7fffe126bc9e    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@20 (line 526)

  ;; B83: #	B85 &lt;- B24  Freq: 9.99992e-06

  0x00007fffe126bc8e: mov     %rax,(%rsp)
  0x00007fffe126bc92: mov     %rax,%rbx
  0x00007fffe126bc95: jmp     0x7fffe126bc9e    ;*invokevirtual flushBuffer
                                                ; - java.io.PrintStream::write@27 (line 527)

  ;; B84: #	B85 &lt;- B26  Freq: 9.99971e-06

  0x00007fffe126bc97: mov     %rax,(%rsp)
  0x00007fffe126bc9b: mov     %rax,%rbx
  ;; B85: #	B87 B86 &lt;- B82 B83 B84  Freq: 1.99996e-05

  0x00007fffe126bc9e: mov     0x28(%rsp),%rbp
  0x00007fffe126bca3: mov     $0x7,%r10d
  0x00007fffe126bca9: and     0x0(%rbp),%r10
  0x00007fffe126bcad: cmp     $0x5,%r10
  0x00007fffe126bcb1: jne     0x7fffe126bcbc    ;*monitorexit
                                                ; - java.io.PrintStream::write@60 (line 530)

  ;; B86: #	B78 B80 B79 &lt;- B88 B87 B85  Freq: 1.99996e-05

  0x00007fffe126bcb3: mov     %rbx,%rsi
  0x00007fffe126bcb6: nop
  0x00007fffe126bcb7: callq   0x7fffe11657a0    ; OopMap{rbp=Oop [0]=Oop off=2172}
                                                ;*athrow
                                                ; - java.io.PrintStream::write@62 (line 530)
                                                ;   {runtime_call}
  ;; B87: #	B86 B88 &lt;- B85  Freq: 1.99996e-11

  0x00007fffe126bcbc: lea     0x60(%rsp),%rax
  0x00007fffe126bcc1: cmpq    $0x0,(%rax)
  0x00007fffe126bcc8: je      0x7fffe126bd44
  0x00007fffe126bcce: mov     0x0(%rbp),%r10
  0x00007fffe126bcd2: test    $0x2,%r10
  0x00007fffe126bcd9: je      0x7fffe126bd3b
  0x00007fffe126bcdb: mov     0x16(%r10),%rax
  0x00007fffe126bcdf: xor     %r15,%rax
  0x00007fffe126bce2: or      0x26(%r10),%rax
  0x00007fffe126bce6: jne     0x7fffe126bd44
  0x00007fffe126bce8: mov     0x36(%r10),%rax
  0x00007fffe126bcec: or      0x3e(%r10),%rax
  0x00007fffe126bcf0: jne     0x7fffe126bcfc
  0x00007fffe126bcf2: movq    $0x0,0x16(%r10)
  0x00007fffe126bcfa: jmp     0x7fffe126bd44
  0x00007fffe126bcfc: cmpq    $0x0,0x46(%r10)
  0x00007fffe126bd04: je      0x7fffe126bd2f
  0x00007fffe126bd06: movq    $0x0,0x16(%r10)
  0x00007fffe126bd0e: lock addl $0x0,(%rsp)
  0x00007fffe126bd13: cmpq    $0x0,0x46(%r10)
  0x00007fffe126bd1b: jne     0x7fffe126bd34
  0x00007fffe126bd1d: movabs  $0x0,%rax
  0x00007fffe126bd27: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126bd2d: jne     0x7fffe126bd34
  0x00007fffe126bd2f: or      $0x1,%eax
  0x00007fffe126bd32: jmp     0x7fffe126bd44
  0x00007fffe126bd34: test    $0x0,%eax
  0x00007fffe126bd39: jmp     0x7fffe126bd44
  0x00007fffe126bd3b: mov     (%rax),%r10
  0x00007fffe126bd3e: lock cmpxchg %r10,0x0(%rbp)
  0x00007fffe126bd44: je      0x7fffe126bcb3
  ;; B88: #	B86 &lt;- B87  Freq: 1.99996e-17

  0x00007fffe126bd4a: mov     %rbp,%rdi
  0x00007fffe126bd4d: lea     0x60(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.PrintStream::write@3 (line 523)

  0x00007fffe126bd52: movabs  $0x7ffff744655c,%r10
  0x00007fffe126bd5c: callq   %r10              ;*monitorexit
                                                ; - java.io.PrintStream::write@60 (line 530)

  0x00007fffe126bd5f: jmpq    0x7fffe126bcb3
  ;; B89: #	B82 B90 &lt;- B81  Freq: 1.49999e-17

  0x00007fffe126bd64: mov     0x18(%rsp),%r11
  0x00007fffe126bd69: lea     0x68(%rsp),%rax
  0x00007fffe126bd6e: cmpq    $0x0,(%rax)
  0x00007fffe126bd75: je      0x7fffe126bdef
  0x00007fffe126bd7b: mov     (%r11),%r10
  0x00007fffe126bd7e: test    $0x2,%r10
  0x00007fffe126bd85: je      0x7fffe126bde7
  0x00007fffe126bd87: mov     0x16(%r10),%rax
  0x00007fffe126bd8b: xor     %r15,%rax
  0x00007fffe126bd8e: or      0x26(%r10),%rax
  0x00007fffe126bd92: jne     0x7fffe126bdef
  0x00007fffe126bd94: mov     0x36(%r10),%rax
  0x00007fffe126bd98: or      0x3e(%r10),%rax
  0x00007fffe126bd9c: jne     0x7fffe126bda8
  0x00007fffe126bd9e: movq    $0x0,0x16(%r10)
  0x00007fffe126bda6: jmp     0x7fffe126bdef
  0x00007fffe126bda8: cmpq    $0x0,0x46(%r10)
  0x00007fffe126bdb0: je      0x7fffe126bddb
  0x00007fffe126bdb2: movq    $0x0,0x16(%r10)
  0x00007fffe126bdba: lock addl $0x0,(%rsp)
  0x00007fffe126bdbf: cmpq    $0x0,0x46(%r10)
  0x00007fffe126bdc7: jne     0x7fffe126bde0
  0x00007fffe126bdc9: movabs  $0x0,%rax
  0x00007fffe126bdd3: lock cmpxchg %r15,0x16(%r10)
  0x00007fffe126bdd9: jne     0x7fffe126bde0
  0x00007fffe126bddb: or      $0x1,%eax
  0x00007fffe126bdde: jmp     0x7fffe126bdef
  0x00007fffe126bde0: test    $0x0,%eax
  0x00007fffe126bde5: jmp     0x7fffe126bdef
  0x00007fffe126bde7: mov     (%rax),%r10
  0x00007fffe126bdea: lock cmpxchg %r10,(%r11)
  0x00007fffe126bdef: je      0x7fffe126bc88
  ;; B90: #	B82 &lt;- B89  Freq: 1.49999e-23

  0x00007fffe126bdf5: mov     %r11,%rdi
  0x00007fffe126bdf8: lea     0x68(%rsp),%rsi   ;*monitorenter
                                                ; - java.io.BufferedWriter::write@7 (line 220)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126bdfd: movabs  $0x7ffff744655c,%r10
  0x00007fffe126be07: callq   %r10              ;*monitorexit
                                                ; - java.io.BufferedWriter::write@112 (line 232)
                                                ; - java.io.Writer::write@7 (line 157)
                                                ; - java.io.PrintStream::write@13 (line 525)

  0x00007fffe126be0a: jmpq    0x7fffe126bc88
  0x00007fffe126be0f: hlt
  0x00007fffe126be10: hlt
  0x00007fffe126be11: hlt
  0x00007fffe126be12: hlt
  0x00007fffe126be13: hlt
  0x00007fffe126be14: hlt
  0x00007fffe126be15: hlt
  0x00007fffe126be16: hlt
  0x00007fffe126be17: hlt
  0x00007fffe126be18: hlt
  0x00007fffe126be19: hlt
  0x00007fffe126be1a: hlt
  0x00007fffe126be1b: hlt
  0x00007fffe126be1c: hlt
  0x00007fffe126be1d: hlt
  0x00007fffe126be1e: hlt
  0x00007fffe126be1f: hlt
[Stub Code]
  0x00007fffe126be20: movabs  $0x0,%rbx         ;   {no_reloc}
  0x00007fffe126be2a: jmpq    0x7fffe126be2a    ;   {runtime_call}
  0x00007fffe126be2f: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe126be39: jmpq    0x7fffe126be39    ;   {runtime_call}
[Exception Handler]
  0x00007fffe126be3e: jmpq    0x7fffe1004ee0    ;   {runtime_call}
[Deopt Handler Code]
  0x00007fffe126be43: callq   0x7fffe126be48
  0x00007fffe126be48: subq    $0x5,(%rsp)
  0x00007fffe126be4d: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe126be52: hlt
  0x00007fffe126be53: hlt
  0x00007fffe126be54: hlt
  0x00007fffe126be55: hlt
  0x00007fffe126be56: hlt
  0x00007fffe126be57: hlt
<nmethod compile_id='106' compiler='C2' level='4' entry='0x00007fffe126b440' size='6296' address='0x00007fffe126b290' relocation_offset='304' insts_offset='432' stub_offset='2960' scopes_data_offset='3128' scopes_pcs_offset='4432' dependencies_offset='6096' handler_table_offset='6112' nul_chk_table_offset='6232' method='java/io/PrintStream write (Ljava/lang/String;)V' bytes='83' count='74240' iicount='74240' stamp='120.670'/>
<make_not_entrant thread='140736956679936' compile_id='70' compiler='C1' level='2' stamp='120.670'/>
<writer thread='140737327351552'/>
<task_queued compile_id='109' compile_kind='osr' method='StackTopCache main ([Ljava/lang/String;)V' bytes='37' count='1' backedge_count='60416' iicount='1' osr_bci='2' level='3' stamp='121.110' comment='tiered' hot_count='60416'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe125e890:
Code:
Argument 0 is unknown.RIP: 0x7fffe125eb00 Code size: 0x00000be0
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;
  ;;  block B31 [0, 0]

  0x00007fffe125eb00: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125eb07: push    %rbp
  0x00007fffe125eb08: sub     $0x90,%rsp
  0x00007fffe125eb0f: movabs  $0x7ffff4ea2898,%rdi  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125eb19: mov     0x104(%rdi),%ebx
  0x00007fffe125eb1f: add     $0x8,%ebx
  0x00007fffe125eb22: mov     %ebx,0x104(%rdi)
  0x00007fffe125eb28: movabs  $0x7ffff4ea2318,%rdi  ;   {metadata({method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125eb32: and     $0x1ff8,%ebx
  0x00007fffe125eb38: cmp     $0x0,%ebx
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0066b90]
  0x00007fffe125eb3b: je      0x7fffe125f336    ;*iconst_0
                                                ; - StackTopCache::main@0 (line 4)

  ;;  block B32 [0, 0]

  ;;  block B0 [0, 2]

  0x00007fffe125eb41: mov     $0x0,%edi         ;*iload_1
                                                ; - StackTopCache::main@2 (line 4)

  0x00007fffe125eb46: nop
  0x00007fffe125eb47: nop
  ;;  block B1 [2, 5]

  0x00007fffe125eb48: cmp     $0x186a0,%edi
  0x00007fffe125eb4e: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125eb58: movabs  $0x130,%rsi
  0x00007fffe125eb62: jnl     0x7fffe125eb72
  0x00007fffe125eb68: movabs  $0x140,%rsi
  0x00007fffe125eb72: mov     (%rax,%rsi),%rbx
  0x00007fffe125eb76: lea     0x1(%rbx),%rbx
  0x00007fffe125eb7a: mov     %rbx,(%rax,%rsi)
  ;;   66 branch [GE] [B3] 
  0x00007fffe125eb7e: jnl     0x7fffe125f250    ;*if_icmpge
                                                ; - StackTopCache::main@5 (line 4)

  ;;  block B2 [8, 4]

  0x00007fffe125eb84: movabs  $0xd7380c78,%rax  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x00007fffe125eb8e: mov     0x6c(%rax),%ebx
  0x00007fffe125eb91: push    %r10
  0x00007fffe125eb93: cmp     0x16afb046(%rip),%r12  ;   {external_word}
  0x00007fffe125eb9a: je      0x7fffe125ec17
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125eba0: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125eba5: sub     $0x80,%rsp
  0x00007fffe125ebac: mov     %rax,0x78(%rsp)
  0x00007fffe125ebb1: mov     %rcx,0x70(%rsp)
  0x00007fffe125ebb6: mov     %rdx,0x68(%rsp)
  0x00007fffe125ebbb: mov     %rbx,0x60(%rsp)
  0x00007fffe125ebc0: mov     %rbp,0x50(%rsp)
  0x00007fffe125ebc5: mov     %rsi,0x48(%rsp)
  0x00007fffe125ebca: mov     %rdi,0x40(%rsp)
  0x00007fffe125ebcf: mov     %r8,0x38(%rsp)
  0x00007fffe125ebd4: mov     %r9,0x30(%rsp)
  0x00007fffe125ebd9: mov     %r10,0x28(%rsp)
  0x00007fffe125ebde: mov     %r11,0x20(%rsp)
  0x00007fffe125ebe3: mov     %r12,0x18(%rsp)
  0x00007fffe125ebe8: mov     %r13,0x10(%rsp)
  0x00007fffe125ebed: mov     %r14,0x8(%rsp)
  0x00007fffe125ebf2: mov     %r15,(%rsp)
  0x00007fffe125ebf6: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125ec00: movabs  $0x7fffe125eba0,%rsi  ;   {internal_word}
  0x00007fffe125ec0a: mov     %rsp,%rdx
  0x00007fffe125ec0d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125ec11: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125ec16: hlt
  0x00007fffe125ec17: pop     %r10              ;*getstatic out
                                                ; - StackTopCache::main@8 (line 5)

  0x00007fffe125ec19: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ec23: addq    $0x1,0x150(%rax)
  0x00007fffe125ec2b: movabs  $0x7ffff4ea25f8,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ec35: mov     0x104(%rax),%esi
  0x00007fffe125ec3b: add     $0x8,%esi
  0x00007fffe125ec3e: mov     %esi,0x104(%rax)
  0x00007fffe125ec44: movabs  $0x7ffff4ea23d8,%rax  ;   {metadata({method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ec4e: and     $0x7ffff8,%esi
  0x00007fffe125ec54: cmp     $0x0,%esi
  ;;   92 branch [EQ] [CounterOverflowStub: 0x00007fffb41869d0]
  0x00007fffe125ec57: je      0x7fffe125f34d
  0x00007fffe125ec5d: cmp     (%rbx),%rax       ;*invokevirtual println
                                                ; - StackTopCache::main@16 (line 5)
                                                ; implicit exception: dispatches to 0x00007fffe125f364
  0x00007fffe125ec60: mov     %rbx,%rax
  0x00007fffe125ec63: movabs  $0x7ffff4ea2898,%rsi  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ec6d: movabs  $0x100028ea0,%r10  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe125ec77: mov     %r10,0x168(%rsi)
  0x00007fffe125ec7e: addq    $0x1,0x170(%rsi)
  0x00007fffe125ec86: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125ec90: mov     0x104(%rax),%esi
  0x00007fffe125ec96: add     $0x8,%esi
  0x00007fffe125ec99: mov     %esi,0x104(%rax)
  0x00007fffe125ec9f: movabs  $0x7ffff4c24a80,%rax  ;   {metadata({method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125eca9: and     $0x7ffff8,%esi
  0x00007fffe125ecaf: cmp     $0x0,%esi
  ;;  116 branch [EQ] [CounterOverflowStub: 0x00007fffb41871a0]
  0x00007fffe125ecb2: je      0x7fffe125f3e0
  0x00007fffe125ecb8: lea     0x78(%rsp),%rsi
  0x00007fffe125ecbd: mov     %rbx,0x8(%rsi)
  0x00007fffe125ecc1: mov     (%rbx),%rax
  0x00007fffe125ecc4: mov     %rax,%rdx
  0x00007fffe125ecc7: and     $0x7,%rdx
  0x00007fffe125eccb: cmp     $0x5,%rdx
  0x00007fffe125eccf: jne     0x7fffe125ed56
  0x00007fffe125ecd5: mov     0x8(%rbx),%edx
  0x00007fffe125ecd8: shl     $0x3,%rdx
  0x00007fffe125ecdc: mov     0xb0(%rdx),%rdx
  0x00007fffe125ece3: or      %r15,%rdx
  0x00007fffe125ece6: xor     %rax,%rdx
  0x00007fffe125ece9: and     $0xffffffffffffff87,%rdx
  0x00007fffe125eced: je      0x7fffe125ed7e
  0x00007fffe125ecf3: test    $0x7,%rdx
  0x00007fffe125ecfa: jne     0x7fffe125ed43
  0x00007fffe125ecfc: test    $0x300,%rdx
  0x00007fffe125ed03: jne     0x7fffe125ed22
  0x00007fffe125ed05: and     $0x37f,%rax
  0x00007fffe125ed0c: mov     %rax,%rdx
  0x00007fffe125ed0f: or      %r15,%rdx
  0x00007fffe125ed12: lock cmpxchg %rdx,(%rbx)
  0x00007fffe125ed17: jne     0x7fffe125f3f7
  0x00007fffe125ed1d: jmpq    0x7fffe125ed7e
  0x00007fffe125ed22: mov     0x8(%rbx),%edx
  0x00007fffe125ed25: shl     $0x3,%rdx
  0x00007fffe125ed29: mov     0xb0(%rdx),%rdx
  0x00007fffe125ed30: or      %r15,%rdx
  0x00007fffe125ed33: lock cmpxchg %rdx,(%rbx)
  0x00007fffe125ed38: jne     0x7fffe125f3f7
  0x00007fffe125ed3e: jmpq    0x7fffe125ed7e
  0x00007fffe125ed43: mov     0x8(%rbx),%edx
  0x00007fffe125ed46: shl     $0x3,%rdx
  0x00007fffe125ed4a: mov     0xb0(%rdx),%rdx
  0x00007fffe125ed51: lock cmpxchg %rdx,(%rbx)
  0x00007fffe125ed56: mov     (%rbx),%rax
  0x00007fffe125ed59: or      $0x1,%rax
  0x00007fffe125ed5d: mov     %rax,(%rsi)
  0x00007fffe125ed60: lock cmpxchg %rsi,(%rbx)
  0x00007fffe125ed65: je      0x7fffe125ed7e
  0x00007fffe125ed6b: sub     %rsp,%rax
  0x00007fffe125ed6e: and     $0xfffffffffffff007,%rax
  0x00007fffe125ed75: mov     %rax,(%rsi)
  0x00007fffe125ed78: jne     0x7fffe125f3f7    ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe125ed7e: mov     %edi,0x64(%rsp)
  ;;  block B10 [4, 15]

  0x00007fffe125ed82: mov     %rbx,%rsi
  0x00007fffe125ed85: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125ed8f: addq    $0x1,0x140(%rax)
  0x00007fffe125ed97: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125eda1: mov     0x104(%rsi),%eax
  0x00007fffe125eda7: add     $0x8,%eax
  0x00007fffe125edaa: mov     %eax,0x104(%rsi)
  0x00007fffe125edb0: movabs  $0x7ffff4c24268,%rsi  ;   {metadata({method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125edba: and     $0x7ffff8,%eax
  0x00007fffe125edc0: cmp     $0x0,%eax
  ;;  146 branch [EQ] [CounterOverflowStub: 0x00007fffb4187bd0]
  0x00007fffe125edc3: je      0x7fffe125f40a
  0x00007fffe125edc9: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125edd3: addq    $0x1,0x130(%rsi)
  0x00007fffe125eddb: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe125ede5: mov     0x104(%rsi),%eax
  0x00007fffe125edeb: add     $0x8,%eax
  0x00007fffe125edee: mov     %eax,0x104(%rsi)
  0x00007fffe125edf4: movabs  $0x7ffff4aab458,%rsi  ;   {metadata({method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe125edfe: and     $0x7ffff8,%eax
  0x00007fffe125ee04: cmp     $0x0,%eax
  ;;  166 branch [EQ] [CounterOverflowStub: 0x00007fffb41882f0]
  0x00007fffe125ee07: je      0x7fffe125f421
  0x00007fffe125ee0d: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe125ee17: addq    $0x1,0x130(%rsi)
  0x00007fffe125ee1f: mov     $0x3,%esi         ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe125ee24: mov     %rbx,0x68(%rsp)
  0x00007fffe125ee29: nop
  0x00007fffe125ee2a: nop
  0x00007fffe125ee2b: nop
  0x00007fffe125ee2c: nop
  0x00007fffe125ee2d: nop
  0x00007fffe125ee2e: nop
  0x00007fffe125ee2f: callq   0x7fffe1106300    ; OopMap{[104]=Oop [128]=Oop off=820}
                                                ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {static_call}
  0x00007fffe125ee34: mov     0x68(%rsp),%rbx
  0x00007fffe125ee39: movabs  $0x7ffff4d77830,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125ee43: addq    $0x1,0x140(%rdx)
  0x00007fffe125ee4b: mov     %rax,%rdx
  0x00007fffe125ee4e: mov     0x68(%rsp),%rsi   ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe125ee53: nop
  0x00007fffe125ee54: nop
  0x00007fffe125ee55: nop
  0x00007fffe125ee56: nop
  0x00007fffe125ee57: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [128]=Oop off=860}
                                                ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {optimized virtual_call}
  0x00007fffe125ee5c: mov     0x68(%rsp),%rbx
  0x00007fffe125ee61: movabs  $0x7ffff4d77660,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125ee6b: addq    $0x1,0x160(%rsi)
  0x00007fffe125ee73: mov     0x68(%rsp),%rsi   ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe125ee78: nop
  0x00007fffe125ee79: nop
  0x00007fffe125ee7a: nop
  0x00007fffe125ee7b: nop
  0x00007fffe125ee7c: nop
  0x00007fffe125ee7d: nop
  0x00007fffe125ee7e: nop
  0x00007fffe125ee7f: callq   0x7fffe1105e80    ; OopMap{[104]=Oop [128]=Oop off=900}
                                                ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {optimized virtual_call}
  0x00007fffe125ee84: lea     0x78(%rsp),%rax
  0x00007fffe125ee89: mov     0x8(%rax),%rdi
  0x00007fffe125ee8d: mov     (%rdi),%rsi
  0x00007fffe125ee90: and     $0x7,%rsi
  0x00007fffe125ee94: cmp     $0x5,%rsi
  0x00007fffe125ee98: je      0x7fffe125eeb5
  0x00007fffe125ee9e: mov     (%rax),%rsi
  0x00007fffe125eea1: test    %rsi,%rsi
  0x00007fffe125eea4: je      0x7fffe125eeb5
  0x00007fffe125eeaa: lock cmpxchg %rsi,(%rdi)
  0x00007fffe125eeaf: jne     0x7fffe125f438    ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B11 [15, 15]

  0x00007fffe125eeb5: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125eebf: incl    0x170(%rax)       ;*goto
                                                ; - java.io.PrintStream::println@15 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B7 [19, 4]

  0x00007fffe125eec5: movabs  $0xd7380c78,%rax  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x00007fffe125eecf: mov     0x6c(%rax),%edi
  0x00007fffe125eed2: push    %r10
  0x00007fffe125eed4: cmp     0x16afad05(%rip),%r12  ;   {external_word}
  0x00007fffe125eedb: je      0x7fffe125ef58
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe125eee1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125eee6: sub     $0x80,%rsp
  0x00007fffe125eeed: mov     %rax,0x78(%rsp)
  0x00007fffe125eef2: mov     %rcx,0x70(%rsp)
  0x00007fffe125eef7: mov     %rdx,0x68(%rsp)
  0x00007fffe125eefc: mov     %rbx,0x60(%rsp)
  0x00007fffe125ef01: mov     %rbp,0x50(%rsp)
  0x00007fffe125ef06: mov     %rsi,0x48(%rsp)
  0x00007fffe125ef0b: mov     %rdi,0x40(%rsp)
  0x00007fffe125ef10: mov     %r8,0x38(%rsp)
  0x00007fffe125ef15: mov     %r9,0x30(%rsp)
  0x00007fffe125ef1a: mov     %r10,0x28(%rsp)
  0x00007fffe125ef1f: mov     %r11,0x20(%rsp)
  0x00007fffe125ef24: mov     %r12,0x18(%rsp)
  0x00007fffe125ef29: mov     %r13,0x10(%rsp)
  0x00007fffe125ef2e: mov     %r14,0x8(%rsp)
  0x00007fffe125ef33: mov     %r15,(%rsp)
  0x00007fffe125ef37: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe125ef41: movabs  $0x7fffe125eee1,%rsi  ;   {internal_word}
  0x00007fffe125ef4b: mov     %rsp,%rdx
  0x00007fffe125ef4e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125ef52: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125ef57: hlt
  0x00007fffe125ef58: pop     %r10              ;*getstatic out
                                                ; - StackTopCache::main@19 (line 6)

  0x00007fffe125ef5a: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ef64: addq    $0x1,0x190(%rax)
  0x00007fffe125ef6c: movabs  $0x7ffff4ea2748,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ef76: mov     0x104(%rax),%esi
  0x00007fffe125ef7c: add     $0x8,%esi
  0x00007fffe125ef7f: mov     %esi,0x104(%rax)
  0x00007fffe125ef85: movabs  $0x7ffff4ea2480,%rax  ;   {metadata({method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125ef8f: and     $0x7ffff8,%esi
  0x00007fffe125ef95: cmp     $0x0,%esi
  ;;  236 branch [EQ] [CounterOverflowStub: 0x00007fffb4189da0]
  0x00007fffe125ef98: je      0x7fffe125f44b
  0x00007fffe125ef9e: cmp     (%rdi),%rax       ;*invokevirtual println
                                                ; - StackTopCache::main@27 (line 6)
                                                ; implicit exception: dispatches to 0x00007fffe125f462
  0x00007fffe125efa1: mov     %rdi,%rax
  0x00007fffe125efa4: movabs  $0x7ffff4ea2898,%rsi  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125efae: movabs  $0x100028ea0,%r10  ;   {metadata(&apos;java/io/PrintStream&apos;)}
  0x00007fffe125efb8: mov     %r10,0x1a8(%rsi)
  0x00007fffe125efbf: addq    $0x1,0x1b0(%rsi)
  0x00007fffe125efc7: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125efd1: mov     0x104(%rax),%esi
  0x00007fffe125efd7: add     $0x8,%esi
  0x00007fffe125efda: mov     %esi,0x104(%rax)
  0x00007fffe125efe0: movabs  $0x7ffff4c24a80,%rax  ;   {metadata({method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125efea: and     $0x7ffff8,%esi
  0x00007fffe125eff0: cmp     $0x0,%esi
  ;;  260 branch [EQ] [CounterOverflowStub: 0x00007fffb418a570]
  0x00007fffe125eff3: je      0x7fffe125f4de
  0x00007fffe125eff9: lea     0x78(%rsp),%rsi
  0x00007fffe125effe: mov     %rdi,0x8(%rsi)
  0x00007fffe125f002: mov     (%rdi),%rax
  0x00007fffe125f005: mov     %rax,%rbx
  0x00007fffe125f008: and     $0x7,%rbx
  0x00007fffe125f00c: cmp     $0x5,%rbx
  0x00007fffe125f010: jne     0x7fffe125f097
  0x00007fffe125f016: mov     0x8(%rdi),%ebx
  0x00007fffe125f019: shl     $0x3,%rbx
  0x00007fffe125f01d: mov     0xb0(%rbx),%rbx
  0x00007fffe125f024: or      %r15,%rbx
  0x00007fffe125f027: xor     %rax,%rbx
  0x00007fffe125f02a: and     $0xffffffffffffff87,%rbx
  0x00007fffe125f02e: je      0x7fffe125f0bf
  0x00007fffe125f034: test    $0x7,%rbx
  0x00007fffe125f03b: jne     0x7fffe125f084
  0x00007fffe125f03d: test    $0x300,%rbx
  0x00007fffe125f044: jne     0x7fffe125f063
  0x00007fffe125f046: and     $0x37f,%rax
  0x00007fffe125f04d: mov     %rax,%rbx
  0x00007fffe125f050: or      %r15,%rbx
  0x00007fffe125f053: lock cmpxchg %rbx,(%rdi)
  0x00007fffe125f058: jne     0x7fffe125f4f5
  0x00007fffe125f05e: jmpq    0x7fffe125f0bf
  0x00007fffe125f063: mov     0x8(%rdi),%ebx
  0x00007fffe125f066: shl     $0x3,%rbx
  0x00007fffe125f06a: mov     0xb0(%rbx),%rbx
  0x00007fffe125f071: or      %r15,%rbx
  0x00007fffe125f074: lock cmpxchg %rbx,(%rdi)
  0x00007fffe125f079: jne     0x7fffe125f4f5
  0x00007fffe125f07f: jmpq    0x7fffe125f0bf
  0x00007fffe125f084: mov     0x8(%rdi),%ebx
  0x00007fffe125f087: shl     $0x3,%rbx
  0x00007fffe125f08b: mov     0xb0(%rbx),%rbx
  0x00007fffe125f092: lock cmpxchg %rbx,(%rdi)
  0x00007fffe125f097: mov     (%rdi),%rax
  0x00007fffe125f09a: or      $0x1,%rax
  0x00007fffe125f09e: mov     %rax,(%rsi)
  0x00007fffe125f0a1: lock cmpxchg %rsi,(%rdi)
  0x00007fffe125f0a6: je      0x7fffe125f0bf
  0x00007fffe125f0ac: sub     %rsp,%rax
  0x00007fffe125f0af: and     $0xfffffffffffff007,%rax
  0x00007fffe125f0b6: mov     %rax,(%rsi)
  0x00007fffe125f0b9: jne     0x7fffe125f4f5    ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B23 [4, 15]

  0x00007fffe125f0bf: mov     %rdi,%rsi
  0x00007fffe125f0c2: movabs  $0x7ffff4d77660,%rbx  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f0cc: addq    $0x1,0x140(%rbx)
  0x00007fffe125f0d4: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f0de: mov     0x104(%rsi),%ebx
  0x00007fffe125f0e4: add     $0x8,%ebx
  0x00007fffe125f0e7: mov     %ebx,0x104(%rsi)
  0x00007fffe125f0ed: movabs  $0x7ffff4c24268,%rsi  ;   {metadata({method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f0f7: and     $0x7ffff8,%ebx
  0x00007fffe125f0fd: cmp     $0x0,%ebx
  ;;  290 branch [EQ] [CounterOverflowStub: 0x00007fffb418afa0]
  0x00007fffe125f100: je      0x7fffe125f508
  0x00007fffe125f106: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f110: addq    $0x1,0x130(%rsi)
  0x00007fffe125f118: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe125f122: mov     0x104(%rsi),%ebx
  0x00007fffe125f128: add     $0x8,%ebx
  0x00007fffe125f12b: mov     %ebx,0x104(%rsi)
  0x00007fffe125f131: movabs  $0x7ffff4aab458,%rsi  ;   {metadata({method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe125f13b: and     $0x7ffff8,%ebx
  0x00007fffe125f141: cmp     $0x0,%ebx
  ;;  310 branch [EQ] [CounterOverflowStub: 0x00007fffb418b6c0]
  0x00007fffe125f144: je      0x7fffe125f51f
  0x00007fffe125f14a: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe125f154: addq    $0x1,0x130(%rsi)
  0x00007fffe125f15c: mov     $0xa,%esi         ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)

  0x00007fffe125f161: mov     %rdi,0x70(%rsp)
  0x00007fffe125f166: nop
  0x00007fffe125f167: callq   0x7fffe1106300    ; OopMap{[112]=Oop [128]=Oop off=1644}
                                                ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {static_call}
  0x00007fffe125f16c: mov     0x70(%rsp),%rdi
  0x00007fffe125f171: movabs  $0x7ffff4d77830,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f17b: addq    $0x1,0x140(%rdx)
  0x00007fffe125f183: mov     %rax,%rdx
  0x00007fffe125f186: mov     0x70(%rsp),%rsi   ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)

  0x00007fffe125f18b: nop
  0x00007fffe125f18c: nop
  0x00007fffe125f18d: nop
  0x00007fffe125f18e: nop
  0x00007fffe125f18f: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [128]=Oop off=1684}
                                                ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {optimized virtual_call}
  0x00007fffe125f194: mov     0x70(%rsp),%rdi
  0x00007fffe125f199: movabs  $0x7ffff4d77660,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f1a3: addq    $0x1,0x160(%rsi)
  0x00007fffe125f1ab: mov     0x70(%rsp),%rsi   ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@27 (line 6)

  0x00007fffe125f1b0: nop
  0x00007fffe125f1b1: nop
  0x00007fffe125f1b2: nop
  0x00007fffe125f1b3: nop
  0x00007fffe125f1b4: nop
  0x00007fffe125f1b5: nop
  0x00007fffe125f1b6: nop
  0x00007fffe125f1b7: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [128]=Oop off=1724}
                                                ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {optimized virtual_call}
  0x00007fffe125f1bc: lea     0x78(%rsp),%rax
  0x00007fffe125f1c1: mov     0x8(%rax),%rdi
  0x00007fffe125f1c5: mov     (%rdi),%rsi
  0x00007fffe125f1c8: and     $0x7,%rsi
  0x00007fffe125f1cc: cmp     $0x5,%rsi
  0x00007fffe125f1d0: je      0x7fffe125f1ed
  0x00007fffe125f1d6: mov     (%rax),%rsi
  0x00007fffe125f1d9: test    %rsi,%rsi
  0x00007fffe125f1dc: je      0x7fffe125f1ed
  0x00007fffe125f1e2: lock cmpxchg %rsi,(%rdi)
  0x00007fffe125f1e7: jne     0x7fffe125f536    ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B24 [15, 15]

  0x00007fffe125f1ed: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe125f1f7: incl    0x170(%rax)       ;*goto
                                                ; - java.io.PrintStream::println@15 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B20 [30, 33]

  0x00007fffe125f1fd: mov     0x64(%rsp),%edi
  0x00007fffe125f201: incl    %edi
  0x00007fffe125f203: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125f20d: mov     0x108(%rax),%esi
  0x00007fffe125f213: add     $0x8,%esi
  0x00007fffe125f216: mov     %esi,0x108(%rax)
  0x00007fffe125f21c: movabs  $0x7ffff4ea2318,%rax  ;   {metadata({method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125f226: and     $0xfff8,%esi
  0x00007fffe125f22c: cmp     $0x0,%esi
  ;;  378 branch [EQ] [CounterOverflowStub: 0x00007fffb418e0c0]
  0x00007fffe125f22f: je      0x7fffe125f549    ; OopMap{off=1845}
                                                ;*goto
                                                ; - StackTopCache::main@33 (line 4)

  0x00007fffe125f235: test    %eax,0x16d9bec5(%rip)  ;   {poll}
  0x00007fffe125f23b: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe125f245: incl    0x1d0(%rax)
  ;;  390 branch [AL] [B1] 
  0x00007fffe125f24b: jmpq    0x7fffe125eb48    ;*goto
                                                ; - StackTopCache::main@33 (line 4)

  ;;  block B3 [36, 36]

  0x00007fffe125f250: add     $0x90,%rsp
  0x00007fffe125f257: pop     %rbp
  0x00007fffe125f258: test    %eax,0x16d9bea2(%rip)  ;   {poll_return}
  0x00007fffe125f25e: retq                      ;*return
                                                ; - StackTopCache::main@36 (line 9)

  ;;  block B22 [18, 21]

  0x00007fffe125f25f: mov     0x348(%r15),%rax
  0x00007fffe125f266: xor     %r10,%r10
  0x00007fffe125f269: mov     %r10,0x348(%r15)
  0x00007fffe125f270: xor     %r10,%r10
  0x00007fffe125f273: mov     %r10,0x350(%r15)
  0x00007fffe125f27a: mov     %rax,%rsi
  0x00007fffe125f27d: lea     0x78(%rsp),%rax
  0x00007fffe125f282: mov     0x8(%rax),%rbx
  0x00007fffe125f286: mov     (%rbx),%rdi
  0x00007fffe125f289: and     $0x7,%rdi
  0x00007fffe125f28d: cmp     $0x5,%rdi
  0x00007fffe125f291: je      0x7fffe125f2ae
  0x00007fffe125f297: mov     (%rax),%rdi
  0x00007fffe125f29a: test    %rdi,%rdi
  0x00007fffe125f29d: je      0x7fffe125f2ae
  0x00007fffe125f2a3: lock cmpxchg %rdi,(%rbx)
  0x00007fffe125f2a8: jne     0x7fffe125f560    ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B26 [21, 22]

  0x00007fffe125f2ae: mov     %rsi,%rax
  0x00007fffe125f2b1: jmpq    0x7fffe125f5b1    ;*athrow
                                                ; - java.io.PrintStream::println@22 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B9 [18, 21]

  0x00007fffe125f2b6: mov     0x348(%r15),%rax
  0x00007fffe125f2bd: xor     %r10,%r10
  0x00007fffe125f2c0: mov     %r10,0x348(%r15)
  0x00007fffe125f2c7: xor     %r10,%r10
  0x00007fffe125f2ca: mov     %r10,0x350(%r15)
  0x00007fffe125f2d1: mov     %rax,%rsi
  0x00007fffe125f2d4: lea     0x78(%rsp),%rax
  0x00007fffe125f2d9: mov     0x8(%rax),%rbx
  0x00007fffe125f2dd: mov     (%rbx),%rdi
  0x00007fffe125f2e0: and     $0x7,%rdi
  0x00007fffe125f2e4: cmp     $0x5,%rdi
  0x00007fffe125f2e8: je      0x7fffe125f305
  0x00007fffe125f2ee: mov     (%rax),%rdi
  0x00007fffe125f2f1: test    %rdi,%rdi
  0x00007fffe125f2f4: je      0x7fffe125f305
  0x00007fffe125f2fa: lock cmpxchg %rdi,(%rbx)
  0x00007fffe125f2ff: jne     0x7fffe125f573    ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B13 [21, 22]

  0x00007fffe125f305: mov     %rsi,%rax
  0x00007fffe125f308: jmpq    0x7fffe125f5b1    ;*athrow
                                                ; - java.io.PrintStream::println@22 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B4 [2, 2]

  0x00007fffe125f30d: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe125f314: push    %rbp
  0x00007fffe125f315: sub     $0x90,%rsp
  0x00007fffe125f31c: mov     (%rsi),%ebx
  0x00007fffe125f31e: mov     %rsi,%rdi
  0x00007fffe125f321: mov     %ebx,0x60(%rsp)
  0x00007fffe125f325: callq   0x7ffff7449186    ;   {runtime_call}
  0x00007fffe125f32a: mov     0x60(%rsp),%ebx
  0x00007fffe125f32e: mov     %rbx,%rdi
  ;;   50 branch [AL] [B1] 
  0x00007fffe125f331: jmpq    0x7fffe125eb48
  ;; CounterOverflowStub slow case
  0x00007fffe125f336: mov     %rdi,0x8(%rsp)
  0x00007fffe125f33b: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f343: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=2120}
                                                ;*synchronization entry
                                                ; - StackTopCache::main@-1 (line 4)
                                                ;   {runtime_call}
  0x00007fffe125f348: jmpq    0x7fffe125eb41
  ;; CounterOverflowStub slow case
  0x00007fffe125f34d: mov     %rax,0x8(%rsp)
  0x00007fffe125f352: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f35a: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop off=2143}
                                                ;*synchronization entry
                                                ; - StackTopCache::add@-1 (line 12)
                                                ; - StackTopCache::main@13 (line 5)
                                                ;   {runtime_call}
  0x00007fffe125f35f: jmpq    0x7fffe125ec5d
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125f364: callq   0x7fffe11670a0    ; OopMap{rbx=Oop off=2153}
                                                ;*invokevirtual println
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe125f369: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125f36e: sub     $0x80,%rsp
  0x00007fffe125f375: mov     %rax,0x78(%rsp)
  0x00007fffe125f37a: mov     %rcx,0x70(%rsp)
  0x00007fffe125f37f: mov     %rdx,0x68(%rsp)
  0x00007fffe125f384: mov     %rbx,0x60(%rsp)
  0x00007fffe125f389: mov     %rbp,0x50(%rsp)
  0x00007fffe125f38e: mov     %rsi,0x48(%rsp)
  0x00007fffe125f393: mov     %rdi,0x40(%rsp)
  0x00007fffe125f398: mov     %r8,0x38(%rsp)
  0x00007fffe125f39d: mov     %r9,0x30(%rsp)
  0x00007fffe125f3a2: mov     %r10,0x28(%rsp)
  0x00007fffe125f3a7: mov     %r11,0x20(%rsp)
  0x00007fffe125f3ac: mov     %r12,0x18(%rsp)
  0x00007fffe125f3b1: mov     %r13,0x10(%rsp)
  0x00007fffe125f3b6: mov     %r14,0x8(%rsp)
  0x00007fffe125f3bb: mov     %r15,(%rsp)
  0x00007fffe125f3bf: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125f3c9: movabs  $0x7fffe125f369,%rsi  ;   {internal_word}
  0x00007fffe125f3d3: mov     %rsp,%rdx
  0x00007fffe125f3d6: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125f3da: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125f3df: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe125f3e0: mov     %rax,0x8(%rsp)
  0x00007fffe125f3e5: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f3ed: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop off=2290}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::println@-1 (line 735)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe125f3f2: jmpq    0x7fffe125ecb8
  ;; MonitorEnterStub slow case
  0x00007fffe125f3f7: mov     %rbx,0x8(%rsp)
  0x00007fffe125f3fc: mov     %rsi,(%rsp)
  0x00007fffe125f400: callq   0x7fffe11fb2a0    ; OopMap{rbx=Oop [128]=Oop off=2309}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe125f405: jmpq    0x7fffe125ed7e
  ;; CounterOverflowStub slow case
  0x00007fffe125f40a: mov     %rsi,0x8(%rsp)
  0x00007fffe125f40f: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f417: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop [128]=Oop off=2332}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::print@-1 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe125f41c: jmpq    0x7fffe125edc9
  ;; CounterOverflowStub slow case
  0x00007fffe125f421: mov     %rsi,0x8(%rsp)
  0x00007fffe125f426: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f42e: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop [128]=Oop off=2355}
                                                ;*synchronization entry
                                                ; - java.lang.String::valueOf@-1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe125f433: jmpq    0x7fffe125ee0d
  ;; MonitorExitStub slow case
  0x00007fffe125f438: lea     0x78(%rsp),%rax
  0x00007fffe125f43d: mov     %rax,(%rsp)
  0x00007fffe125f441: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe125f446: jmpq    0x7fffe125eeb5
  ;; CounterOverflowStub slow case
  0x00007fffe125f44b: mov     %rax,0x8(%rsp)
  0x00007fffe125f450: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f458: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop off=2397}
                                                ;*synchronization entry
                                                ; - StackTopCache::add2@-1 (line 18)
                                                ; - StackTopCache::main@24 (line 6)
                                                ;   {runtime_call}
  0x00007fffe125f45d: jmpq    0x7fffe125ef9e
  ;; ImplicitNullCheckStub slow case
  0x00007fffe125f462: callq   0x7fffe11670a0    ; OopMap{rdi=Oop off=2407}
                                                ;*invokevirtual println
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe125f467: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125f46c: sub     $0x80,%rsp
  0x00007fffe125f473: mov     %rax,0x78(%rsp)
  0x00007fffe125f478: mov     %rcx,0x70(%rsp)
  0x00007fffe125f47d: mov     %rdx,0x68(%rsp)
  0x00007fffe125f482: mov     %rbx,0x60(%rsp)
  0x00007fffe125f487: mov     %rbp,0x50(%rsp)
  0x00007fffe125f48c: mov     %rsi,0x48(%rsp)
  0x00007fffe125f491: mov     %rdi,0x40(%rsp)
  0x00007fffe125f496: mov     %r8,0x38(%rsp)
  0x00007fffe125f49b: mov     %r9,0x30(%rsp)
  0x00007fffe125f4a0: mov     %r10,0x28(%rsp)
  0x00007fffe125f4a5: mov     %r11,0x20(%rsp)
  0x00007fffe125f4aa: mov     %r12,0x18(%rsp)
  0x00007fffe125f4af: mov     %r13,0x10(%rsp)
  0x00007fffe125f4b4: mov     %r14,0x8(%rsp)
  0x00007fffe125f4b9: mov     %r15,(%rsp)
  0x00007fffe125f4bd: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125f4c7: movabs  $0x7fffe125f467,%rsi  ;   {internal_word}
  0x00007fffe125f4d1: mov     %rsp,%rdx
  0x00007fffe125f4d4: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125f4d8: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125f4dd: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe125f4de: mov     %rax,0x8(%rsp)
  0x00007fffe125f4e3: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f4eb: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop off=2544}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::println@-1 (line 735)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe125f4f0: jmpq    0x7fffe125eff9
  ;; MonitorEnterStub slow case
  0x00007fffe125f4f5: mov     %rdi,0x8(%rsp)
  0x00007fffe125f4fa: mov     %rsi,(%rsp)
  0x00007fffe125f4fe: callq   0x7fffe11fb2a0    ; OopMap{rdi=Oop [128]=Oop off=2563}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe125f503: jmpq    0x7fffe125f0bf
  ;; CounterOverflowStub slow case
  0x00007fffe125f508: mov     %rsi,0x8(%rsp)
  0x00007fffe125f50d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f515: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop [128]=Oop off=2586}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::print@-1 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe125f51a: jmpq    0x7fffe125f106
  ;; CounterOverflowStub slow case
  0x00007fffe125f51f: mov     %rsi,0x8(%rsp)
  0x00007fffe125f524: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe125f52c: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop [128]=Oop off=2609}
                                                ;*synchronization entry
                                                ; - java.lang.String::valueOf@-1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe125f531: jmpq    0x7fffe125f14a
  ;; MonitorExitStub slow case
  0x00007fffe125f536: lea     0x78(%rsp),%rax
  0x00007fffe125f53b: mov     %rax,(%rsp)
  0x00007fffe125f53f: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe125f544: jmpq    0x7fffe125f1ed
  ;; CounterOverflowStub slow case
  0x00007fffe125f549: mov     %rax,0x8(%rsp)
  0x00007fffe125f54e: movq    $0x21,(%rsp)
  0x00007fffe125f556: callq   0x7fffe11fe5a0    ; OopMap{off=2651}
                                                ;*goto
                                                ; - StackTopCache::main@33 (line 4)
                                                ;   {runtime_call}
  0x00007fffe125f55b: jmpq    0x7fffe125f235
  ;; MonitorExitStub slow case
  0x00007fffe125f560: lea     0x78(%rsp),%rax
  0x00007fffe125f565: mov     %rax,(%rsp)
  0x00007fffe125f569: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe125f56e: jmpq    0x7fffe125f2ae
  ;; MonitorExitStub slow case
  0x00007fffe125f573: lea     0x78(%rsp),%rax
  0x00007fffe125f578: mov     %rax,(%rsp)
  0x00007fffe125f57c: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe125f581: jmpq    0x7fffe125f305
  0x00007fffe125f586: nop
  0x00007fffe125f587: nop
  ;; Unwind handler
  0x00007fffe125f588: mov     0x348(%r15),%rax
  0x00007fffe125f58f: movabs  $0x0,%r10
  0x00007fffe125f599: mov     %r10,0x348(%r15)
  0x00007fffe125f5a0: movabs  $0x0,%r10
  0x00007fffe125f5aa: mov     %r10,0x350(%r15)
  0x00007fffe125f5b1: add     $0x90,%rsp
  0x00007fffe125f5b8: pop     %rbp
  0x00007fffe125f5b9: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe125f5be: hlt
  0x00007fffe125f5bf: hlt
[Stub Code]
  0x00007fffe125f5c0: nop                       ;   {no_reloc}
  0x00007fffe125f5c1: nop
  0x00007fffe125f5c2: nop
  0x00007fffe125f5c3: nop
  0x00007fffe125f5c4: nop
  0x00007fffe125f5c5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125f5cf: jmpq    0x7fffe125f5cf    ;   {runtime_call}
  0x00007fffe125f5d4: nop
  0x00007fffe125f5d5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125f5df: jmpq    0x7fffe125f5df    ;   {runtime_call}
  0x00007fffe125f5e4: nop
  0x00007fffe125f5e5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125f5ef: jmpq    0x7fffe125f5ef    ;   {runtime_call}
  0x00007fffe125f5f4: nop
  0x00007fffe125f5f5: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125f5ff: jmpq    0x7fffe125f5ff    ;   {runtime_call}
  0x00007fffe125f604: nop
  0x00007fffe125f605: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125f60f: jmpq    0x7fffe125f60f    ;   {runtime_call}
  0x00007fffe125f614: nop
  0x00007fffe125f615: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe125f61f: jmpq    0x7fffe125f61f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe125f624: movabs  $0xdead,%rbx
  0x00007fffe125f62e: movabs  $0xdead,%rcx
  0x00007fffe125f638: movabs  $0xdead,%rsi
  0x00007fffe125f642: movabs  $0xdead,%rdi
  0x00007fffe125f64c: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe125f651: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe125f656: sub     $0x80,%rsp
  0x00007fffe125f65d: mov     %rax,0x78(%rsp)
  0x00007fffe125f662: mov     %rcx,0x70(%rsp)
  0x00007fffe125f667: mov     %rdx,0x68(%rsp)
  0x00007fffe125f66c: mov     %rbx,0x60(%rsp)
  0x00007fffe125f671: mov     %rbp,0x50(%rsp)
  0x00007fffe125f676: mov     %rsi,0x48(%rsp)
  0x00007fffe125f67b: mov     %rdi,0x40(%rsp)
  0x00007fffe125f680: mov     %r8,0x38(%rsp)
  0x00007fffe125f685: mov     %r9,0x30(%rsp)
  0x00007fffe125f68a: mov     %r10,0x28(%rsp)
  0x00007fffe125f68f: mov     %r11,0x20(%rsp)
  0x00007fffe125f694: mov     %r12,0x18(%rsp)
  0x00007fffe125f699: mov     %r13,0x10(%rsp)
  0x00007fffe125f69e: mov     %r14,0x8(%rsp)
  0x00007fffe125f6a3: mov     %r15,(%rsp)
  0x00007fffe125f6a7: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe125f6b1: movabs  $0x7fffe125f651,%rsi  ;   {internal_word}
  0x00007fffe125f6bb: mov     %rsp,%rdx
  0x00007fffe125f6be: and     $0xfffffffffffffff0,%rsp
  0x00007fffe125f6c2: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe125f6c7: hlt
[Deopt Handler Code]
  0x00007fffe125f6c8: movabs  $0x7fffe125f6c8,%r10  ;   {section_word}
  0x00007fffe125f6d2: push    %r10
  0x00007fffe125f6d4: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe125f6d9: hlt
  0x00007fffe125f6da: hlt
  0x00007fffe125f6db: hlt
  0x00007fffe125f6dc: hlt
  0x00007fffe125f6dd: hlt
  0x00007fffe125f6de: hlt
  0x00007fffe125f6df: hlt
<nmethod compile_id='109' compile_kind='osr' compiler='C1' level='3' entry='0x00007fffe125eb00' size='5280' address='0x00007fffe125e890' relocation_offset='304' insts_offset='624' stub_offset='3376' scopes_data_offset='3728' scopes_pcs_offset='4336' dependencies_offset='5104' handler_table_offset='5112' nul_chk_table_offset='5256' oops_offset='3664' method='StackTopCache main ([Ljava/lang/String;)V' bytes='37' count='1' backedge_count='65070' iicount='1' stamp='121.236'/>
<writer thread='140737327351552'/>
<task_queued compile_id='110' method='StackTopCache main ([Ljava/lang/String;)V' bytes='37' count='1' backedge_count='65565' iicount='1' level='3' stamp='121.248' comment='tiered' hot_count='1'/>
<writer thread='140736954574592'/>
Decoding compiled method 0x00007fffe1270c50:
Code:
Argument 0 is unknown.RIP: 0x7fffe1270ec0 Code size: 0x00000ba0
[Entry Point]
[Verified Entry Point]
[Constants]
  # {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;
  # parm0:    rsi:rsi   = &apos;[Ljava/lang/String;&apos;
  #           [sp+0xa0]  (sp of caller)
  ;;  block B30 [0, 0]

  0x00007fffe1270ec0: mov     %eax,0xfffffffffffea000(%rsp)
  0x00007fffe1270ec7: push    %rbp
  0x00007fffe1270ec8: sub     $0x90,%rsp
  0x00007fffe1270ecf: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1270ed9: mov     0x104(%rax),%edi
  0x00007fffe1270edf: add     $0x8,%edi
  0x00007fffe1270ee2: mov     %edi,0x104(%rax)
  0x00007fffe1270ee8: movabs  $0x7ffff4ea2318,%rax  ;   {metadata({method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1270ef2: and     $0x1ff8,%edi
  0x00007fffe1270ef8: cmp     $0x0,%edi
  ;;   20 branch [EQ] [CounterOverflowStub: 0x00007fffb0131430]
  0x00007fffe1270efb: je      0x7fffe12716ad    ;*iconst_0
                                                ; - StackTopCache::main@0 (line 4)

  ;;  block B31 [0, 0]

  ;;  block B0 [0, 2]

  0x00007fffe1270f01: mov     $0x0,%edi         ;*iload_1
                                                ; - StackTopCache::main@2 (line 4)

  0x00007fffe1270f06: nop
  0x00007fffe1270f07: nop
  ;;  block B1 [2, 5]

  0x00007fffe1270f08: cmp     $0x186a0,%edi
  0x00007fffe1270f0e: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1270f18: movabs  $0x130,%rsi
  0x00007fffe1270f22: jnl     0x7fffe1270f32
  0x00007fffe1270f28: movabs  $0x140,%rsi
  0x00007fffe1270f32: mov     (%rax,%rsi),%rbx
  0x00007fffe1270f36: lea     0x1(%rbx),%rbx
  0x00007fffe1270f3a: mov     %rbx,(%rax,%rsi)
  ;;   50 branch [GE] [B3] 
  0x00007fffe1270f3e: jnl     0x7fffe12715f0    ;*if_icmpge
                                                ; - StackTopCache::main@5 (line 4)

  ;;  block B2 [8, 4]

  0x00007fffe1270f44: movabs  $0xd7380c78,%rax  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x00007fffe1270f4e: mov     0x6c(%rax),%ebx
  0x00007fffe1270f51: push    %r10
  0x00007fffe1270f53: cmp     0x16ae8c86(%rip),%r12  ;   {external_word}
  0x00007fffe1270f5a: je      0x7fffe1270fd7
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1270f60: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1270f65: sub     $0x80,%rsp
  0x00007fffe1270f6c: mov     %rax,0x78(%rsp)
  0x00007fffe1270f71: mov     %rcx,0x70(%rsp)
  0x00007fffe1270f76: mov     %rdx,0x68(%rsp)
  0x00007fffe1270f7b: mov     %rbx,0x60(%rsp)
  0x00007fffe1270f80: mov     %rbp,0x50(%rsp)
  0x00007fffe1270f85: mov     %rsi,0x48(%rsp)
  0x00007fffe1270f8a: mov     %rdi,0x40(%rsp)
  0x00007fffe1270f8f: mov     %r8,0x38(%rsp)
  0x00007fffe1270f94: mov     %r9,0x30(%rsp)
  0x00007fffe1270f99: mov     %r10,0x28(%rsp)
  0x00007fffe1270f9e: mov     %r11,0x20(%rsp)
  0x00007fffe1270fa3: mov     %r12,0x18(%rsp)
  0x00007fffe1270fa8: mov     %r13,0x10(%rsp)
  0x00007fffe1270fad: mov     %r14,0x8(%rsp)
  0x00007fffe1270fb2: mov     %r15,(%rsp)
  0x00007fffe1270fb6: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe1270fc0: movabs  $0x7fffe1270f60,%rsi  ;   {internal_word}
  0x00007fffe1270fca: mov     %rsp,%rdx
  0x00007fffe1270fcd: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1270fd1: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1270fd6: hlt
  0x00007fffe1270fd7: pop     %r10              ;*getstatic out
                                                ; - StackTopCache::main@8 (line 5)

  0x00007fffe1270fd9: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1270fe3: addq    $0x1,0x150(%rax)
  0x00007fffe1270feb: movabs  $0x7ffff4ea25f8,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1270ff5: mov     0x104(%rax),%esi
  0x00007fffe1270ffb: add     $0x8,%esi
  0x00007fffe1270ffe: mov     %esi,0x104(%rax)
  0x00007fffe1271004: movabs  $0x7ffff4ea23d8,%rax  ;   {metadata({method} {0x00007ffff4ea23d8} &apos;add&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe127100e: and     $0x7ffff8,%esi
  0x00007fffe1271014: cmp     $0x0,%esi
  ;;   76 branch [EQ] [CounterOverflowStub: 0x00007fffb0133ec0]
  0x00007fffe1271017: je      0x7fffe12716c4
  0x00007fffe127101d: cmp     (%rbx),%rax       ;*invokevirtual println
                                                ; - StackTopCache::main@16 (line 5)
                                                ; implicit exception: dispatches to 0x00007fffe12716db
  0x00007fffe1271020: mov     %rbx,%rax
  0x00007fffe1271023: movabs  $0x7ffff4ea2898,%rsi  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe127102d: addq    $0x1,0x170(%rsi)
  0x00007fffe1271035: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127103f: mov     0x104(%rax),%esi
  0x00007fffe1271045: add     $0x8,%esi
  0x00007fffe1271048: mov     %esi,0x104(%rax)
  0x00007fffe127104e: movabs  $0x7ffff4c24a80,%rax  ;   {metadata({method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271058: and     $0x7ffff8,%esi
  0x00007fffe127105e: cmp     $0x0,%esi
  ;;  100 branch [EQ] [CounterOverflowStub: 0x00007fffb443e1c0]
  0x00007fffe1271061: je      0x7fffe1271757
  0x00007fffe1271067: lea     0x78(%rsp),%rsi
  0x00007fffe127106c: mov     %rbx,0x8(%rsi)
  0x00007fffe1271070: mov     (%rbx),%rax
  0x00007fffe1271073: mov     %rax,%rdx
  0x00007fffe1271076: and     $0x7,%rdx
  0x00007fffe127107a: cmp     $0x5,%rdx
  0x00007fffe127107e: jne     0x7fffe1271105
  0x00007fffe1271084: mov     0x8(%rbx),%edx
  0x00007fffe1271087: shl     $0x3,%rdx
  0x00007fffe127108b: mov     0xb0(%rdx),%rdx
  0x00007fffe1271092: or      %r15,%rdx
  0x00007fffe1271095: xor     %rax,%rdx
  0x00007fffe1271098: and     $0xffffffffffffff87,%rdx
  0x00007fffe127109c: je      0x7fffe127112d
  0x00007fffe12710a2: test    $0x7,%rdx
  0x00007fffe12710a9: jne     0x7fffe12710f2
  0x00007fffe12710ab: test    $0x300,%rdx
  0x00007fffe12710b2: jne     0x7fffe12710d1
  0x00007fffe12710b4: and     $0x37f,%rax
  0x00007fffe12710bb: mov     %rax,%rdx
  0x00007fffe12710be: or      %r15,%rdx
  0x00007fffe12710c1: lock cmpxchg %rdx,(%rbx)
  0x00007fffe12710c6: jne     0x7fffe127176e
  0x00007fffe12710cc: jmpq    0x7fffe127112d
  0x00007fffe12710d1: mov     0x8(%rbx),%edx
  0x00007fffe12710d4: shl     $0x3,%rdx
  0x00007fffe12710d8: mov     0xb0(%rdx),%rdx
  0x00007fffe12710df: or      %r15,%rdx
  0x00007fffe12710e2: lock cmpxchg %rdx,(%rbx)
  0x00007fffe12710e7: jne     0x7fffe127176e
  0x00007fffe12710ed: jmpq    0x7fffe127112d
  0x00007fffe12710f2: mov     0x8(%rbx),%edx
  0x00007fffe12710f5: shl     $0x3,%rdx
  0x00007fffe12710f9: mov     0xb0(%rdx),%rdx
  0x00007fffe1271100: lock cmpxchg %rdx,(%rbx)
  0x00007fffe1271105: mov     (%rbx),%rax
  0x00007fffe1271108: or      $0x1,%rax
  0x00007fffe127110c: mov     %rax,(%rsi)
  0x00007fffe127110f: lock cmpxchg %rsi,(%rbx)
  0x00007fffe1271114: je      0x7fffe127112d
  0x00007fffe127111a: sub     %rsp,%rax
  0x00007fffe127111d: and     $0xfffffffffffff007,%rax
  0x00007fffe1271124: mov     %rax,(%rsi)
  0x00007fffe1271127: jne     0x7fffe127176e    ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe127112d: mov     %edi,0x68(%rsp)
  ;;  block B9 [4, 15]

  0x00007fffe1271131: mov     %rbx,%rsi
  0x00007fffe1271134: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127113e: addq    $0x1,0x140(%rax)
  0x00007fffe1271146: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271150: mov     0x104(%rsi),%eax
  0x00007fffe1271156: add     $0x8,%eax
  0x00007fffe1271159: mov     %eax,0x104(%rsi)
  0x00007fffe127115f: movabs  $0x7ffff4c24268,%rsi  ;   {metadata({method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271169: and     $0x7ffff8,%eax
  0x00007fffe127116f: cmp     $0x0,%eax
  ;;  130 branch [EQ] [CounterOverflowStub: 0x00007fffb443ebf0]
  0x00007fffe1271172: je      0x7fffe1271781
  0x00007fffe1271178: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271182: addq    $0x1,0x130(%rsi)
  0x00007fffe127118a: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe1271194: mov     0x104(%rsi),%eax
  0x00007fffe127119a: add     $0x8,%eax
  0x00007fffe127119d: mov     %eax,0x104(%rsi)
  0x00007fffe12711a3: movabs  $0x7ffff4aab458,%rsi  ;   {metadata({method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe12711ad: and     $0x7ffff8,%eax
  0x00007fffe12711b3: cmp     $0x0,%eax
  ;;  150 branch [EQ] [CounterOverflowStub: 0x00007fffb443f310]
  0x00007fffe12711b6: je      0x7fffe1271798
  0x00007fffe12711bc: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe12711c6: addq    $0x1,0x130(%rsi)
  0x00007fffe12711ce: mov     $0x3,%esi         ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe12711d3: mov     %rbx,0x60(%rsp)
  0x00007fffe12711d8: nop
  0x00007fffe12711d9: nop
  0x00007fffe12711da: nop
  0x00007fffe12711db: nop
  0x00007fffe12711dc: nop
  0x00007fffe12711dd: nop
  0x00007fffe12711de: nop
  0x00007fffe12711df: callq   0x7fffe1106300    ; OopMap{[96]=Oop [128]=Oop off=804}
                                                ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {static_call}
  0x00007fffe12711e4: mov     0x60(%rsp),%rbx
  0x00007fffe12711e9: movabs  $0x7ffff4d77830,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe12711f3: addq    $0x1,0x140(%rdx)
  0x00007fffe12711fb: mov     %rax,%rdx
  0x00007fffe12711fe: mov     0x60(%rsp),%rsi   ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe1271203: nop
  0x00007fffe1271204: nop
  0x00007fffe1271205: nop
  0x00007fffe1271206: nop
  0x00007fffe1271207: callq   0x7fffe1105e80    ; OopMap{[96]=Oop [128]=Oop off=844}
                                                ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {optimized virtual_call}
  0x00007fffe127120c: mov     0x60(%rsp),%rbx
  0x00007fffe1271211: movabs  $0x7ffff4d77660,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127121b: addq    $0x1,0x160(%rsi)
  0x00007fffe1271223: mov     0x60(%rsp),%rsi   ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@16 (line 5)

  0x00007fffe1271228: nop
  0x00007fffe1271229: nop
  0x00007fffe127122a: nop
  0x00007fffe127122b: nop
  0x00007fffe127122c: nop
  0x00007fffe127122d: nop
  0x00007fffe127122e: nop
  0x00007fffe127122f: callq   0x7fffe1105e80    ; OopMap{[96]=Oop [128]=Oop off=884}
                                                ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {optimized virtual_call}
  0x00007fffe1271234: lea     0x78(%rsp),%rax
  0x00007fffe1271239: mov     0x8(%rax),%rdi
  0x00007fffe127123d: mov     (%rdi),%rsi
  0x00007fffe1271240: and     $0x7,%rsi
  0x00007fffe1271244: cmp     $0x5,%rsi
  0x00007fffe1271248: je      0x7fffe1271265
  0x00007fffe127124e: mov     (%rax),%rsi
  0x00007fffe1271251: test    %rsi,%rsi
  0x00007fffe1271254: je      0x7fffe1271265
  0x00007fffe127125a: lock cmpxchg %rsi,(%rdi)
  0x00007fffe127125f: jne     0x7fffe12717af    ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B10 [15, 15]

  0x00007fffe1271265: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127126f: incl    0x170(%rax)       ;*goto
                                                ; - java.io.PrintStream::println@15 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B6 [19, 4]

  0x00007fffe1271275: movabs  $0xd7380c78,%rax  ;   {oop(a &apos;java/lang/Class&apos; = &apos;java/lang/System&apos;)}
  0x00007fffe127127f: mov     0x6c(%rax),%edi
  0x00007fffe1271282: push    %r10
  0x00007fffe1271284: cmp     0x16ae8955(%rip),%r12  ;   {external_word}
  0x00007fffe127128b: je      0x7fffe1271308
  ;; MacroAssembler::decode_heap_oop: heap base corrupted?
  0x00007fffe1271291: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe1271296: sub     $0x80,%rsp
  0x00007fffe127129d: mov     %rax,0x78(%rsp)
  0x00007fffe12712a2: mov     %rcx,0x70(%rsp)
  0x00007fffe12712a7: mov     %rdx,0x68(%rsp)
  0x00007fffe12712ac: mov     %rbx,0x60(%rsp)
  0x00007fffe12712b1: mov     %rbp,0x50(%rsp)
  0x00007fffe12712b6: mov     %rsi,0x48(%rsp)
  0x00007fffe12712bb: mov     %rdi,0x40(%rsp)
  0x00007fffe12712c0: mov     %r8,0x38(%rsp)
  0x00007fffe12712c5: mov     %r9,0x30(%rsp)
  0x00007fffe12712ca: mov     %r10,0x28(%rsp)
  0x00007fffe12712cf: mov     %r11,0x20(%rsp)
  0x00007fffe12712d4: mov     %r12,0x18(%rsp)
  0x00007fffe12712d9: mov     %r13,0x10(%rsp)
  0x00007fffe12712de: mov     %r14,0x8(%rsp)
  0x00007fffe12712e3: mov     %r15,(%rsp)
  0x00007fffe12712e7: movabs  $0x7ffff7837c18,%rdi  ;   {external_word}
  0x00007fffe12712f1: movabs  $0x7fffe1271291,%rsi  ;   {internal_word}
  0x00007fffe12712fb: mov     %rsp,%rdx
  0x00007fffe12712fe: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1271302: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1271307: hlt
  0x00007fffe1271308: pop     %r10              ;*getstatic out
                                                ; - StackTopCache::main@19 (line 6)

  0x00007fffe127130a: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1271314: addq    $0x1,0x190(%rax)
  0x00007fffe127131c: movabs  $0x7ffff4ea2748,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe1271326: mov     0x104(%rax),%esi
  0x00007fffe127132c: add     $0x8,%esi
  0x00007fffe127132f: mov     %esi,0x104(%rax)
  0x00007fffe1271335: movabs  $0x7ffff4ea2480,%rax  ;   {metadata({method} {0x00007ffff4ea2480} &apos;add2&apos; &apos;(II)I&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe127133f: and     $0x7ffff8,%esi
  0x00007fffe1271345: cmp     $0x0,%esi
  ;;  220 branch [EQ] [CounterOverflowStub: 0x00007fffb4440dc0]
  0x00007fffe1271348: je      0x7fffe12717c2
  0x00007fffe127134e: cmp     (%rdi),%rax       ;*invokevirtual println
                                                ; - StackTopCache::main@27 (line 6)
                                                ; implicit exception: dispatches to 0x00007fffe12717d9
  0x00007fffe1271351: mov     %rdi,%rax
  0x00007fffe1271354: movabs  $0x7ffff4ea2898,%rsi  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe127135e: addq    $0x1,0x1b0(%rsi)
  0x00007fffe1271366: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271370: mov     0x104(%rax),%esi
  0x00007fffe1271376: add     $0x8,%esi
  0x00007fffe1271379: mov     %esi,0x104(%rax)
  0x00007fffe127137f: movabs  $0x7ffff4c24a80,%rax  ;   {metadata({method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271389: and     $0x7ffff8,%esi
  0x00007fffe127138f: cmp     $0x0,%esi
  ;;  244 branch [EQ] [CounterOverflowStub: 0x00007fffb4441590]
  0x00007fffe1271392: je      0x7fffe1271855
  0x00007fffe1271398: lea     0x78(%rsp),%rsi
  0x00007fffe127139d: mov     %rdi,0x8(%rsi)
  0x00007fffe12713a1: mov     (%rdi),%rax
  0x00007fffe12713a4: mov     %rax,%rbx
  0x00007fffe12713a7: and     $0x7,%rbx
  0x00007fffe12713ab: cmp     $0x5,%rbx
  0x00007fffe12713af: jne     0x7fffe1271436
  0x00007fffe12713b5: mov     0x8(%rdi),%ebx
  0x00007fffe12713b8: shl     $0x3,%rbx
  0x00007fffe12713bc: mov     0xb0(%rbx),%rbx
  0x00007fffe12713c3: or      %r15,%rbx
  0x00007fffe12713c6: xor     %rax,%rbx
  0x00007fffe12713c9: and     $0xffffffffffffff87,%rbx
  0x00007fffe12713cd: je      0x7fffe127145e
  0x00007fffe12713d3: test    $0x7,%rbx
  0x00007fffe12713da: jne     0x7fffe1271423
  0x00007fffe12713dc: test    $0x300,%rbx
  0x00007fffe12713e3: jne     0x7fffe1271402
  0x00007fffe12713e5: and     $0x37f,%rax
  0x00007fffe12713ec: mov     %rax,%rbx
  0x00007fffe12713ef: or      %r15,%rbx
  0x00007fffe12713f2: lock cmpxchg %rbx,(%rdi)
  0x00007fffe12713f7: jne     0x7fffe127186c
  0x00007fffe12713fd: jmpq    0x7fffe127145e
  0x00007fffe1271402: mov     0x8(%rdi),%ebx
  0x00007fffe1271405: shl     $0x3,%rbx
  0x00007fffe1271409: mov     0xb0(%rbx),%rbx
  0x00007fffe1271410: or      %r15,%rbx
  0x00007fffe1271413: lock cmpxchg %rbx,(%rdi)
  0x00007fffe1271418: jne     0x7fffe127186c
  0x00007fffe127141e: jmpq    0x7fffe127145e
  0x00007fffe1271423: mov     0x8(%rdi),%ebx
  0x00007fffe1271426: shl     $0x3,%rbx
  0x00007fffe127142a: mov     0xb0(%rbx),%rbx
  0x00007fffe1271431: lock cmpxchg %rbx,(%rdi)
  0x00007fffe1271436: mov     (%rdi),%rax
  0x00007fffe1271439: or      $0x1,%rax
  0x00007fffe127143d: mov     %rax,(%rsi)
  0x00007fffe1271440: lock cmpxchg %rsi,(%rdi)
  0x00007fffe1271445: je      0x7fffe127145e
  0x00007fffe127144b: sub     %rsp,%rax
  0x00007fffe127144e: and     $0xfffffffffffff007,%rax
  0x00007fffe1271455: mov     %rax,(%rsi)
  0x00007fffe1271458: jne     0x7fffe127186c    ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B22 [4, 15]

  0x00007fffe127145e: mov     %rdi,%rsi
  0x00007fffe1271461: movabs  $0x7ffff4d77660,%rbx  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127146b: addq    $0x1,0x140(%rbx)
  0x00007fffe1271473: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127147d: mov     0x104(%rsi),%ebx
  0x00007fffe1271483: add     $0x8,%ebx
  0x00007fffe1271486: mov     %ebx,0x104(%rsi)
  0x00007fffe127148c: movabs  $0x7ffff4c24268,%rsi  ;   {metadata({method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271496: and     $0x7ffff8,%ebx
  0x00007fffe127149c: cmp     $0x0,%ebx
  ;;  274 branch [EQ] [CounterOverflowStub: 0x00007fffb4441fc0]
  0x00007fffe127149f: je      0x7fffe127187f
  0x00007fffe12714a5: movabs  $0x7ffff4d77830,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe12714af: addq    $0x1,0x130(%rsi)
  0x00007fffe12714b7: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe12714c1: mov     0x104(%rsi),%ebx
  0x00007fffe12714c7: add     $0x8,%ebx
  0x00007fffe12714ca: mov     %ebx,0x104(%rsi)
  0x00007fffe12714d0: movabs  $0x7ffff4aab458,%rsi  ;   {metadata({method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe12714da: and     $0x7ffff8,%ebx
  0x00007fffe12714e0: cmp     $0x0,%ebx
  ;;  294 branch [EQ] [CounterOverflowStub: 0x00007fffb44426e0]
  0x00007fffe12714e3: je      0x7fffe1271896
  0x00007fffe12714e9: movabs  $0x7ffff4d779c8,%rsi  ;   {metadata(method data for {method} {0x00007ffff4aab458} &apos;valueOf&apos; &apos;(I)Ljava/lang/String;&apos; in &apos;java/lang/String&apos;)}
  0x00007fffe12714f3: addq    $0x1,0x130(%rsi)
  0x00007fffe12714fb: mov     $0xa,%esi         ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)

  0x00007fffe1271500: mov     %rdi,0x70(%rsp)
  0x00007fffe1271505: nop
  0x00007fffe1271506: nop
  0x00007fffe1271507: callq   0x7fffe1106300    ; OopMap{[112]=Oop [128]=Oop off=1612}
                                                ;*invokestatic toString
                                                ; - java.lang.String::valueOf@1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {static_call}
  0x00007fffe127150c: mov     0x70(%rsp),%rdi
  0x00007fffe1271511: movabs  $0x7ffff4d77830,%rdx  ;   {metadata(method data for {method} {0x00007ffff4c24268} &apos;print&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe127151b: addq    $0x1,0x140(%rdx)
  0x00007fffe1271523: mov     %rax,%rdx
  0x00007fffe1271526: mov     0x70(%rsp),%rsi   ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)

  0x00007fffe127152b: nop
  0x00007fffe127152c: nop
  0x00007fffe127152d: nop
  0x00007fffe127152e: nop
  0x00007fffe127152f: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [128]=Oop off=1652}
                                                ;*invokespecial write
                                                ; - java.io.PrintStream::print@5 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {optimized virtual_call}
  0x00007fffe1271534: mov     0x70(%rsp),%rdi
  0x00007fffe1271539: movabs  $0x7ffff4d77660,%rsi  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271543: addq    $0x1,0x160(%rsi)
  0x00007fffe127154b: mov     0x70(%rsp),%rsi   ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@27 (line 6)

  0x00007fffe1271550: nop
  0x00007fffe1271551: nop
  0x00007fffe1271552: nop
  0x00007fffe1271553: nop
  0x00007fffe1271554: nop
  0x00007fffe1271555: nop
  0x00007fffe1271556: nop
  0x00007fffe1271557: callq   0x7fffe1105e80    ; OopMap{[112]=Oop [128]=Oop off=1692}
                                                ;*invokespecial newLine
                                                ; - java.io.PrintStream::println@10 (line 737)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {optimized virtual_call}
  0x00007fffe127155c: lea     0x78(%rsp),%rax
  0x00007fffe1271561: mov     0x8(%rax),%rdi
  0x00007fffe1271565: mov     (%rdi),%rsi
  0x00007fffe1271568: and     $0x7,%rsi
  0x00007fffe127156c: cmp     $0x5,%rsi
  0x00007fffe1271570: je      0x7fffe127158d
  0x00007fffe1271576: mov     (%rax),%rsi
  0x00007fffe1271579: test    %rsi,%rsi
  0x00007fffe127157c: je      0x7fffe127158d
  0x00007fffe1271582: lock cmpxchg %rsi,(%rdi)
  0x00007fffe1271587: jne     0x7fffe12718ad    ;*monitorexit
                                                ; - java.io.PrintStream::println@14 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B23 [15, 15]

  0x00007fffe127158d: movabs  $0x7ffff4d77660,%rax  ;   {metadata(method data for {method} {0x00007ffff4c24a80} &apos;println&apos; &apos;(I)V&apos; in &apos;java/io/PrintStream&apos;)}
  0x00007fffe1271597: incl    0x170(%rax)       ;*goto
                                                ; - java.io.PrintStream::println@15 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B19 [30, 33]

  0x00007fffe127159d: mov     0x68(%rsp),%edi
  0x00007fffe12715a1: incl    %edi
  0x00007fffe12715a3: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe12715ad: mov     0x108(%rax),%esi
  0x00007fffe12715b3: add     $0x8,%esi
  0x00007fffe12715b6: mov     %esi,0x108(%rax)
  0x00007fffe12715bc: movabs  $0x7ffff4ea2318,%rax  ;   {metadata({method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe12715c6: and     $0xfff8,%esi
  0x00007fffe12715cc: cmp     $0x0,%esi
  ;;  362 branch [EQ] [CounterOverflowStub: 0x00007fffb44450e0]
  0x00007fffe12715cf: je      0x7fffe12718c0    ; OopMap{off=1813}
                                                ;*goto
                                                ; - StackTopCache::main@33 (line 4)

  0x00007fffe12715d5: test    %eax,0x16d89b25(%rip)  ;   {poll}
  0x00007fffe12715db: movabs  $0x7ffff4ea2898,%rax  ;   {metadata(method data for {method} {0x00007ffff4ea2318} &apos;main&apos; &apos;([Ljava/lang/String;)V&apos; in &apos;StackTopCache&apos;)}
  0x00007fffe12715e5: incl    0x1d0(%rax)
  ;;  374 branch [AL] [B1] 
  0x00007fffe12715eb: jmpq    0x7fffe1270f08    ;*goto
                                                ; - StackTopCache::main@33 (line 4)

  ;;  block B3 [36, 36]

  0x00007fffe12715f0: add     $0x90,%rsp
  0x00007fffe12715f7: pop     %rbp
  0x00007fffe12715f8: test    %eax,0x16d89b02(%rip)  ;   {poll_return}
  0x00007fffe12715fe: retq                      ;*return
                                                ; - StackTopCache::main@36 (line 9)

  ;;  block B21 [18, 21]

  0x00007fffe12715ff: mov     0x348(%r15),%rax
  0x00007fffe1271606: xor     %r10,%r10
  0x00007fffe1271609: mov     %r10,0x348(%r15)
  0x00007fffe1271610: xor     %r10,%r10
  0x00007fffe1271613: mov     %r10,0x350(%r15)
  0x00007fffe127161a: mov     %rax,%rsi
  0x00007fffe127161d: lea     0x78(%rsp),%rax
  0x00007fffe1271622: mov     0x8(%rax),%rbx
  0x00007fffe1271626: mov     (%rbx),%rdi
  0x00007fffe1271629: and     $0x7,%rdi
  0x00007fffe127162d: cmp     $0x5,%rdi
  0x00007fffe1271631: je      0x7fffe127164e
  0x00007fffe1271637: mov     (%rax),%rdi
  0x00007fffe127163a: test    %rdi,%rdi
  0x00007fffe127163d: je      0x7fffe127164e
  0x00007fffe1271643: lock cmpxchg %rdi,(%rbx)
  0x00007fffe1271648: jne     0x7fffe12718d7    ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B25 [21, 22]

  0x00007fffe127164e: mov     %rsi,%rax
  0x00007fffe1271651: jmpq    0x7fffe1271928    ;*athrow
                                                ; - java.io.PrintStream::println@22 (line 738)
                                                ; - StackTopCache::main@27 (line 6)

  ;;  block B8 [18, 21]

  0x00007fffe1271656: mov     0x348(%r15),%rax
  0x00007fffe127165d: xor     %r10,%r10
  0x00007fffe1271660: mov     %r10,0x348(%r15)
  0x00007fffe1271667: xor     %r10,%r10
  0x00007fffe127166a: mov     %r10,0x350(%r15)
  0x00007fffe1271671: mov     %rax,%rsi
  0x00007fffe1271674: lea     0x78(%rsp),%rax
  0x00007fffe1271679: mov     0x8(%rax),%rbx
  0x00007fffe127167d: mov     (%rbx),%rdi
  0x00007fffe1271680: and     $0x7,%rdi
  0x00007fffe1271684: cmp     $0x5,%rdi
  0x00007fffe1271688: je      0x7fffe12716a5
  0x00007fffe127168e: mov     (%rax),%rdi
  0x00007fffe1271691: test    %rdi,%rdi
  0x00007fffe1271694: je      0x7fffe12716a5
  0x00007fffe127169a: lock cmpxchg %rdi,(%rbx)
  0x00007fffe127169f: jne     0x7fffe12718ea    ;*monitorexit
                                                ; - java.io.PrintStream::println@20 (line 738)
                                                ; - StackTopCache::main@16 (line 5)

  ;;  block B12 [21, 22]

  0x00007fffe12716a5: mov     %rsi,%rax
  0x00007fffe12716a8: jmpq    0x7fffe1271928
  ;; CounterOverflowStub slow case
  0x00007fffe12716ad: mov     %rax,0x8(%rsp)
  0x00007fffe12716b2: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12716ba: callq   0x7fffe11fe5a0    ; OopMap{rsi=Oop off=2047}
                                                ;*synchronization entry
                                                ; - StackTopCache::main@-1 (line 4)
                                                ;   {runtime_call}
  0x00007fffe12716bf: jmpq    0x7fffe1270f01
  ;; CounterOverflowStub slow case
  0x00007fffe12716c4: mov     %rax,0x8(%rsp)
  0x00007fffe12716c9: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12716d1: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop off=2070}
                                                ;*synchronization entry
                                                ; - StackTopCache::add@-1 (line 12)
                                                ; - StackTopCache::main@13 (line 5)
                                                ;   {runtime_call}
  0x00007fffe12716d6: jmpq    0x7fffe127101d
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12716db: callq   0x7fffe11670a0    ; OopMap{rbx=Oop off=2080}
                                                ;*invokevirtual println
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe12716e0: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12716e5: sub     $0x80,%rsp
  0x00007fffe12716ec: mov     %rax,0x78(%rsp)
  0x00007fffe12716f1: mov     %rcx,0x70(%rsp)
  0x00007fffe12716f6: mov     %rdx,0x68(%rsp)
  0x00007fffe12716fb: mov     %rbx,0x60(%rsp)
  0x00007fffe1271700: mov     %rbp,0x50(%rsp)
  0x00007fffe1271705: mov     %rsi,0x48(%rsp)
  0x00007fffe127170a: mov     %rdi,0x40(%rsp)
  0x00007fffe127170f: mov     %r8,0x38(%rsp)
  0x00007fffe1271714: mov     %r9,0x30(%rsp)
  0x00007fffe1271719: mov     %r10,0x28(%rsp)
  0x00007fffe127171e: mov     %r11,0x20(%rsp)
  0x00007fffe1271723: mov     %r12,0x18(%rsp)
  0x00007fffe1271728: mov     %r13,0x10(%rsp)
  0x00007fffe127172d: mov     %r14,0x8(%rsp)
  0x00007fffe1271732: mov     %r15,(%rsp)
  0x00007fffe1271736: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1271740: movabs  $0x7fffe12716e0,%rsi  ;   {internal_word}
  0x00007fffe127174a: mov     %rsp,%rdx
  0x00007fffe127174d: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1271751: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1271756: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe1271757: mov     %rax,0x8(%rsp)
  0x00007fffe127175c: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1271764: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop off=2217}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::println@-1 (line 735)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe1271769: jmpq    0x7fffe1271067
  ;; MonitorEnterStub slow case
  0x00007fffe127176e: mov     %rbx,0x8(%rsp)
  0x00007fffe1271773: mov     %rsi,(%rsp)
  0x00007fffe1271777: callq   0x7fffe11fb2a0    ; OopMap{rbx=Oop [128]=Oop off=2236}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe127177c: jmpq    0x7fffe127112d
  ;; CounterOverflowStub slow case
  0x00007fffe1271781: mov     %rsi,0x8(%rsp)
  0x00007fffe1271786: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe127178e: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop [128]=Oop off=2259}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::print@-1 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe1271793: jmpq    0x7fffe1271178
  ;; CounterOverflowStub slow case
  0x00007fffe1271798: mov     %rsi,0x8(%rsp)
  0x00007fffe127179d: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12717a5: callq   0x7fffe11fe5a0    ; OopMap{rbx=Oop [128]=Oop off=2282}
                                                ;*synchronization entry
                                                ; - java.lang.String::valueOf@-1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@16 (line 5)
                                                ;   {runtime_call}
  0x00007fffe12717aa: jmpq    0x7fffe12711bc
  ;; MonitorExitStub slow case
  0x00007fffe12717af: lea     0x78(%rsp),%rax
  0x00007fffe12717b4: mov     %rax,(%rsp)
  0x00007fffe12717b8: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12717bd: jmpq    0x7fffe1271265
  ;; CounterOverflowStub slow case
  0x00007fffe12717c2: mov     %rax,0x8(%rsp)
  0x00007fffe12717c7: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12717cf: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop off=2324}
                                                ;*synchronization entry
                                                ; - StackTopCache::add2@-1 (line 18)
                                                ; - StackTopCache::main@24 (line 6)
                                                ;   {runtime_call}
  0x00007fffe12717d4: jmpq    0x7fffe127134e
  ;; ImplicitNullCheckStub slow case
  0x00007fffe12717d9: callq   0x7fffe11670a0    ; OopMap{rdi=Oop off=2334}
                                                ;*invokevirtual println
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe12717de: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12717e3: sub     $0x80,%rsp
  0x00007fffe12717ea: mov     %rax,0x78(%rsp)
  0x00007fffe12717ef: mov     %rcx,0x70(%rsp)
  0x00007fffe12717f4: mov     %rdx,0x68(%rsp)
  0x00007fffe12717f9: mov     %rbx,0x60(%rsp)
  0x00007fffe12717fe: mov     %rbp,0x50(%rsp)
  0x00007fffe1271803: mov     %rsi,0x48(%rsp)
  0x00007fffe1271808: mov     %rdi,0x40(%rsp)
  0x00007fffe127180d: mov     %r8,0x38(%rsp)
  0x00007fffe1271812: mov     %r9,0x30(%rsp)
  0x00007fffe1271817: mov     %r10,0x28(%rsp)
  0x00007fffe127181c: mov     %r11,0x20(%rsp)
  0x00007fffe1271821: mov     %r12,0x18(%rsp)
  0x00007fffe1271826: mov     %r13,0x10(%rsp)
  0x00007fffe127182b: mov     %r14,0x8(%rsp)
  0x00007fffe1271830: mov     %r15,(%rsp)
  0x00007fffe1271834: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe127183e: movabs  $0x7fffe12717de,%rsi  ;   {internal_word}
  0x00007fffe1271848: mov     %rsp,%rdx
  0x00007fffe127184b: and     $0xfffffffffffffff0,%rsp
  0x00007fffe127184f: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1271854: hlt
  ;; CounterOverflowStub slow case
  0x00007fffe1271855: mov     %rax,0x8(%rsp)
  0x00007fffe127185a: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe1271862: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop off=2471}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::println@-1 (line 735)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe1271867: jmpq    0x7fffe1271398
  ;; MonitorEnterStub slow case
  0x00007fffe127186c: mov     %rdi,0x8(%rsp)
  0x00007fffe1271871: mov     %rsi,(%rsp)
  0x00007fffe1271875: callq   0x7fffe11fb2a0    ; OopMap{rdi=Oop [128]=Oop off=2490}
                                                ;*monitorenter
                                                ; - java.io.PrintStream::println@3 (line 735)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe127187a: jmpq    0x7fffe127145e
  ;; CounterOverflowStub slow case
  0x00007fffe127187f: mov     %rsi,0x8(%rsp)
  0x00007fffe1271884: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe127188c: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop [128]=Oop off=2513}
                                                ;*synchronization entry
                                                ; - java.io.PrintStream::print@-1 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe1271891: jmpq    0x7fffe12714a5
  ;; CounterOverflowStub slow case
  0x00007fffe1271896: mov     %rsi,0x8(%rsp)
  0x00007fffe127189b: movq    $0xffffffffffffffff,(%rsp)
  0x00007fffe12718a3: callq   0x7fffe11fe5a0    ; OopMap{rdi=Oop [128]=Oop off=2536}
                                                ;*synchronization entry
                                                ; - java.lang.String::valueOf@-1 (line 3098)
                                                ; - java.io.PrintStream::print@2 (line 597)
                                                ; - java.io.PrintStream::println@6 (line 736)
                                                ; - StackTopCache::main@27 (line 6)
                                                ;   {runtime_call}
  0x00007fffe12718a8: jmpq    0x7fffe12714e9
  ;; MonitorExitStub slow case
  0x00007fffe12718ad: lea     0x78(%rsp),%rax
  0x00007fffe12718b2: mov     %rax,(%rsp)
  0x00007fffe12718b6: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12718bb: jmpq    0x7fffe127158d
  ;; CounterOverflowStub slow case
  0x00007fffe12718c0: mov     %rax,0x8(%rsp)
  0x00007fffe12718c5: movq    $0x21,(%rsp)
  0x00007fffe12718cd: callq   0x7fffe11fe5a0    ; OopMap{off=2578}
                                                ;*goto
                                                ; - StackTopCache::main@33 (line 4)
                                                ;   {runtime_call}
  0x00007fffe12718d2: jmpq    0x7fffe12715d5
  ;; MonitorExitStub slow case
  0x00007fffe12718d7: lea     0x78(%rsp),%rax
  0x00007fffe12718dc: mov     %rax,(%rsp)
  0x00007fffe12718e0: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12718e5: jmpq    0x7fffe127164e
  ;; MonitorExitStub slow case
  0x00007fffe12718ea: lea     0x78(%rsp),%rax
  0x00007fffe12718ef: mov     %rax,(%rsp)
  0x00007fffe12718f3: callq   0x7fffe11fb9e0    ;   {runtime_call}
  0x00007fffe12718f8: jmpq    0x7fffe12716a5
  0x00007fffe12718fd: nop
  0x00007fffe12718fe: nop
  ;; Unwind handler
  0x00007fffe12718ff: mov     0x348(%r15),%rax
  0x00007fffe1271906: movabs  $0x0,%r10
  0x00007fffe1271910: mov     %r10,0x348(%r15)
  0x00007fffe1271917: movabs  $0x0,%r10
  0x00007fffe1271921: mov     %r10,0x350(%r15)
  0x00007fffe1271928: add     $0x90,%rsp
  0x00007fffe127192f: pop     %rbp
  0x00007fffe1271930: jmpq    0x7fffe1168fe0    ;   {runtime_call}
  0x00007fffe1271935: hlt
  0x00007fffe1271936: hlt
  0x00007fffe1271937: hlt
  0x00007fffe1271938: hlt
  0x00007fffe1271939: hlt
  0x00007fffe127193a: hlt
  0x00007fffe127193b: hlt
  0x00007fffe127193c: hlt
  0x00007fffe127193d: hlt
  0x00007fffe127193e: hlt
  0x00007fffe127193f: hlt
[Stub Code]
  0x00007fffe1271940: nop                       ;   {no_reloc}
  0x00007fffe1271941: nop
  0x00007fffe1271942: nop
  0x00007fffe1271943: nop
  0x00007fffe1271944: nop
  0x00007fffe1271945: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe127194f: jmpq    0x7fffe127194f    ;   {runtime_call}
  0x00007fffe1271954: nop
  0x00007fffe1271955: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe127195f: jmpq    0x7fffe127195f    ;   {runtime_call}
  0x00007fffe1271964: nop
  0x00007fffe1271965: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe127196f: jmpq    0x7fffe127196f    ;   {runtime_call}
  0x00007fffe1271974: nop
  0x00007fffe1271975: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe127197f: jmpq    0x7fffe127197f    ;   {runtime_call}
  0x00007fffe1271984: nop
  0x00007fffe1271985: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe127198f: jmpq    0x7fffe127198f    ;   {runtime_call}
  0x00007fffe1271994: nop
  0x00007fffe1271995: movabs  $0x0,%rbx         ;   {static_stub}
  0x00007fffe127199f: jmpq    0x7fffe127199f    ;   {runtime_call}
[Exception Handler]
  0x00007fffe12719a4: movabs  $0xdead,%rbx
  0x00007fffe12719ae: movabs  $0xdead,%rcx
  0x00007fffe12719b8: movabs  $0xdead,%rsi
  0x00007fffe12719c2: movabs  $0xdead,%rdi
  0x00007fffe12719cc: callq   0x7fffe11fa160    ;   {runtime_call}
  0x00007fffe12719d1: mov     %rsp,0xffffffffffffffd8(%rsp)
  0x00007fffe12719d6: sub     $0x80,%rsp
  0x00007fffe12719dd: mov     %rax,0x78(%rsp)
  0x00007fffe12719e2: mov     %rcx,0x70(%rsp)
  0x00007fffe12719e7: mov     %rdx,0x68(%rsp)
  0x00007fffe12719ec: mov     %rbx,0x60(%rsp)
  0x00007fffe12719f1: mov     %rbp,0x50(%rsp)
  0x00007fffe12719f6: mov     %rsi,0x48(%rsp)
  0x00007fffe12719fb: mov     %rdi,0x40(%rsp)
  0x00007fffe1271a00: mov     %r8,0x38(%rsp)
  0x00007fffe1271a05: mov     %r9,0x30(%rsp)
  0x00007fffe1271a0a: mov     %r10,0x28(%rsp)
  0x00007fffe1271a0f: mov     %r11,0x20(%rsp)
  0x00007fffe1271a14: mov     %r12,0x18(%rsp)
  0x00007fffe1271a19: mov     %r13,0x10(%rsp)
  0x00007fffe1271a1e: mov     %r14,0x8(%rsp)
  0x00007fffe1271a23: mov     %r15,(%rsp)
  0x00007fffe1271a27: movabs  $0x7ffff75fb28d,%rdi  ;   {external_word}
  0x00007fffe1271a31: movabs  $0x7fffe12719d1,%rsi  ;   {internal_word}
  0x00007fffe1271a3b: mov     %rsp,%rdx
  0x00007fffe1271a3e: and     $0xfffffffffffffff0,%rsp
  0x00007fffe1271a42: callq   0x7ffff726ff36    ;   {runtime_call}
  0x00007fffe1271a47: hlt
[Deopt Handler Code]
  0x00007fffe1271a48: movabs  $0x7fffe1271a48,%r10  ;   {section_word}
  0x00007fffe1271a52: push    %r10
  0x00007fffe1271a54: jmpq    0x7fffe11072e0    ;   {runtime_call}
  0x00007fffe1271a59: hlt
  0x00007fffe1271a5a: hlt
  0x00007fffe1271a5b: hlt
  0x00007fffe1271a5c: hlt
  0x00007fffe1271a5d: hlt
  0x00007fffe1271a5e: hlt
  0x00007fffe1271a5f: hlt
<nmethod compile_id='110' compiler='C1' level='3' entry='0x00007fffe1270ec0' size='5192' address='0x00007fffe1270c50' relocation_offset='304' insts_offset='624' stub_offset='3312' scopes_data_offset='3664' scopes_pcs_offset='4264' dependencies_offset='5016' handler_table_offset='5024' nul_chk_table_offset='5168' oops_offset='3600' method='StackTopCache main ([Ljava/lang/String;)V' bytes='37' count='1' backedge_count='68977' iicount='1' stamp='121.336'/>
<writer thread='140737327351552'/>
[Loaded jdk.internal.misc.TerminatingThreadLocal$1 from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Shutdown from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
[Loaded java.lang.Shutdown$Lock from /home/wei/OPEN_SOURCE/OpenJDK/005.OpenJDK/002.OpenJDK8u312-GA/OpenJDK8U312-GA/build/linux-x86_64-normal-server-slowdebug/jdk/classes]
C1 Runtime statistics:
 _resolve_invoke_virtual_cnt:     8
 _resolve_invoke_opt_virtual_cnt: 40
 _resolve_invoke_static_cnt:      5
 _handle_wrong_method_cnt:        4
 _ic_miss_cnt:                    3
 _generic_arraycopy_cnt:          0
 _generic_arraycopystub_cnt:      0
 _byte_arraycopy_cnt:             0
 _short_arraycopy_cnt:            0
 _int_arraycopy_cnt:              0
 _long_arraycopy_cnt:             0
 _primitive_arraycopy_cnt:        0
 _oop_arraycopy_cnt (C):          0
 _oop_arraycopy_cnt (stub):       0
 _arraycopy_slowcase_cnt:         0
 _arraycopy_checkcast_cnt:        0
 _arraycopy_checkcast_attempt_cnt:0
 _new_type_array_slowcase_cnt:    0
 _new_object_array_slowcase_cnt:  0
 _new_instance_slowcase_cnt:      0
 _new_multi_array_slowcase_cnt:   0
 _monitorenter_slowcase_cnt:      0
 _monitorexit_slowcase_cnt:       0
 _patch_code_slowcase_cnt:        0
 _throw_range_check_exception_count:            0:
 _throw_index_exception_count:                  0:
 _throw_div0_exception_count:                   0:
 _throw_null_pointer_exception_count:           0:
 _throw_class_cast_exception_count:             0:
 _throw_incompatible_class_change_error_count:  0:
 _throw_array_store_exception_count:            0:
 _throw_count:                                  0:

<statistics type='SharedRuntime'>
   34 new instance requires GC
    3 new array requires GC
    3 inline cache miss in compiled
    4 wrong method
    5 unresolved static call site
    8 unresolved virtual call site
   40 unresolved opt virtual call site
    5 slow partial subtype
343182 byte array copies
383886 short array copies
   12 int array copies
   12 long array copies
AdapterHandlerTable: empty 178 longest 3 total 149 average 1.295652
AdapterHandlerTable: lookups 6075 buckets 5962 equals 5648 hits 5648 compact 5648
</statistics>
<statistics type='nmethod'>
Statistics for 2 native nmethods:
 N. total size  = 2072
 N. relocation  = 176
 N. main code   = 1272
Statistics for 93 bytecoded nmethods:
 total in heap  = 261824
 relocation     = 12512
 main code      = 112448
 stub code      = 14608
 oops           = 104
 scopes data    = 33288
 scopes pcs     = 50288
 dependencies   = 840
 handler table  = 3352
 nul chk table  = 1808
Debug Data Chunks: 10044, shared 1084+4572, non-SP&apos;s elided 14
PcDesc Statistics:  27381 queries, 1.76 comparisons per query
  caches=93 queries=27381/27186, hits=24085+22, tests=38379+9840, adds=3011
<deps_find_witness calls='254' steps='391' recursions='0' singles='0'/>
Dependency check (find_witness) calls=254, steps=391 (avg=1.5), recursions=0, singles=0
</statistics>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 219  Methods parsed: 219  Nodes created: 44969
Blocks parsed: 731  Blocks seen: 1053
802 original NULL checks - 662 elided (82%); optimizer leaves 146,
88 made implicit (60%)
CCP: 33  constants found: 0
Total frameslots = 408, Max frameslots = 32
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 160 copies, 0 pairs, 2176 post alloc.
Used cisc instruction  19,  remained in register 314
Average allocation trips 1.387755
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 44198 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=143, sum _unique=109292
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     1 (10.0%) _min (worked)
     9 (90.0%) _arraycopy (worked)
    10 (100.0%) total (worked)
</statistics>
<writer thread='140736960890624'/>
<destroy_vm stamp='122.052'/>
<tty_done stamp='122.065'/>
</tty>
<compilation_log thread='140736954574592'>
<start_compile_thread name='C1 CompilerThread2' thread='140736954574592' process='55833' stamp='116.993'/>
<task compile_id='1' method='java/lang/String hashCode ()I' bytes='55' count='328' backedge_count='4186' iicount='328' level='3' stamp='116.997'>
<phase name='buildIR' stamp='116.997'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='hashCode' return='735' flags='1' bytes='55' iicount='328'/>
<parse method='846'  stamp='116.997'>
<parse_done stamp='116.997'/>
</parse>
<phase name='optimize_blocks' stamp='116.997'>
<phase_done name='optimize_blocks' stamp='116.997'/>
</phase>
<phase name='rangeCheckElimination' stamp='116.998'>
<phase_done name='rangeCheckElimination' stamp='116.998'/>
</phase>
<phase name='optimize_null_checks' stamp='116.998'>
<phase_done name='optimize_null_checks' stamp='116.998'/>
</phase>
<phase_done name='buildIR' stamp='116.998'/>
</phase>
<phase name='emit_lir' stamp='116.998'>
<phase name='lirGeneration' stamp='116.998'>
<phase_done name='lirGeneration' stamp='116.998'/>
</phase>
<phase name='linearScan' stamp='116.998'>
<phase_done name='linearScan' stamp='117.001'/>
</phase>
<phase_done name='emit_lir' stamp='117.001'/>
</phase>
<phase name='codeemit' stamp='117.001'>
<phase_done name='codeemit' stamp='117.002'/>
</phase>
<phase name='codeinstall' stamp='117.002'>
<phase_done name='codeinstall' stamp='117.245'/>
</phase>
<code_cache total_blobs='478' nmethods='1' adapters='398' free_code_cache='249381120'/>
<task_done success='1' nmsize='952' count='329' backedge_count='4215' stamp='117.245'/>
</task>
<task compile_id='2' method='java/lang/String equals (Ljava/lang/Object;)Z' bytes='81' count='234' backedge_count='1114' iicount='234' level='3' stamp='117.246'>
<phase name='buildIR' stamp='117.246'>
<type id='729' name='boolean'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='equals' return='729' arguments='742' flags='1' bytes='81' iicount='248'/>
<parse method='846'  stamp='117.246'>
<parse_done stamp='117.246'/>
</parse>
<phase name='optimize_blocks' stamp='117.246'>
<phase_done name='optimize_blocks' stamp='117.246'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.247'>
<phase_done name='rangeCheckElimination' stamp='117.248'/>
</phase>
<phase name='optimize_null_checks' stamp='117.248'>
<phase_done name='optimize_null_checks' stamp='117.248'/>
</phase>
<phase_done name='buildIR' stamp='117.248'/>
</phase>
<phase name='emit_lir' stamp='117.248'>
<phase name='lirGeneration' stamp='117.248'>
<phase_done name='lirGeneration' stamp='117.248'/>
</phase>
<phase name='linearScan' stamp='117.248'>
<phase_done name='linearScan' stamp='117.254'/>
</phase>
<phase_done name='emit_lir' stamp='117.254'/>
</phase>
<phase name='codeemit' stamp='117.254'>
<phase_done name='codeemit' stamp='117.254'/>
</phase>
<phase name='codeinstall' stamp='117.254'>
<phase_done name='codeinstall' stamp='117.275'/>
</phase>
<code_cache total_blobs='481' nmethods='2' adapters='400' free_code_cache='249375744'/>
<task_done success='1' nmsize='2392' count='258' backedge_count='1280' stamp='117.275'/>
</task>
<task compile_id='4' method='java/lang/String charAt (I)C' bytes='29' count='1442' iicount='1442' level='3' stamp='117.294'>
<phase name='buildIR' stamp='117.294'>
<type id='730' name='char'/>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='charAt' return='730' arguments='735' flags='1' bytes='29' iicount='1442'/>
<parse method='846'  stamp='117.294'>
<bc code='183' bci='18'/>
<type id='737' name='void'/>
<klass id='848' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<method id='849' holder='848' name='&lt;init&gt;' return='737' arguments='735' unloaded='1'/>
<call method='849' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.294'/>
</parse>
<phase name='optimize_blocks' stamp='117.294'>
<phase_done name='optimize_blocks' stamp='117.294'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.294'>
<phase_done name='rangeCheckElimination' stamp='117.294'/>
</phase>
<phase name='optimize_null_checks' stamp='117.294'>
<phase_done name='optimize_null_checks' stamp='117.294'/>
</phase>
<phase_done name='buildIR' stamp='117.294'/>
</phase>
<phase name='emit_lir' stamp='117.294'>
<phase name='lirGeneration' stamp='117.294'>
<phase_done name='lirGeneration' stamp='117.294'/>
</phase>
<phase name='linearScan' stamp='117.294'>
<phase_done name='linearScan' stamp='117.297'/>
</phase>
<phase_done name='emit_lir' stamp='117.297'/>
</phase>
<phase name='codeemit' stamp='117.297'>
<phase_done name='codeemit' stamp='117.298'/>
</phase>
<phase name='codeinstall' stamp='117.298'>
<phase_done name='codeinstall' stamp='117.310'/>
</phase>
<code_cache total_blobs='485' nmethods='4' adapters='402' free_code_cache='249371264'/>
<task_done success='1' nmsize='912' count='1729' stamp='117.310'/>
</task>
<task compile_id='5' method='java/lang/String length ()I' bytes='6' count='257' iicount='257' level='3' stamp='117.312'>
<phase name='buildIR' stamp='117.312'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='length' return='735' flags='1' bytes='6' iicount='257'/>
<parse method='846'  stamp='117.312'>
<parse_done stamp='117.312'/>
</parse>
<phase name='optimize_blocks' stamp='117.312'>
<phase_done name='optimize_blocks' stamp='117.312'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.312'>
<phase_done name='rangeCheckElimination' stamp='117.312'/>
</phase>
<phase name='optimize_null_checks' stamp='117.312'>
<phase_done name='optimize_null_checks' stamp='117.312'/>
</phase>
<phase_done name='buildIR' stamp='117.312'/>
</phase>
<phase name='emit_lir' stamp='117.312'>
<phase name='lirGeneration' stamp='117.312'>
<phase_done name='lirGeneration' stamp='117.312'/>
</phase>
<phase name='linearScan' stamp='117.312'>
<phase_done name='linearScan' stamp='117.313'/>
</phase>
<phase_done name='emit_lir' stamp='117.313'/>
</phase>
<phase name='codeemit' stamp='117.313'>
<phase_done name='codeemit' stamp='117.313'/>
</phase>
<phase name='codeinstall' stamp='117.313'>
<phase_done name='codeinstall' stamp='117.321'/>
</phase>
<code_cache total_blobs='486' nmethods='5' adapters='402' free_code_cache='249369984'/>
<task_done success='1' nmsize='632' count='279' stamp='117.321'/>
</task>
<task compile_id='6' method='java/lang/String indexOf (II)I' bytes='70' count='148' backedge_count='3078' iicount='148' level='3' stamp='117.325'>
<phase name='buildIR' stamp='117.326'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' iicount='148'/>
<parse method='846'  stamp='117.326'>
<bc code='183' bci='66'/>
<method id='848' holder='743' name='indexOfSupplementary' return='735' arguments='735 735' flags='2' bytes='71' iicount='1'/>
<call method='848' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.326'/>
</parse>
<phase name='optimize_blocks' stamp='117.326'>
<phase_done name='optimize_blocks' stamp='117.326'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.326'>
<phase_done name='rangeCheckElimination' stamp='117.327'/>
</phase>
<phase name='optimize_null_checks' stamp='117.327'>
<phase_done name='optimize_null_checks' stamp='117.327'/>
</phase>
<phase_done name='buildIR' stamp='117.327'/>
</phase>
<phase name='emit_lir' stamp='117.327'>
<phase name='lirGeneration' stamp='117.327'>
<phase_done name='lirGeneration' stamp='117.327'/>
</phase>
<phase name='linearScan' stamp='117.327'>
<phase_done name='linearScan' stamp='117.332'/>
</phase>
<phase_done name='emit_lir' stamp='117.332'/>
</phase>
<phase name='codeemit' stamp='117.332'>
<phase_done name='codeemit' stamp='117.332'/>
</phase>
<phase name='codeinstall' stamp='117.332'>
<phase_done name='codeinstall' stamp='117.347'/>
</phase>
<code_cache total_blobs='493' nmethods='6' adapters='407' free_code_cache='249363456'/>
<task_done success='1' nmsize='1296' count='148' backedge_count='3078' stamp='117.347'/>
</task>
<task compile_id='7' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='1284' iicount='1284' level='3' stamp='117.351'>
<phase name='buildIR' stamp='117.351'>
<type id='737' name='void'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='846' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' iicount='1286'/>
<parse method='846'  stamp='117.351'>
<parse_done stamp='117.351'/>
</parse>
<phase name='optimize_blocks' stamp='117.351'>
<phase_done name='optimize_blocks' stamp='117.351'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.351'>
<phase_done name='rangeCheckElimination' stamp='117.351'/>
</phase>
<phase name='optimize_null_checks' stamp='117.351'>
<phase_done name='optimize_null_checks' stamp='117.351'/>
</phase>
<phase_done name='buildIR' stamp='117.351'/>
</phase>
<phase name='emit_lir' stamp='117.351'>
<phase name='lirGeneration' stamp='117.351'>
<phase_done name='lirGeneration' stamp='117.351'/>
</phase>
<phase name='linearScan' stamp='117.351'>
<phase_done name='linearScan' stamp='117.352'/>
</phase>
<phase_done name='emit_lir' stamp='117.352'/>
</phase>
<phase name='codeemit' stamp='117.352'>
<phase_done name='codeemit' stamp='117.352'/>
</phase>
<phase name='codeinstall' stamp='117.352'>
<phase_done name='codeinstall' stamp='117.361'/>
</phase>
<code_cache total_blobs='496' nmethods='7' adapters='410' free_code_cache='249360064'/>
<task_done success='1' nmsize='376' count='1288' stamp='117.361'/>
</task>
<task compile_id='8' method='java/lang/Math min (II)I' bytes='11' count='384' iicount='384' level='3' stamp='117.373'>
<phase name='buildIR' stamp='117.373'>
<type id='735' name='int'/>
<klass id='846' name='java/lang/Math' flags='17'/>
<method id='847' holder='846' name='min' return='735' arguments='735 735' flags='9' bytes='11' iicount='385'/>
<parse method='847'  stamp='117.373'>
<parse_done stamp='117.373'/>
</parse>
<phase name='optimize_blocks' stamp='117.373'>
<phase_done name='optimize_blocks' stamp='117.373'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.373'>
<phase_done name='rangeCheckElimination' stamp='117.373'/>
</phase>
<phase name='optimize_null_checks' stamp='117.373'>
<phase_done name='optimize_null_checks' stamp='117.373'/>
</phase>
<phase_done name='buildIR' stamp='117.373'/>
</phase>
<phase name='emit_lir' stamp='117.373'>
<phase name='lirGeneration' stamp='117.373'>
<phase_done name='lirGeneration' stamp='117.373'/>
</phase>
<phase name='linearScan' stamp='117.373'>
<phase_done name='linearScan' stamp='117.375'/>
</phase>
<phase_done name='emit_lir' stamp='117.375'/>
</phase>
<phase name='codeemit' stamp='117.375'>
<phase_done name='codeemit' stamp='117.375'/>
</phase>
<phase name='codeinstall' stamp='117.375'>
<phase_done name='codeinstall' stamp='117.386'/>
</phase>
<code_cache total_blobs='499' nmethods='8' adapters='412' free_code_cache='249357376'/>
<task_done success='1' nmsize='440' count='434' stamp='117.386'/>
</task>
<task compile_id='9' method='java/lang/Object &lt;init&gt; ()V' bytes='1' count='1538' iicount='1538' level='1' stamp='117.611'>
<phase name='buildIR' stamp='117.611'>
<type id='737' name='void'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='846' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='7' compiler='C1' level='3' iicount='1538'/>
<parse method='846'  stamp='117.611'>
<parse_done stamp='117.611'/>
</parse>
<phase name='optimize_blocks' stamp='117.611'>
<phase_done name='optimize_blocks' stamp='117.611'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.611'>
<phase_done name='rangeCheckElimination' stamp='117.611'/>
</phase>
<phase name='optimize_null_checks' stamp='117.611'>
<phase_done name='optimize_null_checks' stamp='117.611'/>
</phase>
<phase_done name='buildIR' stamp='117.611'/>
</phase>
<phase name='emit_lir' stamp='117.611'>
<phase name='lirGeneration' stamp='117.611'>
<phase_done name='lirGeneration' stamp='117.611'/>
</phase>
<phase name='linearScan' stamp='117.611'>
<phase_done name='linearScan' stamp='117.612'/>
</phase>
<phase_done name='emit_lir' stamp='117.612'/>
</phase>
<phase name='codeemit' stamp='117.612'>
<phase_done name='codeemit' stamp='117.612'/>
</phase>
<phase name='codeinstall' stamp='117.612'>
<phase_done name='codeinstall' stamp='117.619'/>
</phase>
<code_cache total_blobs='515' nmethods='9' adapters='427' free_code_cache='249344192'/>
<task_done success='1' nmsize='312' count='1568' stamp='117.619'/>
</task>
<task compile_id='10' method='java/nio/Buffer position ()I' bytes='5' count='149' iicount='149' level='1' stamp='117.624'>
<phase name='buildIR' stamp='117.624'>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='position' return='735' flags='17' bytes='5' iicount='159'/>
<parse method='846'  stamp='117.624'>
<parse_done stamp='117.624'/>
</parse>
<phase name='optimize_blocks' stamp='117.624'>
<phase_done name='optimize_blocks' stamp='117.624'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.624'>
<phase_done name='rangeCheckElimination' stamp='117.624'/>
</phase>
<phase name='optimize_null_checks' stamp='117.624'>
<phase_done name='optimize_null_checks' stamp='117.624'/>
</phase>
<phase_done name='buildIR' stamp='117.624'/>
</phase>
<phase name='emit_lir' stamp='117.624'>
<phase name='lirGeneration' stamp='117.624'>
<phase_done name='lirGeneration' stamp='117.624'/>
</phase>
<phase name='linearScan' stamp='117.624'>
<phase_done name='linearScan' stamp='117.625'/>
</phase>
<phase_done name='emit_lir' stamp='117.625'/>
</phase>
<phase name='codeemit' stamp='117.625'>
<phase_done name='codeemit' stamp='117.625'/>
</phase>
<phase name='codeinstall' stamp='117.625'>
<phase_done name='codeinstall' stamp='117.633'/>
</phase>
<code_cache total_blobs='516' nmethods='10' adapters='427' free_code_cache='249343360'/>
<task_done success='1' nmsize='312' count='491' stamp='117.633'/>
</task>
<task compile_id='12' method='java/nio/ByteBuffer arrayOffset ()I' bytes='35' count='493' iicount='493' level='3' stamp='117.633'>
<phase name='buildIR' stamp='117.633'>
<type id='735' name='int'/>
<klass id='846' name='java/nio/ByteBuffer' flags='1025'/>
<method id='847' holder='846' name='arrayOffset' return='735' flags='17' bytes='35' iicount='499'/>
<parse method='847'  stamp='117.633'>
<bc code='183' bci='11'/>
<type id='737' name='void'/>
<klass id='849' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<method id='850' holder='849' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='850' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<klass id='851' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<method id='852' holder='851' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='852' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.633'/>
</parse>
<phase name='optimize_blocks' stamp='117.633'>
<phase_done name='optimize_blocks' stamp='117.633'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.634'>
<phase_done name='rangeCheckElimination' stamp='117.634'/>
</phase>
<phase name='optimize_null_checks' stamp='117.634'>
<phase_done name='optimize_null_checks' stamp='117.634'/>
</phase>
<phase_done name='buildIR' stamp='117.634'/>
</phase>
<phase name='emit_lir' stamp='117.634'>
<phase name='lirGeneration' stamp='117.634'>
<phase_done name='lirGeneration' stamp='117.634'/>
</phase>
<phase name='linearScan' stamp='117.634'>
<phase_done name='linearScan' stamp='117.636'/>
</phase>
<phase_done name='emit_lir' stamp='117.636'/>
</phase>
<phase name='codeemit' stamp='117.636'>
<phase_done name='codeemit' stamp='117.637'/>
</phase>
<phase name='codeinstall' stamp='117.637'>
<phase_done name='codeinstall' stamp='117.645'/>
</phase>
<code_cache total_blobs='517' nmethods='11' adapters='427' free_code_cache='249341504'/>
<task_done success='1' nmsize='896' count='1717' stamp='117.645'/>
</task>
<task compile_id='13' method='java/nio/Buffer position (I)Ljava/nio/Buffer;' bytes='40' count='1307' iicount='1307' level='3' stamp='117.646'>
<phase name='buildIR' stamp='117.646'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<type id='735' name='int'/>
<method id='846' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' iicount='1307'/>
<parse method='846'  stamp='117.646'>
<bc code='183' bci='16'/>
<type id='737' name='void'/>
<klass id='848' name='java/lang/IllegalArgumentException' flags='1'/>
<method id='849' holder='848' name='&lt;init&gt;' return='737' flags='1' bytes='5' iicount='1'/>
<call method='849' instr='invokespecial'/>
<inline_fail reason='don&apos;t inline Throwable constructors'/>
<parse_done stamp='117.646'/>
</parse>
<phase name='optimize_blocks' stamp='117.646'>
<phase_done name='optimize_blocks' stamp='117.646'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.646'>
<phase_done name='rangeCheckElimination' stamp='117.646'/>
</phase>
<phase name='optimize_null_checks' stamp='117.646'>
<phase_done name='optimize_null_checks' stamp='117.646'/>
</phase>
<phase_done name='buildIR' stamp='117.646'/>
</phase>
<phase name='emit_lir' stamp='117.646'>
<phase name='lirGeneration' stamp='117.646'>
<phase_done name='lirGeneration' stamp='117.646'/>
</phase>
<phase name='linearScan' stamp='117.646'>
<phase_done name='linearScan' stamp='117.649'/>
</phase>
<phase_done name='emit_lir' stamp='117.649'/>
</phase>
<phase name='codeemit' stamp='117.649'>
<phase_done name='codeemit' stamp='117.650'/>
</phase>
<phase name='codeinstall' stamp='117.650'>
<phase_done name='codeinstall' stamp='117.660'/>
</phase>
<code_cache total_blobs='518' nmethods='12' adapters='427' free_code_cache='249339904'/>
<task_done success='1' nmsize='752' count='2267' stamp='117.660'/>
</task>
<task compile_id='11' method='java/nio/Buffer limit ()I' bytes='5' count='2253' iicount='2253' level='1' stamp='117.660'>
<phase name='buildIR' stamp='117.660'>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='limit' return='735' flags='17' bytes='5' iicount='2256'/>
<parse method='846'  stamp='117.660'>
<parse_done stamp='117.661'/>
</parse>
<phase name='optimize_blocks' stamp='117.661'>
<phase_done name='optimize_blocks' stamp='117.661'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.661'>
<phase_done name='rangeCheckElimination' stamp='117.661'/>
</phase>
<phase name='optimize_null_checks' stamp='117.661'>
<phase_done name='optimize_null_checks' stamp='117.661'/>
</phase>
<phase_done name='buildIR' stamp='117.661'/>
</phase>
<phase name='emit_lir' stamp='117.661'>
<phase name='lirGeneration' stamp='117.661'>
<phase_done name='lirGeneration' stamp='117.661'/>
</phase>
<phase name='linearScan' stamp='117.661'>
<phase_done name='linearScan' stamp='117.661'/>
</phase>
<phase_done name='emit_lir' stamp='117.661'/>
</phase>
<phase name='codeemit' stamp='117.661'>
<phase_done name='codeemit' stamp='117.661'/>
</phase>
<phase name='codeinstall' stamp='117.661'>
<phase_done name='codeinstall' stamp='117.668'/>
</phase>
<code_cache total_blobs='519' nmethods='13' adapters='427' free_code_cache='249339072'/>
<task_done success='1' nmsize='312' count='2388' stamp='117.668'/>
</task>
<task compile_id='29' method='java/lang/String length ()I' bytes='6' count='1284' iicount='1284' level='1' stamp='117.669'>
<phase name='buildIR' stamp='117.669'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='5' compiler='C1' level='3' iicount='1286'/>
<parse method='846'  stamp='117.669'>
<parse_done stamp='117.669'/>
</parse>
<phase name='optimize_blocks' stamp='117.669'>
<phase_done name='optimize_blocks' stamp='117.669'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.669'>
<phase_done name='rangeCheckElimination' stamp='117.669'/>
</phase>
<phase name='optimize_null_checks' stamp='117.669'>
<phase_done name='optimize_null_checks' stamp='117.669'/>
</phase>
<phase_done name='buildIR' stamp='117.669'/>
</phase>
<phase name='emit_lir' stamp='117.669'>
<phase name='lirGeneration' stamp='117.669'>
<phase_done name='lirGeneration' stamp='117.669'/>
</phase>
<phase name='linearScan' stamp='117.669'>
<phase_done name='linearScan' stamp='117.669'/>
</phase>
<phase_done name='emit_lir' stamp='117.669'/>
</phase>
<phase name='codeemit' stamp='117.669'>
<phase_done name='codeemit' stamp='117.670'/>
</phase>
<phase name='codeinstall' stamp='117.670'>
<phase_done name='codeinstall' stamp='117.677'/>
</phase>
<code_cache total_blobs='520' nmethods='14' adapters='427' free_code_cache='249337920'/>
<task_done success='1' nmsize='568' count='1381' stamp='117.678'/>
</task>
<task compile_id='14' method='java/nio/CharBuffer arrayOffset ()I' bytes='35' count='2691' iicount='2691' level='3' stamp='117.678'>
<phase name='buildIR' stamp='117.678'>
<type id='735' name='int'/>
<klass id='846' name='java/nio/CharBuffer' flags='1025'/>
<method id='847' holder='846' name='arrayOffset' return='735' flags='17' bytes='35' iicount='2694'/>
<parse method='847'  stamp='117.678'>
<bc code='183' bci='11'/>
<type id='737' name='void'/>
<klass id='849' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<method id='850' holder='849' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='850' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<klass id='851' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<method id='852' holder='851' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='852' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.678'/>
</parse>
<phase name='optimize_blocks' stamp='117.678'>
<phase_done name='optimize_blocks' stamp='117.678'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.678'>
<phase_done name='rangeCheckElimination' stamp='117.678'/>
</phase>
<phase name='optimize_null_checks' stamp='117.678'>
<phase_done name='optimize_null_checks' stamp='117.678'/>
</phase>
<phase_done name='buildIR' stamp='117.678'/>
</phase>
<phase name='emit_lir' stamp='117.678'>
<phase name='lirGeneration' stamp='117.678'>
<phase_done name='lirGeneration' stamp='117.679'/>
</phase>
<phase name='linearScan' stamp='117.679'>
<phase_done name='linearScan' stamp='117.681'/>
</phase>
<phase_done name='emit_lir' stamp='117.681'/>
</phase>
<phase name='codeemit' stamp='117.681'>
<phase_done name='codeemit' stamp='117.682'/>
</phase>
<phase name='codeinstall' stamp='117.682'>
<phase_done name='codeinstall' stamp='117.689'/>
</phase>
<code_cache total_blobs='521' nmethods='15' adapters='427' free_code_cache='249336064'/>
<task_done success='1' nmsize='896' count='3453' stamp='117.689'/>
</task>
<task compile_id='36' method='sun/nio/cs/UTF_8$Encoder encodeArrayLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='489' count='1152' backedge_count='1557' iicount='1152' level='3' stamp='117.689'>
<phase name='buildIR' stamp='117.689'>
<klass id='849' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='847' name='java/nio/CharBuffer' flags='1025'/>
<klass id='848' name='java/nio/ByteBuffer' flags='1025'/>
<klass id='846' name='sun/nio/cs/UTF_8$Encoder' flags='26'/>
<method id='850' holder='846' name='encodeArrayLoop' return='849' arguments='847 848' flags='2' bytes='489' iicount='1152'/>
<parse method='850'  stamp='117.689'>
<bc code='182' bci='1'/>
<klass id='835' name='[C' flags='1041'/>
<method id='852' holder='847' name='array' return='835' flags='17' bytes='35' iicount='1161'/>
<call method='852' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<bc code='183' bci='11'/>
<type id='737' name='void'/>
<klass id='854' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<method id='855' holder='854' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<klass id='856' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<method id='857' holder='856' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.690'/>
</parse>
<bc code='182' bci='6'/>
<type id='735' name='int'/>
<method id='858' holder='847' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='14' compiler='C1' level='3' iicount='3597'/>
<call method='858' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<bc code='183' bci='11'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.691'/>
</parse>
<bc code='182' bci='10'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='860' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='860' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='860'>
<parse_done stamp='117.691'/>
</parse>
<bc code='182' bci='17'/>
<call method='858' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<bc code='183' bci='11'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.692'/>
</parse>
<bc code='182' bci='21'/>
<method id='862' holder='822' name='limit' return='735' flags='17' bytes='5' compile_id='11' compiler='C1' level='1' iicount='2388'/>
<call method='862' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='862'>
<parse_done stamp='117.692'/>
</parse>
<bc code='182' bci='28'/>
<klass id='838' name='[B' flags='1041'/>
<method id='864' holder='848' name='array' return='838' flags='17' bytes='35' iicount='2563'/>
<call method='864' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<bc code='183' bci='11'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.693'/>
</parse>
<bc code='182' bci='34'/>
<method id='866' holder='848' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='12' compiler='C1' level='3' iicount='5249'/>
<call method='866' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='866'>
<bc code='183' bci='11'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.694'/>
</parse>
<bc code='182' bci='38'/>
<call method='860' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='860'>
<parse_done stamp='117.694'/>
</parse>
<bc code='182' bci='45'/>
<call method='866' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='866'>
<bc code='183' bci='11'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='117.700'/>
</parse>
<bc code='182' bci='49'/>
<call method='862' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='862'>
<parse_done stamp='117.701'/>
</parse>
<bc code='184' bci='67'/>
<klass id='868' name='java/lang/Math' flags='17'/>
<method id='869' holder='868' name='min' return='735' arguments='735 735' flags='9' bytes='11' compile_id='8' compiler='C1' level='3' iicount='2064'/>
<call method='869' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='869'>
<parse_done stamp='117.701'/>
</parse>
<bc code='184' bci='143'/>
<method id='871' holder='846' name='overflow' return='849' arguments='847 735 848 735' flags='10' bytes='11' iicount='1'/>
<call method='871' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='871'>
<bc code='184' bci='4'/>
<klass id='873' name='sun/nio/cs/UTF_8' flags='0'/>
<method id='874' holder='873' name='access$200' return='737' arguments='822 735 822 735' flags='4104' bytes='8' iicount='1540'/>
<call method='874' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<bc code='184' bci='4'/>
<method id='876' holder='873' name='updatePositions' return='737' arguments='822 735 822 735' flags='26' bytes='23' iicount='1547'/>
<call method='876' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='876'>
<bc code='182' bci='3'/>
<method id='880' holder='822' name='arrayOffset' return='735' flags='1025' bytes='0' iicount='1'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='7'/>
<method id='881' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='13' compiler='C1' level='3' iicount='4715'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='14'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='18'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.709'/>
</parse>
<parse_done stamp='117.709'/>
</parse>
<parse_done stamp='117.709'/>
</parse>
<bc code='184' bci='184'/>
<call method='871' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='871'>
<bc code='184' bci='4'/>
<call method='874' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<bc code='184' bci='4'/>
<call method='876' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='876'>
<bc code='182' bci='3'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='7'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='14'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='18'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.710'/>
</parse>
<parse_done stamp='117.710'/>
</parse>
<parse_done stamp='117.710'/>
</parse>
<bc code='184' bci='229'/>
<type id='729' name='boolean'/>
<type id='730' name='char'/>
<klass id='824' name='java/lang/Character' flags='17'/>
<method id='885' holder='824' name='isSurrogate' return='729' arguments='730' flags='9' bytes='18' iicount='1'/>
<call method='885' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='885'>
<parse_done stamp='117.711'/>
</parse>
<bc code='183' bci='247'/>
<klass id='887' name='sun/nio/cs/Surrogate$Parser' unloaded='1'/>
<method id='888' holder='887' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='888' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='264'/>
<method id='889' holder='887' name='parse' return='735' arguments='730 835 735 735' unloaded='1'/>
<call method='889' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='184' bci='280'/>
<call method='874' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<bc code='184' bci='4'/>
<call method='876' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='876'>
<bc code='182' bci='3'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='7'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='14'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='18'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.711'/>
</parse>
<parse_done stamp='117.711'/>
</parse>
<bc code='182' bci='287'/>
<method id='890' holder='887' name='error' return='849' unloaded='1'/>
<call method='890' instr='invokevirtual'/>
<inline_fail reason='not inlineable'/>
<bc code='184' bci='306'/>
<call method='871' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='871'>
<bc code='184' bci='4'/>
<call method='874' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<bc code='184' bci='4'/>
<call method='876' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='876'>
<bc code='182' bci='3'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='7'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='14'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='18'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.712'/>
</parse>
<parse_done stamp='117.712'/>
</parse>
<parse_done stamp='117.712'/>
</parse>
<bc code='184' bci='409'/>
<call method='871' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='871'>
<bc code='184' bci='4'/>
<call method='874' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<bc code='184' bci='4'/>
<call method='876' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='876'>
<bc code='182' bci='3'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='7'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='14'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='18'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.713'/>
</parse>
<parse_done stamp='117.713'/>
</parse>
<parse_done stamp='117.713'/>
</parse>
<bc code='184' bci='482'/>
<call method='874' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<bc code='184' bci='4'/>
<call method='876' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='876'>
<bc code='182' bci='3'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='7'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='14'/>
<call method='880' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='18'/>
<call method='881' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='117.714'/>
</parse>
<parse_done stamp='117.714'/>
</parse>
<parse_done stamp='117.714'/>
</parse>
<phase name='optimize_blocks' stamp='117.714'>
<phase_done name='optimize_blocks' stamp='117.714'/>
</phase>
<phase name='rangeCheckElimination' stamp='117.716'>
<phase_done name='rangeCheckElimination' stamp='117.724'/>
</phase>
<phase name='optimize_null_checks' stamp='117.724'>
<phase_done name='optimize_null_checks' stamp='117.724'/>
</phase>
<phase_done name='buildIR' stamp='117.725'/>
</phase>
<phase name='emit_lir' stamp='117.725'>
<phase name='lirGeneration' stamp='117.725'>
<phase_done name='lirGeneration' stamp='117.727'/>
</phase>
<phase name='linearScan' stamp='117.727'>
<phase_done name='linearScan' stamp='117.933'/>
</phase>
<phase_done name='emit_lir' stamp='117.933'/>
</phase>
<phase name='codeemit' stamp='117.933'>
<phase_done name='codeemit' stamp='117.938'/>
</phase>
<phase name='codeinstall' stamp='117.938'>
<dependency type='unique_concrete_method' ctxk='847' x='858'/>
<dependency type='unique_concrete_method' ctxk='848' x='866'/>
<phase_done name='codeinstall' stamp='118.077'/>
</phase>
<code_cache total_blobs='527' nmethods='21' adapters='427' free_code_cache='249304256'/>
<task_done success='1' nmsize='18000' count='9225' backedge_count='11648' inlined_bytes='489' stamp='118.077'/>
</task>
<task compile_id='41' method='java/io/BufferedWriter write (Ljava/lang/String;II)V' bytes='117' count='9229' backedge_count='9229' iicount='9229' level='2' stamp='118.078'>
<phase name='buildIR' stamp='118.078'>
<type id='737' name='void'/>
<klass id='743' name='java/lang/String' flags='17'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='743 735 735' flags='1' bytes='117' iicount='9234'/>
<parse method='847'  stamp='118.078'>
<bc code='183' bci='9'/>
<method id='850' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' iicount='18549'/>
<call method='850' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='183' bci='13'/>
<klass id='852' name='java/io/IOException' unloaded='1'/>
<method id='854' holder='852' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='854' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.079'/>
</parse>
<bc code='183' bci='42'/>
<method id='855' holder='846' name='min' return='735' arguments='735 735' flags='2' bytes='9' iicount='9349'/>
<call method='855' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='855'>
<parse_done stamp='118.080'/>
</parse>
<bc code='182' bci='63'/>
<klass id='835' name='[C' flags='1041'/>
<method id='857' holder='743' name='getChars' return='737' arguments='735 735 835 735' flags='1' bytes='62' iicount='9544'/>
<call method='857' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='96'/>
<method id='859' holder='846' name='flushBuffer' return='737' flags='0' bytes='53' iicount='9400'/>
<call method='859' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.081'/>
</parse>
<phase name='optimize_blocks' stamp='118.081'>
<phase_done name='optimize_blocks' stamp='118.081'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.082'>
<phase_done name='rangeCheckElimination' stamp='118.082'/>
</phase>
<phase name='optimize_null_checks' stamp='118.082'>
<phase_done name='optimize_null_checks' stamp='118.082'/>
</phase>
<phase_done name='buildIR' stamp='118.082'/>
</phase>
<phase name='emit_lir' stamp='118.082'>
<phase name='lirGeneration' stamp='118.082'>
<phase_done name='lirGeneration' stamp='118.082'/>
</phase>
<phase name='linearScan' stamp='118.082'>
<phase_done name='linearScan' stamp='118.089'/>
</phase>
<phase_done name='emit_lir' stamp='118.089'/>
</phase>
<phase name='codeemit' stamp='118.089'>
<phase_done name='codeemit' stamp='118.090'/>
</phase>
<phase name='codeinstall' stamp='118.090'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='118.114'/>
</phase>
<code_cache total_blobs='528' nmethods='22' adapters='427' free_code_cache='249300544'/>
<task_done success='1' nmsize='1904' count='10133' backedge_count='10133' inlined_bytes='27' stamp='118.115'/>
</task>
<task compile_id='68' method='java/lang/Integer stringSize (I)I' bytes='21' count='5067' backedge_count='2533' iicount='5067' level='3' stamp='118.115'>
<phase name='buildIR' stamp='118.115'>
<type id='735' name='int'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='846' holder='830' name='stringSize' return='735' arguments='735' flags='8' bytes='21' iicount='5067'/>
<parse method='846'  stamp='118.115'>
<parse_done stamp='118.115'/>
</parse>
<phase name='optimize_blocks' stamp='118.115'>
<phase_done name='optimize_blocks' stamp='118.115'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.115'>
<phase_done name='rangeCheckElimination' stamp='118.115'/>
</phase>
<phase name='optimize_null_checks' stamp='118.115'>
<phase_done name='optimize_null_checks' stamp='118.115'/>
</phase>
<phase_done name='buildIR' stamp='118.115'/>
</phase>
<phase name='emit_lir' stamp='118.115'>
<phase name='lirGeneration' stamp='118.115'>
<phase_done name='lirGeneration' stamp='118.115'/>
</phase>
<phase name='linearScan' stamp='118.115'>
<phase_done name='linearScan' stamp='118.117'/>
</phase>
<phase_done name='emit_lir' stamp='118.117'/>
</phase>
<phase name='codeemit' stamp='118.117'>
<phase_done name='codeemit' stamp='118.117'/>
</phase>
<phase name='codeinstall' stamp='118.117'>
<phase_done name='codeinstall' stamp='118.130'/>
</phase>
<code_cache total_blobs='529' nmethods='23' adapters='427' free_code_cache='249298816'/>
<task_done success='1' nmsize='920' count='5333' backedge_count='2666' stamp='118.131'/>
</task>
<task compile_id='69' method='java/lang/Integer getChars (II[C)V' bytes='131' count='5353' backedge_count='2676' iicount='5353' level='3' stamp='118.131'>
<phase name='buildIR' stamp='118.132'>
<type id='737' name='void'/>
<type id='735' name='int'/>
<klass id='835' name='[C' flags='1041'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='846' holder='830' name='getChars' return='737' arguments='735 735 835' flags='8' bytes='131' iicount='5361'/>
<parse method='846'  stamp='118.132'>
<parse_done stamp='118.145'/>
</parse>
<phase name='optimize_blocks' stamp='118.145'>
<phase_done name='optimize_blocks' stamp='118.145'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.146'>
<phase_done name='rangeCheckElimination' stamp='118.146'/>
</phase>
<phase name='optimize_null_checks' stamp='118.146'>
<phase_done name='optimize_null_checks' stamp='118.146'/>
</phase>
<phase_done name='buildIR' stamp='118.146'/>
</phase>
<phase name='emit_lir' stamp='118.146'>
<phase name='lirGeneration' stamp='118.146'>
<phase_done name='lirGeneration' stamp='118.147'/>
</phase>
<phase name='linearScan' stamp='118.147'>
<phase_done name='linearScan' stamp='118.155'/>
</phase>
<phase_done name='emit_lir' stamp='118.155'/>
</phase>
<phase name='codeemit' stamp='118.155'>
<phase_done name='codeemit' stamp='118.161'/>
</phase>
<phase name='codeinstall' stamp='118.161'>
<phase_done name='codeinstall' stamp='118.212'/>
</phase>
<code_cache total_blobs='535' nmethods='26' adapters='427' free_code_cache='249271040'/>
<task_done success='1' nmsize='3352' count='6810' backedge_count='3528' stamp='118.212'/>
</task>
<task compile_id='42' method='java/io/BufferedWriter min (II)I' bytes='9' count='10133' iicount='10133' level='3' stamp='118.264'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='10133' stamp='118.264'/>
</task>
<task compile_id='16' method='java/nio/charset/CoderResult isUnderflow ()Z' bytes='13' count='29168' iicount='29168' level='2' stamp='118.264'>
<phase name='buildIR' stamp='118.264'>
<type id='729' name='boolean'/>
<klass id='846' name='java/nio/charset/CoderResult' flags='1'/>
<method id='847' holder='846' name='isUnderflow' return='729' flags='1' bytes='13' iicount='29168'/>
<parse method='847'  stamp='118.264'>
<parse_done stamp='118.264'/>
</parse>
<phase name='optimize_blocks' stamp='118.264'>
<phase_done name='optimize_blocks' stamp='118.264'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.264'>
<phase_done name='rangeCheckElimination' stamp='118.264'/>
</phase>
<phase name='optimize_null_checks' stamp='118.265'>
<phase_done name='optimize_null_checks' stamp='118.265'/>
</phase>
<phase_done name='buildIR' stamp='118.265'/>
</phase>
<phase name='emit_lir' stamp='118.265'>
<phase name='lirGeneration' stamp='118.265'>
<phase_done name='lirGeneration' stamp='118.265'/>
</phase>
<phase name='linearScan' stamp='118.265'>
<phase_done name='linearScan' stamp='118.265'/>
</phase>
<phase_done name='emit_lir' stamp='118.265'/>
</phase>
<phase name='codeemit' stamp='118.265'>
<phase_done name='codeemit' stamp='118.266'/>
</phase>
<phase name='codeinstall' stamp='118.266'>
<phase_done name='codeinstall' stamp='118.275'/>
</phase>
<code_cache total_blobs='534' nmethods='28' adapters='427' free_code_cache='249286976'/>
<task_done success='1' nmsize='408' count='30038' stamp='118.275'/>
</task>
<task compile_id='19' method='java/io/PrintStream ensureOpen ()V' bytes='18' count='30038' iicount='30038' level='2' stamp='118.275'>
<phase name='buildIR' stamp='118.275'>
<type id='737' name='void'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' iicount='30042'/>
<parse method='847'  stamp='118.275'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='851' name='java/io/IOException' unloaded='1'/>
<method id='853' holder='851' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='853' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.275'/>
</parse>
<phase name='optimize_blocks' stamp='118.275'>
<phase_done name='optimize_blocks' stamp='118.275'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.275'>
<phase_done name='rangeCheckElimination' stamp='118.275'/>
</phase>
<phase name='optimize_null_checks' stamp='118.275'>
<phase_done name='optimize_null_checks' stamp='118.275'/>
</phase>
<phase_done name='buildIR' stamp='118.275'/>
</phase>
<phase name='emit_lir' stamp='118.275'>
<phase name='lirGeneration' stamp='118.275'>
<phase_done name='lirGeneration' stamp='118.275'/>
</phase>
<phase name='linearScan' stamp='118.275'>
<phase_done name='linearScan' stamp='118.277'/>
</phase>
<phase_done name='emit_lir' stamp='118.277'/>
</phase>
<phase name='codeemit' stamp='118.277'>
<phase_done name='codeemit' stamp='118.277'/>
</phase>
<phase name='codeinstall' stamp='118.277'>
<phase_done name='codeinstall' stamp='118.291'/>
</phase>
<code_cache total_blobs='535' nmethods='29' adapters='427' free_code_cache='249285568'/>
<task_done success='1' nmsize='656' count='30716' stamp='118.291'/>
</task>
<task compile_id='20' method='java/io/BufferedOutputStream flush ()V' bytes='12' count='23037' iicount='23037' level='2' stamp='118.291'>
<phase name='buildIR' stamp='118.291'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedOutputStream' flags='1'/>
<method id='847' holder='846' name='flush' return='737' flags='33' bytes='12' iicount='23037'/>
<parse method='847'  stamp='118.291'>
<bc code='183' bci='1'/>
<method id='850' holder='846' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23037'/>
<call method='850' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='182' bci='20'/>
<klass id='838' name='[B' flags='1041'/>
<type id='735' name='int'/>
<klass id='852' name='java/io/OutputStream' flags='1025'/>
<method id='854' holder='852' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='854' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='118.292'/>
</parse>
<bc code='182' bci='8'/>
<method id='855' holder='852' name='flush' return='737' flags='1' bytes='1' iicount='23037'/>
<call method='855' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='118.292'/>
</parse>
<phase name='optimize_blocks' stamp='118.292'>
<phase_done name='optimize_blocks' stamp='118.292'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.292'>
<phase_done name='rangeCheckElimination' stamp='118.292'/>
</phase>
<phase name='optimize_null_checks' stamp='118.292'>
<phase_done name='optimize_null_checks' stamp='118.292'/>
</phase>
<phase_done name='buildIR' stamp='118.292'/>
</phase>
<phase name='emit_lir' stamp='118.292'>
<phase name='lirGeneration' stamp='118.292'>
<phase_done name='lirGeneration' stamp='118.292'/>
</phase>
<phase name='linearScan' stamp='118.292'>
<phase_done name='linearScan' stamp='118.294'/>
</phase>
<phase_done name='emit_lir' stamp='118.294'/>
</phase>
<phase name='codeemit' stamp='118.294'>
<phase_done name='codeemit' stamp='118.295'/>
</phase>
<phase name='codeinstall' stamp='118.295'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='118.319'/>
</phase>
<code_cache total_blobs='539' nmethods='31' adapters='427' free_code_cache='249266560'/>
<task_done success='1' nmsize='1248' count='24187' inlined_bytes='29' stamp='118.319'/>
</task>
<task compile_id='39' method='sun/nio/cs/UTF_8 updatePositions (Ljava/nio/Buffer;ILjava/nio/Buffer;I)V' bytes='23' count='14477' iicount='14477' level='3' stamp='118.336'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='14477' stamp='118.336'/>
</task>
<task compile_id='38' method='sun/nio/cs/UTF_8 access$200 (Ljava/nio/Buffer;ILjava/nio/Buffer;I)V' bytes='8' count='14477' iicount='14477' level='3' stamp='118.336'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='14477' stamp='118.336'/>
</task>
<task compile_id='37' method='java/nio/CharBuffer array ()[C' bytes='35' count='14477' iicount='14477' level='3' stamp='118.336'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='14477' stamp='118.336'/>
</task>
<task compile_id='22' method='java/io/OutputStream flush ()V' bytes='1' count='24187' iicount='24187' level='2' stamp='118.336'>
<phase name='buildIR' stamp='118.336'>
<type id='737' name='void'/>
<klass id='846' name='java/io/OutputStream' flags='1025'/>
<method id='847' holder='846' name='flush' return='737' flags='1' bytes='1' iicount='24187'/>
<parse method='847'  stamp='118.336'>
<parse_done stamp='118.336'/>
</parse>
<phase name='optimize_blocks' stamp='118.336'>
<phase_done name='optimize_blocks' stamp='118.336'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.336'>
<phase_done name='rangeCheckElimination' stamp='118.336'/>
</phase>
<phase name='optimize_null_checks' stamp='118.336'>
<phase_done name='optimize_null_checks' stamp='118.336'/>
</phase>
<phase_done name='buildIR' stamp='118.336'/>
</phase>
<phase name='emit_lir' stamp='118.336'>
<phase name='lirGeneration' stamp='118.336'>
<phase_done name='lirGeneration' stamp='118.336'/>
</phase>
<phase name='linearScan' stamp='118.336'>
<phase_done name='linearScan' stamp='118.336'/>
</phase>
<phase_done name='emit_lir' stamp='118.336'/>
</phase>
<phase name='codeemit' stamp='118.336'>
<phase_done name='codeemit' stamp='118.337'/>
</phase>
<phase name='codeinstall' stamp='118.337'>
<phase_done name='codeinstall' stamp='118.345'/>
</phase>
<code_cache total_blobs='541' nmethods='32' adapters='427' free_code_cache='249261824'/>
<task_done success='1' nmsize='376' count='24187' stamp='118.345'/>
</task>
<task compile_id='17' method='java/nio/ByteBuffer array ()[B' bytes='35' count='30603' iicount='30603' level='2' stamp='118.345'>
<phase name='buildIR' stamp='118.345'>
<klass id='838' name='[B' flags='1041'/>
<klass id='846' name='java/nio/ByteBuffer' flags='1025'/>
<method id='847' holder='846' name='array' return='838' flags='17' bytes='35' iicount='30603'/>
<parse method='847'  stamp='118.345'>
<bc code='183' bci='11'/>
<type id='737' name='void'/>
<klass id='849' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<method id='850' holder='849' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='850' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<klass id='851' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<method id='852' holder='851' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='852' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.345'/>
</parse>
<phase name='optimize_blocks' stamp='118.345'>
<phase_done name='optimize_blocks' stamp='118.345'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.345'>
<phase_done name='rangeCheckElimination' stamp='118.345'/>
</phase>
<phase name='optimize_null_checks' stamp='118.345'>
<phase_done name='optimize_null_checks' stamp='118.345'/>
</phase>
<phase_done name='buildIR' stamp='118.345'/>
</phase>
<phase name='emit_lir' stamp='118.345'>
<phase name='lirGeneration' stamp='118.345'>
<phase_done name='lirGeneration' stamp='118.345'/>
</phase>
<phase name='linearScan' stamp='118.345'>
<phase_done name='linearScan' stamp='118.347'/>
</phase>
<phase_done name='emit_lir' stamp='118.347'/>
</phase>
<phase name='codeemit' stamp='118.347'>
<phase_done name='codeemit' stamp='118.347'/>
</phase>
<phase name='codeinstall' stamp='118.347'>
<phase_done name='codeinstall' stamp='118.399'/>
</phase>
<code_cache total_blobs='541' nmethods='35' adapters='427' free_code_cache='249273728'/>
<task_done success='1' nmsize='736' count='31522' stamp='118.399'/>
</task>
<task compile_id='23' method='java/lang/String getChars (II[CI)V' bytes='62' count='16291' iicount='16291' level='3' stamp='118.399'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='16291' stamp='118.399'/>
</task>
<task compile_id='21' method='java/io/BufferedOutputStream flushBuffer ()V' bytes='29' count='23667' iicount='23667' level='3' stamp='118.399'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='23667' stamp='118.399'/>
</task>
<task compile_id='18' method='java/io/BufferedWriter ensureOpen ()V' bytes='18' count='27185' iicount='27185' level='2' stamp='118.399'>
<phase name='buildIR' stamp='118.399'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' iicount='27188'/>
<parse method='847'  stamp='118.399'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='850' name='java/io/IOException' unloaded='1'/>
<method id='852' holder='850' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='852' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.400'/>
</parse>
<phase name='optimize_blocks' stamp='118.400'>
<phase_done name='optimize_blocks' stamp='118.400'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.400'>
<phase_done name='rangeCheckElimination' stamp='118.400'/>
</phase>
<phase name='optimize_null_checks' stamp='118.400'>
<phase_done name='optimize_null_checks' stamp='118.400'/>
</phase>
<phase_done name='buildIR' stamp='118.400'/>
</phase>
<phase name='emit_lir' stamp='118.400'>
<phase name='lirGeneration' stamp='118.400'>
<phase_done name='lirGeneration' stamp='118.400'/>
</phase>
<phase name='linearScan' stamp='118.400'>
<phase_done name='linearScan' stamp='118.401'/>
</phase>
<phase_done name='emit_lir' stamp='118.401'/>
</phase>
<phase name='codeemit' stamp='118.401'>
<phase_done name='codeemit' stamp='118.402'/>
</phase>
<phase name='codeinstall' stamp='118.402'>
<phase_done name='codeinstall' stamp='118.417'/>
</phase>
<code_cache total_blobs='545' nmethods='37' adapters='427' free_code_cache='249260160'/>
<task_done success='1' nmsize='656' count='27993' stamp='118.417'/>
</task>
<task compile_id='84' method='java/io/OutputStream flush ()V' bytes='1' count='27871' iicount='27871' level='1' stamp='118.431'>
<phase name='buildIR' stamp='118.431'>
<type id='737' name='void'/>
<klass id='846' name='java/io/OutputStream' flags='1025'/>
<method id='847' holder='846' name='flush' return='737' flags='1' bytes='1' compile_id='22' compiler='C1' level='2' iicount='27880'/>
<parse method='847'  stamp='118.431'>
<parse_done stamp='118.431'/>
</parse>
<phase name='optimize_blocks' stamp='118.431'>
<phase_done name='optimize_blocks' stamp='118.431'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.432'>
<phase_done name='rangeCheckElimination' stamp='118.432'/>
</phase>
<phase name='optimize_null_checks' stamp='118.432'>
<phase_done name='optimize_null_checks' stamp='118.432'/>
</phase>
<phase_done name='buildIR' stamp='118.432'/>
</phase>
<phase name='emit_lir' stamp='118.432'>
<phase name='lirGeneration' stamp='118.432'>
<phase_done name='lirGeneration' stamp='118.432'/>
</phase>
<phase name='linearScan' stamp='118.432'>
<phase_done name='linearScan' stamp='118.432'/>
</phase>
<phase_done name='emit_lir' stamp='118.432'/>
</phase>
<phase name='codeemit' stamp='118.432'>
<phase_done name='codeemit' stamp='118.433'/>
</phase>
<phase name='codeinstall' stamp='118.433'>
<phase_done name='codeinstall' stamp='118.448'/>
</phase>
<code_cache total_blobs='549' nmethods='39' adapters='427' free_code_cache='249245824'/>
<task_done success='1' nmsize='312' count='28771' stamp='118.448'/>
</task>
<task compile_id='24' method='java/nio/Buffer &lt;init&gt; (IIII)V' bytes='121' count='22232' iicount='22232' level='2' stamp='118.505'>
<phase name='buildIR' stamp='118.505'>
<type id='737' name='void'/>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' iicount='22236'/>
<parse method='846'  stamp='118.505'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='848' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='848' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='848'>
<bc code='177' bci='0'/>
<dependency type='no_finalizable_subclasses' ctxk='822'/>
<parse_done stamp='118.505'/>
</parse>
<bc code='183' bci='27'/>
<klass id='809' name='java/lang/StringBuilder' flags='17'/>
<method id='851' holder='809' name='&lt;init&gt;' return='737' flags='1' bytes='7' iicount='92'/>
<call method='851' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<bc code='183' bci='3'/>
<klass id='807' name='java/lang/AbstractStringBuilder' flags='1024'/>
<method id='853' holder='807' name='&lt;init&gt;' return='737' arguments='735' flags='0' bytes='12' iicount='100'/>
<call method='853' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='853'>
<bc code='183' bci='1'/>
<call method='848' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='848'>
<parse_done stamp='118.506'/>
</parse>
<parse_done stamp='118.506'/>
</parse>
<parse_done stamp='118.506'/>
</parse>
<bc code='182' bci='32'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='856' holder='809' name='append' return='809' arguments='743' flags='1' bytes='8' iicount='149'/>
<call method='856' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='856'>
<bc code='183' bci='2'/>
<method id='858' holder='807' name='append' return='807' arguments='743' flags='1' bytes='50' iicount='165'/>
<call method='858' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.506'/>
</parse>
<bc code='182' bci='37'/>
<method id='860' holder='809' name='append' return='809' arguments='735' flags='1' bytes='8' iicount='1'/>
<call method='860' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='860'>
<bc code='183' bci='2'/>
<method id='862' holder='807' name='append' return='807' arguments='735' flags='1' bytes='62' iicount='1'/>
<call method='862' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.507'/>
</parse>
<bc code='182' bci='40'/>
<method id='864' holder='809' name='toString' return='743' flags='1' bytes='17' iicount='91'/>
<call method='864' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<bc code='183' bci='13'/>
<klass id='835' name='[C' flags='1041'/>
<method id='866' holder='743' name='&lt;init&gt;' return='737' arguments='835 735 735' flags='1' bytes='82' iicount='146'/>
<call method='866' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.507'/>
</parse>
<bc code='183' bci='43'/>
<klass id='850' name='java/lang/IllegalArgumentException' flags='1'/>
<method id='868' holder='850' name='&lt;init&gt;' return='737' arguments='743' flags='1' bytes='6' iicount='1'/>
<call method='868' instr='invokespecial'/>
<inline_fail reason='don&apos;t inline Throwable constructors'/>
<bc code='182' bci='55'/>
<method id='870' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' iicount='22373'/>
<call method='870' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='61'/>
<method id='872' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='872' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<bc code='183' bci='82'/>
<call method='851' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<bc code='183' bci='3'/>
<call method='853' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='853'>
<bc code='183' bci='1'/>
<call method='848' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='848'>
<parse_done stamp='118.508'/>
</parse>
<parse_done stamp='118.508'/>
</parse>
<parse_done stamp='118.508'/>
</parse>
<bc code='182' bci='87'/>
<call method='856' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='856'>
<bc code='183' bci='2'/>
<call method='858' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.509'/>
</parse>
<bc code='182' bci='91'/>
<call method='860' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='860'>
<bc code='183' bci='2'/>
<call method='862' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.509'/>
</parse>
<bc code='182' bci='96'/>
<call method='856' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='856'>
<bc code='183' bci='2'/>
<call method='858' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.509'/>
</parse>
<bc code='182' bci='100'/>
<call method='860' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='860'>
<bc code='183' bci='2'/>
<call method='862' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.509'/>
</parse>
<bc code='182' bci='105'/>
<call method='856' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='856'>
<bc code='183' bci='2'/>
<call method='858' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.509'/>
</parse>
<bc code='182' bci='108'/>
<call method='864' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<bc code='183' bci='13'/>
<call method='866' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.510'/>
</parse>
<bc code='183' bci='111'/>
<call method='868' instr='invokespecial'/>
<inline_fail reason='don&apos;t inline Throwable constructors'/>
<parse_done stamp='118.510'/>
</parse>
<phase name='optimize_blocks' stamp='118.510'>
<phase_done name='optimize_blocks' stamp='118.510'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.510'>
<phase_done name='rangeCheckElimination' stamp='118.510'/>
</phase>
<phase name='optimize_null_checks' stamp='118.510'>
<phase_done name='optimize_null_checks' stamp='118.510'/>
</phase>
<phase_done name='buildIR' stamp='118.510'/>
</phase>
<phase name='emit_lir' stamp='118.510'>
<phase name='lirGeneration' stamp='118.510'>
<phase_done name='lirGeneration' stamp='118.510'/>
</phase>
<phase name='linearScan' stamp='118.510'>
<phase_done name='linearScan' stamp='118.534'/>
</phase>
<phase_done name='emit_lir' stamp='118.534'/>
</phase>
<phase name='codeemit' stamp='118.534'>
<phase_done name='codeemit' stamp='118.535'/>
</phase>
<phase name='codeinstall' stamp='118.535'>
<dependency type='no_finalizable_subclasses' ctxk='822'/>
<phase_done name='codeinstall' stamp='118.602'/>
</phase>
<code_cache total_blobs='548' nmethods='42' adapters='427' free_code_cache='249261184'/>
<task_done success='1' nmsize='2768' count='27329' inlined_bytes='131' stamp='118.602'/>
</task>
<task compile_id='57' method='java/io/FileOutputStream write ([BII)V' bytes='12' count='21599' iicount='21599' level='3' stamp='118.602'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='21599' stamp='118.602'/>
</task>
<task compile_id='25' method='java/nio/Buffer limit (I)Ljava/nio/Buffer;' bytes='53' count='27329' iicount='27329' level='2' stamp='118.602'>
<phase name='buildIR' stamp='118.602'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<type id='735' name='int'/>
<method id='846' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' iicount='27329'/>
<parse method='846'  stamp='118.602'>
<bc code='183' bci='16'/>
<type id='737' name='void'/>
<klass id='848' name='java/lang/IllegalArgumentException' flags='1'/>
<method id='849' holder='848' name='&lt;init&gt;' return='737' flags='1' bytes='5' iicount='1'/>
<call method='849' instr='invokespecial'/>
<inline_fail reason='don&apos;t inline Throwable constructors'/>
<parse_done stamp='118.602'/>
</parse>
<phase name='optimize_blocks' stamp='118.602'>
<phase_done name='optimize_blocks' stamp='118.602'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.603'>
<phase_done name='rangeCheckElimination' stamp='118.603'/>
</phase>
<phase name='optimize_null_checks' stamp='118.603'>
<phase_done name='optimize_null_checks' stamp='118.603'/>
</phase>
<phase_done name='buildIR' stamp='118.603'/>
</phase>
<phase name='emit_lir' stamp='118.603'>
<phase name='lirGeneration' stamp='118.603'>
<phase_done name='lirGeneration' stamp='118.603'/>
</phase>
<phase name='linearScan' stamp='118.603'>
<phase_done name='linearScan' stamp='118.605'/>
</phase>
<phase_done name='emit_lir' stamp='118.605'/>
</phase>
<phase name='codeemit' stamp='118.605'>
<phase_done name='codeemit' stamp='118.605'/>
</phase>
<phase name='codeinstall' stamp='118.605'>
<phase_done name='codeinstall' stamp='118.626'/>
</phase>
<code_cache total_blobs='549' nmethods='43' adapters='427' free_code_cache='249259520'/>
<task_done success='1' nmsize='592' count='28186' stamp='118.626'/>
</task>
<task compile_id='26' method='java/nio/CharBuffer wrap ([CII)Ljava/nio/CharBuffer;' bytes='20' count='28169' iicount='28169' level='2' stamp='118.626'>
<phase name='buildIR' stamp='118.626'>
<klass id='846' name='java/nio/CharBuffer' flags='1025'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<method id='847' holder='846' name='wrap' return='846' arguments='835 735 735' flags='9' bytes='20' iicount='28169'/>
<parse method='847'  stamp='118.626'>
<bc code='183' bci='7'/>
<type id='737' name='void'/>
<klass id='849' name='java/nio/HeapCharBuffer' flags='0'/>
<method id='850' holder='849' name='&lt;init&gt;' return='737' arguments='835 735 735' flags='0' bytes='14' iicount='28169'/>
<call method='850' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='183' bci='10'/>
<method id='852' holder='846' name='&lt;init&gt;' return='737' arguments='735 735 735 735 835 735' flags='0' bytes='22' iicount='28169'/>
<call method='852' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<bc code='183' bci='6'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='854' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' compile_id='24' compiler='C1' level='2' iicount='28186'/>
<call method='854' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.627'/>
</parse>
<parse_done stamp='118.627'/>
</parse>
<bc code='183' bci='16'/>
<klass id='856' name='java/lang/IndexOutOfBoundsException' unloaded='1'/>
<method id='857' holder='856' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.627'/>
</parse>
<phase name='optimize_blocks' stamp='118.627'>
<phase_done name='optimize_blocks' stamp='118.627'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.627'>
<phase_done name='rangeCheckElimination' stamp='118.627'/>
</phase>
<phase name='optimize_null_checks' stamp='118.627'>
<phase_done name='optimize_null_checks' stamp='118.627'/>
</phase>
<phase_done name='buildIR' stamp='118.627'/>
</phase>
<phase name='emit_lir' stamp='118.627'>
<phase name='lirGeneration' stamp='118.627'>
<phase_done name='lirGeneration' stamp='118.627'/>
</phase>
<phase name='linearScan' stamp='118.627'>
<phase_done name='linearScan' stamp='118.635'/>
</phase>
<phase_done name='emit_lir' stamp='118.635'/>
</phase>
<phase name='codeemit' stamp='118.635'>
<phase_done name='codeemit' stamp='118.635'/>
</phase>
<phase name='codeinstall' stamp='118.635'>
<phase_done name='codeinstall' stamp='118.660'/>
</phase>
<code_cache total_blobs='553' nmethods='45' adapters='427' free_code_cache='249244096'/>
<task_done success='1' nmsize='960' count='29706' inlined_bytes='36' stamp='118.660'/>
</task>
<task compile_id='33' method='java/io/Writer write (Ljava/lang/String;)V' bytes='11' count='29703' iicount='29703' level='2' stamp='118.680'>
<phase name='buildIR' stamp='118.680'>
<type id='737' name='void'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='846' name='java/io/Writer' flags='1025'/>
<method id='847' holder='846' name='write' return='737' arguments='743' flags='1' bytes='11' iicount='29703'/>
<parse method='847'  stamp='118.680'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='850' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='850' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<parse_done stamp='118.681'/>
</parse>
<bc code='182' bci='7'/>
<method id='852' holder='846' name='write' return='737' arguments='743 735 735' flags='1' bytes='79' iicount='1'/>
<call method='852' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='118.681'/>
</parse>
<phase name='optimize_blocks' stamp='118.681'>
<phase_done name='optimize_blocks' stamp='118.681'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.681'>
<phase_done name='rangeCheckElimination' stamp='118.681'/>
</phase>
<phase name='optimize_null_checks' stamp='118.681'>
<phase_done name='optimize_null_checks' stamp='118.681'/>
</phase>
<phase_done name='buildIR' stamp='118.681'/>
</phase>
<phase name='emit_lir' stamp='118.681'>
<phase name='lirGeneration' stamp='118.681'>
<phase_done name='lirGeneration' stamp='118.681'/>
</phase>
<phase name='linearScan' stamp='118.681'>
<phase_done name='linearScan' stamp='118.682'/>
</phase>
<phase_done name='emit_lir' stamp='118.682'/>
</phase>
<phase name='codeemit' stamp='118.682'>
<phase_done name='codeemit' stamp='118.683'/>
</phase>
<phase name='codeinstall' stamp='118.683'>
<phase_done name='codeinstall' stamp='118.698'/>
</phase>
<code_cache total_blobs='554' nmethods='46' adapters='427' free_code_cache='249242688'/>
<task_done success='1' nmsize='816' count='30381' inlined_bytes='6' stamp='118.698'/>
</task>
<task compile_id='30' method='java/nio/Buffer hasRemaining ()Z' bytes='17' count='30384' iicount='30384' level='2' stamp='118.707'>
<phase name='buildIR' stamp='118.707'>
<type id='729' name='boolean'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='hasRemaining' return='729' flags='17' bytes='17' iicount='30385'/>
<parse method='846'  stamp='118.707'>
<parse_done stamp='118.707'/>
</parse>
<phase name='optimize_blocks' stamp='118.707'>
<phase_done name='optimize_blocks' stamp='118.707'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.707'>
<phase_done name='rangeCheckElimination' stamp='118.707'/>
</phase>
<phase name='optimize_null_checks' stamp='118.707'>
<phase_done name='optimize_null_checks' stamp='118.707'/>
</phase>
<phase_done name='buildIR' stamp='118.707'/>
</phase>
<phase name='emit_lir' stamp='118.707'>
<phase name='lirGeneration' stamp='118.707'>
<phase_done name='lirGeneration' stamp='118.707'/>
</phase>
<phase name='linearScan' stamp='118.707'>
<phase_done name='linearScan' stamp='118.708'/>
</phase>
<phase_done name='emit_lir' stamp='118.708'/>
</phase>
<phase name='codeemit' stamp='118.708'>
<phase_done name='codeemit' stamp='118.708'/>
</phase>
<phase name='codeinstall' stamp='118.708'>
<phase_done name='codeinstall' stamp='118.742'/>
</phase>
<code_cache total_blobs='555' nmethods='48' adapters='427' free_code_cache='249246784'/>
<task_done success='1' nmsize='408' count='30427' stamp='118.742'/>
</task>
<task compile_id='47' method='sun/nio/cs/StreamEncoder ensureOpen ()V' bytes='18' count='30434' iicount='30434' level='2' stamp='118.742'>
<phase name='buildIR' stamp='118.742'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' iicount='30441'/>
<parse method='847'  stamp='118.742'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='849' name='java/io/IOException' unloaded='1'/>
<method id='851' holder='849' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='851' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.743'/>
</parse>
<phase name='optimize_blocks' stamp='118.743'>
<phase_done name='optimize_blocks' stamp='118.743'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.743'>
<phase_done name='rangeCheckElimination' stamp='118.743'/>
</phase>
<phase name='optimize_null_checks' stamp='118.743'>
<phase_done name='optimize_null_checks' stamp='118.743'/>
</phase>
<phase_done name='buildIR' stamp='118.743'/>
</phase>
<phase name='emit_lir' stamp='118.743'>
<phase name='lirGeneration' stamp='118.743'>
<phase_done name='lirGeneration' stamp='118.743'/>
</phase>
<phase name='linearScan' stamp='118.743'>
<phase_done name='linearScan' stamp='118.746'/>
</phase>
<phase_done name='emit_lir' stamp='118.746'/>
</phase>
<phase name='codeemit' stamp='118.746'>
<phase_done name='codeemit' stamp='118.747'/>
</phase>
<phase name='codeinstall' stamp='118.747'>
<phase_done name='codeinstall' stamp='118.784'/>
</phase>
<code_cache total_blobs='556' nmethods='50' adapters='427' free_code_cache='249248640'/>
<task_done success='1' nmsize='496' count='31916' stamp='118.784'/>
</task>
<task compile_id='15' method='sun/nio/cs/StreamEncoder isOpen ()Z' bytes='5' count='31916' iicount='31916' level='1' stamp='118.784'>
<phase name='buildIR' stamp='118.784'>
<type id='729' name='boolean'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='isOpen' return='729' flags='2' bytes='5' iicount='31916'/>
<parse method='847'  stamp='118.784'>
<parse_done stamp='118.784'/>
</parse>
<phase name='optimize_blocks' stamp='118.784'>
<phase_done name='optimize_blocks' stamp='118.784'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.784'>
<phase_done name='rangeCheckElimination' stamp='118.784'/>
</phase>
<phase name='optimize_null_checks' stamp='118.784'>
<phase_done name='optimize_null_checks' stamp='118.784'/>
</phase>
<phase_done name='buildIR' stamp='118.784'/>
</phase>
<phase name='emit_lir' stamp='118.784'>
<phase name='lirGeneration' stamp='118.784'>
<phase_done name='lirGeneration' stamp='118.784'/>
</phase>
<phase name='linearScan' stamp='118.784'>
<phase_done name='linearScan' stamp='118.785'/>
</phase>
<phase_done name='emit_lir' stamp='118.785'/>
</phase>
<phase name='codeemit' stamp='118.785'>
<phase_done name='codeemit' stamp='118.785'/>
</phase>
<phase name='codeinstall' stamp='118.785'>
<phase_done name='codeinstall' stamp='118.794'/>
</phase>
<code_cache total_blobs='557' nmethods='51' adapters='427' free_code_cache='249247808'/>
<task_done success='1' nmsize='312' count='31958' stamp='118.794'/>
</task>
<task compile_id='43' method='java/io/BufferedWriter flushBuffer ()V' bytes='53' count='31959' iicount='31959' level='2' stamp='118.794'>
<phase name='buildIR' stamp='118.795'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='flushBuffer' return='737' flags='0' bytes='53' iicount='31959'/>
<parse method='847'  stamp='118.795'>
<bc code='183' bci='8'/>
<method id='851' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='86' compiler='C2' level='4' iicount='32333'/>
<call method='851' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='853' name='java/io/IOException' unloaded='1'/>
<method id='855' holder='853' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='855' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.795'/>
</parse>
<bc code='182' bci='34'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<klass id='850' name='java/io/Writer' flags='1025'/>
<method id='856' holder='850' name='write' return='737' arguments='835 735 735' flags='1025' bytes='0' iicount='1'/>
<call method='856' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='118.795'/>
</parse>
<phase name='optimize_blocks' stamp='118.795'>
<phase_done name='optimize_blocks' stamp='118.796'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.796'>
<phase_done name='rangeCheckElimination' stamp='118.796'/>
</phase>
<phase name='optimize_null_checks' stamp='118.796'>
<phase_done name='optimize_null_checks' stamp='118.796'/>
</phase>
<phase_done name='buildIR' stamp='118.796'/>
</phase>
<phase name='emit_lir' stamp='118.796'>
<phase name='lirGeneration' stamp='118.796'>
<phase_done name='lirGeneration' stamp='118.796'/>
</phase>
<phase name='linearScan' stamp='118.796'>
<phase_done name='linearScan' stamp='118.799'/>
</phase>
<phase_done name='emit_lir' stamp='118.799'/>
</phase>
<phase name='codeemit' stamp='118.799'>
<phase_done name='codeemit' stamp='118.800'/>
</phase>
<phase name='codeinstall' stamp='118.800'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='118.837'/>
</phase>
<code_cache total_blobs='562' nmethods='54' adapters='427' free_code_cache='249227840'/>
<task_done success='1' nmsize='1600' count='33452' inlined_bytes='18' stamp='118.837'/>
</task>
<task compile_id='28' method='java/nio/CharBuffer &lt;init&gt; (IIII[CI)V' bytes='22' count='28849' iicount='28849' level='3' stamp='118.865'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='28849' stamp='118.865'/>
</task>
<task compile_id='31' method='java/nio/charset/CharsetEncoder encode (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;' bytes='285' count='34188' iicount='34188' level='2' stamp='118.865'>
<phase name='buildIR' stamp='118.865'>
<klass id='849' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='847' name='java/nio/CharBuffer' flags='1025'/>
<klass id='848' name='java/nio/ByteBuffer' flags='1025'/>
<type id='729' name='boolean'/>
<klass id='846' name='java/nio/charset/CharsetEncoder' flags='1025'/>
<method id='850' holder='846' name='encode' return='849' arguments='847 848 729' flags='17' bytes='285' iicount='34190'/>
<parse method='850'  stamp='118.865'>
<bc code='183' bci='45'/>
<type id='737' name='void'/>
<type id='735' name='int'/>
<method id='853' holder='846' name='throwIllegalStateException' return='737' arguments='735 735' flags='2' bytes='44' iicount='1'/>
<call method='853' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='57'/>
<method id='855' holder='846' name='encodeLoop' return='849' arguments='847 848' flags='1028' bytes='0' iicount='1'/>
<call method='855' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='183' bci='73'/>
<klass id='752' name='java/lang/Exception' flags='1'/>
<klass id='856' name='java/nio/charset/CoderMalfunctionError' unloaded='1'/>
<method id='857' holder='856' name='&lt;init&gt;' return='737' arguments='752' unloaded='1'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='85'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='91'/>
<method id='858' holder='849' name='isOverflow' return='729' flags='1' bytes='14' iicount='34192'/>
<call method='858' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<parse_done stamp='118.867'/>
</parse>
<bc code='182' bci='102'/>
<method id='860' holder='849' name='isUnderflow' return='729' flags='1' bytes='13' compile_id='81' compiler='C2' level='4' iicount='33616'/>
<call method='860' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_success reason='receiver is statically known'/>
<parse method='860'>
<parse_done stamp='118.867'/>
</parse>
<bc code='182' bci='113'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='862' holder='822' name='hasRemaining' return='729' flags='17' bytes='17' compile_id='91' compiler='C2' level='4' iicount='32419'/>
<call method='862' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='862'>
<parse_done stamp='118.867'/>
</parse>
<bc code='182' bci='120'/>
<method id='864' holder='822' name='remaining' return='735' flags='17' bytes='20' iicount='34265'/>
<call method='864' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<parse_done stamp='118.868'/>
</parse>
<bc code='184' bci='123'/>
<method id='866' holder='849' name='malformedForLength' return='849' arguments='735' flags='9' bytes='8' iicount='1'/>
<call method='866' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='866'>
<bc code='184' bci='4'/>
<klass id='868' name='java/nio/charset/CoderResult$Cache' flags='1034'/>
<method id='870' holder='868' name='access$200' return='849' arguments='868 735' flags='4104' bytes='6' iicount='1'/>
<call method='870' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='870'>
<bc code='183' bci='2'/>
<method id='872' holder='868' name='get' return='849' arguments='735' flags='34' bytes='109' iicount='1'/>
<call method='872' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.868'/>
</parse>
<parse_done stamp='118.868'/>
</parse>
<bc code='182' bci='139'/>
<method id='874' holder='849' name='isMalformed' return='729' flags='1' bytes='14' iicount='1'/>
<call method='874' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='849' x='874'/>
<inline_success reason='receiver is statically known'/>
<parse method='874'>
<parse_done stamp='118.868'/>
</parse>
<bc code='182' bci='156'/>
<method id='877' holder='849' name='isUnmappable' return='729' flags='1' bytes='14' iicount='1'/>
<call method='877' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='849' x='877'/>
<inline_success reason='receiver is statically known'/>
<parse method='877'>
<parse_done stamp='118.869'/>
</parse>
<bc code='182' bci='210'/>
<call method='864' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<parse_done stamp='118.869'/>
</parse>
<bc code='182' bci='230'/>
<klass id='838' name='[B' flags='1041'/>
<method id='884' holder='848' name='put' return='848' arguments='838' flags='17' bytes='9' iicount='1'/>
<call method='884' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='884'>
<bc code='182' bci='5'/>
<method id='886' holder='848' name='put' return='848' arguments='838 735 735' flags='1' bytes='55' iicount='1'/>
<call method='886' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='118.870'/>
</parse>
<bc code='182' bci='252'/>
<method id='888' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='888' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='888'>
<parse_done stamp='118.870'/>
</parse>
<bc code='182' bci='257'/>
<method id='889' holder='849' name='length' return='735' flags='1' bytes='20' iicount='1'/>
<call method='889' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='849' x='889'/>
<inline_success reason='receiver is statically known'/>
<parse method='889'>
<bc code='182' bci='1'/>
<method id='891' holder='849' name='isError' return='729' flags='1' bytes='14' iicount='1'/>
<call method='891' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='849' x='891'/>
<inline_success reason='receiver is statically known'/>
<parse method='891'>
<parse_done stamp='118.870'/>
</parse>
<bc code='183' bci='11'/>
<klass id='893' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<method id='894' holder='893' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='894' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='118.871'/>
</parse>
<bc code='182' bci='261'/>
<method id='895' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='895' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.871'/>
</parse>
<phase name='optimize_blocks' stamp='118.871'>
<phase_done name='optimize_blocks' stamp='118.876'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.877'>
<phase_done name='rangeCheckElimination' stamp='118.877'/>
</phase>
<phase name='optimize_null_checks' stamp='118.877'>
<phase_done name='optimize_null_checks' stamp='118.877'/>
</phase>
<phase_done name='buildIR' stamp='118.877'/>
</phase>
<phase name='emit_lir' stamp='118.877'>
<phase name='lirGeneration' stamp='118.877'>
<phase_done name='lirGeneration' stamp='118.878'/>
</phase>
<phase name='linearScan' stamp='118.878'>
<phase_done name='linearScan' stamp='118.893'/>
</phase>
<phase_done name='emit_lir' stamp='118.893'/>
</phase>
<phase name='codeemit' stamp='118.893'>
<phase_done name='codeemit' stamp='118.895'/>
</phase>
<phase name='codeinstall' stamp='118.895'>
<dependency type='leaf_type' ctxk='849'/>
<dependency type='unique_concrete_method' ctxk='849' x='874'/>
<dependency type='unique_concrete_method' ctxk='849' x='877'/>
<dependency type='unique_concrete_method' ctxk='849' x='889'/>
<dependency type='unique_concrete_method' ctxk='849' x='891'/>
<phase_done name='codeinstall' stamp='118.943'/>
</phase>
<code_cache total_blobs='562' nmethods='56' adapters='427' free_code_cache='249233600'/>
<task_done success='1' nmsize='3200' count='39408' inlined_bytes='174' stamp='118.943'/>
</task>
<task compile_id='45' method='java/io/OutputStreamWriter write ([CII)V' bytes='11' count='39405' iicount='39405' level='2' stamp='118.943'>
<phase name='buildIR' stamp='118.943'>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/OutputStreamWriter' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='835 735 735' flags='1' bytes='11' iicount='39405'/>
<parse method='847'  stamp='118.943'>
<bc code='182' bci='7'/>
<klass id='849' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='850' holder='849' name='write' return='737' arguments='835 735 735' flags='1' bytes='78' iicount='39405'/>
<call method='850' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.944'/>
</parse>
<phase name='optimize_blocks' stamp='118.944'>
<phase_done name='optimize_blocks' stamp='118.944'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.944'>
<phase_done name='rangeCheckElimination' stamp='118.944'/>
</phase>
<phase name='optimize_null_checks' stamp='118.944'>
<phase_done name='optimize_null_checks' stamp='118.944'/>
</phase>
<phase_done name='buildIR' stamp='118.944'/>
</phase>
<phase name='emit_lir' stamp='118.944'>
<phase name='lirGeneration' stamp='118.944'>
<phase_done name='lirGeneration' stamp='118.944'/>
</phase>
<phase name='linearScan' stamp='118.944'>
<phase_done name='linearScan' stamp='118.945'/>
</phase>
<phase_done name='emit_lir' stamp='118.945'/>
</phase>
<phase name='codeemit' stamp='118.945'>
<phase_done name='codeemit' stamp='118.945'/>
</phase>
<phase name='codeinstall' stamp='118.945'>
<dependency type='leaf_type' ctxk='849'/>
<phase_done name='codeinstall' stamp='118.965'/>
</phase>
<code_cache total_blobs='563' nmethods='57' adapters='427' free_code_cache='249232256'/>
<task_done success='1' nmsize='656' count='40361' stamp='118.965'/>
</task>
<task compile_id='40' method='java/nio/charset/CoderResult isOverflow ()Z' bytes='14' count='39407' iicount='39407' level='2' stamp='118.965'>
<phase name='buildIR' stamp='118.965'>
<type id='729' name='boolean'/>
<klass id='846' name='java/nio/charset/CoderResult' flags='1'/>
<method id='847' holder='846' name='isOverflow' return='729' flags='1' bytes='14' iicount='39407'/>
<parse method='847'  stamp='118.965'>
<parse_done stamp='118.965'/>
</parse>
<phase name='optimize_blocks' stamp='118.965'>
<phase_done name='optimize_blocks' stamp='118.965'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.965'>
<phase_done name='rangeCheckElimination' stamp='118.965'/>
</phase>
<phase name='optimize_null_checks' stamp='118.965'>
<phase_done name='optimize_null_checks' stamp='118.965'/>
</phase>
<phase_done name='buildIR' stamp='118.965'/>
</phase>
<phase name='emit_lir' stamp='118.965'>
<phase name='lirGeneration' stamp='118.965'>
<phase_done name='lirGeneration' stamp='118.965'/>
</phase>
<phase name='linearScan' stamp='118.965'>
<phase_done name='linearScan' stamp='118.966'/>
</phase>
<phase_done name='emit_lir' stamp='118.966'/>
</phase>
<phase name='codeemit' stamp='118.966'>
<phase_done name='codeemit' stamp='118.967'/>
</phase>
<phase name='codeinstall' stamp='118.967'>
<phase_done name='codeinstall' stamp='118.985'/>
</phase>
<code_cache total_blobs='564' nmethods='58' adapters='427' free_code_cache='249231168'/>
<task_done success='1' nmsize='408' count='39407' stamp='118.985'/>
</task>
<task compile_id='32' method='sun/nio/cs/UTF_8$Encoder encodeLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='28' count='40947' iicount='40947' level='2' stamp='118.985'>
<phase name='buildIR' stamp='118.985'>
<klass id='849' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='847' name='java/nio/CharBuffer' flags='1025'/>
<klass id='848' name='java/nio/ByteBuffer' flags='1025'/>
<klass id='846' name='sun/nio/cs/UTF_8$Encoder' flags='26'/>
<method id='850' holder='846' name='encodeLoop' return='849' arguments='847 848' flags='20' bytes='28' iicount='40951'/>
<parse method='850'  stamp='118.985'>
<bc code='182' bci='1'/>
<type id='729' name='boolean'/>
<method id='852' holder='847' name='hasArray' return='729' flags='17' bytes='20' iicount='40961'/>
<call method='852' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<parse_done stamp='118.986'/>
</parse>
<bc code='182' bci='8'/>
<method id='854' holder='848' name='hasArray' return='729' flags='17' bytes='20' iicount='40987'/>
<call method='854' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='854'>
<parse_done stamp='118.986'/>
</parse>
<bc code='183' bci='17'/>
<method id='856' holder='846' name='encodeArrayLoop' return='849' arguments='847 848' flags='2' bytes='489' compile_id='75' compiler='C2' level='4' iicount='14477'/>
<call method='856' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<bc code='183' bci='24'/>
<method id='860' holder='846' name='encodeBufferLoop' return='849' arguments='847 848' flags='2' bytes='326' iicount='1'/>
<call method='860' instr='invokespecial'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='118.986'/>
</parse>
<phase name='optimize_blocks' stamp='118.986'>
<phase_done name='optimize_blocks' stamp='118.987'/>
</phase>
<phase name='rangeCheckElimination' stamp='118.987'>
<phase_done name='rangeCheckElimination' stamp='118.987'/>
</phase>
<phase name='optimize_null_checks' stamp='118.987'>
<phase_done name='optimize_null_checks' stamp='118.987'/>
</phase>
<phase_done name='buildIR' stamp='118.987'/>
</phase>
<phase name='emit_lir' stamp='118.987'>
<phase name='lirGeneration' stamp='118.987'>
<phase_done name='lirGeneration' stamp='118.987'/>
</phase>
<phase name='linearScan' stamp='118.987'>
<phase_done name='linearScan' stamp='118.990'/>
</phase>
<phase_done name='emit_lir' stamp='118.990'/>
</phase>
<phase name='codeemit' stamp='118.990'>
<phase_done name='codeemit' stamp='118.990'/>
</phase>
<phase name='codeinstall' stamp='118.990'>
<phase_done name='codeinstall' stamp='119.018'/>
</phase>
<code_cache total_blobs='567' nmethods='59' adapters='427' free_code_cache='249223552'/>
<task_done success='1' nmsize='1088' count='41899' inlined_bytes='40' stamp='119.018'/>
</task>
<task compile_id='46' method='sun/nio/cs/StreamEncoder write ([CII)V' bytes='78' count='41897' iicount='41897' level='2' stamp='119.018'>
<phase name='buildIR' stamp='119.018'>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='835 735 735' flags='1' bytes='78' iicount='41897'/>
<parse method='847'  stamp='119.018'>
<bc code='183' bci='9'/>
<method id='850' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='92' compiler='C2' level='4' iicount='34173'/>
<call method='850' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='852' name='java/io/IOException' unloaded='1'/>
<method id='854' holder='852' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='854' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.019'/>
</parse>
<bc code='182' bci='60'/>
<method id='855' holder='846' name='implWrite' return='737' arguments='835 735 735' flags='0' bytes='156' iicount='41980'/>
<call method='855' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<bc code='183' bci='44'/>
<klass id='858' name='java/lang/IndexOutOfBoundsException' unloaded='1'/>
<method id='859' holder='858' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='859' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.019'/>
</parse>
<phase name='optimize_blocks' stamp='119.019'>
<phase_done name='optimize_blocks' stamp='119.020'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.020'>
<phase_done name='rangeCheckElimination' stamp='119.020'/>
</phase>
<phase name='optimize_null_checks' stamp='119.020'>
<phase_done name='optimize_null_checks' stamp='119.020'/>
</phase>
<phase_done name='buildIR' stamp='119.020'/>
</phase>
<phase name='emit_lir' stamp='119.020'>
<phase name='lirGeneration' stamp='119.020'>
<phase_done name='lirGeneration' stamp='119.021'/>
</phase>
<phase name='linearScan' stamp='119.021'>
<phase_done name='linearScan' stamp='119.026'/>
</phase>
<phase_done name='emit_lir' stamp='119.026'/>
</phase>
<phase name='codeemit' stamp='119.026'>
<phase_done name='codeemit' stamp='119.026'/>
</phase>
<phase name='codeinstall' stamp='119.026'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='119.140'/>
</phase>
<code_cache total_blobs='568' nmethods='62' adapters='427' free_code_cache='249214656'/>
<task_done success='1' nmsize='1616' count='43432' inlined_bytes='18' stamp='119.140'/>
</task>
<task compile_id='35' method='java/nio/ByteBuffer hasArray ()Z' bytes='20' count='41899' iicount='41899' level='3' stamp='119.140'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='41899' stamp='119.140'/>
</task>
<task compile_id='34' method='java/nio/CharBuffer hasArray ()Z' bytes='20' count='41899' iicount='41899' level='3' stamp='119.140'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='41899' stamp='119.140'/>
</task>
<task compile_id='50' method='java/io/OutputStreamWriter flushBuffer ()V' bytes='8' count='45718' iicount='45718' level='2' stamp='119.140'>
<phase name='buildIR' stamp='119.140'>
<type id='737' name='void'/>
<klass id='846' name='java/io/OutputStreamWriter' flags='1'/>
<method id='847' holder='846' name='flushBuffer' return='737' flags='0' bytes='8' iicount='45722'/>
<parse method='847'  stamp='119.140'>
<bc code='182' bci='4'/>
<klass id='849' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='850' holder='849' name='flushBuffer' return='737' flags='1' bytes='42' iicount='45734'/>
<call method='850' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.140'/>
</parse>
<phase name='optimize_blocks' stamp='119.140'>
<phase_done name='optimize_blocks' stamp='119.140'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.140'>
<phase_done name='rangeCheckElimination' stamp='119.140'/>
</phase>
<phase name='optimize_null_checks' stamp='119.140'>
<phase_done name='optimize_null_checks' stamp='119.140'/>
</phase>
<phase_done name='buildIR' stamp='119.140'/>
</phase>
<phase name='emit_lir' stamp='119.140'>
<phase name='lirGeneration' stamp='119.140'>
<phase_done name='lirGeneration' stamp='119.140'/>
</phase>
<phase name='linearScan' stamp='119.140'>
<phase_done name='linearScan' stamp='119.141'/>
</phase>
<phase_done name='emit_lir' stamp='119.141'/>
</phase>
<phase name='codeemit' stamp='119.141'>
<phase_done name='codeemit' stamp='119.142'/>
</phase>
<phase name='codeinstall' stamp='119.142'>
<dependency type='leaf_type' ctxk='849'/>
<phase_done name='codeinstall' stamp='119.150'/>
</phase>
<code_cache total_blobs='569' nmethods='63' adapters='427' free_code_cache='249213376'/>
<task_done success='1' nmsize='656' count='46626' stamp='119.150'/>
</task>
<task compile_id='51' method='sun/nio/cs/StreamEncoder flushBuffer ()V' bytes='42' count='46626' iicount='46626' level='2' stamp='119.150'>
<phase name='buildIR' stamp='119.151'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='flushBuffer' return='737' flags='1' bytes='42' iicount='46630'/>
<parse method='847'  stamp='119.151'>
<bc code='183' bci='8'/>
<type id='729' name='boolean'/>
<method id='850' holder='846' name='isOpen' return='729' flags='2' bytes='5' compile_id='15' compiler='C1' level='1' iicount='31958'/>
<call method='850' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<parse_done stamp='119.151'/>
</parse>
<bc code='182' bci='15'/>
<method id='851' holder='846' name='implFlushBuffer' return='737' flags='0' bytes='15' iicount='46671'/>
<call method='851' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='854' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='854' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='854'>
<parse_done stamp='119.151'/>
</parse>
<bc code='183' bci='11'/>
<method id='855' holder='846' name='writeBytes' return='737' flags='2' bytes='132' iicount='46707'/>
<call method='855' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.151'/>
</parse>
<bc code='183' bci='27'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='858' name='java/io/IOException' unloaded='1'/>
<method id='860' holder='858' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='860' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.152'/>
</parse>
<phase name='optimize_blocks' stamp='119.152'>
<phase_done name='optimize_blocks' stamp='119.152'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.152'>
<phase_done name='rangeCheckElimination' stamp='119.152'/>
</phase>
<phase name='optimize_null_checks' stamp='119.152'>
<phase_done name='optimize_null_checks' stamp='119.152'/>
</phase>
<phase_done name='buildIR' stamp='119.152'/>
</phase>
<phase name='emit_lir' stamp='119.152'>
<phase name='lirGeneration' stamp='119.152'>
<phase_done name='lirGeneration' stamp='119.152'/>
</phase>
<phase name='linearScan' stamp='119.152'>
<phase_done name='linearScan' stamp='119.155'/>
</phase>
<phase_done name='emit_lir' stamp='119.155'/>
</phase>
<phase name='codeemit' stamp='119.155'>
<phase_done name='codeemit' stamp='119.155'/>
</phase>
<phase name='codeinstall' stamp='119.155'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='119.171'/>
</phase>
<code_cache total_blobs='570' nmethods='64' adapters='427' free_code_cache='249210496'/>
<task_done success='1' nmsize='1472' count='48160' inlined_bytes='25' stamp='119.171'/>
</task>
<task compile_id='52' method='sun/nio/cs/StreamEncoder implFlushBuffer ()V' bytes='15' count='48161' iicount='48161' level='2' stamp='119.171'>
<phase name='buildIR' stamp='119.171'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='implFlushBuffer' return='737' flags='0' bytes='15' iicount='48161'/>
<parse method='847'  stamp='119.171'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='850' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='850' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<parse_done stamp='119.171'/>
</parse>
<bc code='183' bci='11'/>
<method id='851' holder='846' name='writeBytes' return='737' flags='2' bytes='132' iicount='48170'/>
<call method='851' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.171'/>
</parse>
<phase name='optimize_blocks' stamp='119.171'>
<phase_done name='optimize_blocks' stamp='119.171'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.171'>
<phase_done name='rangeCheckElimination' stamp='119.171'/>
</phase>
<phase name='optimize_null_checks' stamp='119.171'>
<phase_done name='optimize_null_checks' stamp='119.171'/>
</phase>
<phase_done name='buildIR' stamp='119.172'/>
</phase>
<phase name='emit_lir' stamp='119.172'>
<phase name='lirGeneration' stamp='119.172'>
<phase_done name='lirGeneration' stamp='119.172'/>
</phase>
<phase name='linearScan' stamp='119.172'>
<phase_done name='linearScan' stamp='119.173'/>
</phase>
<phase_done name='emit_lir' stamp='119.173'/>
</phase>
<phase name='codeemit' stamp='119.173'>
<phase_done name='codeemit' stamp='119.173'/>
</phase>
<phase name='codeinstall' stamp='119.173'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='119.191'/>
</phase>
<code_cache total_blobs='571' nmethods='65' adapters='427' free_code_cache='249209088'/>
<task_done success='1' nmsize='688' count='48161' inlined_bytes='5' stamp='119.191'/>
</task>
<task compile_id='49' method='java/nio/Buffer remaining ()I' bytes='20' count='43432' iicount='43432' level='3' stamp='119.191'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='43432' stamp='119.191'/>
</task>
<task compile_id='48' method='sun/nio/cs/StreamEncoder implWrite ([CII)V' bytes='156' count='43432' iicount='43432' level='3' stamp='119.191'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='43432' stamp='119.191'/>
</task>
<task compile_id='61' method='java/nio/Buffer clear ()Ljava/nio/Buffer;' bytes='20' count='49696' iicount='49696' level='2' stamp='119.191'>
<phase name='buildIR' stamp='119.191'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='clear' return='822' flags='17' bytes='20' iicount='49696'/>
<parse method='846'  stamp='119.191'>
<parse_done stamp='119.191'/>
</parse>
<phase name='optimize_blocks' stamp='119.191'>
<phase_done name='optimize_blocks' stamp='119.191'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.191'>
<phase_done name='rangeCheckElimination' stamp='119.191'/>
</phase>
<phase name='optimize_null_checks' stamp='119.191'>
<phase_done name='optimize_null_checks' stamp='119.191'/>
</phase>
<phase_done name='buildIR' stamp='119.191'/>
</phase>
<phase name='emit_lir' stamp='119.191'>
<phase name='lirGeneration' stamp='119.191'>
<phase_done name='lirGeneration' stamp='119.191'/>
</phase>
<phase name='linearScan' stamp='119.191'>
<phase_done name='linearScan' stamp='119.192'/>
</phase>
<phase_done name='emit_lir' stamp='119.192'/>
</phase>
<phase name='codeemit' stamp='119.192'>
<phase_done name='codeemit' stamp='119.192'/>
</phase>
<phase name='codeinstall' stamp='119.192'>
<phase_done name='codeinstall' stamp='119.201'/>
</phase>
<code_cache total_blobs='572' nmethods='66' adapters='427' free_code_cache='249208064'/>
<task_done success='1' nmsize='408' count='49696' stamp='119.201'/>
</task>
<task compile_id='53' method='sun/nio/cs/StreamEncoder writeBytes ()V' bytes='132' count='49696' iicount='49696' level='2' stamp='119.201'>
<phase name='buildIR' stamp='119.201'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='writeBytes' return='737' flags='2' bytes='132' iicount='49696'/>
<parse method='847'  stamp='119.201'>
<bc code='182' bci='4'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='851' holder='822' name='flip' return='822' flags='17' bytes='20' iicount='49696'/>
<call method='851' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<parse_done stamp='119.201'/>
</parse>
<bc code='182' bci='12'/>
<type id='735' name='int'/>
<method id='853' holder='822' name='limit' return='735' flags='17' bytes='5' compile_id='11' compiler='C1' level='1' iicount='2388'/>
<call method='853' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='853'>
<parse_done stamp='119.202'/>
</parse>
<bc code='182' bci='20'/>
<method id='854' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='854' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='854'>
<parse_done stamp='119.202'/>
</parse>
<bc code='185' bci='75'/>
<klass id='850' name='java/nio/ByteBuffer' flags='1025'/>
<klass id='856' name='java/nio/channels/WritableByteChannel' unloaded='1'/>
<method id='857' holder='856' name='write' return='735' arguments='850' unloaded='1'/>
<call method='857' instr='invokeinterface'/>
<inline_fail reason='not inlineable'/>
<bc code='182' bci='107'/>
<klass id='838' name='[B' flags='1041'/>
<method id='859' holder='850' name='array' return='838' flags='17' bytes='35' compile_id='85' compiler='C2' level='4' iicount='33658'/>
<call method='859' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='859'>
<bc code='183' bci='11'/>
<klass id='861' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<method id='862' holder='861' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='862' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<klass id='863' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<method id='864' holder='863' name='&lt;init&gt;' return='737' unloaded='1'/>
<call method='864' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.202'/>
</parse>
<bc code='182' bci='114'/>
<method id='865' holder='850' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='44' compiler='C2' level='4' iicount='16676'/>
<call method='865' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='865'>
<bc code='183' bci='11'/>
<call method='862' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<bc code='183' bci='26'/>
<call method='864' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.203'/>
</parse>
<bc code='182' bci='120'/>
<klass id='858' name='java/io/OutputStream' flags='1025'/>
<method id='867' holder='858' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='867' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='127'/>
<method id='868' holder='822' name='clear' return='822' flags='17' bytes='20' compile_id='61' compiler='C1' level='2' iicount='49696'/>
<call method='868' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='868'>
<parse_done stamp='119.203'/>
</parse>
<parse_done stamp='119.203'/>
</parse>
<phase name='optimize_blocks' stamp='119.203'>
<phase_done name='optimize_blocks' stamp='119.204'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.204'>
<phase_done name='rangeCheckElimination' stamp='119.204'/>
</phase>
<phase name='optimize_null_checks' stamp='119.204'>
<phase_done name='optimize_null_checks' stamp='119.204'/>
</phase>
<phase_done name='buildIR' stamp='119.204'/>
</phase>
<phase name='emit_lir' stamp='119.204'>
<phase name='lirGeneration' stamp='119.204'>
<phase_done name='lirGeneration' stamp='119.205'/>
</phase>
<phase name='linearScan' stamp='119.205'>
<phase_done name='linearScan' stamp='119.211'/>
</phase>
<phase_done name='emit_lir' stamp='119.211'/>
</phase>
<phase name='codeemit' stamp='119.211'>
<phase_done name='codeemit' stamp='119.212'/>
</phase>
<phase name='codeinstall' stamp='119.212'>
<phase_done name='codeinstall' stamp='119.264'/>
</phase>
<code_cache total_blobs='575' nmethods='67' adapters='427' free_code_cache='249189888'/>
<task_done success='1' nmsize='2080' count='51232' inlined_bytes='120' stamp='119.264'/>
</task>
<task compile_id='62' method='java/lang/String indexOf (I)I' bytes='7' count='26583' iicount='26583' level='2' stamp='119.319'>
<phase name='buildIR' stamp='119.320'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='indexOf' return='735' arguments='735' flags='1' bytes='7' iicount='26587'/>
<parse method='846'  stamp='119.320'>
<bc code='182' bci='3'/>
<method id='848' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' compile_id='77' compiler='C2' level='4' iicount='5832'/>
<call method='848' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.320'/>
</parse>
<phase name='optimize_blocks' stamp='119.320'>
<phase_done name='optimize_blocks' stamp='119.320'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.320'>
<phase_done name='rangeCheckElimination' stamp='119.320'/>
</phase>
<phase name='optimize_null_checks' stamp='119.320'>
<phase_done name='optimize_null_checks' stamp='119.320'/>
</phase>
<phase_done name='buildIR' stamp='119.320'/>
</phase>
<phase name='emit_lir' stamp='119.320'>
<phase name='lirGeneration' stamp='119.320'>
<phase_done name='lirGeneration' stamp='119.320'/>
</phase>
<phase name='linearScan' stamp='119.320'>
<phase_done name='linearScan' stamp='119.322'/>
</phase>
<phase_done name='emit_lir' stamp='119.322'/>
</phase>
<phase name='codeemit' stamp='119.322'>
<phase_done name='codeemit' stamp='119.323'/>
</phase>
<phase name='codeinstall' stamp='119.323'>
<phase_done name='codeinstall' stamp='119.400'/>
</phase>
<code_cache total_blobs='577' nmethods='70' adapters='427' free_code_cache='249180416'/>
<task_done success='1' nmsize='400' count='28984' stamp='119.400'/>
</task>
<task compile_id='63' method='java/lang/String &lt;init&gt; ([CZ)V' bytes='10' count='28812' iicount='28812' level='2' stamp='119.400'>
<phase name='buildIR' stamp='119.400'>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<type id='729' name='boolean'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='&lt;init&gt;' return='737' arguments='835 729' flags='0' bytes='10' iicount='28815'/>
<parse method='846'  stamp='119.400'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='848' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='848' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='848'>
<parse_done stamp='119.400'/>
</parse>
<parse_done stamp='119.400'/>
</parse>
<phase name='optimize_blocks' stamp='119.400'>
<phase_done name='optimize_blocks' stamp='119.400'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.400'>
<phase_done name='rangeCheckElimination' stamp='119.400'/>
</phase>
<phase name='optimize_null_checks' stamp='119.400'>
<phase_done name='optimize_null_checks' stamp='119.400'/>
</phase>
<phase_done name='buildIR' stamp='119.400'/>
</phase>
<phase name='emit_lir' stamp='119.400'>
<phase name='lirGeneration' stamp='119.400'>
<phase_done name='lirGeneration' stamp='119.400'/>
</phase>
<phase name='linearScan' stamp='119.400'>
<phase_done name='linearScan' stamp='119.401'/>
</phase>
<phase_done name='emit_lir' stamp='119.401'/>
</phase>
<phase name='codeemit' stamp='119.401'>
<phase_done name='codeemit' stamp='119.401'/>
</phase>
<phase name='codeinstall' stamp='119.401'>
<phase_done name='codeinstall' stamp='119.417'/>
</phase>
<code_cache total_blobs='577' nmethods='71' adapters='427' free_code_cache='249184704'/>
<task_done success='1' nmsize='536' count='29602' inlined_bytes='1' stamp='119.417'/>
</task>
<task compile_id='64' method='java/io/PrintStream println (I)V' bytes='24' count='29580' iicount='29581' level='2' stamp='119.417'>
<phase name='buildIR' stamp='119.417'>
<type id='737' name='void'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='println' return='737' arguments='735' flags='1' bytes='24' iicount='29581'/>
<parse method='847'  stamp='119.417'>
<bc code='182' bci='6'/>
<method id='849' holder='846' name='print' return='737' arguments='735' flags='1' bytes='9' iicount='29587'/>
<call method='849' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='849'>
<bc code='184' bci='2'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='851' holder='743' name='valueOf' return='743' arguments='735' flags='9' bytes='5' iicount='29620'/>
<call method='851' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<bc code='184' bci='1'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='853' holder='830' name='toString' return='743' arguments='735' flags='9' bytes='48' iicount='29632'/>
<call method='853' instr='invokestatic'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.418'/>
</parse>
<bc code='183' bci='5'/>
<method id='855' holder='846' name='write' return='737' arguments='743' flags='2' bytes='83' iicount='29671'/>
<call method='855' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.419'/>
</parse>
<bc code='183' bci='10'/>
<method id='859' holder='846' name='newLine' return='737' flags='2' bytes='73' iicount='29736'/>
<call method='859' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.421'/>
</parse>
<phase name='optimize_blocks' stamp='119.421'>
<phase_done name='optimize_blocks' stamp='119.422'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.423'>
<phase_done name='rangeCheckElimination' stamp='119.423'/>
</phase>
<phase name='optimize_null_checks' stamp='119.423'>
<phase_done name='optimize_null_checks' stamp='119.423'/>
</phase>
<phase_done name='buildIR' stamp='119.423'/>
</phase>
<phase name='emit_lir' stamp='119.423'>
<phase name='lirGeneration' stamp='119.423'>
<phase_done name='lirGeneration' stamp='119.423'/>
</phase>
<phase name='linearScan' stamp='119.423'>
<phase_done name='linearScan' stamp='119.425'/>
</phase>
<phase_done name='emit_lir' stamp='119.425'/>
</phase>
<phase name='codeemit' stamp='119.425'>
<phase_done name='codeemit' stamp='119.426'/>
</phase>
<phase name='codeinstall' stamp='119.426'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='119.465'/>
</phase>
<code_cache total_blobs='578' nmethods='72' adapters='427' free_code_cache='249182848'/>
<task_done success='1' nmsize='880' count='30698' inlined_bytes='14' stamp='119.465'/>
</task>
<task compile_id='67' method='java/lang/Integer toString (I)Ljava/lang/String;' bytes='48' count='30698' iicount='30698' level='2' stamp='119.465'>
<phase name='buildIR' stamp='119.465'>
<klass id='743' name='java/lang/String' flags='17'/>
<type id='735' name='int'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='846' holder='830' name='toString' return='743' arguments='735' flags='9' bytes='48' iicount='30698'/>
<parse method='846'  stamp='119.465'>
<bc code='184' bci='15'/>
<method id='849' holder='830' name='stringSize' return='735' arguments='735' flags='8' bytes='21' compile_id='78' compiler='C2' level='4' iicount='7289'/>
<call method='849' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='849'>
<parse_done stamp='119.466'/>
</parse>
<bc code='184' bci='24'/>
<call method='849' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='849'>
<parse_done stamp='119.467'/>
</parse>
<bc code='184' bci='35'/>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<method id='853' holder='830' name='getChars' return='737' arguments='735 735 835' flags='8' bytes='131' compile_id='80' compiler='C2' level='4' iicount='8401'/>
<call method='853' instr='invokestatic'/>
<inline_fail reason='callee is too large'/>
<bc code='183' bci='44'/>
<type id='729' name='boolean'/>
<method id='855' holder='743' name='&lt;init&gt;' return='737' arguments='835 729' flags='0' bytes='10' compile_id='63' compiler='C1' level='2' iicount='30762'/>
<call method='855' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='855'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='857' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='857' instr='invokespecial'/>
<inline_success reason='receiver is statically known'/>
<parse method='857'>
<parse_done stamp='119.467'/>
</parse>
<parse_done stamp='119.467'/>
</parse>
<parse_done stamp='119.467'/>
</parse>
<phase name='optimize_blocks' stamp='119.467'>
<phase_done name='optimize_blocks' stamp='119.468'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.468'>
<phase_done name='rangeCheckElimination' stamp='119.469'/>
</phase>
<phase name='optimize_null_checks' stamp='119.469'>
<phase_done name='optimize_null_checks' stamp='119.469'/>
</phase>
<phase_done name='buildIR' stamp='119.469'/>
</phase>
<phase name='emit_lir' stamp='119.469'>
<phase name='lirGeneration' stamp='119.469'>
<phase_done name='lirGeneration' stamp='119.470'/>
</phase>
<phase name='linearScan' stamp='119.470'>
<phase_done name='linearScan' stamp='119.478'/>
</phase>
<phase_done name='emit_lir' stamp='119.478'/>
</phase>
<phase name='codeemit' stamp='119.478'>
<phase_done name='codeemit' stamp='119.479'/>
</phase>
<phase name='codeinstall' stamp='119.479'>
<phase_done name='codeinstall' stamp='119.554'/>
</phase>
<code_cache total_blobs='582' nmethods='74' adapters='427' free_code_cache='249155584'/>
<task_done success='1' nmsize='1968' count='33680' inlined_bytes='53' stamp='119.554'/>
</task>
<task compile_id='66' method='java/lang/String valueOf (I)Ljava/lang/String;' bytes='5' count='30320' iicount='30320' level='3' stamp='119.554'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='30320' stamp='119.554'/>
</task>
<task compile_id='65' method='java/io/PrintStream print (I)V' bytes='9' count='30320' iicount='30320' level='3' stamp='119.554'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='30320' stamp='119.554'/>
</task>
<task compile_id='71' method='java/io/PrintStream newLine ()V' bytes='73' count='33680' iicount='33680' level='2' stamp='119.554'>
<phase name='buildIR' stamp='119.555'>
<type id='737' name='void'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='newLine' return='737' flags='2' bytes='73' iicount='33680'/>
<parse method='847'  stamp='119.555'>
<bc code='183' bci='5'/>
<method id='852' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='852' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='856' name='java/io/IOException' unloaded='1'/>
<method id='858' holder='856' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='858' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.556'/>
</parse>
<bc code='182' bci='12'/>
<klass id='849' name='java/io/BufferedWriter' flags='1'/>
<method id='859' holder='849' name='newLine' return='737' flags='1' bytes='9' iicount='33680'/>
<call method='859' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_success reason='receiver is statically known'/>
<parse method='859'>
<bc code='182' bci='5'/>
<klass id='861' name='java/io/Writer' flags='1025'/>
<method id='862' holder='861' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='90' compiler='C2' level='4' iicount='33452'/>
<call method='862' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_success reason='receiver is statically known'/>
<parse method='862'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='864' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='864' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='864'>
<parse_done stamp='119.643'/>
</parse>
<bc code='182' bci='7'/>
<method id='866' holder='861' name='write' return='737' arguments='743 735 735' flags='1' bytes='79' iicount='1'/>
<call method='866' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.644'/>
</parse>
<parse_done stamp='119.644'/>
</parse>
<bc code='182' bci='19'/>
<method id='869' holder='849' name='flushBuffer' return='737' flags='0' bytes='53' compile_id='93' compiler='C2' level='4' iicount='43432'/>
<call method='869' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='26'/>
<klass id='850' name='java/io/OutputStreamWriter' flags='1'/>
<method id='871' holder='850' name='flushBuffer' return='737' flags='0' bytes='8' compile_id='97' compiler='C2' level='4' iicount='56830'/>
<call method='871' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<parse method='871'>
<bc code='182' bci='4'/>
<klass id='873' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='874' holder='873' name='flushBuffer' return='737' flags='1' bytes='42' compile_id='98' compiler='C2' level='4' iicount='56830'/>
<call method='874' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='873'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.644'/>
</parse>
<bc code='182' bci='40'/>
<klass id='854' name='java/io/OutputStream' flags='1025'/>
<method id='876' holder='854' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='876' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='184' bci='57'/>
<klass id='776' name='java/lang/Thread' flags='1'/>
<method id='877' holder='776' name='currentThread' return='776' flags='265' bytes='0' iicount='127'/>
<call method='877' instr='invokestatic'/>
<inline_success reason='intrinsic'/>
<bc code='182' bci='60'/>
<method id='878' holder='776' name='interrupt' return='737' flags='1' bytes='56' iicount='1'/>
<call method='878' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='776' x='878'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.645'/>
</parse>
<phase name='optimize_blocks' stamp='119.645'>
<phase_done name='optimize_blocks' stamp='119.645'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.645'>
<phase_done name='rangeCheckElimination' stamp='119.645'/>
</phase>
<phase name='optimize_null_checks' stamp='119.645'>
<phase_done name='optimize_null_checks' stamp='119.645'/>
</phase>
<phase_done name='buildIR' stamp='119.645'/>
</phase>
<phase name='emit_lir' stamp='119.645'>
<phase name='lirGeneration' stamp='119.645'>
<phase_done name='lirGeneration' stamp='119.646'/>
</phase>
<phase name='linearScan' stamp='119.646'>
<phase_done name='linearScan' stamp='119.650'/>
</phase>
<phase_done name='emit_lir' stamp='119.650'/>
</phase>
<phase name='codeemit' stamp='119.650'>
<phase_done name='codeemit' stamp='119.651'/>
</phase>
<phase name='codeinstall' stamp='119.651'>
<dependency type='leaf_type' ctxk='846'/>
<dependency type='leaf_type' ctxk='849'/>
<dependency type='leaf_type' ctxk='850'/>
<dependency type='leaf_type' ctxk='873'/>
<dependency type='unique_concrete_method' ctxk='776' x='878'/>
<phase_done name='codeinstall' stamp='119.808'/>
</phase>
<code_cache total_blobs='584' nmethods='78' adapters='427' free_code_cache='249154304'/>
<task_done success='1' nmsize='3200' count='36921' inlined_bytes='52' stamp='119.808'/>
</task>
<task compile_id='72' method='java/io/BufferedWriter newLine ()V' bytes='9' count='36921' iicount='36921' level='2' stamp='119.809'>
<phase name='buildIR' stamp='119.809'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='newLine' return='737' flags='1' bytes='9' iicount='36921'/>
<parse method='847'  stamp='119.809'>
<bc code='182' bci='5'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='849' name='java/io/Writer' flags='1025'/>
<method id='850' holder='849' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='90' compiler='C2' level='4' iicount='33452'/>
<call method='850' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='852' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='852' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<parse_done stamp='119.809'/>
</parse>
<bc code='182' bci='7'/>
<method id='854' holder='849' name='write' return='737' arguments='743 735 735' flags='1' bytes='79' iicount='1'/>
<call method='854' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.809'/>
</parse>
<parse_done stamp='119.809'/>
</parse>
<phase name='optimize_blocks' stamp='119.809'>
<phase_done name='optimize_blocks' stamp='119.809'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.809'>
<phase_done name='rangeCheckElimination' stamp='119.809'/>
</phase>
<phase name='optimize_null_checks' stamp='119.809'>
<phase_done name='optimize_null_checks' stamp='119.809'/>
</phase>
<phase_done name='buildIR' stamp='119.809'/>
</phase>
<phase name='emit_lir' stamp='119.809'>
<phase name='lirGeneration' stamp='119.809'>
<phase_done name='lirGeneration' stamp='119.809'/>
</phase>
<phase name='linearScan' stamp='119.809'>
<phase_done name='linearScan' stamp='119.810'/>
</phase>
<phase_done name='emit_lir' stamp='119.810'/>
</phase>
<phase name='codeemit' stamp='119.810'>
<phase_done name='codeemit' stamp='119.811'/>
</phase>
<phase name='codeinstall' stamp='119.811'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='119.834'/>
</phase>
<code_cache total_blobs='585' nmethods='79' adapters='427' free_code_cache='249152512'/>
<task_done success='1' nmsize='944' count='36922' inlined_bytes='17' stamp='119.834'/>
</task>
<task compile_id='70' method='java/io/PrintStream write (Ljava/lang/String;)V' bytes='83' count='38102' iicount='38102' level='2' stamp='119.834'>
<phase name='buildIR' stamp='119.834'>
<type id='737' name='void'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='743' flags='2' bytes='83' iicount='38102'/>
<parse method='847'  stamp='119.834'>
<bc code='183' bci='5'/>
<method id='851' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='851' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='851'>
<bc code='183' bci='13'/>
<klass id='855' name='java/io/IOException' unloaded='1'/>
<method id='857' holder='855' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='857' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='119.835'/>
</parse>
<bc code='182' bci='13'/>
<klass id='858' name='java/io/Writer' flags='1025'/>
<method id='859' holder='858' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='90' compiler='C2' level='4' iicount='33452'/>
<call method='859' instr='invokevirtual'/>
<klass id='849' name='java/io/BufferedWriter' flags='1'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_success reason='receiver is statically known'/>
<parse method='859'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='861' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='861' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='861'>
<parse_done stamp='119.835'/>
</parse>
<bc code='182' bci='7'/>
<method id='863' holder='858' name='write' return='737' arguments='743 735 735' flags='1' bytes='79' iicount='1'/>
<call method='863' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.835'/>
</parse>
<bc code='182' bci='20'/>
<method id='866' holder='849' name='flushBuffer' return='737' flags='0' bytes='53' compile_id='93' compiler='C2' level='4' iicount='43432'/>
<call method='866' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='849'/>
<inline_fail reason='callee is too large'/>
<bc code='182' bci='27'/>
<klass id='850' name='java/io/OutputStreamWriter' flags='1'/>
<method id='868' holder='850' name='flushBuffer' return='737' flags='0' bytes='8' compile_id='97' compiler='C2' level='4' iicount='56830'/>
<call method='868' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<parse method='868'>
<bc code='182' bci='4'/>
<klass id='870' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='871' holder='870' name='flushBuffer' return='737' flags='1' bytes='42' compile_id='98' compiler='C2' level='4' iicount='56830'/>
<call method='871' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='870'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.835'/>
</parse>
<bc code='182' bci='40'/>
<method id='873' holder='743' name='indexOf' return='735' arguments='735' flags='1' bytes='7' compile_id='101' compiler='C2' level='4' iicount='36440'/>
<call method='873' instr='invokevirtual'/>
<inline_success reason='receiver is statically known'/>
<parse method='873'>
<bc code='182' bci='3'/>
<method id='875' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' compile_id='77' compiler='C2' level='4' iicount='5832'/>
<call method='875' instr='invokevirtual'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.836'/>
</parse>
<bc code='182' bci='50'/>
<klass id='853' name='java/io/OutputStream' flags='1025'/>
<method id='877' holder='853' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='877' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='184' bci='67'/>
<klass id='776' name='java/lang/Thread' flags='1'/>
<method id='878' holder='776' name='currentThread' return='776' flags='265' bytes='0' iicount='127'/>
<call method='878' instr='invokestatic'/>
<inline_success reason='intrinsic'/>
<bc code='182' bci='70'/>
<method id='879' holder='776' name='interrupt' return='737' flags='1' bytes='56' iicount='1'/>
<call method='879' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='776' x='879'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='119.836'/>
</parse>
<phase name='optimize_blocks' stamp='119.836'>
<phase_done name='optimize_blocks' stamp='119.836'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.837'>
<phase_done name='rangeCheckElimination' stamp='119.837'/>
</phase>
<phase name='optimize_null_checks' stamp='119.837'>
<phase_done name='optimize_null_checks' stamp='119.837'/>
</phase>
<phase_done name='buildIR' stamp='119.837'/>
</phase>
<phase name='emit_lir' stamp='119.837'>
<phase name='lirGeneration' stamp='119.837'>
<phase_done name='lirGeneration' stamp='119.837'/>
</phase>
<phase name='linearScan' stamp='119.837'>
<phase_done name='linearScan' stamp='119.844'/>
</phase>
<phase_done name='emit_lir' stamp='119.844'/>
</phase>
<phase name='codeemit' stamp='119.844'>
<phase_done name='codeemit' stamp='119.853'/>
</phase>
<phase name='codeinstall' stamp='119.853'>
<dependency type='leaf_type' ctxk='846'/>
<dependency type='leaf_type' ctxk='849'/>
<dependency type='leaf_type' ctxk='850'/>
<dependency type='leaf_type' ctxk='870'/>
<dependency type='unique_concrete_method' ctxk='776' x='879'/>
<phase_done name='codeinstall' stamp='119.957'/>
</phase>
<code_cache total_blobs='588' nmethods='80' adapters='427' free_code_cache='249133760'/>
<task_done success='1' nmsize='3120' count='44886' inlined_bytes='50' stamp='119.957'/>
</task>
<task compile_id='74' method='StackTopCache add (II)I' bytes='9' count='23027' iicount='23027' level='2' stamp='119.985'>
<phase name='buildIR' stamp='119.985'>
<type id='735' name='int'/>
<klass id='846' name='StackTopCache' flags='1'/>
<method id='847' holder='846' name='add' return='735' arguments='735 735' flags='9' bytes='9' iicount='23030'/>
<parse method='847'  stamp='119.985'>
<parse_done stamp='119.986'/>
</parse>
<phase name='optimize_blocks' stamp='119.986'>
<phase_done name='optimize_blocks' stamp='119.986'/>
</phase>
<phase name='rangeCheckElimination' stamp='119.986'>
<phase_done name='rangeCheckElimination' stamp='119.986'/>
</phase>
<phase name='optimize_null_checks' stamp='119.986'>
<phase_done name='optimize_null_checks' stamp='119.986'/>
</phase>
<phase_done name='buildIR' stamp='119.986'/>
</phase>
<phase name='emit_lir' stamp='119.986'>
<phase name='lirGeneration' stamp='119.986'>
<phase_done name='lirGeneration' stamp='119.986'/>
</phase>
<phase name='linearScan' stamp='119.986'>
<phase_done name='linearScan' stamp='119.989'/>
</phase>
<phase_done name='emit_lir' stamp='119.989'/>
</phase>
<phase name='codeemit' stamp='119.989'>
<phase_done name='codeemit' stamp='119.990'/>
</phase>
<phase name='codeinstall' stamp='119.990'>
<phase_done name='codeinstall' stamp='120.011'/>
</phase>
<code_cache total_blobs='588' nmethods='82' adapters='427' free_code_cache='249142016'/>
<task_done success='1' nmsize='344' count='24003' stamp='120.011'/>
</task>
<task compile_id='76' method='StackTopCache add2 (II)I' bytes='9' count='24002' iicount='24002' level='2' stamp='120.011'>
<phase name='buildIR' stamp='120.011'>
<type id='735' name='int'/>
<klass id='846' name='StackTopCache' flags='1'/>
<method id='847' holder='846' name='add2' return='735' arguments='735 735' flags='9' bytes='9' iicount='24002'/>
<parse method='847'  stamp='120.011'>
<parse_done stamp='120.011'/>
</parse>
<phase name='optimize_blocks' stamp='120.011'>
<phase_done name='optimize_blocks' stamp='120.011'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.011'>
<phase_done name='rangeCheckElimination' stamp='120.011'/>
</phase>
<phase name='optimize_null_checks' stamp='120.011'>
<phase_done name='optimize_null_checks' stamp='120.011'/>
</phase>
<phase_done name='buildIR' stamp='120.011'/>
</phase>
<phase name='emit_lir' stamp='120.011'>
<phase name='lirGeneration' stamp='120.011'>
<phase_done name='lirGeneration' stamp='120.011'/>
</phase>
<phase name='linearScan' stamp='120.011'>
<phase_done name='linearScan' stamp='120.012'/>
</phase>
<phase_done name='emit_lir' stamp='120.012'/>
</phase>
<phase name='codeemit' stamp='120.012'>
<phase_done name='codeemit' stamp='120.012'/>
</phase>
<phase name='codeinstall' stamp='120.012'>
<phase_done name='codeinstall' stamp='120.037'/>
</phase>
<code_cache total_blobs='589' nmethods='83' adapters='427' free_code_cache='249140992'/>
<task_done success='1' nmsize='344' count='24924' stamp='120.037'/>
</task>
<task compile_id='55' method='java/io/PrintStream write ([BII)V' bytes='69' count='56830' iicount='56830' level='2' stamp='120.037'>
<phase name='buildIR' stamp='120.038'>
<type id='737' name='void'/>
<klass id='838' name='[B' flags='1041'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='838 735 735' flags='1' bytes='69' iicount='56830'/>
<parse method='847'  stamp='120.038'>
<bc code='183' bci='6'/>
<method id='850' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='850' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='183' bci='13'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='854' name='java/io/IOException' unloaded='1'/>
<method id='856' holder='854' name='&lt;init&gt;' return='737' arguments='743' unloaded='1'/>
<call method='856' instr='invokespecial'/>
<inline_fail reason='not inlineable'/>
<parse_done stamp='120.038'/>
</parse>
<bc code='182' bci='16'/>
<klass id='852' name='java/io/OutputStream' flags='1025'/>
<method id='857' holder='852' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='857' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='182' bci='30'/>
<method id='858' holder='852' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='858' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='184' bci='52'/>
<klass id='776' name='java/lang/Thread' flags='1'/>
<method id='859' holder='776' name='currentThread' return='776' flags='265' bytes='0' iicount='127'/>
<call method='859' instr='invokestatic'/>
<inline_success reason='intrinsic'/>
<bc code='182' bci='55'/>
<method id='860' holder='776' name='interrupt' return='737' flags='1' bytes='56' iicount='1'/>
<call method='860' instr='invokevirtual'/>
<dependency type='unique_concrete_method' ctxk='776' x='860'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='120.039'/>
</parse>
<phase name='optimize_blocks' stamp='120.039'>
<phase_done name='optimize_blocks' stamp='120.039'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.039'>
<phase_done name='rangeCheckElimination' stamp='120.039'/>
</phase>
<phase name='optimize_null_checks' stamp='120.039'>
<phase_done name='optimize_null_checks' stamp='120.039'/>
</phase>
<phase_done name='buildIR' stamp='120.040'/>
</phase>
<phase name='emit_lir' stamp='120.040'>
<phase name='lirGeneration' stamp='120.040'>
<phase_done name='lirGeneration' stamp='120.040'/>
</phase>
<phase name='linearScan' stamp='120.040'>
<phase_done name='linearScan' stamp='120.044'/>
</phase>
<phase_done name='emit_lir' stamp='120.044'/>
</phase>
<phase name='codeemit' stamp='120.044'>
<phase_done name='codeemit' stamp='120.044'/>
</phase>
<phase name='codeinstall' stamp='120.044'>
<dependency type='leaf_type' ctxk='846'/>
<dependency type='unique_concrete_method' ctxk='776' x='860'/>
<phase_done name='codeinstall' stamp='120.081'/>
</phase>
<code_cache total_blobs='590' nmethods='84' adapters='427' free_code_cache='249137856'/>
<task_done success='1' nmsize='1568' count='56830' inlined_bytes='18' stamp='120.081'/>
</task>
<task compile_id='107' method='StackTopCache add (II)I' bytes='9' count='25539' iicount='25539' level='1' stamp='120.081'>
<phase name='buildIR' stamp='120.081'>
<type id='735' name='int'/>
<klass id='846' name='StackTopCache' flags='1'/>
<method id='847' holder='846' name='add' return='735' arguments='735 735' flags='9' bytes='9' compile_id='74' compiler='C1' level='2' iicount='25541'/>
<parse method='847'  stamp='120.081'>
<parse_done stamp='120.081'/>
</parse>
<phase name='optimize_blocks' stamp='120.081'>
<phase_done name='optimize_blocks' stamp='120.081'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.081'>
<phase_done name='rangeCheckElimination' stamp='120.081'/>
</phase>
<phase name='optimize_null_checks' stamp='120.081'>
<phase_done name='optimize_null_checks' stamp='120.081'/>
</phase>
<phase_done name='buildIR' stamp='120.081'/>
</phase>
<phase name='emit_lir' stamp='120.081'>
<phase name='lirGeneration' stamp='120.081'>
<phase_done name='lirGeneration' stamp='120.081'/>
</phase>
<phase name='linearScan' stamp='120.081'>
<phase_done name='linearScan' stamp='120.082'/>
</phase>
<phase_done name='emit_lir' stamp='120.082'/>
</phase>
<phase name='codeemit' stamp='120.082'>
<phase_done name='codeemit' stamp='120.082'/>
</phase>
<phase name='codeinstall' stamp='120.082'>
<phase_done name='codeinstall' stamp='120.094'/>
</phase>
<code_cache total_blobs='591' nmethods='85' adapters='427' free_code_cache='249137088'/>
<task_done success='1' nmsize='280' count='25870' stamp='120.094'/>
</task>
<task compile_id='56' method='java/io/BufferedOutputStream write ([BII)V' bytes='67' count='56830' iicount='56830' level='2' stamp='120.094'>
<phase name='buildIR' stamp='120.094'>
<type id='737' name='void'/>
<klass id='838' name='[B' flags='1041'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/BufferedOutputStream' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='838 735 735' flags='33' bytes='67' iicount='56830'/>
<parse method='847'  stamp='120.094'>
<bc code='183' bci='10'/>
<method id='849' holder='846' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23668'/>
<call method='849' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='849'>
<bc code='182' bci='20'/>
<klass id='852' name='java/io/OutputStream' flags='1025'/>
<method id='854' holder='852' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='854' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='120.095'/>
</parse>
<bc code='182' bci='20'/>
<call method='854' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<bc code='183' bci='39'/>
<call method='849' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='849'>
<bc code='182' bci='20'/>
<call method='854' instr='invokevirtual'/>
<inline_fail reason='no static binding'/>
<parse_done stamp='120.095'/>
</parse>
<bc code='184' bci='53'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='855' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='855' instr='invokestatic'/>
<inline_success reason='intrinsic'/>
<parse_done stamp='120.096'/>
</parse>
<phase name='optimize_blocks' stamp='120.096'>
<phase_done name='optimize_blocks' stamp='120.096'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.096'>
<phase_done name='rangeCheckElimination' stamp='120.096'/>
</phase>
<phase name='optimize_null_checks' stamp='120.096'>
<phase_done name='optimize_null_checks' stamp='120.096'/>
</phase>
<phase_done name='buildIR' stamp='120.096'/>
</phase>
<phase name='emit_lir' stamp='120.096'>
<phase name='lirGeneration' stamp='120.096'>
<phase_done name='lirGeneration' stamp='120.096'/>
</phase>
<phase name='linearScan' stamp='120.096'>
<phase_done name='linearScan' stamp='120.101'/>
</phase>
<phase_done name='emit_lir' stamp='120.101'/>
</phase>
<phase name='codeemit' stamp='120.101'>
<phase_done name='codeemit' stamp='120.102'/>
</phase>
<phase name='codeinstall' stamp='120.102'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='120.150'/>
</phase>
<code_cache total_blobs='592' nmethods='86' adapters='427' free_code_cache='249133312'/>
<task_done success='1' nmsize='2272' count='56830' inlined_bytes='58' stamp='120.150'/>
</task>
<task compile_id='108' method='StackTopCache add2 (II)I' bytes='9' count='26489' iicount='26489' level='1' stamp='120.151'>
<phase name='buildIR' stamp='120.151'>
<type id='735' name='int'/>
<klass id='846' name='StackTopCache' flags='1'/>
<method id='847' holder='846' name='add2' return='735' arguments='735 735' flags='9' bytes='9' compile_id='76' compiler='C1' level='2' iicount='26506'/>
<parse method='847'  stamp='120.151'>
<parse_done stamp='120.151'/>
</parse>
<phase name='optimize_blocks' stamp='120.151'>
<phase_done name='optimize_blocks' stamp='120.151'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.152'>
<phase_done name='rangeCheckElimination' stamp='120.152'/>
</phase>
<phase name='optimize_null_checks' stamp='120.152'>
<phase_done name='optimize_null_checks' stamp='120.152'/>
</phase>
<phase_done name='buildIR' stamp='120.152'/>
</phase>
<phase name='emit_lir' stamp='120.152'>
<phase name='lirGeneration' stamp='120.152'>
<phase_done name='lirGeneration' stamp='120.152'/>
</phase>
<phase name='linearScan' stamp='120.152'>
<phase_done name='linearScan' stamp='120.153'/>
</phase>
<phase_done name='emit_lir' stamp='120.153'/>
</phase>
<phase name='codeemit' stamp='120.153'>
<phase_done name='codeemit' stamp='120.154'/>
</phase>
<phase name='codeinstall' stamp='120.154'>
<phase_done name='codeinstall' stamp='120.187'/>
</phase>
<code_cache total_blobs='596' nmethods='88' adapters='427' free_code_cache='249109696'/>
<task_done success='1' nmsize='280' count='27470' stamp='120.187'/>
</task>
<task compile_id='54' method='java/nio/Buffer flip ()Ljava/nio/Buffer;' bytes='20' count='51233' iicount='51233' level='2' stamp='120.315'>
<phase name='buildIR' stamp='120.315'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='flip' return='822' flags='17' bytes='20' iicount='51233'/>
<parse method='846'  stamp='120.315'>
<parse_done stamp='120.316'/>
</parse>
<phase name='optimize_blocks' stamp='120.316'>
<phase_done name='optimize_blocks' stamp='120.316'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.316'>
<phase_done name='rangeCheckElimination' stamp='120.316'/>
</phase>
<phase name='optimize_null_checks' stamp='120.316'>
<phase_done name='optimize_null_checks' stamp='120.316'/>
</phase>
<phase_done name='buildIR' stamp='120.316'/>
</phase>
<phase name='emit_lir' stamp='120.316'>
<phase name='lirGeneration' stamp='120.316'>
<phase_done name='lirGeneration' stamp='120.316'/>
</phase>
<phase name='linearScan' stamp='120.316'>
<phase_done name='linearScan' stamp='120.316'/>
</phase>
<phase_done name='emit_lir' stamp='120.316'/>
</phase>
<phase name='codeemit' stamp='120.316'>
<phase_done name='codeemit' stamp='120.317'/>
</phase>
<phase name='codeinstall' stamp='120.317'>
<phase_done name='codeinstall' stamp='120.327'/>
</phase>
<code_cache total_blobs='596' nmethods='89' adapters='427' free_code_cache='249118208'/>
<task_done success='1' nmsize='408' count='51233' stamp='120.327'/>
</task>
<task compile_id='27' method='java/nio/HeapCharBuffer &lt;init&gt; ([CII)V' bytes='14' count='28849' iicount='28849' level='2' stamp='120.331'>
<phase name='buildIR' stamp='120.331'>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<klass id='846' name='java/nio/HeapCharBuffer' flags='0'/>
<method id='847' holder='846' name='&lt;init&gt;' return='737' arguments='835 735 735' flags='0' bytes='14' iicount='28849'/>
<parse method='847'  stamp='120.331'>
<bc code='183' bci='10'/>
<klass id='849' name='java/nio/CharBuffer' flags='1025'/>
<method id='850' holder='849' name='&lt;init&gt;' return='737' arguments='735 735 735 735 835 735' flags='0' bytes='22' iicount='28849'/>
<call method='850' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_success reason='receiver is statically known'/>
<parse method='850'>
<bc code='183' bci='6'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='852' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' compile_id='87' compiler='C2' level='4' iicount='29723'/>
<call method='852' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='846'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='120.331'/>
</parse>
<parse_done stamp='120.331'/>
</parse>
<phase name='optimize_blocks' stamp='120.331'>
<phase_done name='optimize_blocks' stamp='120.331'/>
</phase>
<phase name='rangeCheckElimination' stamp='120.331'>
<phase_done name='rangeCheckElimination' stamp='120.331'/>
</phase>
<phase name='optimize_null_checks' stamp='120.331'>
<phase_done name='optimize_null_checks' stamp='120.331'/>
</phase>
<phase_done name='buildIR' stamp='120.331'/>
</phase>
<phase name='emit_lir' stamp='120.331'>
<phase name='lirGeneration' stamp='120.331'>
<phase_done name='lirGeneration' stamp='120.331'/>
</phase>
<phase name='linearScan' stamp='120.331'>
<phase_done name='linearScan' stamp='120.338'/>
</phase>
<phase_done name='emit_lir' stamp='120.338'/>
</phase>
<phase name='codeemit' stamp='120.338'>
<phase_done name='codeemit' stamp='120.339'/>
</phase>
<phase name='codeinstall' stamp='120.339'>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='codeinstall' stamp='120.595'/>
</phase>
<code_cache total_blobs='597' nmethods='91' adapters='427' free_code_cache='249106496'/>
<task_done success='1' nmsize='752' count='28849' inlined_bytes='22' stamp='120.595'/>
</task>
<task compile_id='109' compile_kind='osr' method='StackTopCache main ([Ljava/lang/String;)V' bytes='37' count='1' backedge_count='60418' iicount='1' osr_bci='2' level='3' stamp='121.111'>
<phase name='buildIR' stamp='121.111'>
<type id='737' name='void'/>
<klass id='847' name='[Ljava/lang/String;' flags='1041'/>
<klass id='846' name='StackTopCache' flags='1'/>
<method id='848' holder='846' name='main' return='737' arguments='847' flags='9' bytes='37' iicount='1'/>
<parse method='848'  stamp='121.111'>
<bc code='184' bci='13'/>
<type id='735' name='int'/>
<method id='852' holder='846' name='add' return='735' arguments='735 735' flags='9' bytes='9' compile_id='107' compiler='C1' level='1' iicount='25870'/>
<call method='852' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<parse_done stamp='121.114'/>
</parse>
<bc code='182' bci='16'/>
<klass id='850' name='java/io/PrintStream' flags='1'/>
<method id='854' holder='850' name='println' return='737' arguments='735' flags='1' bytes='24' compile_id='103' compiler='C2' level='4' iicount='74240'/>
<call method='854' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='854'>
<bc code='182' bci='6'/>
<method id='856' holder='850' name='print' return='737' arguments='735' flags='1' bytes='9' iicount='30321'/>
<call method='856' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='856'>
<bc code='184' bci='2'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='858' holder='743' name='valueOf' return='743' arguments='735' flags='9' bytes='5' iicount='30321'/>
<call method='858' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<bc code='184' bci='1'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='860' holder='830' name='toString' return='743' arguments='735' flags='9' bytes='48' compile_id='104' compiler='C2' level='4' iicount='46053'/>
<call method='860' instr='invokestatic'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.116'/>
</parse>
<bc code='183' bci='5'/>
<method id='862' holder='850' name='write' return='737' arguments='743' flags='2' bytes='83' compile_id='106' compiler='C2' level='4' iicount='74240'/>
<call method='862' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.117'/>
</parse>
<bc code='183' bci='10'/>
<method id='866' holder='850' name='newLine' return='737' flags='2' bytes='73' compile_id='105' compiler='C2' level='4' iicount='65650'/>
<call method='866' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.119'/>
</parse>
<bc code='184' bci='24'/>
<method id='869' holder='846' name='add2' return='735' arguments='735 735' flags='9' bytes='9' compile_id='108' compiler='C1' level='1' iicount='27470'/>
<call method='869' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='869'>
<parse_done stamp='121.119'/>
</parse>
<bc code='182' bci='27'/>
<call method='854' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='854'>
<bc code='182' bci='6'/>
<call method='856' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='856'>
<bc code='184' bci='2'/>
<call method='858' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<bc code='184' bci='1'/>
<call method='860' instr='invokestatic'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.121'/>
</parse>
<bc code='183' bci='5'/>
<call method='862' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.121'/>
</parse>
<bc code='183' bci='10'/>
<call method='866' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.123'/>
</parse>
<parse_done stamp='121.124'/>
</parse>
<phase name='optimize_blocks' stamp='121.124'>
<phase_done name='optimize_blocks' stamp='121.124'/>
</phase>
<phase name='optimize_null_checks' stamp='121.125'>
<phase_done name='optimize_null_checks' stamp='121.125'/>
</phase>
<phase_done name='buildIR' stamp='121.125'/>
</phase>
<phase name='emit_lir' stamp='121.125'>
<phase name='lirGeneration' stamp='121.126'>
<phase_done name='lirGeneration' stamp='121.127'/>
</phase>
<phase name='linearScan' stamp='121.127'>
<phase_done name='linearScan' stamp='121.178'/>
</phase>
<phase_done name='emit_lir' stamp='121.178'/>
</phase>
<phase name='codeemit' stamp='121.178'>
<phase_done name='codeemit' stamp='121.181'/>
</phase>
<phase name='codeinstall' stamp='121.181'>
<dependency type='leaf_type' ctxk='850'/>
<phase_done name='codeinstall' stamp='121.236'/>
</phase>
<code_cache total_blobs='600' nmethods='94' adapters='427' free_code_cache='249094144'/>
<task_done success='1' nmsize='3040' count='1' backedge_count='65072' inlined_bytes='94' stamp='121.236'/>
</task>
<task compile_id='110' method='StackTopCache main ([Ljava/lang/String;)V' bytes='37' count='1' backedge_count='65565' iicount='1' level='3' stamp='121.248'>
<phase name='buildIR' stamp='121.248'>
<type id='737' name='void'/>
<klass id='847' name='[Ljava/lang/String;' flags='1041'/>
<klass id='846' name='StackTopCache' flags='1'/>
<method id='848' holder='846' name='main' return='737' arguments='847' flags='9' bytes='37' iicount='1'/>
<parse method='848'  stamp='121.248'>
<bc code='184' bci='13'/>
<type id='735' name='int'/>
<method id='852' holder='846' name='add' return='735' arguments='735 735' flags='9' bytes='9' compile_id='107' compiler='C1' level='1' iicount='25890'/>
<call method='852' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='852'>
<parse_done stamp='121.249'/>
</parse>
<bc code='182' bci='16'/>
<klass id='850' name='java/io/PrintStream' flags='1'/>
<method id='854' holder='850' name='println' return='737' arguments='735' flags='1' bytes='24' compile_id='103' compiler='C2' level='4' iicount='74291'/>
<call method='854' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='854'>
<bc code='182' bci='6'/>
<method id='856' holder='850' name='print' return='737' arguments='735' flags='1' bytes='9' iicount='30394'/>
<call method='856' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='856'>
<bc code='184' bci='2'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='858' holder='743' name='valueOf' return='743' arguments='735' flags='9' bytes='5' iicount='30408'/>
<call method='858' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<bc code='184' bci='1'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='860' holder='830' name='toString' return='743' arguments='735' flags='9' bytes='48' compile_id='104' compiler='C2' level='4' iicount='46053'/>
<call method='860' instr='invokestatic'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.249'/>
</parse>
<bc code='183' bci='5'/>
<method id='862' holder='850' name='write' return='737' arguments='743' flags='2' bytes='83' compile_id='106' compiler='C2' level='4' iicount='74240'/>
<call method='862' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.249'/>
</parse>
<bc code='183' bci='10'/>
<method id='866' holder='850' name='newLine' return='737' flags='2' bytes='73' compile_id='105' compiler='C2' level='4' iicount='65650'/>
<call method='866' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.250'/>
</parse>
<bc code='184' bci='24'/>
<method id='869' holder='846' name='add2' return='735' arguments='735 735' flags='9' bytes='9' compile_id='108' compiler='C1' level='1' iicount='27548'/>
<call method='869' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='869'>
<parse_done stamp='121.250'/>
</parse>
<bc code='182' bci='27'/>
<call method='854' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='854'>
<bc code='182' bci='6'/>
<call method='856' instr='invokevirtual'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_success reason='receiver is statically known'/>
<dependency type='leaf_type' ctxk='850'/>
<parse method='856'>
<bc code='184' bci='2'/>
<call method='858' instr='invokestatic'/>
<inline_success reason='receiver is statically known'/>
<parse method='858'>
<bc code='184' bci='1'/>
<call method='860' instr='invokestatic'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.250'/>
</parse>
<bc code='183' bci='5'/>
<call method='862' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.252'/>
</parse>
<bc code='183' bci='10'/>
<call method='866' instr='invokespecial'/>
<dependency type='leaf_type' ctxk='850'/>
<inline_fail reason='callee is too large'/>
<parse_done stamp='121.252'/>
</parse>
<parse_done stamp='121.252'/>
</parse>
<phase name='optimize_blocks' stamp='121.252'>
<phase_done name='optimize_blocks' stamp='121.252'/>
</phase>
<phase name='rangeCheckElimination' stamp='121.252'>
<phase_done name='rangeCheckElimination' stamp='121.252'/>
</phase>
<phase name='optimize_null_checks' stamp='121.252'>
<phase_done name='optimize_null_checks' stamp='121.252'/>
</phase>
<phase_done name='buildIR' stamp='121.252'/>
</phase>
<phase name='emit_lir' stamp='121.252'>
<phase name='lirGeneration' stamp='121.252'>
<phase_done name='lirGeneration' stamp='121.253'/>
</phase>
<phase name='linearScan' stamp='121.253'>
<phase_done name='linearScan' stamp='121.280'/>
</phase>
<phase_done name='emit_lir' stamp='121.280'/>
</phase>
<phase name='codeemit' stamp='121.280'>
<phase_done name='codeemit' stamp='121.282'/>
</phase>
<phase name='codeinstall' stamp='121.282'>
<dependency type='leaf_type' ctxk='850'/>
<phase_done name='codeinstall' stamp='121.336'/>
</phase>
<code_cache total_blobs='601' nmethods='95' adapters='427' free_code_cache='249088896'/>
<task_done success='1' nmsize='2976' count='1' backedge_count='68980' inlined_bytes='94' stamp='121.336'/>
</task>
</compilation_log>
<compilation_log thread='140736955627264'>
<start_compile_thread name='C2 CompilerThread1' thread='140736955627264' process='55833' stamp='116.985'/>
<task compile_id='59' method='java/nio/CharBuffer arrayOffset ()I' bytes='35' count='5632' iicount='5632' stamp='117.714'>
<phase name='parse' nodes='3' live='3' stamp='117.715'>
<klass id='846' name='java/nio/CharBuffer' flags='1025'/>
<klass id='849' name='java/nio/HeapCharBuffer' flags='0'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='849'/>
<type id='735' name='int'/>
<method id='847' holder='846' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='14' compiler='C1' level='3' iicount='5632'/>
<klass id='850' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='847' bci='22' reason='unloaded' action='reinterpret' index='32' klass='850'/>
<klass id='851' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='847' bci='7' reason='unloaded' action='reinterpret' index='42' klass='851'/>
<parse method='847' uses='5632' stamp='117.715'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='5631' not_taken='0' cnt='5631' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='5631' not_taken='0' cnt='5631' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='61' live='58' memory='30848' stamp='117.715'/>
</parse>
<phase_done name='parse' nodes='62' live='39' stamp='117.715'/>
</phase>
<phase name='optimizer' nodes='62' live='39' stamp='117.715'>
<phase name='ccp' nodes='62' live='39' stamp='117.715'>
<phase_done name='ccp' nodes='62' live='39' stamp='117.715'/>
</phase>
<phase name='idealLoop' nodes='62' live='39' stamp='117.715'>
<phase_done name='idealLoop' nodes='62' live='39' stamp='117.715'/>
</phase>
<phase_done name='optimizer' nodes='65' live='39' stamp='117.716'/>
</phase>
<phase name='matcher' nodes='65' live='39' stamp='117.716'>
<phase_done name='matcher' nodes='33' live='33' stamp='117.716'/>
</phase>
<phase name='regalloc' nodes='41' live='41' stamp='117.716'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='46' live='44' stamp='117.716'/>
</phase>
<phase name='output' nodes='46' live='44' stamp='117.716'>
<phase_done name='output' nodes='57' live='53' stamp='117.717'/>
</phase>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='849'/>
<code_cache total_blobs='525' nmethods='17' adapters='427' free_code_cache='249329024'/>
<task_done success='1' nmsize='152' count='5769' stamp='117.739'/>
</task>
<task compile_id='75' method='sun/nio/cs/UTF_8$Encoder encodeArrayLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='489' count='9729' backedge_count='12278' iicount='9729' stamp='118.086'>
<phase name='parse' nodes='3' live='3' stamp='118.088'>
<klass id='847' name='java/nio/CharBuffer' flags='1025'/>
<klass id='852' name='java/nio/HeapCharBuffer' flags='0'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='852'/>
<klass id='849' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='848' name='java/nio/ByteBuffer' flags='1025'/>
<klass id='846' name='sun/nio/cs/UTF_8$Encoder' flags='26'/>
<method id='850' holder='846' name='encodeArrayLoop' return='849' arguments='847 848' flags='2' bytes='489' compile_id='36' compiler='C1' level='3' iicount='9730'/>
<klass id='867' name='sun/nio/cs/Surrogate$Parser' unloaded='1'/>
<uncommon_trap method='850' bci='264' reason='unloaded' action='reinterpret' index='22' klass='867'/>
<uncommon_trap method='850' bci='243' reason='unloaded' action='reinterpret' index='22' klass='867'/>
<parse method='850' uses='9730' stamp='118.089'>
<bc code='182' bci='1'/>
<klass id='835' name='[C' flags='1041'/>
<method id='854' holder='847' name='array' return='835' flags='17' bytes='35' iicount='9821'/>
<call method='854' count='9219' prof_factor='1' inline='1'/>
<klass id='869' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='854' bci='22' reason='unloaded' action='reinterpret' index='32' klass='869'/>
<klass id='870' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='854' bci='7' reason='unloaded' action='reinterpret' index='42' klass='870'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='852'/>
<parse method='854' uses='9219' stamp='118.090'>
<uncommon_trap bci='1' reason='null_check' action='maybe_recompile'/>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='9819' not_taken='0' cnt='9819' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='9819' not_taken='0' cnt='9819' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='88' live='84' memory='54392' stamp='118.091'/>
</parse>
<bc code='182' bci='6'/>
<type id='735' name='int'/>
<method id='855' holder='847' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='59' compiler='C2' level='4' iicount='6981'/>
<call method='855' count='9219' prof_factor='1' inline='1'/>
<uncommon_trap method='855' bci='22' reason='unloaded' action='reinterpret' index='32' klass='869'/>
<uncommon_trap method='855' bci='7' reason='unloaded' action='reinterpret' index='42' klass='870'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='852'/>
<parse method='855' uses='9219' stamp='118.091'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='6979' not_taken='0' cnt='6979' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='6979' not_taken='0' cnt='6979' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='133' live='126' memory='65560' stamp='118.092'/>
</parse>
<bc code='182' bci='10'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='856' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='856' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='856' uses='9219' stamp='118.092'>
<parse_done nodes='147' live='139' memory='68896' stamp='118.092'/>
</parse>
<bc code='182' bci='17'/>
<call method='855' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='852'/>
<parse method='855' uses='9219' stamp='118.093'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='6979' not_taken='0' cnt='6979' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='6979' not_taken='0' cnt='6979' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='192' live='181' memory='77288' stamp='118.093'/>
</parse>
<bc code='182' bci='21'/>
<method id='857' holder='822' name='limit' return='735' flags='17' bytes='5' compile_id='11' compiler='C1' level='1' iicount='2388'/>
<call method='857' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='857' uses='9219' stamp='118.093'>
<parse_done nodes='206' live='194' memory='79872' stamp='118.094'/>
</parse>
<bc code='182' bci='28'/>
<klass id='838' name='[B' flags='1041'/>
<method id='858' holder='848' name='array' return='838' flags='17' bytes='35' iicount='19639'/>
<call method='858' count='9219' prof_factor='1' inline='1'/>
<uncommon_trap method='858' bci='22' reason='unloaded' action='reinterpret' index='26' klass='869'/>
<uncommon_trap method='858' bci='7' reason='unloaded' action='reinterpret' index='33' klass='870'/>
<inline_success reason='inline (hot)'/>
<parse method='858' uses='9219' stamp='118.115'>
<uncommon_trap bci='28' reason='null_check' action='maybe_recompile'/>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='19759' not_taken='0' cnt='19759' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='19759' not_taken='0' cnt='19759' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='265' live='249' memory='98920' stamp='118.115'/>
</parse>
<bc code='182' bci='34'/>
<method id='859' holder='848' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='44' compiler='C2' level='4' iicount='7364'/>
<call method='859' count='9219' prof_factor='1' inline='1'/>
<uncommon_trap method='859' bci='22' reason='unloaded' action='reinterpret' index='26' klass='869'/>
<uncommon_trap method='859' bci='7' reason='unloaded' action='reinterpret' index='33' klass='870'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='9219' stamp='118.116'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='7491' not_taken='0' cnt='7491' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='7491' not_taken='0' cnt='7491' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='309' live='290' memory='108200' stamp='118.116'/>
</parse>
<bc code='182' bci='38'/>
<call method='856' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='856' uses='9219' stamp='118.116'>
<parse_done nodes='322' live='302' memory='111608' stamp='118.116'/>
</parse>
<bc code='182' bci='45'/>
<call method='859' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='9219' stamp='118.116'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='7491' not_taken='0' cnt='7491' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='7491' not_taken='0' cnt='7491' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='367' live='344' memory='119600' stamp='118.117'/>
</parse>
<bc code='182' bci='49'/>
<call method='857' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='857' uses='9219' stamp='118.117'>
<parse_done nodes='380' live='356' memory='122304' stamp='118.117'/>
</parse>
<bc code='184' bci='67'/>
<klass id='860' name='java/lang/Math' flags='17'/>
<method id='861' holder='860' name='min' return='735' arguments='735 735' flags='9' bytes='11' compile_id='73' compiler='C2' level='4' iicount='6329'/>
<call method='861' count='9219' prof_factor='1' inline='1'/>
<intrinsic id='_min' nodes='3'/>
<bc code='162' bci='77'/>
<branch target_bci='109' taken='9219' not_taken='11524' cnt='20743' prob='0.444439'/>
<uncommon_trap bci='80' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='80' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='83'/>
<uncommon_trap bci='83' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='162' bci='87'/>
<branch target_bci='109' taken='0' not_taken='11524' cnt='11524' prob='never'/>
<uncommon_trap bci='87' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='52' bci='103'/>
<uncommon_trap bci='103' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='84' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='162' bci='77'/>
<branch target_bci='109' taken='9219' not_taken='11524' cnt='11524' prob='0.444439'/>
<bc code='162' bci='113'/>
<branch target_bci='476' taken='9219' not_taken='0' cnt='9219' prob='always'/>
<uncommon_trap bci='113' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='482'/>
<type id='737' name='void'/>
<klass id='862' name='sun/nio/cs/UTF_8' flags='0'/>
<method id='863' holder='862' name='access$200' return='737' arguments='822 735 822 735' flags='4104' bytes='8' iicount='9821'/>
<call method='863' count='9219' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='863' uses='9219' stamp='118.131'>
<bc code='184' bci='4'/>
<method id='878' holder='862' name='updatePositions' return='737' arguments='822 735 822 735' flags='26' bytes='23' iicount='10675'/>
<call method='878' count='10167' prof_factor='0.938703' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='878' uses='9544' stamp='118.131'>
<bc code='182' bci='3'/>
<dependency type='unique_concrete_method' ctxk='852' x='855'/>
<call method='855' count='10181' prof_factor='0.894052' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='852'/>
<parse method='855' uses='9543' stamp='118.131'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='6979' not_taken='0' cnt='6979' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='6979' not_taken='0' cnt='6979' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='614' live='580' memory='187216' stamp='118.132'/>
</parse>
<bc code='182' bci='7'/>
<method id='881' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='881' count='10181' prof_factor='0.894052' inline='1'/>
<klass id='883' name='java/lang/IllegalArgumentException' flags='1'/>
<uncommon_trap method='881' bci='12' reason='unloaded' action='reinterpret' index='5' klass='883'/>
<inline_success reason='inline (hot)'/>
<parse method='881' uses='9543' stamp='118.132'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5786' cnt='5786' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='671' live='633' memory='200872' stamp='118.132'/>
</parse>
<bc code='182' bci='14'/>
<dependency type='unique_concrete_method' ctxk='848' x='859'/>
<call method='859' count='10181' prof_factor='0.894052' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='9543' stamp='118.133'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='7491' not_taken='0' cnt='7491' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='7491' not_taken='0' cnt='7491' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='717' live='676' memory='211376' stamp='118.133'/>
</parse>
<bc code='182' bci='18'/>
<call method='881' count='10181' prof_factor='0.894052' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='881' uses='9543' stamp='118.133'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5786' cnt='5786' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='774' live='729' memory='223744' stamp='118.134'/>
</parse>
<parse_done nodes='776' live='730' memory='224464' stamp='118.134'/>
</parse>
<parse_done nodes='778' live='731' memory='225184' stamp='118.134'/>
</parse>
<parse_done nodes='782' live='734' memory='226272' stamp='118.135'/>
</parse>
<phase_done name='parse' nodes='783' live='386' stamp='118.136'/>
</phase>
<phase name='optimizer' nodes='783' live='386' stamp='118.136'>
<phase name='idealLoop' nodes='796' live='322' stamp='118.138'>
<loop_tree>
<loop idx='802' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='878' live='319' stamp='118.141'/>
</phase>
<phase name='idealLoop' nodes='878' live='319' stamp='118.141'>
<loop_tree>
<loop idx='802' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='878' live='317' stamp='118.141'/>
</phase>
<phase name='idealLoop' nodes='878' live='317' stamp='118.141'>
<loop_tree>
<loop idx='802' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='878' live='317' stamp='118.142'/>
</phase>
<phase name='ccp' nodes='878' live='317' stamp='118.144'>
<phase_done name='ccp' nodes='878' live='317' stamp='118.144'/>
</phase>
<phase name='idealLoop' nodes='878' live='315' stamp='118.144'>
<loop_tree>
<loop idx='802' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='887' live='287' stamp='118.145'/>
</phase>
<phase name='idealLoop' nodes='887' live='287' stamp='118.145'>
<loop_tree>
<loop idx='802' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='896' live='274' stamp='118.146'/>
</phase>
<phase name='idealLoop' nodes='896' live='274' stamp='118.146'>
<loop_tree>
<loop idx='802' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='905' live='274' stamp='118.147'/>
</phase>
<phase_done name='optimizer' nodes='923' live='284' stamp='118.147'/>
</phase>
<phase name='matcher' nodes='923' live='284' stamp='118.147'>
<phase_done name='matcher' nodes='250' live='250' stamp='118.149'/>
</phase>
<phase name='regalloc' nodes='319' live='315' stamp='118.150'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='447' live='401' stamp='118.160'/>
</phase>
<phase name='output' nodes='447' live='401' stamp='118.160'>
<phase_done name='output' nodes='471' live='423' stamp='118.162'/>
</phase>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='852'/>
<dependency type='unique_concrete_method' ctxk='852' x='855'/>
<dependency type='unique_concrete_method' ctxk='848' x='859'/>
<code_cache total_blobs='536' nmethods='27' adapters='427' free_code_cache='249271040'/>
<task_done success='1' nmsize='1048' count='14477' backedge_count='18213' inlined_bytes='422' stamp='118.264'/>
</task>
<task compile_id='79' method='java/io/BufferedWriter write (Ljava/lang/String;II)V' bytes='117' count='14578' backedge_count='14578' iicount='14578' stamp='118.264'>
<phase name='parse' nodes='3' live='3' stamp='118.264'>
<type id='737' name='void'/>
<klass id='743' name='java/lang/String' flags='17'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='743 735 735' flags='1' bytes='117' compile_id='41' compiler='C1' level='2' iicount='14579'/>
<parse method='847' uses='14579' stamp='118.265'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='850' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' iicount='24720'/>
<call method='850' count='9621' prof_factor='1' inline='1'/>
<klass id='854' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='850' bci='7' reason='unloaded' action='reinterpret' index='17' klass='854'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='14577' stamp='118.265'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='24720' not_taken='0' cnt='24720' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='81' live='78' memory='38064' stamp='118.265'/>
</parse>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='14577' not_taken='14577' cnt='29154' prob='0.5'/>
<uncommon_trap bci='27' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='27' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='183' bci='42'/>
<method id='851' holder='846' name='min' return='735' arguments='735 735' flags='2' bytes='9' iicount='10133'/>
<call method='851' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='851' uses='14577' stamp='118.266'>
<bc code='162' bci='2'/>
<branch target_bci='7' taken='10133' not_taken='0' cnt='10133' prob='always'/>
<uncommon_trap bci='2' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='161' live='154' memory='57448' stamp='118.266'/>
</parse>
<bc code='182' bci='63'/>
<klass id='835' name='[C' flags='1041'/>
<method id='852' holder='743' name='getChars' return='737' arguments='735 735 835 735' flags='1' bytes='62' iicount='14756'/>
<call method='852' count='9621' prof_factor='1' inline='1'/>
<klass id='858' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='852' bci='36' reason='unloaded' action='reinterpret' index='6' klass='858'/>
<uncommon_trap method='852' bci='22' reason='unloaded' action='reinterpret' index='6' klass='858'/>
<uncommon_trap method='852' bci='4' reason='unloaded' action='reinterpret' index='6' klass='858'/>
<inline_success reason='inline (hot)'/>
<parse method='852' uses='14577' stamp='118.275'>
<uncommon_trap bci='63' reason='null_check' action='maybe_recompile'/>
<bc code='156' bci='1'/>
<branch target_bci='13' taken='14756' not_taken='0' cnt='14756' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='164' bci='19'/>
<branch target_bci='31' taken='14756' not_taken='0' cnt='14756' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='33'/>
<branch target_bci='47' taken='14756' not_taken='0' cnt='14756' prob='always'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='58'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='857' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='857' count='14679' prof_factor='0.987869' inline='1'/>
<uncommon_trap bci='58' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='346' live='332' memory='104808' stamp='118.276'/>
</parse>
<bc code='161' bci='92'/>
<branch target_bci='99' taken='14577' not_taken='0' cnt='14577' prob='always'/>
<uncommon_trap bci='92' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='14577' not_taken='14577' cnt='14577' prob='0.5'/>
<bc code='191' bci='115'/>
<uncommon_trap bci='115' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='432' live='415' memory='123912' stamp='118.277'/>
</parse>
<phase_done name='parse' nodes='434' live='278' stamp='118.277'/>
</phase>
<phase name='optimizer' nodes='434' live='278' stamp='118.277'>
<phase name='idealLoop' nodes='435' live='245' stamp='118.278'>
<phase_done name='idealLoop' nodes='435' live='227' stamp='118.279'/>
</phase>
<phase name='escapeAnalysis' nodes='435' live='227' stamp='118.279'>
<phase name='connectionGraph' nodes='436' live='228' stamp='118.279'>
<phase_done name='connectionGraph' nodes='436' live='228' stamp='118.279'/>
</phase>
<phase_done name='escapeAnalysis' nodes='436' live='228' stamp='118.279'/>
</phase>
<phase name='idealLoop' nodes='436' live='228' stamp='118.279'>
<phase_done name='idealLoop' nodes='436' live='225' stamp='118.280'/>
</phase>
<phase name='idealLoop' nodes='436' live='225' stamp='118.280'>
<phase_done name='idealLoop' nodes='436' live='225' stamp='118.280'/>
</phase>
<phase name='ccp' nodes='436' live='225' stamp='118.281'>
<phase_done name='ccp' nodes='436' live='225' stamp='118.281'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='79' class_id='lock' kind='?' stamp='118.282'>
<jvms bci='7' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='79' class_id='lock' kind='?' stamp='118.282'>
<jvms bci='7' method='847'/>
</eliminate_lock_INLR_1>
<phase_done name='optimizer' nodes='558' live='326' stamp='118.283'/>
</phase>
<phase name='matcher' nodes='558' live='326' stamp='118.283'>
<phase_done name='matcher' nodes='302' live='302' stamp='118.284'/>
</phase>
<phase name='regalloc' nodes='402' live='398' stamp='118.286'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='619' live='529' stamp='118.298'/>
</phase>
<phase name='output' nodes='621' live='531' stamp='118.298'>
<phase_done name='output' nodes='644' live='550' stamp='118.315'/>
</phase>
<code_cache total_blobs='538' nmethods='31' adapters='427' free_code_cache='249274112'/>
<task_done success='1' nmsize='1656' count='16126' backedge_count='16126' inlined_bytes='89' stamp='118.335'/>
</task>
<task compile_id='81' method='java/nio/charset/CoderResult isUnderflow ()Z' bytes='13' count='32264' iicount='32264' stamp='118.335'>
<phase name='parse' nodes='3' live='3' stamp='118.335'>
<type id='729' name='boolean'/>
<klass id='846' name='java/nio/charset/CoderResult' flags='1'/>
<method id='847' holder='846' name='isUnderflow' return='729' flags='1' bytes='13' compile_id='16' compiler='C1' level='2' iicount='32264'/>
<parse method='847' uses='32264' stamp='118.336'>
<bc code='154' bci='4'/>
<branch target_bci='11' taken='0' not_taken='32264' cnt='32264' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='43' live='41' memory='27448' stamp='118.336'/>
</parse>
<phase_done name='parse' nodes='44' live='24' stamp='118.336'/>
</phase>
<phase name='optimizer' nodes='44' live='24' stamp='118.336'>
<phase name='ccp' nodes='44' live='24' stamp='118.336'>
<phase_done name='ccp' nodes='44' live='24' stamp='118.336'/>
</phase>
<phase name='idealLoop' nodes='44' live='24' stamp='118.336'>
<phase_done name='idealLoop' nodes='44' live='24' stamp='118.336'/>
</phase>
<phase_done name='optimizer' nodes='44' live='24' stamp='118.336'/>
</phase>
<phase name='matcher' nodes='44' live='24' stamp='118.336'>
<phase_done name='matcher' nodes='23' live='23' stamp='118.336'/>
</phase>
<phase name='regalloc' nodes='28' live='28' stamp='118.336'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='29' live='29' stamp='118.337'/>
</phase>
<phase name='output' nodes='29' live='29' stamp='118.337'>
<phase_done name='output' nodes='38' live='37' stamp='118.337'/>
</phase>
<code_cache total_blobs='541' nmethods='34' adapters='427' free_code_cache='249270016'/>
<task_done success='1' nmsize='120' count='33616' stamp='118.391'/>
</task>
<task compile_id='83' method='java/io/BufferedOutputStream flush ()V' bytes='12' count='25203' iicount='25203' stamp='118.392'>
<phase name='parse' nodes='3' live='3' stamp='118.413'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedOutputStream' flags='1'/>
<method id='847' holder='846' name='flush' return='737' flags='33' bytes='12' compile_id='20' compiler='C1' level='2' iicount='26476'/>
<parse method='847' uses='26476' stamp='118.413'>
<bc code='183' bci='1'/>
<method id='850' holder='846' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23667'/>
<call method='850' count='23155' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='26476' stamp='118.414'>
<bc code='158' bci='4'/>
<branch target_bci='28' taken='7890' not_taken='15777' cnt='23667' prob='0.333376'/>
<bc code='182' bci='20'/>
<klass id='849' name='java/io/FileOutputStream' flags='1'/>
<klass id='838' name='[B' flags='1041'/>
<type id='735' name='int'/>
<klass id='851' name='java/io/OutputStream' flags='1025'/>
<method id='854' holder='851' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='854' count='15436' prof_factor='1' virtual='1' inline='1' receiver='849' receiver_count='15436'/>
<method id='856' holder='849' name='write' return='737' arguments='838 735 735' flags='1' bytes='12' iicount='17699'/>
<call method='856' count='15436' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='20' klass='849'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='20' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='856' uses='15777' stamp='118.414'>
<bc code='183' bci='8'/>
<type id='729' name='boolean'/>
<method id='857' holder='849' name='writeBytes' return='737' arguments='838 735 735 729' flags='258' bytes='0' compile_id='60' compile_kind='c2n' level='0' iicount='1920'/>
<call method='857' count='17207' prof_factor='0.891406' inline='1'/>
<inline_fail reason='native method'/>
<direct_call bci='8'/>
<parse_done nodes='123' live='120' memory='45264' stamp='118.415'/>
</parse>
<parse_done nodes='132' live='128' memory='50024' stamp='118.415'/>
</parse>
<bc code='182' bci='8'/>
<method id='853' holder='851' name='flush' return='737' flags='1' bytes='1' compile_id='22' compiler='C1' level='2' iicount='26491'/>
<call method='853' count='23155' prof_factor='1' virtual='1' inline='1' receiver='849' receiver_count='23155'/>
<call method='853' count='23155' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='8' klass='849'/>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='8' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='853' uses='26476' stamp='118.421'>
<parse_done nodes='178' live='171' memory='59576' stamp='118.421'/>
</parse>
<parse_done nodes='198' live='190' memory='63232' stamp='118.421'/>
</parse>
<phase_done name='parse' nodes='200' live='118' stamp='118.421'/>
</phase>
<phase name='optimizer' nodes='200' live='118' stamp='118.421'>
<phase name='idealLoop' nodes='208' live='117' stamp='118.421'>
<phase_done name='idealLoop' nodes='238' live='126' stamp='118.422'/>
</phase>
<phase name='idealLoop' nodes='238' live='126' stamp='118.422'>
<phase_done name='idealLoop' nodes='238' live='126' stamp='118.422'/>
</phase>
<phase name='ccp' nodes='238' live='126' stamp='118.423'>
<phase_done name='ccp' nodes='238' live='126' stamp='118.423'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='83' class_id='lock' kind='?' stamp='118.423'>
<jvms bci='-1' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='83' class_id='lock' kind='?' stamp='118.423'>
<jvms bci='-1' method='847'/>
</eliminate_lock_INLR_1>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='optimizer' nodes='355' live='218' stamp='118.424'/>
</phase>
<phase name='matcher' nodes='355' live='218' stamp='118.424'>
<phase_done name='matcher' nodes='208' live='208' stamp='118.425'/>
</phase>
<phase name='regalloc' nodes='273' live='272' stamp='118.428'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='326' live='305' stamp='118.432'/>
</phase>
<phase name='output' nodes='328' live='307' stamp='118.432'>
<phase_done name='output' nodes='345' live='319' stamp='118.433'/>
</phase>
<dependency type='leaf_type' ctxk='846'/>
<code_cache total_blobs='549' nmethods='41' adapters='427' free_code_cache='249255872'/>
<task_done success='1' nmsize='1064' count='32398' inlined_bytes='109' stamp='118.505'/>
</task>
<task compile_id='87' method='java/nio/Buffer &lt;init&gt; (IIII)V' bytes='121' count='28865' iicount='28865' stamp='118.650'>
<phase name='parse' nodes='3' live='3' stamp='118.650'>
<type id='737' name='void'/>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' compile_id='24' compiler='C1' level='2' iicount='28865'/>
<klass id='851' name='java/lang/IllegalArgumentException' flags='1'/>
<uncommon_trap method='846' bci='74' reason='unloaded' action='reinterpret' index='5' klass='851'/>
<uncommon_trap method='846' bci='19' reason='unloaded' action='reinterpret' index='5' klass='851'/>
<parse method='846' uses='28865' stamp='118.650'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='848' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='848' count='26817' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='848' uses='28865' stamp='118.650'>
<bc code='177' bci='0'/>
<dependency type='no_finalizable_subclasses' ctxk='822'/>
<parse_done nodes='34' live='33' memory='26088' stamp='118.650'/>
</parse>
<bc code='156' bci='16'/>
<branch target_bci='47' taken='28865' not_taken='0' cnt='28865' prob='always'/>
<uncommon_trap bci='16' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='182' bci='55'/>
<method id='849' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' compile_id='25' compiler='C1' level='2' iicount='28883'/>
<call method='849' count='26817' prof_factor='1' inline='1'/>
<uncommon_trap method='849' bci='12' reason='unloaded' action='reinterpret' index='5' klass='851'/>
<inline_success reason='inline (hot)'/>
<parse method='849' uses='28865' stamp='118.651'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='28883' cnt='28883' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='28883' not_taken='0' cnt='28883' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='30'/>
<branch target_bci='38' taken='28883' not_taken='0' cnt='28883' prob='always'/>
<uncommon_trap bci='30' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='43'/>
<branch target_bci='51' taken='28883' not_taken='0' cnt='28883' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='137' live='130' memory='51400' stamp='118.651'/>
</parse>
<bc code='182' bci='61'/>
<method id='850' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='850' count='26817' prof_factor='1' inline='1'/>
<uncommon_trap method='850' bci='12' reason='unloaded' action='reinterpret' index='5' klass='851'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='28865' stamp='118.652'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5786' cnt='5786' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='198' live='187' memory='64872' stamp='118.652'/>
</parse>
<bc code='155' bci='66'/>
<branch target_bci='120' taken='28865' not_taken='0' cnt='28865' prob='always'/>
<uncommon_trap bci='66' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='215' live='202' memory='68768' stamp='118.652'/>
</parse>
<phase_done name='parse' nodes='216' live='114' stamp='118.652'/>
</phase>
<phase name='optimizer' nodes='216' live='114' stamp='118.652'>
<phase name='ccp' nodes='217' live='104' stamp='118.653'>
<phase_done name='ccp' nodes='217' live='104' stamp='118.653'/>
</phase>
<phase name='idealLoop' nodes='217' live='104' stamp='118.653'>
<phase_done name='idealLoop' nodes='217' live='104' stamp='118.653'/>
</phase>
<phase_done name='optimizer' nodes='224' live='111' stamp='118.653'/>
</phase>
<phase name='matcher' nodes='224' live='111' stamp='118.653'>
<phase_done name='matcher' nodes='104' live='104' stamp='118.654'/>
</phase>
<phase name='regalloc' nodes='130' live='130' stamp='118.654'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='185' live='164' stamp='118.656'/>
</phase>
<phase name='output' nodes='185' live='164' stamp='118.656'>
<phase_done name='output' nodes='199' live='176' stamp='118.657'/>
</phase>
<dependency type='no_finalizable_subclasses' ctxk='822'/>
<code_cache total_blobs='552' nmethods='45' adapters='427' free_code_cache='249250432'/>
<task_done success='1' nmsize='440' count='29723' inlined_bytes='94' stamp='118.680'/>
</task>
<task compile_id='90' method='java/io/Writer write (Ljava/lang/String;)V' bytes='11' count='31917' iicount='31917' stamp='118.784'>
<phase name='parse' nodes='3' live='3' stamp='118.784'>
<type id='737' name='void'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='846' name='java/io/Writer' flags='1025'/>
<method id='847' holder='846' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='33' compiler='C1' level='2' iicount='31917'/>
<parse method='847' uses='31917' stamp='118.784'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='850' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='850' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='31917' stamp='118.784'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='67' live='64' memory='33288' stamp='118.785'/>
</parse>
<bc code='182' bci='7'/>
<klass id='849' name='java/io/BufferedWriter' flags='1'/>
<method id='851' holder='846' name='write' return='737' arguments='743 735 735' flags='1' bytes='79' iicount='1'/>
<call method='851' count='29869' prof_factor='1' virtual='1' inline='1' receiver='849' receiver_count='29869'/>
<method id='853' holder='849' name='write' return='737' arguments='743 735 735' flags='1' bytes='117' compile_id='79' compiler='C2' level='4' iicount='16126'/>
<call method='853' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='7' klass='849'/>
<uncommon_trap bci='7' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='853' uses='31917' stamp='118.785'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='854' holder='849' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='86' compiler='C2' level='4' iicount='32333'/>
<call method='854' count='9621' prof_factor='1' inline='1'/>
<klass id='859' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='854' bci='7' reason='unloaded' action='reinterpret' index='17' klass='859'/>
<inline_success reason='inline (hot)'/>
<parse method='854' uses='16124' stamp='118.794'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='32333' not_taken='0' cnt='32333' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='151' live='144' memory='53360' stamp='118.794'/>
</parse>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='32248' prob='0.5'/>
<uncommon_trap bci='27' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='27' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='183' bci='42'/>
<method id='855' holder='849' name='min' return='735' arguments='735 735' flags='2' bytes='9' iicount='10133'/>
<call method='855' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='855' uses='16124' stamp='118.795'>
<bc code='162' bci='2'/>
<branch target_bci='7' taken='10133' not_taken='0' cnt='10133' prob='always'/>
<uncommon_trap bci='2' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='234' live='223' memory='72240' stamp='118.795'/>
</parse>
<bc code='182' bci='63'/>
<klass id='835' name='[C' flags='1041'/>
<method id='856' holder='743' name='getChars' return='737' arguments='735 735 835 735' flags='1' bytes='62' iicount='16291'/>
<call method='856' count='9621' prof_factor='1' inline='1'/>
<klass id='863' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='856' bci='36' reason='unloaded' action='reinterpret' index='6' klass='863'/>
<uncommon_trap method='856' bci='22' reason='unloaded' action='reinterpret' index='6' klass='863'/>
<uncommon_trap method='856' bci='4' reason='unloaded' action='reinterpret' index='6' klass='863'/>
<inline_success reason='inline (hot)'/>
<parse method='856' uses='16124' stamp='118.795'>
<bc code='156' bci='1'/>
<branch target_bci='13' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='164' bci='19'/>
<branch target_bci='31' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='33'/>
<branch target_bci='47' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='58'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='862' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='862' count='15779' prof_factor='0.989749' inline='1'/>
<uncommon_trap bci='58' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='406' live='389' memory='116384' stamp='118.796'/>
</parse>
<bc code='161' bci='92'/>
<branch target_bci='99' taken='16124' not_taken='0' cnt='16124' prob='always'/>
<uncommon_trap bci='92' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='16124' prob='0.5'/>
<bc code='191' bci='115'/>
<uncommon_trap bci='115' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='491' live='471' memory='135424' stamp='118.797'/>
</parse>
<parse_done nodes='494' live='473' memory='136368' stamp='118.797'/>
</parse>
<phase_done name='parse' nodes='496' live='303' stamp='118.797'/>
</phase>
<phase name='optimizer' nodes='496' live='303' stamp='118.797'>
<phase name='escapeAnalysis' nodes='505' live='244' stamp='118.798'>
<phase name='connectionGraph' nodes='506' live='245' stamp='118.798'>
<phase_done name='connectionGraph' nodes='506' live='245' stamp='118.798'/>
</phase>
<phase_done name='escapeAnalysis' nodes='506' live='245' stamp='118.798'/>
</phase>
<phase name='idealLoop' nodes='506' live='245' stamp='118.798'>
<phase_done name='idealLoop' nodes='506' live='224' stamp='118.802'/>
</phase>
<phase name='idealLoop' nodes='506' live='224' stamp='118.802'>
<phase_done name='idealLoop' nodes='506' live='224' stamp='118.802'/>
</phase>
<phase name='ccp' nodes='506' live='224' stamp='118.803'>
<phase_done name='ccp' nodes='506' live='224' stamp='118.804'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='90' class_id='lock' kind='?' stamp='118.805'>
<jvms bci='7' method='853'/>
<jvms bci='7' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='90' class_id='lock' kind='?' stamp='118.805'>
<jvms bci='7' method='853'/>
<jvms bci='7' method='847'/>
</eliminate_lock_INLR_1>
<phase_done name='optimizer' nodes='630' live='321' stamp='118.806'/>
</phase>
<phase name='matcher' nodes='630' live='321' stamp='118.806'>
<phase_done name='matcher' nodes='308' live='308' stamp='118.807'/>
</phase>
<phase name='regalloc' nodes='403' live='398' stamp='118.809'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='559' live='502' stamp='118.825'/>
</phase>
<phase name='output' nodes='561' live='504' stamp='118.825'>
<phase_done name='output' nodes='583' live='523' stamp='118.835'/>
</phase>
<code_cache total_blobs='561' nmethods='54' adapters='427' free_code_cache='249235200'/>
<task_done success='1' nmsize='1464' count='33452' inlined_bytes='174' stamp='118.865'/>
</task>
<task compile_id='94' method='java/nio/charset/CharsetEncoder encode (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;' bytes='285' count='40943' iicount='40943' stamp='118.985'>
<phase name='parse' nodes='3' live='3' stamp='118.985'>
<klass id='846' name='java/nio/charset/CharsetEncoder' flags='1025'/>
<klass id='852' name='sun/nio/cs/UTF_8$Encoder' flags='26'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='852'/>
<klass id='847' name='java/nio/CharBuffer' flags='1025'/>
<klass id='853' name='java/nio/HeapCharBuffer' flags='0'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='853'/>
<klass id='849' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='848' name='java/nio/ByteBuffer' flags='1025'/>
<type id='729' name='boolean'/>
<method id='850' holder='846' name='encode' return='849' arguments='847 848 729' flags='17' bytes='285' compile_id='31' compiler='C1' level='2' iicount='40946'/>
<klass id='868' name='java/lang/AssertionError' unloaded='1'/>
<uncommon_trap method='850' bci='274' reason='unloaded' action='reinterpret' index='60' klass='868'/>
<uncommon_trap method='850' bci='177' reason='unloaded' action='reinterpret' index='60' klass='868'/>
<uncommon_trap method='850' bci='274' reason='unloaded' action='reinterpret' index='60' klass='868'/>
<parse method='850' uses='40946' stamp='118.986'>
<observe that='has_exception_handlers'/>
<bc code='153' bci='1'/>
<branch target_bci='8' taken='40946' not_taken='0' cnt='40946' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='15'/>
<branch target_bci='48' taken='0' not_taken='40946' cnt='40946' prob='never'/>
<uncommon_trap bci='15' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='159' bci='23'/>
<branch target_bci='48' taken='40946' not_taken='0' cnt='40946' prob='always'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken always'/>
<uncommon_trap bci='54' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='54' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='57'/>
<method id='875' holder='852' name='encodeLoop' return='849' arguments='847 848' flags='20' bytes='28' iicount='41092'/>
<dependency type='unique_concrete_method' ctxk='852' x='875'/>
<call method='875' count='38895' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='853'/>
<parse method='875' uses='40946' stamp='118.987'>
<bc code='182' bci='1'/>
<method id='876' holder='847' name='hasArray' return='729' flags='17' bytes='20' iicount='41097'/>
<call method='876' count='40596' prof_factor='0.996447' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='853'/>
<parse method='876' uses='40946' stamp='118.987'>
<uncommon_trap bci='1' reason='null_check' action='maybe_recompile'/>
<bc code='198' bci='4'/>
<branch target_bci='18' taken='0' not_taken='41096' cnt='41096' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='154' bci='11'/>
<branch target_bci='18' taken='0' not_taken='41096' cnt='41096' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='183' live='174' memory='60144' stamp='118.988'/>
</parse>
<bc code='153' bci='4'/>
<branch target_bci='21' taken='0' not_taken='41092' cnt='41092' prob='never'/>
<bc code='182' bci='8'/>
<method id='878' holder='848' name='hasArray' return='729' flags='17' bytes='20' iicount='41100'/>
<call method='878' count='40596' prof_factor='0.996447' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='878' uses='40946' stamp='118.988'>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<bc code='198' bci='4'/>
<branch target_bci='18' taken='0' not_taken='41100' cnt='41100' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='154' bci='11'/>
<branch target_bci='18' taken='0' not_taken='41100' cnt='41100' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='248' live='235' memory='73416' stamp='118.988'/>
</parse>
<bc code='153' bci='11'/>
<branch target_bci='21' taken='0' not_taken='41092' cnt='41092' prob='never'/>
<bc code='183' bci='17'/>
<method id='879' holder='852' name='encodeArrayLoop' return='849' arguments='847 848' flags='2' bytes='489' compile_id='75' compiler='C2' level='4' iicount='14477'/>
<call method='879' count='40596' prof_factor='0.996447' inline='1'/>
<klass id='895' name='sun/nio/cs/Surrogate$Parser' unloaded='1'/>
<uncommon_trap method='879' bci='264' reason='unloaded' action='reinterpret' index='22' klass='895'/>
<uncommon_trap method='879' bci='243' reason='unloaded' action='reinterpret' index='22' klass='895'/>
<inline_fail reason='hot method too big'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='853'/>
<direct_call bci='17'/>
<parse_done nodes='273' live='259' memory='86000' stamp='118.990'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='853'/>
<klass id='854' name='java/nio/BufferUnderflowException' unloaded='1'/>
<uncommon_trap bci='65' reason='unloaded' action='reinterpret' klass='854' comment='!loaded exception'/>
<klass id='855' name='java/nio/BufferOverflowException' unloaded='1'/>
<uncommon_trap bci='77' reason='unloaded' action='reinterpret' klass='855' comment='!loaded exception'/>
<uncommon_trap bci='62' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='62' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='91'/>
<method id='857' holder='849' name='isOverflow' return='729' flags='1' bytes='14' compile_id='40' compiler='C1' level='2' iicount='39407'/>
<dependency type='unique_concrete_method' ctxk='849' x='857'/>
<call method='857' count='38895' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='857' uses='40946' stamp='118.990'>
<uncommon_trap bci='91' reason='null_check' action='maybe_recompile'/>
<bc code='160' bci='5'/>
<branch target_bci='12' taken='39407' not_taken='0' cnt='39407' prob='always'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='384' live='362' memory='110152' stamp='118.991'/>
</parse>
<bc code='153' bci='94'/>
<branch target_bci='100' taken='40946' not_taken='0' cnt='40946' prob='always'/>
<bc code='182' bci='102'/>
<method id='858' holder='849' name='isUnderflow' return='729' flags='1' bytes='13' compile_id='81' compiler='C2' level='4' iicount='33616'/>
<dependency type='unique_concrete_method' ctxk='849' x='858'/>
<call method='858' count='38895' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='858' uses='40946' stamp='118.991'>
<bc code='154' bci='4'/>
<branch target_bci='11' taken='0' not_taken='33616' cnt='33616' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='420' live='396' memory='117064' stamp='118.991'/>
</parse>
<bc code='153' bci='105'/>
<branch target_bci='134' taken='0' not_taken='40946' cnt='40946' prob='never'/>
<bc code='153' bci='109'/>
<branch target_bci='131' taken='40946' not_taken='0' cnt='40946' prob='always'/>
<parse_done nodes='438' live='413' memory='121344' stamp='118.991'/>
</parse>
<phase_done name='parse' nodes='440' live='231' stamp='118.991'/>
</phase>
<phase name='optimizer' nodes='440' live='231' stamp='118.991'>
<phase name='idealLoop' nodes='448' live='206' stamp='118.992'>
<phase_done name='idealLoop' nodes='448' live='172' stamp='118.994'/>
</phase>
<phase name='ccp' nodes='448' live='172' stamp='118.996'>
<phase_done name='ccp' nodes='448' live='172' stamp='118.997'/>
</phase>
<phase_done name='optimizer' nodes='463' live='180' stamp='118.999'/>
</phase>
<phase name='matcher' nodes='463' live='180' stamp='118.999'>
<phase_done name='matcher' nodes='190' live='190' stamp='119.001'/>
</phase>
<phase name='regalloc' nodes='240' live='237' stamp='119.003'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='326' live='274' stamp='119.017'/>
</phase>
<phase name='output' nodes='326' live='274' stamp='119.017'>
<phase_done name='output' nodes='349' live='294' stamp='119.094'/>
</phase>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='852'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='847' x='853'/>
<dependency type='unique_concrete_method' ctxk='852' x='875'/>
<dependency type='unique_concrete_method' ctxk='849' x='857'/>
<dependency type='unique_concrete_method' ctxk='849' x='858'/>
<code_cache total_blobs='568' nmethods='61' adapters='427' free_code_cache='249212544'/>
<task_done success='1' nmsize='584' count='43435' inlined_bytes='95' stamp='119.112'/>
</task>
<task compile_id='96' method='sun/nio/cs/UTF_8$Encoder encodeLoop (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;' bytes='28' count='43435' iicount='43435' stamp='119.129'>
<failure reason='stale task'/>
<task_done success='0' nmsize='0' count='43435' stamp='119.129'/>
</task>
<task compile_id='95' method='java/io/OutputStreamWriter write ([CII)V' bytes='11' count='43432' iicount='43432' stamp='119.129'>
<phase name='parse' nodes='3' live='3' stamp='119.130'>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/OutputStreamWriter' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='835 735 735' flags='1' bytes='11' compile_id='45' compiler='C1' level='2' iicount='43432'/>
<parse method='847' uses='43432' stamp='119.130'>
<bc code='182' bci='7'/>
<klass id='849' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='850' holder='849' name='write' return='737' arguments='835 735 735' flags='1' bytes='78' compile_id='46' compiler='C1' level='2' iicount='43432'/>
<dependency type='unique_concrete_method' ctxk='849' x='850'/>
<call method='850' count='39849' prof_factor='1' inline='1'/>
<klass id='853' name='java/lang/IndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='850' bci='40' reason='unloaded' action='reinterpret' index='22' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='43432' stamp='119.130'>
<observe that='has_exception_handlers'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='852' holder='849' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='92' compiler='C2' level='4' iicount='34173'/>
<call method='852' count='42920' prof_factor='1' inline='1'/>
<klass id='856' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='852' bci='7' reason='unloaded' action='reinterpret' index='2' klass='856'/>
<inline_success reason='inline (hot)'/>
<parse method='852' uses='43432' stamp='119.131'>
<bc code='154' bci='4'/>
<branch target_bci='17' taken='34173' not_taken='0' cnt='34173' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='110' live='106' memory='42944' stamp='119.131'/>
</parse>
<bc code='155' bci='13'/>
<branch target_bci='40' taken='0' not_taken='43432' cnt='43432' prob='never'/>
<uncommon_trap bci='13' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='163' bci='19'/>
<branch target_bci='40' taken='0' not_taken='43432' cnt='43432' prob='never'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='155' bci='23'/>
<branch target_bci='40' taken='0' not_taken='43432' cnt='43432' prob='never'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='163' bci='31'/>
<branch target_bci='40' taken='0' not_taken='43432' cnt='43432' prob='never'/>
<uncommon_trap bci='31' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='37'/>
<branch target_bci='48' taken='43432' not_taken='0' cnt='43432' prob='always'/>
<uncommon_trap bci='37' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='154' bci='49'/>
<branch target_bci='56' taken='43432' not_taken='0' cnt='43432' prob='always'/>
<uncommon_trap bci='49' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='182' bci='60'/>
<method id='854' holder='849' name='implWrite' return='737' arguments='835 735 735' flags='0' bytes='156' iicount='43432'/>
<dependency type='unique_concrete_method' ctxk='849' x='854'/>
<call method='854' count='42920' prof_factor='1' inline='1'/>
<klass id='870' name='java/lang/AssertionError' unloaded='1'/>
<uncommon_trap method='854' bci='132' reason='unloaded' action='reinterpret' index='47' klass='870'/>
<uncommon_trap method='854' bci='69' reason='unloaded' action='reinterpret' index='47' klass='870'/>
<inline_success reason='inline (hot)'/>
<parse method='854' uses='43432' stamp='119.132'>
<bc code='184' bci='3'/>
<klass id='858' name='java/nio/CharBuffer' flags='1025'/>
<method id='859' holder='858' name='wrap' return='858' arguments='835 735 735' flags='9' bytes='20' compile_id='89' compiler='C2' level='4' iicount='31586'/>
<call method='859' count='42920' prof_factor='1' inline='1'/>
<uncommon_trap method='859' bci='12' reason='unloaded' action='reinterpret' index='10' klass='853'/>
<inline_success reason='inline (hot)'/>
<klass id='876' name='java/nio/HeapCharBuffer' flags='0'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<parse method='859' uses='43432' stamp='119.132'>
<observe that='has_exception_handlers'/>
<bc code='187' bci='0'/>
<klass id='875' name='java/lang/IllegalArgumentException' flags='1'/>
<dependency type='leaf_type' ctxk='875'/>
<dependency type='leaf_type' ctxk='875'/>
<bc code='183' bci='7'/>
<method id='877' holder='876' name='&lt;init&gt;' return='737' arguments='835 735 735' flags='0' bytes='14' iicount='28849'/>
<call method='877' count='28337' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='877' uses='31586' stamp='119.133'>
<bc code='183' bci='10'/>
<method id='879' holder='858' name='&lt;init&gt;' return='737' arguments='735 735 735 735 835 735' flags='0' bytes='22' iicount='28849'/>
<call method='879' count='28337' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<parse method='879' uses='28849' stamp='119.133'>
<bc code='183' bci='6'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='881' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' compile_id='87' compiler='C2' level='4' iicount='29723'/>
<call method='881' count='28337' prof_factor='1' inline='1'/>
<uncommon_trap method='881' bci='74' reason='unloaded' action='reinterpret' index='5' klass='875'/>
<uncommon_trap method='881' bci='19' reason='unloaded' action='reinterpret' index='5' klass='875'/>
<inline_success reason='inline (hot)'/>
<parse method='881' uses='28849' stamp='119.133'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='883' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='883' count='26817' prof_factor='0.970595' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='883' uses='28849' stamp='119.133'>
<parse_done nodes='323' live='311' memory='101240' stamp='119.133'/>
</parse>
<bc code='156' bci='16'/>
<branch target_bci='47' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<bc code='182' bci='55'/>
<method id='884' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' compile_id='88' compiler='C2' level='4' iicount='29723'/>
<call method='884' count='26817' prof_factor='0.970595' inline='1'/>
<uncommon_trap method='884' bci='12' reason='unloaded' action='reinterpret' index='5' klass='875'/>
<inline_success reason='inline (hot)'/>
<parse method='884' uses='28849' stamp='119.134'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='29723' cnt='29723' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='30'/>
<branch target_bci='38' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='30' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='43'/>
<branch target_bci='51' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='433' live='416' memory='129464' stamp='119.135'/>
</parse>
<bc code='182' bci='61'/>
<method id='885' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='885' count='26817' prof_factor='0.970595' inline='1'/>
<uncommon_trap method='885' bci='12' reason='unloaded' action='reinterpret' index='5' klass='875'/>
<inline_success reason='inline (hot)'/>
<parse method='885' uses='28849' stamp='119.135'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5786' cnt='5786' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='499' live='478' memory='151496' stamp='119.136'/>
</parse>
<bc code='155' bci='66'/>
<branch target_bci='120' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<parse_done nodes='517' live='495' memory='173648' stamp='119.136'/>
</parse>
<parse_done nodes='545' live='522' memory='179960' stamp='119.136'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<parse_done nodes='545' live='521' memory='180056' stamp='119.136'/>
</parse>
<bc code='187' bci='12'/>
<uncommon_trap bci='12' reason='unloaded' action='reinterpret' index='10'/>
<parse_done nodes='558' live='532' memory='183520' stamp='119.136'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<bc code='153' bci='12'/>
<branch target_bci='22' taken='43432' not_taken='0' cnt='43432' prob='always'/>
<uncommon_trap bci='12' reason='unstable_if' action='reinterpret' comment='taken always'/>
<uncommon_trap bci='22' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='22' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='24'/>
<type id='729' name='boolean'/>
<method id='860' holder='822' name='hasRemaining' return='729' flags='17' bytes='17' compile_id='91' compiler='C2' level='4' iicount='32419'/>
<call method='860' count='42920' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='860' uses='43432' stamp='119.136'>
<bc code='162' bci='8'/>
<branch target_bci='15' taken='0' not_taken='32419' cnt='32419' prob='never'/>
<uncommon_trap bci='8' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='639' live='608' memory='200840' stamp='119.137'/>
</parse>
<bc code='153' bci='27'/>
<branch target_bci='155' taken='0' not_taken='43432' cnt='43432' prob='never'/>
<uncommon_trap bci='30' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='30' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='180' bci='31'/>
<klass id='861' name='java/nio/charset/CharsetEncoder' flags='1025'/>
<klass id='891' name='sun/nio/cs/UTF_8$Encoder' flags='26'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='861' x='891'/>
<bc code='182' bci='41'/>
<klass id='863' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='862' name='java/nio/ByteBuffer' flags='1025'/>
<method id='864' holder='861' name='encode' return='863' arguments='858 862 729' flags='17' bytes='285' compile_id='94' compiler='C2' level='4' iicount='43435'/>
<call method='864' count='42920' prof_factor='1' inline='1'/>
<uncommon_trap method='864' bci='274' reason='unloaded' action='reinterpret' index='60' klass='870'/>
<uncommon_trap method='864' bci='177' reason='unloaded' action='reinterpret' index='60' klass='870'/>
<uncommon_trap method='864' bci='274' reason='unloaded' action='reinterpret' index='60' klass='870'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='861' x='891'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<parse method='864' uses='43432' stamp='119.138'>
<observe that='has_exception_handlers'/>
<uncommon_trap bci='41' reason='null_check' action='maybe_recompile'/>
<bc code='153' bci='1'/>
<branch target_bci='8' taken='43435' not_taken='0' cnt='43435' prob='always'/>
<bc code='153' bci='15'/>
<branch target_bci='48' taken='0' not_taken='43435' cnt='43435' prob='never'/>
<uncommon_trap bci='15' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='159' bci='23'/>
<branch target_bci='48' taken='43435' not_taken='0' cnt='43435' prob='always'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken always'/>
<uncommon_trap bci='54' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='54' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='57'/>
<method id='907' holder='891' name='encodeLoop' return='863' arguments='858 862' flags='20' bytes='28' compile_id='32' compiler='C1' level='2' iicount='43435'/>
<dependency type='unique_concrete_method' ctxk='891' x='907'/>
<call method='907' count='38895' prof_factor='0.999931' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<parse method='907' uses='43432' stamp='119.139'>
<bc code='182' bci='1'/>
<method id='908' holder='858' name='hasArray' return='729' flags='17' bytes='20' iicount='41899'/>
<call method='908' count='41387' prof_factor='0.999931' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<parse method='908' uses='43432' stamp='119.139'>
<bc code='198' bci='4'/>
<branch target_bci='18' taken='0' not_taken='41899' cnt='41899' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='154' bci='11'/>
<branch target_bci='18' taken='0' not_taken='41899' cnt='41899' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='838' live='797' memory='247736' stamp='119.141'/>
</parse>
<bc code='153' bci='4'/>
<branch target_bci='21' taken='0' not_taken='43435' cnt='43435' prob='never'/>
<bc code='182' bci='8'/>
<method id='910' holder='862' name='hasArray' return='729' flags='17' bytes='20' iicount='41899'/>
<call method='910' count='41387' prof_factor='0.999931' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='910' uses='43432' stamp='119.141'>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<bc code='198' bci='4'/>
<branch target_bci='18' taken='0' not_taken='41899' cnt='41899' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='154' bci='11'/>
<branch target_bci='18' taken='0' not_taken='41899' cnt='41899' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='903' live='858' memory='264520' stamp='119.151'/>
</parse>
<bc code='153' bci='11'/>
<branch target_bci='21' taken='0' not_taken='43435' cnt='43435' prob='never'/>
<bc code='183' bci='17'/>
<method id='911' holder='891' name='encodeArrayLoop' return='863' arguments='858 862' flags='2' bytes='489' compile_id='75' compiler='C2' level='4' iicount='14477'/>
<call method='911' count='41387' prof_factor='0.999931' inline='1'/>
<klass id='927' name='sun/nio/cs/Surrogate$Parser' unloaded='1'/>
<uncommon_trap method='911' bci='264' reason='unloaded' action='reinterpret' index='22' klass='927'/>
<uncommon_trap method='911' bci='243' reason='unloaded' action='reinterpret' index='22' klass='927'/>
<inline_fail reason='hot method too big'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<direct_call bci='17'/>
<parse_done nodes='928' live='882' memory='272048' stamp='119.155'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<klass id='892' name='java/nio/BufferUnderflowException' unloaded='1'/>
<uncommon_trap bci='65' reason='unloaded' action='reinterpret' klass='892' comment='!loaded exception'/>
<klass id='893' name='java/nio/BufferOverflowException' unloaded='1'/>
<uncommon_trap bci='77' reason='unloaded' action='reinterpret' klass='893' comment='!loaded exception'/>
<uncommon_trap bci='62' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='62' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='91'/>
<method id='866' holder='863' name='isOverflow' return='729' flags='1' bytes='14' compile_id='40' compiler='C1' level='2' iicount='39407'/>
<dependency type='unique_concrete_method' ctxk='863' x='866'/>
<call method='866' count='38895' prof_factor='0.999931' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='866' uses='43432' stamp='119.158'>
<uncommon_trap bci='91' reason='null_check' action='maybe_recompile'/>
<bc code='160' bci='5'/>
<branch target_bci='12' taken='39407' not_taken='0' cnt='39407' prob='always'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1037' live='983' memory='325144' stamp='119.166'/>
</parse>
<bc code='153' bci='94'/>
<branch target_bci='100' taken='43435' not_taken='0' cnt='43435' prob='always'/>
<bc code='182' bci='102'/>
<method id='865' holder='863' name='isUnderflow' return='729' flags='1' bytes='13' compile_id='81' compiler='C2' level='4' iicount='33616'/>
<dependency type='unique_concrete_method' ctxk='863' x='865'/>
<call method='865' count='38895' prof_factor='0.999931' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='865' uses='43432' stamp='119.166'>
<bc code='154' bci='4'/>
<branch target_bci='11' taken='0' not_taken='33616' cnt='33616' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='1073' live='1017' memory='332208' stamp='119.166'/>
</parse>
<bc code='153' bci='105'/>
<branch target_bci='134' taken='0' not_taken='43435' cnt='43435' prob='never'/>
<bc code='153' bci='109'/>
<branch target_bci='131' taken='43435' not_taken='0' cnt='43435' prob='always'/>
<parse_done nodes='1091' live='1034' memory='335688' stamp='119.167'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='861' x='891'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<bc code='182' bci='48'/>
<dependency type='unique_concrete_method' ctxk='863' x='865'/>
<call method='865' count='42920' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='865' uses='43432' stamp='119.167'>
<bc code='154' bci='4'/>
<branch target_bci='11' taken='0' not_taken='33616' cnt='33616' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='1127' live='1068' memory='343736' stamp='119.167'/>
</parse>
<bc code='153' bci='51'/>
<branch target_bci='108' taken='0' not_taken='43432' cnt='43432' prob='never'/>
<bc code='154' bci='57'/>
<branch target_bci='82' taken='43432' not_taken='0' cnt='43432' prob='always'/>
<bc code='182' bci='84'/>
<method id='871' holder='822' name='remaining' return='735' flags='17' bytes='20' iicount='43432'/>
<call method='871' count='42920' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='871' uses='43432' stamp='119.167'>
<bc code='158' bci='11'/>
<branch target_bci='18' taken='43432' not_taken='0' cnt='43432' prob='always'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1173' live='1112' memory='352064' stamp='119.167'/>
</parse>
<bc code='160' bci='88'/>
<branch target_bci='155' taken='43432' not_taken='0' cnt='43432' prob='always'/>
<parse_done nodes='1183' live='1121' memory='353976' stamp='119.167'/>
</parse>
<bc code='191' bci='76'/>
<uncommon_trap bci='76' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1239' live='1175' memory='365136' stamp='119.168'/>
</parse>
<parse_done nodes='1244' live='1179' memory='366784' stamp='119.168'/>
</parse>
<phase_done name='parse' nodes='1246' live='594' stamp='119.168'/>
</phase>
<phase name='optimizer' nodes='1246' live='594' stamp='119.168'>
<phase name='idealLoop' nodes='1261' live='476' stamp='119.170'>
<phase_done name='idealLoop' nodes='1261' live='410' stamp='119.177'/>
</phase>
<phase name='escapeAnalysis' nodes='1261' live='410' stamp='119.177'>
<phase name='connectionGraph' nodes='1262' live='411' stamp='119.177'>
<phase_done name='connectionGraph' nodes='1262' live='411' stamp='119.178'/>
</phase>
<phase_done name='escapeAnalysis' nodes='1262' live='411' stamp='119.178'/>
</phase>
<phase name='idealLoop' nodes='1262' live='411' stamp='119.178'>
<phase_done name='idealLoop' nodes='1265' live='391' stamp='119.179'/>
</phase>
<phase name='idealLoop' nodes='1265' live='391' stamp='119.179'>
<phase_done name='idealLoop' nodes='1265' live='391' stamp='119.179'/>
</phase>
<phase name='ccp' nodes='1265' live='391' stamp='119.181'>
<phase_done name='ccp' nodes='1265' live='391' stamp='119.181'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='95' class_id='lock' kind='?' stamp='119.190'>
<jvms bci='7' method='850'/>
<jvms bci='7' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='95' class_id='lock' kind='?' stamp='119.190'>
<jvms bci='7' method='850'/>
<jvms bci='7' method='847'/>
</eliminate_lock_INLR_1>
<comment that='1/0 subword/long to 1/0 int/long'/>
<phase_done name='optimizer' nodes='1478' live='549' stamp='119.191'/>
</phase>
<phase name='matcher' nodes='1478' live='549' stamp='119.191'>
<phase_done name='matcher' nodes='525' live='525' stamp='119.194'/>
</phase>
<phase name='regalloc' nodes='668' live='662' stamp='119.196'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='1017' live='904' stamp='119.210'/>
</phase>
<phase name='output' nodes='1019' live='906' stamp='119.210'>
<phase_done name='output' nodes='1055' live='938' stamp='119.214'/>
</phase>
<dependency type='leaf_type' ctxk='875'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='858' x='876'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='861' x='891'/>
<dependency type='unique_concrete_method' ctxk='849' x='850'/>
<dependency type='unique_concrete_method' ctxk='849' x='854'/>
<dependency type='unique_concrete_method' ctxk='891' x='907'/>
<dependency type='unique_concrete_method' ctxk='863' x='866'/>
<dependency type='unique_concrete_method' ctxk='863' x='865'/>
<code_cache total_blobs='577' nmethods='68' adapters='427' free_code_cache='249175296'/>
<task_done success='1' nmsize='2632' count='43432' inlined_bytes='953' stamp='119.317'/>
</task>
<task compile_id='98' method='sun/nio/cs/StreamEncoder flushBuffer ()V' bytes='42' count='52769' iicount='52769' stamp='119.317'>
<phase name='parse' nodes='3' live='3' stamp='119.317'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='flushBuffer' return='737' flags='1' bytes='42' compile_id='51' compiler='C1' level='2' iicount='52769'/>
<klass id='851' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='847' bci='21' reason='unloaded' action='reinterpret' index='2' klass='851'/>
<parse method='847' uses='52769' stamp='119.317'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='6'/>
<uncommon_trap bci='6' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='8'/>
<type id='729' name='boolean'/>
<method id='850' holder='846' name='isOpen' return='729' flags='2' bytes='5' compile_id='15' compiler='C1' level='1' iicount='31958'/>
<call method='850' count='47649' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='850' uses='52769' stamp='119.318'>
<parse_done nodes='70' live='68' memory='33992' stamp='119.318'/>
</parse>
<bc code='153' bci='11'/>
<branch target_bci='21' taken='0' not_taken='52769' cnt='52769' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='15'/>
<method id='852' holder='846' name='implFlushBuffer' return='737' flags='0' bytes='15' compile_id='52' compiler='C1' level='2' iicount='48161'/>
<dependency type='unique_concrete_method' ctxk='846' x='852'/>
<call method='852' count='47649' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='852' uses='52769' stamp='119.318'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='855' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='855' count='47649' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='855' uses='48161' stamp='119.318'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='123' live='118' memory='44736' stamp='119.319'/>
</parse>
<bc code='158' bci='7'/>
<branch target_bci='14' taken='0' not_taken='48161' cnt='48161' prob='never'/>
<uncommon_trap bci='7' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='183' bci='11'/>
<method id='856' holder='846' name='writeBytes' return='737' flags='2' bytes='132' compile_id='53' compiler='C1' level='2' iicount='52769'/>
<call method='856' count='47649' prof_factor='1' inline='1'/>
<klass id='862' name='java/nio/channels/WritableByteChannel' unloaded='1'/>
<uncommon_trap method='856' bci='75' reason='unloaded' action='reinterpret' index='225' klass='862'/>
<klass id='868' name='java/lang/AssertionError' unloaded='1'/>
<uncommon_trap method='856' bci='35' reason='unloaded' action='reinterpret' index='47' klass='868'/>
<inline_success reason='inline (hot)'/>
<parse method='856' uses='48161' stamp='119.392'>
<bc code='182' bci='4'/>
<method id='859' holder='822' name='flip' return='822' flags='17' bytes='20' iicount='51233'/>
<call method='859' count='50721' prof_factor='0.912676' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='48161' stamp='119.393'>
<parse_done nodes='174' live='167' memory='56904' stamp='119.394'/>
</parse>
<bc code='182' bci='12'/>
<method id='860' holder='822' name='limit' return='735' flags='17' bytes='5' compile_id='11' compiler='C1' level='1' iicount='2388'/>
<call method='860' count='50721' prof_factor='0.912676' inline='1'/>
<inline_success reason='accessor'/>
<parse method='860' uses='48161' stamp='119.394'>
<parse_done nodes='196' live='188' memory='61552' stamp='119.394'/>
</parse>
<bc code='182' bci='20'/>
<call method='855' count='50721' prof_factor='0.912676' inline='1'/>
<inline_success reason='accessor'/>
<parse method='855' uses='48161' stamp='119.395'>
<parse_done nodes='218' live='209' memory='66328' stamp='119.395'/>
</parse>
<bc code='154' bci='27'/>
<branch target_bci='43' taken='52769' not_taken='0' cnt='52769' prob='always'/>
<bc code='163' bci='45'/>
<branch target_bci='54' taken='0' not_taken='52769' cnt='52769' prob='never'/>
<uncommon_trap bci='45' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='158' bci='57'/>
<branch target_bci='123' taken='0' not_taken='52769' cnt='52769' prob='never'/>
<uncommon_trap bci='57' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='180' bci='61'/>
<assert_null reason='field' klass='862'/>
<uncommon_trap bci='64' reason='null_assert' action='make_not_entrant' comment='assert_null'/>
<bc code='198' bci='64'/>
<branch target_bci='99' taken='52769' not_taken='0' cnt='52769' prob='always'/>
<bc code='182' bci='107'/>
<klass id='838' name='[B' flags='1041'/>
<klass id='854' name='java/nio/ByteBuffer' flags='1025'/>
<method id='864' holder='854' name='array' return='838' flags='17' bytes='35' compile_id='85' compiler='C2' level='4' iicount='33658'/>
<call method='864' count='50721' prof_factor='0.912676' inline='1'/>
<klass id='874' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='864' bci='22' reason='unloaded' action='reinterpret' index='26' klass='874'/>
<klass id='875' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='864' bci='7' reason='unloaded' action='reinterpret' index='33' klass='875'/>
<inline_success reason='inline (hot)'/>
<parse method='864' uses='48161' stamp='119.400'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='339' live='324' memory='98656' stamp='119.401'/>
</parse>
<bc code='182' bci='114'/>
<method id='865' holder='854' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='44' compiler='C2' level='4' iicount='16676'/>
<call method='865' count='50721' prof_factor='0.912676' inline='1'/>
<uncommon_trap method='865' bci='22' reason='unloaded' action='reinterpret' index='26' klass='874'/>
<uncommon_trap method='865' bci='7' reason='unloaded' action='reinterpret' index='33' klass='875'/>
<inline_success reason='inline (hot)'/>
<parse method='865' uses='48161' stamp='119.401'>
<uncommon_trap bci='114' reason='null_check' action='maybe_recompile'/>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='16676' not_taken='0' cnt='16676' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='16676' not_taken='0' cnt='16676' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='401' live='382' memory='114496' stamp='119.403'/>
</parse>
<bc code='182' bci='120'/>
<klass id='870' name='java/io/PrintStream' flags='1'/>
<klass id='863' name='java/io/OutputStream' flags='1025'/>
<method id='866' holder='863' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='866' count='50721' prof_factor='0.912676' virtual='1' inline='1' receiver='870' receiver_count='50721'/>
<method id='878' holder='870' name='write' return='737' arguments='838 735 735' flags='1' bytes='69' iicount='56830'/>
<call method='878' count='50721' prof_factor='0.912676' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='120' klass='870'/>
<uncommon_trap bci='120' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='120' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='878' uses='48161' stamp='119.411'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='6'/>
<method id='880' holder='870' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='880' count='56318' prof_factor='0.847457' inline='1'/>
<uncommon_trap method='880' bci='7' reason='unloaded' action='reinterpret' index='32' klass='851'/>
<inline_success reason='inline (hot)'/>
<parse method='880' uses='48161' stamp='119.411'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='480' live='457' memory='133440' stamp='119.411'/>
</parse>
<bc code='182' bci='16'/>
<klass id='884' name='java/io/BufferedOutputStream' flags='1'/>
<call method='866' count='56318' prof_factor='0.847457' virtual='1' inline='1' receiver='884' receiver_count='56318'/>
<method id='886' holder='884' name='write' return='737' arguments='838 735 735' flags='33' bytes='67' iicount='56830'/>
<call method='886' count='56318' prof_factor='0.847457' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='16' klass='884'/>
<uncommon_trap bci='16' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='886' uses='48161' stamp='119.412'>
<bc code='190' bci='5'/>
<uncommon_trap bci='5' reason='null_check' action='maybe_recompile'/>
<bc code='161' bci='6'/>
<branch target_bci='24' taken='56830' not_taken='0' cnt='56830' prob='always'/>
<uncommon_trap bci='6' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='35'/>
<branch target_bci='42' taken='56830' not_taken='0' cnt='56830' prob='always'/>
<uncommon_trap bci='35' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='53'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='887' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='887' count='56318' prof_factor='0.847457' inline='1'/>
<uncommon_trap bci='53' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='703' live='674' memory='191512' stamp='119.413'/>
</parse>
<bc code='153' bci='23'/>
<branch target_bci='33' taken='0' not_taken='56830' cnt='56830' prob='never'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='30'/>
<method id='882' holder='863' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='882' count='56318' prof_factor='0.847457' virtual='1' inline='1' receiver='884' receiver_count='56318'/>
<method id='890' holder='884' name='flush' return='737' flags='33' bytes='12' compile_id='83' compiler='C2' level='4' iicount='32398'/>
<call method='890' count='56318' prof_factor='0.847457' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='30' klass='884'/>
<uncommon_trap bci='30' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='30' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='890' uses='48161' stamp='119.414'>
<bc code='183' bci='1'/>
<method id='888' holder='884' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23668'/>
<call method='888' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='888' uses='32398' stamp='119.414'>
<bc code='158' bci='4'/>
<branch target_bci='28' taken='7890' not_taken='15778' cnt='23668' prob='0.333362'/>
<bc code='182' bci='20'/>
<klass id='892' name='java/io/FileOutputStream' flags='1'/>
<call method='866' count='15437' prof_factor='1' virtual='1' inline='1' receiver='892' receiver_count='15437'/>
<method id='894' holder='892' name='write' return='737' arguments='838 735 735' flags='1' bytes='12' iicount='21599'/>
<call method='894' count='15437' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='20' klass='892'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='20' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='894' uses='15778' stamp='119.415'>
<bc code='183' bci='8'/>
<method id='895' holder='892' name='writeBytes' return='737' arguments='838 735 735 729' flags='258' bytes='0' compile_id='60' compile_kind='c2n' level='0' iicount='1920'/>
<call method='895' count='21087' prof_factor='0.730497' inline='1'/>
<inline_fail reason='native method'/>
<direct_call bci='8'/>
<parse_done nodes='859' live='824' memory='228872' stamp='119.415'/>
</parse>
<parse_done nodes='868' live='832' memory='232168' stamp='119.415'/>
</parse>
<bc code='182' bci='8'/>
<call method='882' count='23156' prof_factor='1' virtual='1' inline='1' receiver='892' receiver_count='23156'/>
<call method='882' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='8' klass='892'/>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='8' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='882' uses='32398' stamp='119.416'>
<parse_done nodes='914' live='875' memory='244184' stamp='119.416'/>
</parse>
<parse_done nodes='934' live='894' memory='247904' stamp='119.416'/>
</parse>
<bc code='191' bci='46'/>
<uncommon_trap bci='46' reason='null_check' action='maybe_recompile'/>
<klass id='879' name='java/io/InterruptedIOException' unloaded='1'/>
<uncommon_trap bci='50' reason='unloaded' action='reinterpret' klass='879' comment='!loaded exception'/>
<uncommon_trap bci='61' reason='unloaded' action='reinterpret' klass='851' comment='!loaded exception'/>
<parse_done nodes='1014' live='969' memory='267360' stamp='119.416'/>
</parse>
<bc code='182' bci='127'/>
<method id='861' holder='822' name='clear' return='822' flags='17' bytes='20' compile_id='61' compiler='C1' level='2' iicount='51233'/>
<call method='861' count='50721' prof_factor='0.912676' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='861' uses='48161' stamp='119.416'>
<uncommon_trap bci='127' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1056' live='1009' memory='301736' stamp='119.427'/>
</parse>
<parse_done nodes='1060' live='1012' memory='303208' stamp='119.427'/>
</parse>
<parse_done nodes='1067' live='1018' memory='305128' stamp='119.427'/>
</parse>
<bc code='191' bci='40'/>
<uncommon_trap bci='40' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1117' live='1066' memory='314608' stamp='119.428'/>
</parse>
<phase_done name='parse' nodes='1119' live='604' stamp='119.428'/>
</phase>
<phase name='optimizer' nodes='1119' live='604' stamp='119.428'>
<phase name='idealLoop' nodes='1151' live='527' stamp='119.431'>
<phase_done name='idealLoop' nodes='1151' live='527' stamp='119.432'/>
</phase>
<phase name='escapeAnalysis' nodes='1151' live='527' stamp='119.432'>
<phase name='connectionGraph' nodes='1152' live='528' stamp='119.432'>
<phase_done name='connectionGraph' nodes='1152' live='528' stamp='119.432'/>
</phase>
<phase_done name='escapeAnalysis' nodes='1152' live='528' stamp='119.432'/>
</phase>
<phase name='idealLoop' nodes='1152' live='528' stamp='119.433'>
<phase_done name='idealLoop' nodes='1182' live='531' stamp='119.434'/>
</phase>
<phase name='idealLoop' nodes='1182' live='531' stamp='119.434'>
<phase_done name='idealLoop' nodes='1182' live='531' stamp='119.434'/>
</phase>
<phase name='ccp' nodes='1182' live='531' stamp='119.437'>
<phase_done name='ccp' nodes='1182' live='531' stamp='119.437'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.448'>
<jvms bci='6' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.448'>
<jvms bci='6' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.451'>
<jvms bci='4' method='878'/>
<jvms bci='120' method='856'/>
<jvms bci='11' method='852'/>
<jvms bci='15' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.451'>
<jvms bci='4' method='878'/>
<jvms bci='120' method='856'/>
<jvms bci='11' method='852'/>
<jvms bci='15' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.451'>
<jvms bci='-1' method='886'/>
<jvms bci='16' method='878'/>
<jvms bci='120' method='856'/>
<jvms bci='11' method='852'/>
<jvms bci='15' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.451'>
<jvms bci='-1' method='886'/>
<jvms bci='16' method='878'/>
<jvms bci='120' method='856'/>
<jvms bci='11' method='852'/>
<jvms bci='15' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.451'>
<jvms bci='-1' method='890'/>
<jvms bci='30' method='878'/>
<jvms bci='120' method='856'/>
<jvms bci='11' method='852'/>
<jvms bci='15' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='98' class_id='lock' kind='?' stamp='119.451'>
<jvms bci='-1' method='890'/>
<jvms bci='30' method='878'/>
<jvms bci='120' method='856'/>
<jvms bci='11' method='852'/>
<jvms bci='15' method='847'/>
</eliminate_lock_INLR_3>
<phase_done name='optimizer' nodes='1636' live='890' stamp='119.454'/>
</phase>
<phase name='matcher' nodes='1636' live='890' stamp='119.454'>
<phase_done name='matcher' nodes='852' live='852' stamp='119.459'/>
</phase>
<phase name='regalloc' nodes='1125' live='1116' stamp='119.464'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='1677' live='1467' stamp='119.512'/>
</phase>
<phase name='output' nodes='1687' live='1477' stamp='119.512'>
<phase_done name='output' nodes='1726' live='1507' stamp='119.559'/>
</phase>
<dependency type='unique_concrete_method' ctxk='846' x='852'/>
<code_cache total_blobs='586' nmethods='77' adapters='427' free_code_cache='249143168'/>
<task_done success='1' nmsize='4584' count='56830' inlined_bytes='563' stamp='119.659'/>
</task>
<task compile_id='103' method='java/io/PrintStream println (I)V' bytes='24' count='36243' iicount='36243' stamp='119.659'>
<phase name='parse' nodes='3' live='3' stamp='119.809'>
<type id='737' name='void'/>
<type id='735' name='int'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='println' return='737' arguments='735' flags='1' bytes='24' compile_id='64' compiler='C1' level='2' iicount='36922'/>
<parse method='847' uses='36922' stamp='119.809'>
<observe that='has_exception_handlers'/>
<bc code='182' bci='6'/>
<method id='849' holder='846' name='print' return='737' arguments='735' flags='1' bytes='9' iicount='30320'/>
<dependency type='unique_concrete_method' ctxk='846' x='849'/>
<call method='849' count='29808' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='849' uses='36922' stamp='119.809'>
<bc code='184' bci='2'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='852' holder='743' name='valueOf' return='743' arguments='735' flags='9' bytes='5' iicount='30320'/>
<call method='852' count='29808' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='852' uses='30320' stamp='119.809'>
<bc code='184' bci='1'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='855' holder='830' name='toString' return='743' arguments='735' flags='9' bytes='48' compile_id='67' compiler='C1' level='2' iicount='36922'/>
<call method='855' count='29808' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='855' uses='30320' stamp='119.809'>
<bc code='160' bci='3'/>
<branch target_bci='9' taken='36922' not_taken='0' cnt='36922' prob='always'/>
<uncommon_trap bci='3' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='156' bci='10'/>
<branch target_bci='23' taken='36922' not_taken='0' cnt='36922' prob='always'/>
<uncommon_trap bci='10' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='24'/>
<method id='857' holder='830' name='stringSize' return='735' arguments='735' flags='8' bytes='21' compile_id='78' compiler='C2' level='4' iicount='7289'/>
<call method='857' count='33169' prof_factor='0.821191' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='857' uses='30320' stamp='119.810'>
<bc code='46' bci='7'/>
<observe that='!need_range_check'/>
<bc code='163' bci='8'/>
<branch target_bci='15' taken='3644' not_taken='7289' cnt='10933' prob='0.333303'/>
<uncommon_trap bci='15' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='15' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='46' bci='7'/>
<uncommon_trap bci='7' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='163' bci='8'/>
<branch target_bci='15' taken='3644' not_taken='7289' cnt='3644' prob='0.333303'/>
<parse_done nodes='188' live='182' memory='61280' stamp='119.810'/>
</parse>
<bc code='184' bci='35'/>
<klass id='835' name='[C' flags='1041'/>
<method id='858' holder='830' name='getChars' return='737' arguments='735 735 835' flags='8' bytes='131' compile_id='80' compiler='C2' level='4' iicount='8401'/>
<call method='858' count='33169' prof_factor='0.821191' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='858' uses='30320' stamp='119.811'>
<bc code='156' bci='7'/>
<branch target_bci='17' taken='8401' not_taken='0' cnt='8401' prob='always'/>
<uncommon_trap bci='7' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='161' bci='20'/>
<branch target_bci='75' taken='8401' not_taken='0' cnt='8401' prob='always'/>
<uncommon_trap bci='20' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='52' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='85' bci='106'/>
<uncommon_trap bci='106' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='154' bci='110'/>
<branch target_bci='75' taken='4200' not_taken='8401' cnt='12601' prob='0.333307'/>
<uncommon_trap bci='75' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='75' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='85' bci='106'/>
<uncommon_trap bci='106' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='154' bci='110'/>
<branch target_bci='75' taken='4200' not_taken='8401' cnt='12601' prob='0.333307'/>
<bc code='153' bci='118'/>
<branch target_bci='130' taken='8401' not_taken='0' cnt='8401' prob='always'/>
<parse_done nodes='448' live='433' memory='123384' stamp='119.835'/>
</parse>
<bc code='183' bci='44'/>
<type id='729' name='boolean'/>
<method id='859' holder='743' name='&lt;init&gt;' return='737' arguments='835 729' flags='0' bytes='10' compile_id='102' compiler='C2' level='4' iicount='33707'/>
<call method='859' count='33169' prof_factor='0.821191' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='30320' stamp='119.835'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='869' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='869' count='28644' prof_factor='0.899516' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='869' uses='30320' stamp='119.835'>
<parse_done nodes='516' live='500' memory='149832' stamp='119.836'/>
</parse>
<parse_done nodes='535' live='518' memory='154280' stamp='119.836'/>
</parse>
<parse_done nodes='537' live='519' memory='155000' stamp='119.836'/>
</parse>
<parse_done nodes='539' live='520' memory='155992' stamp='119.836'/>
</parse>
<bc code='183' bci='5'/>
<method id='853' holder='846' name='write' return='737' arguments='743' flags='2' bytes='83' iicount='36922'/>
<call method='853' count='29808' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='853' uses='30320' stamp='119.836'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='5'/>
<method id='874' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='874' count='37590' prof_factor='0.821191' inline='1'/>
<klass id='873' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='874' bci='7' reason='unloaded' action='reinterpret' index='32' klass='873'/>
<inline_success reason='inline (hot)'/>
<parse method='874' uses='30869' stamp='119.836'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='587' live='566' memory='166984' stamp='119.837'/>
</parse>
<bc code='182' bci='13'/>
<klass id='875' name='java/io/BufferedWriter' flags='1'/>
<klass id='876' name='java/io/Writer' flags='1025'/>
<method id='877' holder='876' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='90' compiler='C2' level='4' iicount='33452'/>
<dependency type='unique_concrete_method' ctxk='875' x='877'/>
<call method='877' count='37590' prof_factor='0.821191' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='877' uses='30869' stamp='119.837'>
<uncommon_trap bci='13' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='4'/>
<method id='886' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='886' count='29869' prof_factor='0.922785' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='886' uses='30869' stamp='119.837'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='642' live='618' memory='179664' stamp='119.837'/>
</parse>
<bc code='182' bci='7'/>
<method id='890' holder='875' name='write' return='737' arguments='743 735 735' flags='1' bytes='117' compile_id='79' compiler='C2' level='4' iicount='16126'/>
<dependency type='unique_concrete_method' ctxk='875' x='890'/>
<call method='890' count='29869' prof_factor='0.922785' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='890' uses='30869' stamp='119.838'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='891' holder='875' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='86' compiler='C2' level='4' iicount='32333'/>
<call method='891' count='9621' prof_factor='1' inline='1'/>
<uncommon_trap method='891' bci='7' reason='unloaded' action='reinterpret' index='17' klass='873'/>
<inline_success reason='inline (hot)'/>
<parse method='891' uses='16124' stamp='119.838'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='32333' not_taken='0' cnt='32333' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='704' live='677' memory='194640' stamp='119.838'/>
</parse>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='32248' prob='0.5'/>
<uncommon_trap bci='27' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='27' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='183' bci='42'/>
<method id='892' holder='875' name='min' return='735' arguments='735 735' flags='2' bytes='9' iicount='10133'/>
<call method='892' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='892' uses='16124' stamp='119.840'>
<bc code='162' bci='2'/>
<branch target_bci='7' taken='10133' not_taken='0' cnt='10133' prob='always'/>
<uncommon_trap bci='2' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='783' live='752' memory='212240' stamp='119.840'/>
</parse>
<bc code='182' bci='63'/>
<method id='893' holder='743' name='getChars' return='737' arguments='735 735 835 735' flags='1' bytes='62' iicount='16291'/>
<call method='893' count='9621' prof_factor='1' inline='1'/>
<klass id='898' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='893' bci='36' reason='unloaded' action='reinterpret' index='6' klass='898'/>
<uncommon_trap method='893' bci='22' reason='unloaded' action='reinterpret' index='6' klass='898'/>
<uncommon_trap method='893' bci='4' reason='unloaded' action='reinterpret' index='6' klass='898'/>
<inline_success reason='inline (hot)'/>
<parse method='893' uses='16124' stamp='119.840'>
<bc code='156' bci='1'/>
<branch target_bci='13' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='164' bci='19'/>
<branch target_bci='31' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='33'/>
<branch target_bci='47' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='58'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='897' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='897' count='15779' prof_factor='0.989749' inline='1'/>
<uncommon_trap bci='58' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='955' live='918' memory='250384' stamp='119.841'/>
</parse>
<bc code='161' bci='92'/>
<branch target_bci='99' taken='16124' not_taken='0' cnt='16124' prob='always'/>
<uncommon_trap bci='92' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='16124' prob='0.5'/>
<bc code='191' bci='115'/>
<uncommon_trap bci='115' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1040' live='1000' memory='294936' stamp='119.842'/>
</parse>
<parse_done nodes='1043' live='1002' memory='298912' stamp='119.842'/>
</parse>
<bc code='182' bci='20'/>
<method id='878' holder='875' name='flushBuffer' return='737' flags='0' bytes='53' compile_id='93' compiler='C2' level='4' iicount='43432'/>
<dependency type='unique_concrete_method' ctxk='875' x='878'/>
<call method='878' count='37590' prof_factor='0.821191' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='20'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='27'/>
<klass id='879' name='java/io/OutputStreamWriter' flags='1'/>
<method id='880' holder='879' name='flushBuffer' return='737' flags='0' bytes='8' compile_id='97' compiler='C2' level='4' iicount='56830'/>
<dependency type='unique_concrete_method' ctxk='879' x='880'/>
<call method='880' count='37590' prof_factor='0.821191' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='27'/>
<uncommon_trap bci='27' reason='null_check' action='maybe_recompile'/>
<bc code='153' bci='34'/>
<branch target_bci='53' taken='0' not_taken='37590' cnt='37590' prob='never'/>
<uncommon_trap bci='34' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='40'/>
<method id='881' holder='743' name='indexOf' return='735' arguments='735' flags='1' bytes='7' compile_id='101' compiler='C2' level='4' iicount='36440'/>
<call method='881' count='37590' prof_factor='0.821191' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='881' uses='30869' stamp='119.843'>
<bc code='182' bci='3'/>
<method id='903' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' compile_id='77' compiler='C2' level='4' iicount='5832'/>
<call method='903' count='28472' prof_factor='0.847119' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='903' uses='30869' stamp='119.844'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='156' bci='7'/>
<branch target_bci='15' taken='5684' not_taken='0' cnt='5684' prob='always'/>
<bc code='161' bci='17'/>
<branch target_bci='22' taken='5680' not_taken='4' cnt='5684' prob='0.999296'/>
<bc code='162' bci='25'/>
<branch target_bci='63' taken='0' not_taken='5680' cnt='5680' prob='never'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5678' not_taken='10813' cnt='16491' prob='0.344309'/>
<uncommon_trap bci='43' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='43' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='47'/>
<uncommon_trap bci='47' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='47' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='160' bci='49'/>
<branch target_bci='55' taken='10811' not_taken='2' cnt='10813' prob='0.999815'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5678' not_taken='10813' cnt='10811' prob='0.344309'/>
<parse_done nodes='1296' live='1244' memory='353576' stamp='119.845'/>
</parse>
<parse_done nodes='1296' live='1243' memory='353704' stamp='119.845'/>
</parse>
<bc code='155' bci='43'/>
<branch target_bci='53' taken='37590' not_taken='0' cnt='37590' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='191' bci='62'/>
<uncommon_trap bci='62' reason='null_check' action='maybe_recompile'/>
<klass id='872' name='java/io/InterruptedIOException' unloaded='1'/>
<uncommon_trap bci='66' reason='unloaded' action='reinterpret' klass='872' comment='!loaded exception'/>
<uncommon_trap bci='76' reason='unloaded' action='reinterpret' klass='873' comment='!loaded exception'/>
<parse_done nodes='1380' live='1321' memory='371032' stamp='119.852'/>
</parse>
<parse_done nodes='1389' live='1329' memory='373400' stamp='119.852'/>
</parse>
<bc code='183' bci='10'/>
<method id='850' holder='846' name='newLine' return='737' flags='2' bytes='73' compile_id='71' compiler='C1' level='2' iicount='36921'/>
<call method='850' count='29808' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='36922' stamp='119.853'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='5'/>
<call method='874' count='36410' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='874' uses='36921' stamp='119.853'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1445' live='1383' memory='384472' stamp='119.853'/>
</parse>
<bc code='182' bci='12'/>
<method id='907' holder='875' name='newLine' return='737' flags='1' bytes='9' compile_id='72' compiler='C1' level='2' iicount='36922'/>
<dependency type='unique_concrete_method' ctxk='875' x='907'/>
<call method='907' count='36410' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='907' uses='36921' stamp='119.854'>
<uncommon_trap bci='12' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='5'/>
<dependency type='unique_concrete_method' ctxk='875' x='877'/>
<call method='877' count='36410' prof_factor='0.999973' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='877' uses='36921' stamp='119.953'>
<bc code='182' bci='4'/>
<call method='886' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='886' uses='33452' stamp='119.953'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1525' live='1459' memory='406264' stamp='119.953'/>
</parse>
<bc code='182' bci='7'/>
<dependency type='unique_concrete_method' ctxk='875' x='890'/>
<call method='890' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='890' uses='33452' stamp='119.953'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<call method='891' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='891' uses='16124' stamp='119.954'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='32333' not_taken='0' cnt='32333' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1586' live='1517' memory='419888' stamp='119.954'/>
</parse>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='32248' prob='0.5'/>
<uncommon_trap bci='27' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='27' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='183' bci='42'/>
<call method='892' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='892' uses='16124' stamp='119.954'>
<bc code='162' bci='2'/>
<branch target_bci='7' taken='10133' not_taken='0' cnt='10133' prob='always'/>
<uncommon_trap bci='2' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1664' live='1591' memory='437432' stamp='119.955'/>
</parse>
<bc code='182' bci='63'/>
<call method='893' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='893' uses='16124' stamp='119.955'>
<bc code='156' bci='1'/>
<branch target_bci='13' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='164' bci='19'/>
<branch target_bci='31' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='33'/>
<branch target_bci='47' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='58'/>
<call method='897' count='15779' prof_factor='0.989749' inline='1'/>
<uncommon_trap bci='58' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='1835' live='1756' memory='474584' stamp='119.956'/>
</parse>
<bc code='161' bci='92'/>
<branch target_bci='99' taken='16124' not_taken='0' cnt='16124' prob='always'/>
<uncommon_trap bci='92' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='16124' prob='0.5'/>
<bc code='191' bci='115'/>
<uncommon_trap bci='115' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1920' live='1838' memory='494248' stamp='119.957'/>
</parse>
<parse_done nodes='1923' live='1840' memory='495240' stamp='119.957'/>
</parse>
<parse_done nodes='1926' live='1842' memory='496336' stamp='119.957'/>
</parse>
<bc code='182' bci='19'/>
<dependency type='unique_concrete_method' ctxk='875' x='878'/>
<call method='878' count='36410' prof_factor='1' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='19'/>
<uncommon_trap bci='19' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='26'/>
<dependency type='unique_concrete_method' ctxk='879' x='880'/>
<call method='880' count='36410' prof_factor='1' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='26'/>
<uncommon_trap bci='26' reason='null_check' action='maybe_recompile'/>
<bc code='153' bci='33'/>
<branch target_bci='43' taken='0' not_taken='36921' cnt='36921' prob='never'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='40'/>
<klass id='909' name='java/io/BufferedOutputStream' flags='1'/>
<klass id='882' name='java/io/OutputStream' flags='1025'/>
<method id='883' holder='882' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='883' count='36410' prof_factor='1' virtual='1' inline='1' receiver='909' receiver_count='36410'/>
<method id='911' holder='909' name='flush' return='737' flags='33' bytes='12' compile_id='83' compiler='C2' level='4' iicount='32398'/>
<call method='911' count='36410' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='40' klass='909'/>
<uncommon_trap bci='40' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='40' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='911' uses='36921' stamp='119.981'>
<bc code='183' bci='1'/>
<method id='912' holder='909' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23668'/>
<call method='912' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='912' uses='32398' stamp='119.981'>
<bc code='158' bci='4'/>
<branch target_bci='28' taken='7890' not_taken='15778' cnt='23668' prob='0.333362'/>
<bc code='182' bci='20'/>
<klass id='914' name='java/io/FileOutputStream' flags='1'/>
<klass id='838' name='[B' flags='1041'/>
<method id='915' holder='882' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='915' count='15437' prof_factor='1' virtual='1' inline='1' receiver='914' receiver_count='15437'/>
<method id='917' holder='914' name='write' return='737' arguments='838 735 735' flags='1' bytes='12' iicount='21599'/>
<call method='917' count='15437' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='20' klass='914'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='20' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='917' uses='15778' stamp='119.981'>
<bc code='183' bci='8'/>
<method id='918' holder='914' name='writeBytes' return='737' arguments='838 735 735 729' flags='258' bytes='0' compile_id='60' compile_kind='c2n' level='0' iicount='1920'/>
<call method='918' count='21087' prof_factor='0.730497' inline='1'/>
<inline_fail reason='native method'/>
<direct_call bci='8'/>
<parse_done nodes='2151' live='2059' memory='624256' stamp='119.982'/>
</parse>
<parse_done nodes='2160' live='2067' memory='627544' stamp='119.982'/>
</parse>
<bc code='182' bci='8'/>
<call method='883' count='23156' prof_factor='1' virtual='1' inline='1' receiver='914' receiver_count='23156'/>
<call method='883' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='8' klass='914'/>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='8' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='883' uses='32398' stamp='119.982'>
<parse_done nodes='2206' live='2110' memory='638296' stamp='119.982'/>
</parse>
<parse_done nodes='2226' live='2129' memory='641936' stamp='119.982'/>
</parse>
<bc code='191' bci='52'/>
<uncommon_trap bci='52' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='56' reason='unloaded' action='reinterpret' klass='872' comment='!loaded exception'/>
<uncommon_trap bci='66' reason='unloaded' action='reinterpret' klass='873' comment='!loaded exception'/>
<parse_done nodes='2301' live='2199' memory='657384' stamp='119.983'/>
</parse>
<bc code='191' bci='22'/>
<uncommon_trap bci='22' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='2350' live='2246' memory='666936' stamp='119.983'/>
</parse>
<phase_done name='parse' nodes='2352' live='1394' stamp='119.984'/>
</phase>
<phase name='optimizer' nodes='2352' live='1394' stamp='119.984'>
<eliminate_lock_set_coarsened lock='0' compile_id='103' class_id='unlock' kind='?' stamp='119.986'>
<jvms bci='54' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_set_coarsened>
<eliminate_lock_set_coarsened lock='1' compile_id='103' class_id='lock' kind='?' stamp='119.986'>
<jvms bci='3' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_set_coarsened>
<phase name='idealLoop' nodes='2382' live='1165' stamp='119.992'>
<loop_tree>
<loop idx='2382' inner_loop='1' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2392' live='1118' stamp='119.994'/>
</phase>
<phase name='escapeAnalysis' nodes='2392' live='1118' stamp='119.994'>
<phase name='connectionGraph' nodes='2393' live='1119' stamp='119.994'>
<phase_done name='connectionGraph' nodes='2393' live='1119' stamp='120.011'/>
</phase>
<phase_done name='escapeAnalysis' nodes='2400' live='1126' stamp='120.012'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='3' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='3' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_set_nested lock='0' compile_id='103' class_id='unlock' kind='?' stamp='120.013'>
<jvms bci='62' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_set_nested lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='3' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_set_nested lock='1' compile_id='103' class_id='lock' kind='nested' stamp='120.013'>
<jvms bci='3' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_set_nested lock='0' compile_id='103' class_id='unlock' kind='coarsened' stamp='120.013'>
<jvms bci='54' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='13' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='13' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_set_nested lock='0' compile_id='103' class_id='unlock' kind='?' stamp='120.013'>
<jvms bci='52' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_set_nested lock='1' compile_id='103' class_id='lock' kind='coarsened' stamp='120.013'>
<jvms bci='3' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_set_nested lock='1' compile_id='103' class_id='lock' kind='nested' stamp='120.013'>
<jvms bci='3' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_set_nested lock='0' compile_id='103' class_id='unlock' kind='?' stamp='120.013'>
<jvms bci='44' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_set_nested>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='5' method='907'/>
<jvms bci='12' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='5' method='907'/>
<jvms bci='12' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='-1' method='911'/>
<jvms bci='40' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.013'>
<jvms bci='-1' method='911'/>
<jvms bci='40' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock lock='0' compile_id='103' class_id='unlock' kind='nested' stamp='120.013'>
<jvms bci='52' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock>
<eliminate_lock lock='0' compile_id='103' class_id='unlock' kind='nested' stamp='120.013'>
<jvms bci='44' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock>
<eliminate_lock lock='1' compile_id='103' class_id='lock' kind='nested' stamp='120.013'>
<jvms bci='3' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock>
<eliminate_lock lock='0' compile_id='103' class_id='unlock' kind='nested' stamp='120.013'>
<jvms bci='62' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock>
<eliminate_lock lock='0' compile_id='103' class_id='unlock' kind='nested' stamp='120.013'>
<jvms bci='54' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock>
<eliminate_lock lock='1' compile_id='103' class_id='lock' kind='nested' stamp='120.013'>
<jvms bci='3' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock>
<eliminate_allocation type='743'>
<jvms bci='38' method='855'/>
<jvms bci='1' method='852'/>
<jvms bci='2' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_allocation>
<phase name='idealLoop' nodes='2416' live='1024' stamp='120.039'>
<loop_tree>
<loop idx='2382' inner_loop='1' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2484' live='1016' stamp='120.043'/>
</phase>
<phase name='idealLoop' nodes='2484' live='1016' stamp='120.043'>
<loop_tree>
<loop idx='2382' inner_loop='1' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2503' live='1019' stamp='120.045'/>
</phase>
<phase name='idealLoop' nodes='2503' live='1019' stamp='120.045'>
<loop_tree>
<loop idx='2382' inner_loop='1' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2568' live='1025' stamp='120.047'/>
</phase>
<phase name='ccp' nodes='2568' live='1025' stamp='120.063'>
<phase_done name='ccp' nodes='2568' live='1025' stamp='120.064'/>
</phase>
<phase name='idealLoop' nodes='2574' live='1024' stamp='120.064'>
<loop_tree>
<loop idx='2579' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2607' live='984' stamp='120.068'/>
</phase>
<phase name='idealLoop' nodes='2607' live='984' stamp='120.068'>
<loop_tree>
<loop idx='2579' inner_loop='1' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2631' live='979' stamp='120.073'/>
</phase>
<phase name='idealLoop' nodes='2631' live='979' stamp='120.073'>
<loop_tree>
<loop idx='2675' inner_loop='1' >
</loop>
<loop idx='2383' inner_loop='1' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='2811' live='1047' stamp='120.078'/>
</phase>
<phase name='idealLoop' nodes='2811' live='1047' stamp='120.078'>
<loop_tree>
<loop idx='2848' inner_loop='1' >
</loop>
<loop idx='2819' main_loop='2819' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='3053' live='1179' stamp='120.084'/>
</phase>
<phase name='idealLoop' nodes='3053' live='1179' stamp='120.084'>
<loop_tree>
<loop idx='3106' inner_loop='1' >
</loop>
<loop idx='2967' inner_loop='1' pre_loop='2819' >
</loop>
<loop idx='2819' inner_loop='1' main_loop='2819' >
</loop>
<loop idx='2900' inner_loop='1' post_loop='2819' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='3149' live='1203' stamp='120.096'/>
</phase>
<phase name='idealLoop' nodes='3149' live='1203' stamp='120.096'>
<loop_tree>
<loop idx='2967' inner_loop='1' pre_loop='2819' >
</loop>
<loop idx='2819' inner_loop='1' main_loop='2819' >
</loop>
<loop idx='2900' inner_loop='1' post_loop='2819' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='3154' live='1187' stamp='120.099'/>
</phase>
<phase name='idealLoop' nodes='3154' live='1187' stamp='120.099'>
<loop_tree>
<loop idx='2967' inner_loop='1' pre_loop='2819' >
</loop>
<loop idx='2819' inner_loop='1' main_loop='2819' >
</loop>
<loop idx='2900' inner_loop='1' post_loop='2819' >
</loop>
<loop idx='2390' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='3159' live='1184' stamp='120.103'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.117'>
<jvms bci='3' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.117'>
<jvms bci='3' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.117'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='13' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.119'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='13' method='853'/>
<jvms bci='5' method='849'/>
<jvms bci='6' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.119'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='5' method='907'/>
<jvms bci='12' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.119'>
<jvms bci='7' method='890'/>
<jvms bci='7' method='877'/>
<jvms bci='5' method='907'/>
<jvms bci='12' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.119'>
<jvms bci='-1' method='911'/>
<jvms bci='40' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='103' class_id='lock' kind='?' stamp='120.119'>
<jvms bci='-1' method='911'/>
<jvms bci='40' method='850'/>
<jvms bci='10' method='847'/>
</eliminate_lock_INLR_3>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='optimizer' nodes='3741' live='1617' stamp='120.131'/>
</phase>
<phase name='matcher' nodes='3741' live='1617' stamp='120.131'>
<phase_done name='matcher' nodes='1580' live='1580' stamp='120.140'/>
</phase>
<phase name='regalloc' nodes='2046' live='2035' stamp='120.156'>
<regalloc attempts='2' success='1'/>
<phase_done name='regalloc' nodes='3220' live='2645' stamp='120.255'/>
</phase>
<phase name='output' nodes='3232' live='2657' stamp='120.256'>
<phase_done name='output' nodes='3319' live='2706' stamp='120.338'/>
</phase>
<dependency type='leaf_type' ctxk='846'/>
<dependency type='unique_concrete_method' ctxk='846' x='849'/>
<dependency type='unique_concrete_method' ctxk='875' x='877'/>
<dependency type='unique_concrete_method' ctxk='875' x='890'/>
<dependency type='unique_concrete_method' ctxk='875' x='878'/>
<dependency type='unique_concrete_method' ctxk='879' x='880'/>
<dependency type='unique_concrete_method' ctxk='875' x='907'/>
<code_cache total_blobs='598' nmethods='91' adapters='427' free_code_cache='249101120'/>
<task_done success='1' nmsize='6432' count='74240' inlined_bytes='1059' stamp='120.569'/>
</task>
<task compile_id='99' method='java/nio/Buffer clear ()Ljava/nio/Buffer;' bytes='20' count='51233' iicount='51233' stamp='120.595'>
<phase name='parse' nodes='3' live='3' stamp='120.595'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='clear' return='822' flags='17' bytes='20' compile_id='61' compiler='C1' level='2' iicount='51233'/>
<parse method='846' uses='51233' stamp='120.595'>
<parse_done nodes='39' live='38' memory='27048' stamp='120.596'/>
</parse>
<phase_done name='parse' nodes='40' live='25' stamp='120.596'/>
</phase>
<phase name='optimizer' nodes='40' live='25' stamp='120.596'>
<phase name='ccp' nodes='40' live='25' stamp='120.596'>
<phase_done name='ccp' nodes='40' live='25' stamp='120.596'/>
</phase>
<phase name='idealLoop' nodes='40' live='25' stamp='120.596'>
<phase_done name='idealLoop' nodes='40' live='25' stamp='120.596'/>
</phase>
<phase_done name='optimizer' nodes='40' live='25' stamp='120.596'/>
</phase>
<phase name='matcher' nodes='40' live='25' stamp='120.596'>
<phase_done name='matcher' nodes='17' live='17' stamp='120.596'/>
</phase>
<phase name='regalloc' nodes='19' live='19' stamp='120.596'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='22' live='21' stamp='120.596'/>
</phase>
<phase name='output' nodes='22' live='21' stamp='120.596'>
<phase_done name='output' nodes='29' live='28' stamp='120.597'/>
</phase>
<code_cache total_blobs='599' nmethods='92' adapters='427' free_code_cache='249100480'/>
<task_done success='1' nmsize='120' count='51233' stamp='120.602'/>
</task>
</compilation_log>
<compilation_log thread='140736956679936'>
<start_compile_thread name='C2 CompilerThread0' thread='140736956679936' process='55833' stamp='116.969'/>
<task compile_id='44' method='java/nio/ByteBuffer arrayOffset ()I' bytes='35' count='5625' iicount='5625' stamp='117.695'>
<phase name='parse' nodes='3' live='3' stamp='117.695'>
<type id='735' name='int'/>
<klass id='846' name='java/nio/ByteBuffer' flags='1025'/>
<method id='847' holder='846' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='12' compiler='C1' level='3' iicount='5637'/>
<klass id='849' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='847' bci='22' reason='unloaded' action='reinterpret' index='26' klass='849'/>
<klass id='850' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='847' bci='7' reason='unloaded' action='reinterpret' index='33' klass='850'/>
<parse method='847' uses='5637' stamp='117.695'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='5637' not_taken='0' cnt='5637' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='5637' not_taken='0' cnt='5637' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='61' live='58' memory='30848' stamp='117.696'/>
</parse>
<phase_done name='parse' nodes='62' live='39' stamp='117.696'/>
</phase>
<phase name='optimizer' nodes='62' live='39' stamp='117.696'>
<phase name='ccp' nodes='62' live='39' stamp='117.696'>
<phase_done name='ccp' nodes='62' live='39' stamp='117.696'/>
</phase>
<phase name='idealLoop' nodes='62' live='39' stamp='117.696'>
<phase_done name='idealLoop' nodes='62' live='39' stamp='117.696'/>
</phase>
<phase_done name='optimizer' nodes='65' live='39' stamp='117.696'/>
</phase>
<phase name='matcher' nodes='65' live='39' stamp='117.696'>
<phase_done name='matcher' nodes='33' live='33' stamp='117.696'/>
</phase>
<phase name='regalloc' nodes='41' live='41' stamp='117.697'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='46' live='44' stamp='117.697'/>
</phase>
<phase name='output' nodes='46' live='44' stamp='117.697'>
<phase_done name='output' nodes='57' live='53' stamp='117.697'/>
</phase>
<code_cache total_blobs='523' nmethods='16' adapters='427' free_code_cache='249329856'/>
<task_done success='1' nmsize='152' count='6152' stamp='117.709'/>
</task>
<task compile_id='58' method='java/nio/Buffer position (I)Ljava/nio/Buffer;' bytes='40' count='5633' iicount='5633' stamp='117.714'>
<phase name='parse' nodes='3' live='3' stamp='117.715'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<type id='735' name='int'/>
<method id='846' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='13' compiler='C1' level='3' iicount='5639'/>
<klass id='848' name='java/lang/IllegalArgumentException' flags='1'/>
<uncommon_trap method='846' bci='12' reason='unloaded' action='reinterpret' index='5' klass='848'/>
<parse method='846' uses='5639' stamp='117.715'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5639' cnt='5639' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5639' not_taken='0' cnt='5639' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5639' not_taken='0' cnt='5639' prob='always'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='72' live='68' memory='34344' stamp='117.716'/>
</parse>
<phase_done name='parse' nodes='73' live='47' stamp='117.716'/>
</phase>
<phase name='optimizer' nodes='73' live='47' stamp='117.716'>
<phase name='ccp' nodes='73' live='47' stamp='117.716'>
<phase_done name='ccp' nodes='73' live='47' stamp='117.716'/>
</phase>
<phase name='idealLoop' nodes='73' live='47' stamp='117.716'>
<phase_done name='idealLoop' nodes='73' live='47' stamp='117.716'/>
</phase>
<phase_done name='optimizer' nodes='75' live='49' stamp='117.716'/>
</phase>
<phase name='matcher' nodes='75' live='49' stamp='117.716'>
<phase_done name='matcher' nodes='44' live='44' stamp='117.716'/>
</phase>
<phase name='regalloc' nodes='55' live='55' stamp='117.716'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='68' live='65' stamp='117.717'/>
</phase>
<phase name='output' nodes='68' live='65' stamp='117.717'>
<phase_done name='output' nodes='81' live='75' stamp='117.739'/>
</phase>
<code_cache total_blobs='526' nmethods='19' adapters='427' free_code_cache='249326976'/>
<task_done success='1' nmsize='216' count='5786' stamp='117.751'/>
</task>
<task compile_id='73' method='java/lang/Math min (II)I' bytes='11' count='5509' iicount='5509' stamp='117.830'>
<phase name='parse' nodes='3' live='3' stamp='117.830'>
<type id='735' name='int'/>
<klass id='846' name='java/lang/Math' flags='17'/>
<method id='847' holder='846' name='min' return='735' arguments='735 735' flags='9' bytes='11' compile_id='8' compiler='C1' level='3' iicount='5512'/>
<parse method='847' uses='5512' stamp='117.830'>
<bc code='163' bci='2'/>
<branch target_bci='9' taken='55' not_taken='5456' cnt='5511' prob='0.00998004'/>
<parse_done nodes='32' live='31' memory='25104' stamp='117.831'/>
</parse>
<phase_done name='parse' nodes='33' live='18' stamp='117.831'/>
</phase>
<phase name='optimizer' nodes='33' live='18' stamp='117.831'>
<phase name='ccp' nodes='33' live='18' stamp='117.831'>
<phase_done name='ccp' nodes='33' live='18' stamp='117.831'/>
</phase>
<phase name='idealLoop' nodes='33' live='18' stamp='117.831'>
<phase_done name='idealLoop' nodes='33' live='18' stamp='117.831'/>
</phase>
<phase_done name='optimizer' nodes='33' live='18' stamp='117.831'/>
</phase>
<phase name='matcher' nodes='33' live='18' stamp='117.831'>
<phase_done name='matcher' nodes='19' live='19' stamp='117.831'/>
</phase>
<phase name='regalloc' nodes='25' live='25' stamp='117.831'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='27' live='27' stamp='117.831'/>
</phase>
<phase name='output' nodes='27' live='27' stamp='117.831'>
<phase_done name='output' nodes='34' live='32' stamp='117.832'/>
</phase>
<code_cache total_blobs='527' nmethods='20' adapters='427' free_code_cache='249326400'/>
<task_done success='1' nmsize='88' count='5723' stamp='117.838'/>
</task>
<task compile_id='77' method='java/lang/String indexOf (II)I' bytes='70' count='5268' backedge_count='13043' iicount='5268' stamp='118.115'>
<phase name='parse' nodes='3' live='3' stamp='118.115'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' compile_id='6' compiler='C1' level='3' iicount='5268'/>
<parse method='846' uses='5268' stamp='118.115'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='156' bci='7'/>
<branch target_bci='15' taken='5120' not_taken='0' cnt='5120' prob='always'/>
<uncommon_trap bci='7' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='161' bci='17'/>
<branch target_bci='22' taken='5116' not_taken='4' cnt='5120' prob='0.999219'/>
<bc code='162' bci='25'/>
<branch target_bci='63' taken='0' not_taken='5116' cnt='5116' prob='never'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5114' not_taken='9967' cnt='15081' prob='0.339102'/>
<uncommon_trap bci='43' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='43' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='47'/>
<uncommon_trap bci='47' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='47' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='160' bci='49'/>
<branch target_bci='55' taken='9965' not_taken='2' cnt='9967' prob='0.999799'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5114' not_taken='9967' cnt='9965' prob='0.339102'/>
<parse_done nodes='184' live='174' memory='57688' stamp='118.116'/>
</parse>
<phase_done name='parse' nodes='185' live='129' stamp='118.116'/>
</phase>
<phase name='optimizer' nodes='185' live='129' stamp='118.116'>
<phase name='idealLoop' nodes='186' live='115' stamp='118.116'>
<loop_tree>
<loop idx='192' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='193' live='105' stamp='118.117'/>
</phase>
<phase name='idealLoop' nodes='193' live='105' stamp='118.117'>
<loop_tree>
<loop idx='192' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='206' live='111' stamp='118.117'/>
</phase>
<phase name='idealLoop' nodes='206' live='111' stamp='118.117'>
<loop_tree>
<loop idx='192' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='206' live='109' stamp='118.117'/>
</phase>
<phase name='ccp' nodes='206' live='109' stamp='118.118'>
<phase_done name='ccp' nodes='206' live='109' stamp='118.118'/>
</phase>
<phase name='idealLoop' nodes='206' live='109' stamp='118.118'>
<loop_tree>
<loop idx='192' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='206' live='96' stamp='118.119'/>
</phase>
<phase name='idealLoop' nodes='206' live='96' stamp='118.119'>
<loop_tree>
<loop idx='192' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='206' live='96' stamp='118.119'/>
</phase>
<phase_done name='optimizer' nodes='210' live='96' stamp='118.119'/>
</phase>
<phase name='matcher' nodes='210' live='96' stamp='118.119'>
<phase_done name='matcher' nodes='81' live='81' stamp='118.120'/>
</phase>
<phase name='regalloc' nodes='111' live='110' stamp='118.120'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='126' live='123' stamp='118.122'/>
</phase>
<phase name='output' nodes='126' live='123' stamp='118.122'>
<phase_done name='output' nodes='145' live='134' stamp='118.132'/>
</phase>
<code_cache total_blobs='531' nmethods='24' adapters='427' free_code_cache='249292224'/>
<task_done success='1' nmsize='280' count='5832' backedge_count='13889' stamp='118.145'/>
</task>
<task compile_id='78' method='java/lang/Integer stringSize (I)I' bytes='21' count='5753' backedge_count='2876' iicount='5753' stamp='118.149'>
<phase name='parse' nodes='3' live='3' stamp='118.149'>
<type id='735' name='int'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='846' holder='830' name='stringSize' return='735' arguments='735' flags='8' bytes='21' compile_id='68' compiler='C1' level='3' iicount='5753'/>
<parse method='846' uses='5753' stamp='118.150'>
<bc code='46' bci='7'/>
<observe that='!need_range_check'/>
<bc code='163' bci='8'/>
<branch target_bci='15' taken='2876' not_taken='5753' cnt='8629' prob='0.333295'/>
<uncommon_trap bci='15' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='15' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='46' bci='7'/>
<uncommon_trap bci='7' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='163' bci='8'/>
<branch target_bci='15' taken='2876' not_taken='5753' cnt='2876' prob='0.333295'/>
<parse_done nodes='112' live='108' memory='41320' stamp='118.150'/>
</parse>
<phase_done name='parse' nodes='113' live='76' stamp='118.150'/>
</phase>
<phase name='optimizer' nodes='113' live='76' stamp='118.150'>
<phase name='idealLoop' nodes='113' live='68' stamp='118.150'>
<loop_tree>
<loop idx='113' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='186' live='76' stamp='118.151'/>
</phase>
<phase name='idealLoop' nodes='186' live='76' stamp='118.151'>
<loop_tree>
<loop idx='191' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='206' live='68' stamp='118.152'/>
</phase>
<phase name='idealLoop' nodes='206' live='68' stamp='118.152'>
<loop_tree>
<loop idx='244' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='256' live='94' stamp='118.152'/>
</phase>
<phase name='ccp' nodes='256' live='94' stamp='118.153'>
<phase_done name='ccp' nodes='256' live='94' stamp='118.153'/>
</phase>
<phase name='idealLoop' nodes='256' live='94' stamp='118.153'>
<loop_tree>
<loop idx='274' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='296' live='108' stamp='118.154'/>
</phase>
<phase name='idealLoop' nodes='296' live='108' stamp='118.154'>
<loop_tree>
<loop idx='337' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='382' live='137' stamp='118.161'/>
</phase>
<phase name='idealLoop' nodes='382' live='137' stamp='118.161'>
<phase_done name='idealLoop' nodes='382' live='137' stamp='118.162'/>
</phase>
<phase_done name='optimizer' nodes='382' live='137' stamp='118.162'/>
</phase>
<phase name='matcher' nodes='382' live='137' stamp='118.162'>
<phase_done name='matcher' nodes='99' live='99' stamp='118.162'/>
</phase>
<phase name='regalloc' nodes='140' live='140' stamp='118.166'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='143' live='141' stamp='118.169'/>
</phase>
<phase name='output' nodes='143' live='141' stamp='118.169'>
<phase_done name='output' nodes='166' live='147' stamp='118.252'/>
</phase>
<code_cache total_blobs='534' nmethods='27' adapters='427' free_code_cache='249282560'/>
<task_done success='1' nmsize='248' count='7289' backedge_count='3644' stamp='118.264'/>
</task>
<task compile_id='80' method='java/lang/Integer getChars (II[C)V' bytes='131' count='7680' backedge_count='4833' iicount='7680' stamp='118.291'>
<phase name='parse' nodes='3' live='3' stamp='118.291'>
<type id='737' name='void'/>
<type id='735' name='int'/>
<klass id='835' name='[C' flags='1041'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='846' holder='830' name='getChars' return='737' arguments='735 735 835' flags='8' bytes='131' compile_id='69' compiler='C1' level='3' iicount='7680'/>
<parse method='846' uses='7680' stamp='118.292'>
<bc code='156' bci='7'/>
<branch target_bci='17' taken='7680' not_taken='0' cnt='7680' prob='always'/>
<uncommon_trap bci='7' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='161' bci='20'/>
<branch target_bci='75' taken='7680' not_taken='0' cnt='7680' prob='always'/>
<uncommon_trap bci='20' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='52' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='85' bci='106'/>
<uncommon_trap bci='106' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='106' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='154' bci='110'/>
<branch target_bci='75' taken='3840' not_taken='7680' cnt='11520' prob='0.333333'/>
<uncommon_trap bci='75' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='75' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='85' bci='106'/>
<uncommon_trap bci='106' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='154' bci='110'/>
<branch target_bci='75' taken='3840' not_taken='7680' cnt='11520' prob='0.333333'/>
<bc code='153' bci='118'/>
<branch target_bci='130' taken='7680' not_taken='0' cnt='7680' prob='always'/>
<parse_done nodes='251' live='241' memory='72272' stamp='118.293'/>
</parse>
<phase_done name='parse' nodes='252' live='179' stamp='118.293'/>
</phase>
<phase name='optimizer' nodes='252' live='179' stamp='118.293'>
<phase name='idealLoop' nodes='252' live='167' stamp='118.294'>
<loop_tree>
<loop idx='252' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='379' live='210' stamp='118.296'/>
</phase>
<phase name='idealLoop' nodes='379' live='210' stamp='118.296'>
<loop_tree>
<loop idx='387' main_loop='387' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='578' live='330' stamp='118.298'/>
</phase>
<phase name='idealLoop' nodes='578' live='330' stamp='118.298'>
<loop_tree>
<loop idx='485' inner_loop='1' pre_loop='387' >
</loop>
<loop idx='387' inner_loop='1' main_loop='387' >
</loop>
<loop idx='417' inner_loop='1' post_loop='387' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='578' live='330' stamp='118.301'/>
</phase>
<phase name='ccp' nodes='578' live='330' stamp='118.305'>
<phase_done name='ccp' nodes='578' live='330' stamp='118.305'/>
</phase>
<phase name='idealLoop' nodes='578' live='329' stamp='118.308'>
<loop_tree>
<loop idx='485' inner_loop='1' pre_loop='387' >
</loop>
<loop idx='387' inner_loop='1' main_loop='387' >
</loop>
<loop idx='417' inner_loop='1' post_loop='387' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='578' live='326' stamp='118.309'/>
</phase>
<phase_done name='optimizer' nodes='631' live='354' stamp='118.310'/>
</phase>
<phase name='matcher' nodes='631' live='354' stamp='118.310'>
<phase_done name='matcher' nodes='336' live='336' stamp='118.313'/>
</phase>
<phase name='regalloc' nodes='416' live='415' stamp='118.314'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='494' live='473' stamp='118.336'/>
</phase>
<phase name='output' nodes='494' live='473' stamp='118.336'>
<phase_done name='output' nodes='515' live='486' stamp='118.347'/>
</phase>
<code_cache total_blobs='542' nmethods='33' adapters='427' free_code_cache='249259328'/>
<task_done success='1' nmsize='856' count='8401' backedge_count='5914' stamp='118.383'/>
</task>
<task compile_id='82' method='java/io/PrintStream ensureOpen ()V' bytes='18' count='33604' iicount='33604' stamp='118.392'>
<phase name='parse' nodes='3' live='3' stamp='118.392'>
<type id='737' name='void'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='19' compiler='C1' level='2' iicount='33604'/>
<klass id='851' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='847' bci='7' reason='unloaded' action='reinterpret' index='32' klass='851'/>
<parse method='847' uses='33604' stamp='118.413'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='33604' not_taken='0' cnt='33604' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='41' live='39' memory='27088' stamp='118.414'/>
</parse>
<phase_done name='parse' nodes='42' live='24' stamp='118.414'/>
</phase>
<phase name='optimizer' nodes='42' live='24' stamp='118.414'>
<phase name='ccp' nodes='42' live='24' stamp='118.414'>
<phase_done name='ccp' nodes='42' live='24' stamp='118.414'/>
</phase>
<phase name='idealLoop' nodes='42' live='24' stamp='118.414'>
<phase_done name='idealLoop' nodes='42' live='24' stamp='118.414'/>
</phase>
<phase_done name='optimizer' nodes='44' live='23' stamp='118.414'/>
</phase>
<phase name='matcher' nodes='44' live='23' stamp='118.414'>
<phase_done name='matcher' nodes='22' live='22' stamp='118.414'/>
</phase>
<phase name='regalloc' nodes='27' live='27' stamp='118.414'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='28' live='28' stamp='118.414'/>
</phase>
<phase name='output' nodes='28' live='28' stamp='118.414'>
<phase_done name='output' nodes='37' live='36' stamp='118.415'/>
</phase>
<code_cache total_blobs='544' nmethods='37' adapters='427' free_code_cache='249266176'/>
<task_done success='1' nmsize='120' count='35995' stamp='118.431'/>
</task>
<task compile_id='85' method='java/nio/ByteBuffer array ()[B' bytes='35' count='33658' iicount='33658' stamp='118.446'>
<phase name='parse' nodes='3' live='3' stamp='118.446'>
<klass id='838' name='[B' flags='1041'/>
<klass id='846' name='java/nio/ByteBuffer' flags='1025'/>
<method id='847' holder='846' name='array' return='838' flags='17' bytes='35' compile_id='17' compiler='C1' level='2' iicount='33658'/>
<klass id='849' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='847' bci='22' reason='unloaded' action='reinterpret' index='26' klass='849'/>
<klass id='850' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='847' bci='7' reason='unloaded' action='reinterpret' index='33' klass='850'/>
<parse method='847' uses='33658' stamp='118.446'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='61' live='58' memory='30824' stamp='118.446'/>
</parse>
<phase_done name='parse' nodes='62' live='36' stamp='118.446'/>
</phase>
<phase name='optimizer' nodes='62' live='36' stamp='118.446'>
<phase name='ccp' nodes='62' live='36' stamp='118.447'>
<phase_done name='ccp' nodes='62' live='36' stamp='118.447'/>
</phase>
<phase name='idealLoop' nodes='62' live='36' stamp='118.447'>
<phase_done name='idealLoop' nodes='62' live='36' stamp='118.447'/>
</phase>
<phase_done name='optimizer' nodes='65' live='37' stamp='118.447'/>
</phase>
<phase name='matcher' nodes='65' live='37' stamp='118.447'>
<phase_done name='matcher' nodes='34' live='34' stamp='118.447'/>
</phase>
<phase name='regalloc' nodes='42' live='42' stamp='118.447'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='47' live='45' stamp='118.448'/>
</phase>
<phase name='output' nodes='47' live='45' stamp='118.448'>
<phase_done name='output' nodes='56' live='54' stamp='118.448'/>
</phase>
<code_cache total_blobs='549' nmethods='40' adapters='427' free_code_cache='249249792'/>
<task_done success='1' nmsize='312' count='33658' stamp='118.493'/>
</task>
<task compile_id='86' method='java/io/BufferedWriter ensureOpen ()V' bytes='18' count='31733' iicount='31733' stamp='118.493'>
<phase name='parse' nodes='3' live='3' stamp='118.493'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='18' compiler='C1' level='2' iicount='31733'/>
<klass id='850' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='847' bci='7' reason='unloaded' action='reinterpret' index='17' klass='850'/>
<parse method='847' uses='31733' stamp='118.493'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='31733' not_taken='0' cnt='31733' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='41' live='39' memory='27088' stamp='118.494'/>
</parse>
<phase_done name='parse' nodes='42' live='24' stamp='118.494'/>
</phase>
<phase name='optimizer' nodes='42' live='24' stamp='118.494'>
<phase name='ccp' nodes='42' live='24' stamp='118.494'>
<phase_done name='ccp' nodes='42' live='24' stamp='118.494'/>
</phase>
<phase name='idealLoop' nodes='42' live='24' stamp='118.494'>
<phase_done name='idealLoop' nodes='42' live='24' stamp='118.494'/>
</phase>
<phase_done name='optimizer' nodes='44' live='23' stamp='118.494'/>
</phase>
<phase name='matcher' nodes='44' live='23' stamp='118.494'>
<phase_done name='matcher' nodes='22' live='22' stamp='118.495'/>
</phase>
<phase name='regalloc' nodes='27' live='27' stamp='118.495'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='28' live='28' stamp='118.495'/>
</phase>
<phase name='output' nodes='28' live='28' stamp='118.495'>
<phase_done name='output' nodes='37' live='36' stamp='118.495'/>
</phase>
<code_cache total_blobs='548' nmethods='41' adapters='427' free_code_cache='249261248'/>
<task_done success='1' nmsize='120' count='32333' stamp='118.523'/>
</task>
<task compile_id='88' method='java/nio/Buffer limit (I)Ljava/nio/Buffer;' bytes='53' count='29723' iicount='29723' stamp='118.681'>
<phase name='parse' nodes='3' live='3' stamp='118.681'>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<type id='735' name='int'/>
<method id='846' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' compile_id='25' compiler='C1' level='2' iicount='29723'/>
<klass id='848' name='java/lang/IllegalArgumentException' flags='1'/>
<uncommon_trap method='846' bci='12' reason='unloaded' action='reinterpret' index='5' klass='848'/>
<parse method='846' uses='29723' stamp='118.681'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='29723' cnt='29723' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='30'/>
<branch target_bci='38' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='30' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='43'/>
<branch target_bci='51' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='88' live='83' memory='37968' stamp='118.681'/>
</parse>
<phase_done name='parse' nodes='89' live='61' stamp='118.681'/>
</phase>
<phase name='optimizer' nodes='89' live='61' stamp='118.681'>
<phase name='ccp' nodes='89' live='60' stamp='118.682'>
<phase_done name='ccp' nodes='89' live='60' stamp='118.682'/>
</phase>
<phase name='idealLoop' nodes='89' live='60' stamp='118.682'>
<phase_done name='idealLoop' nodes='89' live='60' stamp='118.682'/>
</phase>
<phase_done name='optimizer' nodes='92' live='63' stamp='118.682'/>
</phase>
<phase name='matcher' nodes='92' live='63' stamp='118.682'>
<phase_done name='matcher' nodes='56' live='56' stamp='118.682'/>
</phase>
<phase name='regalloc' nodes='70' live='70' stamp='118.683'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='85' live='82' stamp='118.686'/>
</phase>
<phase name='output' nodes='85' live='82' stamp='118.686'>
<phase_done name='output' nodes='100' live='93' stamp='118.698'/>
</phase>
<code_cache total_blobs='554' nmethods='47' adapters='427' free_code_cache='249247744'/>
<task_done success='1' nmsize='248' count='29723' stamp='118.706'/>
</task>
<task compile_id='89' method='java/nio/CharBuffer wrap ([CII)Ljava/nio/CharBuffer;' bytes='20' count='30384' iicount='30384' stamp='118.707'>
<phase name='parse' nodes='3' live='3' stamp='118.707'>
<klass id='846' name='java/nio/CharBuffer' flags='1025'/>
<klass id='849' name='java/nio/HeapCharBuffer' flags='0'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='849'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<method id='847' holder='846' name='wrap' return='846' arguments='835 735 735' flags='9' bytes='20' compile_id='26' compiler='C1' level='2' iicount='30384'/>
<klass id='852' name='java/lang/IndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='847' bci='12' reason='unloaded' action='reinterpret' index='10' klass='852'/>
<parse method='847' uses='30384' stamp='118.707'>
<observe that='has_exception_handlers'/>
<bc code='187' bci='0'/>
<klass id='850' name='java/lang/IllegalArgumentException' flags='1'/>
<dependency type='leaf_type' ctxk='850'/>
<dependency type='leaf_type' ctxk='850'/>
<bc code='183' bci='7'/>
<type id='737' name='void'/>
<method id='851' holder='849' name='&lt;init&gt;' return='737' arguments='835 735 735' flags='0' bytes='14' iicount='28848'/>
<call method='851' count='28336' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='851' uses='30384' stamp='118.707'>
<bc code='190' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='10'/>
<method id='853' holder='846' name='&lt;init&gt;' return='737' arguments='735 735 735 735 835 735' flags='0' bytes='22' iicount='28848'/>
<call method='853' count='28336' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='849'/>
<parse method='853' uses='28848' stamp='118.708'>
<bc code='183' bci='6'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='855' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' compile_id='87' compiler='C2' level='4' iicount='29723'/>
<call method='855' count='28336' prof_factor='1' inline='1'/>
<uncommon_trap method='855' bci='74' reason='unloaded' action='reinterpret' index='5' klass='850'/>
<uncommon_trap method='855' bci='19' reason='unloaded' action='reinterpret' index='5' klass='850'/>
<inline_success reason='inline (hot)'/>
<parse method='855' uses='28848' stamp='118.708'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='857' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='857' count='26817' prof_factor='0.970562' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='857' uses='28848' stamp='118.708'>
<parse_done nodes='143' live='141' memory='56120' stamp='118.708'/>
</parse>
<bc code='156' bci='16'/>
<branch target_bci='47' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<bc code='182' bci='55'/>
<method id='858' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' compile_id='88' compiler='C2' level='4' iicount='29723'/>
<call method='858' count='26817' prof_factor='0.970562' inline='1'/>
<uncommon_trap method='858' bci='12' reason='unloaded' action='reinterpret' index='5' klass='850'/>
<inline_success reason='inline (hot)'/>
<parse method='858' uses='28848' stamp='118.709'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='29723' cnt='29723' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='30'/>
<branch target_bci='38' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='30' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='43'/>
<branch target_bci='51' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='245' live='238' memory='81296' stamp='118.710'/>
</parse>
<bc code='182' bci='61'/>
<method id='859' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='859' count='26817' prof_factor='0.970562' inline='1'/>
<uncommon_trap method='859' bci='12' reason='unloaded' action='reinterpret' index='5' klass='850'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='28848' stamp='118.710'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5786' cnt='5786' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='311' live='300' memory='107744' stamp='118.710'/>
</parse>
<bc code='155' bci='66'/>
<branch target_bci='120' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<parse_done nodes='329' live='317' memory='111280' stamp='118.710'/>
</parse>
<parse_done nodes='357' live='344' memory='116568' stamp='118.711'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='849'/>
<parse_done nodes='357' live='343' memory='116664' stamp='118.711'/>
</parse>
<bc code='187' bci='12'/>
<uncommon_trap bci='12' reason='unloaded' action='reinterpret' index='10'/>
<parse_done nodes='370' live='354' memory='119328' stamp='118.711'/>
</parse>
<phase_done name='parse' nodes='372' live='171' stamp='118.711'/>
</phase>
<phase name='optimizer' nodes='372' live='171' stamp='118.711'>
<phase name='escapeAnalysis' nodes='377' live='146' stamp='118.711'>
<phase name='connectionGraph' nodes='378' live='147' stamp='118.711'>
<phase_done name='connectionGraph' nodes='378' live='147' stamp='118.711'/>
</phase>
<phase_done name='escapeAnalysis' nodes='378' live='147' stamp='118.711'/>
</phase>
<phase name='ccp' nodes='378' live='147' stamp='118.712'>
<phase_done name='ccp' nodes='378' live='147' stamp='118.712'/>
</phase>
<phase name='idealLoop' nodes='378' live='146' stamp='118.712'>
<phase_done name='idealLoop' nodes='378' live='146' stamp='118.712'/>
</phase>
<phase_done name='optimizer' nodes='451' live='198' stamp='118.713'/>
</phase>
<phase name='matcher' nodes='451' live='198' stamp='118.713'>
<phase_done name='matcher' nodes='175' live='175' stamp='118.714'/>
</phase>
<phase name='regalloc' nodes='209' live='208' stamp='118.715'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='267' live='240' stamp='118.717'/>
</phase>
<phase name='output' nodes='269' live='242' stamp='118.717'>
<phase_done name='output' nodes='285' live='257' stamp='118.743'/>
</phase>
<dependency type='leaf_type' ctxk='850'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='846' x='849'/>
<code_cache total_blobs='556' nmethods='49' adapters='427' free_code_cache='249244480'/>
<task_done success='1' nmsize='696' count='31586' inlined_bytes='251' stamp='118.762'/>
</task>
<task compile_id='91' method='java/nio/Buffer hasRemaining ()Z' bytes='17' count='31962' iicount='31962' stamp='118.794'>
<phase name='parse' nodes='3' live='3' stamp='118.795'>
<type id='729' name='boolean'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='846' holder='822' name='hasRemaining' return='729' flags='17' bytes='17' compile_id='30' compiler='C1' level='2' iicount='31962'/>
<parse method='846' uses='31962' stamp='118.795'>
<bc code='162' bci='8'/>
<branch target_bci='15' taken='0' not_taken='31962' cnt='31962' prob='never'/>
<uncommon_trap bci='8' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='45' live='43' memory='27744' stamp='118.795'/>
</parse>
<phase_done name='parse' nodes='46' live='26' stamp='118.795'/>
</phase>
<phase name='optimizer' nodes='46' live='26' stamp='118.795'>
<phase name='ccp' nodes='46' live='26' stamp='118.795'>
<phase_done name='ccp' nodes='46' live='26' stamp='118.795'/>
</phase>
<phase name='idealLoop' nodes='46' live='26' stamp='118.795'>
<phase_done name='idealLoop' nodes='46' live='26' stamp='118.795'/>
</phase>
<phase_done name='optimizer' nodes='46' live='26' stamp='118.795'/>
</phase>
<phase name='matcher' nodes='46' live='26' stamp='118.795'>
<phase_done name='matcher' nodes='24' live='24' stamp='118.795'/>
</phase>
<phase name='regalloc' nodes='29' live='29' stamp='118.795'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='31' live='31' stamp='118.796'/>
</phase>
<phase name='output' nodes='31' live='31' stamp='118.796'>
<phase_done name='output' nodes='40' live='39' stamp='118.796'/>
</phase>
<code_cache total_blobs='559' nmethods='52' adapters='427' free_code_cache='249241728'/>
<task_done success='1' nmsize='152' count='32419' stamp='118.809'/>
</task>
<task compile_id='92' method='sun/nio/cs/StreamEncoder ensureOpen ()V' bytes='18' count='33452' iicount='33452' stamp='118.857'>
<phase name='parse' nodes='3' live='3' stamp='118.857'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='47' compiler='C1' level='2' iicount='33452'/>
<klass id='849' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='847' bci='7' reason='unloaded' action='reinterpret' index='2' klass='849'/>
<parse method='847' uses='33452' stamp='118.857'>
<bc code='154' bci='4'/>
<branch target_bci='17' taken='33452' not_taken='0' cnt='33452' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='42' live='40' memory='27176' stamp='118.857'/>
</parse>
<phase_done name='parse' nodes='43' live='26' stamp='118.857'/>
</phase>
<phase name='optimizer' nodes='43' live='26' stamp='118.857'>
<phase name='ccp' nodes='43' live='26' stamp='118.857'>
<phase_done name='ccp' nodes='43' live='26' stamp='118.857'/>
</phase>
<phase name='idealLoop' nodes='43' live='26' stamp='118.857'>
<phase_done name='idealLoop' nodes='43' live='26' stamp='118.857'/>
</phase>
<phase_done name='optimizer' nodes='43' live='26' stamp='118.858'/>
</phase>
<phase name='matcher' nodes='43' live='26' stamp='118.858'>
<phase_done name='matcher' nodes='25' live='25' stamp='118.858'/>
</phase>
<phase name='regalloc' nodes='30' live='30' stamp='118.858'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='31' live='31' stamp='118.858'/>
</phase>
<phase name='output' nodes='31' live='31' stamp='118.858'>
<phase_done name='output' nodes='40' live='39' stamp='118.858'/>
</phase>
<code_cache total_blobs='562' nmethods='55' adapters='427' free_code_cache='249234560'/>
<task_done success='1' nmsize='120' count='34173' stamp='118.864'/>
</task>
<task compile_id='93' method='java/io/BufferedWriter flushBuffer ()V' bytes='53' count='34989' iicount='34989' stamp='118.878'>
<phase name='parse' nodes='3' live='3' stamp='118.878'>
<type id='737' name='void'/>
<klass id='846' name='java/io/BufferedWriter' flags='1'/>
<method id='847' holder='846' name='flushBuffer' return='737' flags='0' bytes='53' compile_id='43' compiler='C1' level='2' iicount='34994'/>
<parse method='847' uses='34994' stamp='118.878'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='6'/>
<uncommon_trap bci='6' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='8'/>
<method id='851' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='86' compiler='C2' level='4' iicount='32333'/>
<call method='851' count='32940' prof_factor='1' inline='1'/>
<klass id='853' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='851' bci='7' reason='unloaded' action='reinterpret' index='17' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='851' uses='34994' stamp='118.879'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='32333' not_taken='0' cnt='32333' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='78' live='75' memory='35920' stamp='118.879'/>
</parse>
<bc code='154' bci='15'/>
<branch target_bci='21' taken='34994' not_taken='0' cnt='34994' prob='always'/>
<uncommon_trap bci='15' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='182' bci='34'/>
<klass id='849' name='java/io/OutputStreamWriter' flags='1'/>
<klass id='835' name='[C' flags='1041'/>
<type id='735' name='int'/>
<klass id='850' name='java/io/Writer' flags='1025'/>
<method id='852' holder='850' name='write' return='737' arguments='835 735 735' flags='1025' bytes='0' iicount='1'/>
<call method='852' count='32940' prof_factor='1' virtual='1' inline='1' receiver='849' receiver_count='32940'/>
<method id='855' holder='849' name='write' return='737' arguments='835 735 735' flags='1' bytes='11' iicount='35103'/>
<call method='855' count='32940' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='34' klass='849'/>
<uncommon_trap bci='34' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='855' uses='34994' stamp='118.880'>
<bc code='182' bci='7'/>
<klass id='856' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='857' holder='856' name='write' return='737' arguments='835 735 735' flags='1' bytes='78' iicount='35108'/>
<dependency type='unique_concrete_method' ctxk='856' x='857'/>
<call method='857' count='34615' prof_factor='0.996895' inline='1'/>
<klass id='860' name='java/lang/IndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='857' bci='40' reason='unloaded' action='reinterpret' index='22' klass='860'/>
<inline_success reason='inline (hot)'/>
<parse method='857' uses='34993' stamp='118.880'>
<observe that='has_exception_handlers'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='859' holder='856' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='92' compiler='C2' level='4' iicount='34173'/>
<call method='859' count='34667' prof_factor='0.996724' inline='1'/>
<uncommon_trap method='859' bci='7' reason='unloaded' action='reinterpret' index='2' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='34993' stamp='118.881'>
<bc code='154' bci='4'/>
<branch target_bci='17' taken='34173' not_taken='0' cnt='34173' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='216' live='207' memory='66960' stamp='118.881'/>
</parse>
<bc code='155' bci='13'/>
<branch target_bci='40' taken='0' not_taken='35108' cnt='35108' prob='never'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='163' bci='19'/>
<branch target_bci='40' taken='0' not_taken='35108' cnt='35108' prob='never'/>
<bc code='155' bci='23'/>
<branch target_bci='40' taken='0' not_taken='35108' cnt='35108' prob='never'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='163' bci='31'/>
<branch target_bci='40' taken='0' not_taken='35108' cnt='35108' prob='never'/>
<uncommon_trap bci='31' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='37'/>
<branch target_bci='48' taken='35108' not_taken='0' cnt='35108' prob='always'/>
<uncommon_trap bci='37' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='154' bci='49'/>
<branch target_bci='56' taken='35108' not_taken='0' cnt='35108' prob='always'/>
<uncommon_trap bci='49' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='182' bci='60'/>
<method id='861' holder='856' name='implWrite' return='737' arguments='835 735 735' flags='0' bytes='156' iicount='35169'/>
<dependency type='unique_concrete_method' ctxk='856' x='861'/>
<call method='861' count='34667' prof_factor='0.996724' inline='1'/>
<klass id='876' name='java/lang/AssertionError' unloaded='1'/>
<uncommon_trap method='861' bci='132' reason='unloaded' action='reinterpret' index='47' klass='876'/>
<uncommon_trap method='861' bci='69' reason='unloaded' action='reinterpret' index='47' klass='876'/>
<inline_success reason='inline (hot)'/>
<parse method='861' uses='34993' stamp='118.882'>
<bc code='184' bci='3'/>
<klass id='864' name='java/nio/CharBuffer' flags='1025'/>
<method id='865' holder='864' name='wrap' return='864' arguments='835 735 735' flags='9' bytes='20' compile_id='89' compiler='C2' level='4' iicount='31586'/>
<call method='865' count='34816' prof_factor='0.994996' inline='1'/>
<uncommon_trap method='865' bci='12' reason='unloaded' action='reinterpret' index='10' klass='860'/>
<inline_success reason='inline (hot)'/>
<klass id='882' name='java/nio/HeapCharBuffer' flags='0'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<parse method='865' uses='34992' stamp='118.882'>
<observe that='has_exception_handlers'/>
<bc code='187' bci='0'/>
<klass id='881' name='java/lang/IllegalArgumentException' flags='1'/>
<dependency type='leaf_type' ctxk='881'/>
<dependency type='leaf_type' ctxk='881'/>
<bc code='183' bci='7'/>
<method id='883' holder='882' name='&lt;init&gt;' return='737' arguments='835 735 735' flags='0' bytes='14' iicount='28849'/>
<call method='883' count='28337' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='883' uses='31586' stamp='118.882'>
<bc code='183' bci='10'/>
<method id='885' holder='864' name='&lt;init&gt;' return='737' arguments='735 735 735 735 835 735' flags='0' bytes='22' iicount='28849'/>
<call method='885' count='28337' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<parse method='885' uses='28849' stamp='118.883'>
<bc code='183' bci='6'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='887' holder='822' name='&lt;init&gt;' return='737' arguments='735 735 735 735' flags='0' bytes='121' compile_id='87' compiler='C2' level='4' iicount='29723'/>
<call method='887' count='28337' prof_factor='1' inline='1'/>
<uncommon_trap method='887' bci='74' reason='unloaded' action='reinterpret' index='5' klass='881'/>
<uncommon_trap method='887' bci='19' reason='unloaded' action='reinterpret' index='5' klass='881'/>
<inline_success reason='inline (hot)'/>
<parse method='887' uses='28849' stamp='118.883'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='889' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='889' count='26817' prof_factor='0.970595' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='889' uses='28849' stamp='118.883'>
<parse_done nodes='422' live='407' memory='124232' stamp='118.883'/>
</parse>
<bc code='156' bci='16'/>
<branch target_bci='47' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<bc code='182' bci='55'/>
<method id='890' holder='822' name='limit' return='822' arguments='735' flags='17' bytes='53' compile_id='88' compiler='C2' level='4' iicount='29723'/>
<call method='890' count='26817' prof_factor='0.970595' inline='1'/>
<uncommon_trap method='890' bci='12' reason='unloaded' action='reinterpret' index='5' klass='881'/>
<inline_success reason='inline (hot)'/>
<parse method='890' uses='28849' stamp='118.884'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='29723' cnt='29723' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='9' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='30'/>
<branch target_bci='38' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='30' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='43'/>
<branch target_bci='51' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='529' live='509' memory='167440' stamp='118.885'/>
</parse>
<bc code='182' bci='61'/>
<method id='891' holder='822' name='position' return='822' arguments='735' flags='17' bytes='40' compile_id='58' compiler='C2' level='4' iicount='5786'/>
<call method='891' count='26817' prof_factor='0.970595' inline='1'/>
<uncommon_trap method='891' bci='12' reason='unloaded' action='reinterpret' index='5' klass='881'/>
<inline_success reason='inline (hot)'/>
<parse method='891' uses='28849' stamp='118.885'>
<bc code='163' bci='5'/>
<branch target_bci='12' taken='0' not_taken='5786' cnt='5786' prob='never'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='156' bci='9'/>
<branch target_bci='20' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<bc code='164' bci='25'/>
<branch target_bci='33' taken='5786' not_taken='0' cnt='5786' prob='always'/>
<parse_done nodes='585' live='563' memory='185112' stamp='118.886'/>
</parse>
<bc code='155' bci='66'/>
<branch target_bci='120' taken='29723' not_taken='0' cnt='29723' prob='always'/>
<parse_done nodes='602' live='579' memory='188896' stamp='118.886'/>
</parse>
<parse_done nodes='630' live='606' memory='194440' stamp='118.886'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<parse_done nodes='630' live='605' memory='194536' stamp='118.886'/>
</parse>
<bc code='187' bci='12'/>
<uncommon_trap bci='12' reason='unloaded' action='reinterpret' index='10'/>
<parse_done nodes='643' live='616' memory='198032' stamp='118.886'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<bc code='153' bci='12'/>
<branch target_bci='22' taken='35168' not_taken='0' cnt='35168' prob='always'/>
<uncommon_trap bci='12' reason='unstable_if' action='reinterpret' comment='taken always'/>
<uncommon_trap bci='22' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='22' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='24'/>
<type id='729' name='boolean'/>
<method id='866' holder='822' name='hasRemaining' return='729' flags='17' bytes='17' compile_id='91' compiler='C2' level='4' iicount='32419'/>
<call method='866' count='34816' prof_factor='0.994996' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='866' uses='34992' stamp='118.887'>
<bc code='162' bci='8'/>
<branch target_bci='15' taken='0' not_taken='32419' cnt='32419' prob='never'/>
<uncommon_trap bci='8' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='724' live='692' memory='216400' stamp='118.887'/>
</parse>
<bc code='153' bci='27'/>
<branch target_bci='155' taken='0' not_taken='35168' cnt='35168' prob='never'/>
<uncommon_trap bci='30' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='30' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='180' bci='31'/>
<klass id='867' name='java/nio/charset/CharsetEncoder' flags='1025'/>
<klass id='897' name='sun/nio/cs/UTF_8$Encoder' flags='26'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='867' x='897'/>
<bc code='182' bci='41'/>
<klass id='869' name='java/nio/charset/CoderResult' flags='1'/>
<klass id='868' name='java/nio/ByteBuffer' flags='1025'/>
<method id='870' holder='867' name='encode' return='869' arguments='864 868 729' flags='17' bytes='285' iicount='35305'/>
<call method='870' count='34816' prof_factor='0.994996' inline='1'/>
<uncommon_trap method='870' bci='274' reason='unloaded' action='reinterpret' index='60' klass='876'/>
<uncommon_trap method='870' bci='177' reason='unloaded' action='reinterpret' index='60' klass='876'/>
<uncommon_trap method='870' bci='274' reason='unloaded' action='reinterpret' index='60' klass='876'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='867' x='897'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<parse method='870' uses='34992' stamp='118.890'>
<observe that='has_exception_handlers'/>
<uncommon_trap bci='41' reason='null_check' action='maybe_recompile'/>
<bc code='153' bci='1'/>
<branch target_bci='8' taken='35525' not_taken='0' cnt='35525' prob='always'/>
<bc code='153' bci='15'/>
<branch target_bci='48' taken='0' not_taken='35525' cnt='35525' prob='never'/>
<uncommon_trap bci='15' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='159' bci='23'/>
<branch target_bci='48' taken='35525' not_taken='0' cnt='35525' prob='always'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken always'/>
<uncommon_trap bci='54' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='54' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='57'/>
<method id='913' holder='897' name='encodeLoop' return='869' arguments='864 868' flags='20' bytes='28' iicount='36084'/>
<dependency type='unique_concrete_method' ctxk='897' x='913'/>
<call method='913' count='35525' prof_factor='0.991134' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<parse method='913' uses='35210' stamp='118.892'>
<bc code='182' bci='1'/>
<method id='914' holder='864' name='hasArray' return='729' flags='17' bytes='20' iicount='36088'/>
<call method='914' count='35586' prof_factor='0.975779' inline='1'/>
<inline_success reason='inline (hot)'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<parse method='914' uses='35209' stamp='118.892'>
<bc code='198' bci='4'/>
<branch target_bci='18' taken='0' not_taken='36088' cnt='36088' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='154' bci='11'/>
<branch target_bci='18' taken='0' not_taken='36088' cnt='36088' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='923' live='881' memory='263888' stamp='118.893'/>
</parse>
<bc code='153' bci='4'/>
<branch target_bci='21' taken='0' not_taken='36083' cnt='36083' prob='never'/>
<bc code='182' bci='8'/>
<method id='916' holder='868' name='hasArray' return='729' flags='17' bytes='20' iicount='36093'/>
<call method='916' count='35586' prof_factor='0.975779' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='916' uses='35209' stamp='118.893'>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<bc code='198' bci='4'/>
<branch target_bci='18' taken='0' not_taken='36093' cnt='36093' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='154' bci='11'/>
<branch target_bci='18' taken='0' not_taken='36093' cnt='36093' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='988' live='942' memory='283408' stamp='118.894'/>
</parse>
<bc code='153' bci='11'/>
<branch target_bci='21' taken='0' not_taken='36083' cnt='36083' prob='never'/>
<bc code='183' bci='17'/>
<method id='917' holder='897' name='encodeArrayLoop' return='869' arguments='864 868' flags='2' bytes='489' compile_id='75' compiler='C2' level='4' iicount='14477'/>
<call method='917' count='35586' prof_factor='0.975779' inline='1'/>
<klass id='933' name='sun/nio/cs/Surrogate$Parser' unloaded='1'/>
<uncommon_trap method='917' bci='264' reason='unloaded' action='reinterpret' index='22' klass='933'/>
<uncommon_trap method='917' bci='243' reason='unloaded' action='reinterpret' index='22' klass='933'/>
<inline_fail reason='hot method too big'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<direct_call bci='17'/>
<parse_done nodes='1013' live='966' memory='292472' stamp='118.894'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<klass id='898' name='java/nio/BufferUnderflowException' unloaded='1'/>
<uncommon_trap bci='65' reason='unloaded' action='reinterpret' klass='898' comment='!loaded exception'/>
<klass id='899' name='java/nio/BufferOverflowException' unloaded='1'/>
<uncommon_trap bci='77' reason='unloaded' action='reinterpret' klass='899' comment='!loaded exception'/>
<uncommon_trap bci='62' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='62' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='182' bci='91'/>
<method id='872' holder='869' name='isOverflow' return='729' flags='1' bytes='14' iicount='35307'/>
<dependency type='unique_concrete_method' ctxk='869' x='872'/>
<call method='872' count='35525' prof_factor='0.991134' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='872' uses='35210' stamp='118.897'>
<uncommon_trap bci='91' reason='null_check' action='maybe_recompile'/>
<bc code='160' bci='5'/>
<branch target_bci='12' taken='35989' not_taken='0' cnt='35989' prob='always'/>
<uncommon_trap bci='5' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1122' live='1067' memory='342224' stamp='118.897'/>
</parse>
<bc code='153' bci='94'/>
<branch target_bci='100' taken='35525' not_taken='0' cnt='35525' prob='always'/>
<bc code='182' bci='102'/>
<method id='871' holder='869' name='isUnderflow' return='729' flags='1' bytes='13' compile_id='81' compiler='C2' level='4' iicount='33616'/>
<dependency type='unique_concrete_method' ctxk='869' x='871'/>
<call method='871' count='35525' prof_factor='0.991134' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='871' uses='35210' stamp='118.898'>
<bc code='154' bci='4'/>
<branch target_bci='11' taken='0' not_taken='33616' cnt='33616' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='1158' live='1101' memory='350304' stamp='118.898'/>
</parse>
<bc code='153' bci='105'/>
<branch target_bci='134' taken='0' not_taken='35525' cnt='35525' prob='never'/>
<bc code='153' bci='109'/>
<branch target_bci='131' taken='35525' not_taken='0' cnt='35525' prob='always'/>
<parse_done nodes='1176' live='1118' memory='353784' stamp='118.898'/>
</parse>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='867' x='897'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<bc code='182' bci='48'/>
<dependency type='unique_concrete_method' ctxk='869' x='871'/>
<call method='871' count='34816' prof_factor='0.994996' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='871' uses='34992' stamp='118.898'>
<bc code='154' bci='4'/>
<branch target_bci='11' taken='0' not_taken='33616' cnt='33616' prob='never'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken never'/>
<parse_done nodes='1212' live='1152' memory='361888' stamp='118.898'/>
</parse>
<bc code='153' bci='51'/>
<branch target_bci='108' taken='0' not_taken='35168' cnt='35168' prob='never'/>
<bc code='154' bci='57'/>
<branch target_bci='82' taken='35168' not_taken='0' cnt='35168' prob='always'/>
<bc code='182' bci='84'/>
<method id='877' holder='822' name='remaining' return='735' flags='17' bytes='20' iicount='35314'/>
<call method='877' count='34816' prof_factor='0.994996' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='877' uses='34992' stamp='118.899'>
<bc code='158' bci='11'/>
<branch target_bci='18' taken='36129' not_taken='0' cnt='36129' prob='always'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='1258' live='1196' memory='370152' stamp='118.899'/>
</parse>
<bc code='160' bci='88'/>
<branch target_bci='155' taken='35168' not_taken='0' cnt='35168' prob='always'/>
<parse_done nodes='1268' live='1205' memory='372064' stamp='118.899'/>
</parse>
<bc code='191' bci='76'/>
<uncommon_trap bci='76' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1324' live='1259' memory='383184' stamp='118.899'/>
</parse>
<parse_done nodes='1329' live='1263' memory='385000' stamp='118.899'/>
</parse>
<bc code='191' bci='51'/>
<uncommon_trap bci='51' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1381' live='1313' memory='397272' stamp='118.900'/>
</parse>
<phase_done name='parse' nodes='1383' live='643' stamp='118.900'/>
</phase>
<phase name='optimizer' nodes='1383' live='643' stamp='118.900'>
<phase name='idealLoop' nodes='1411' live='497' stamp='118.903'>
<phase_done name='idealLoop' nodes='1411' live='431' stamp='118.904'/>
</phase>
<phase name='escapeAnalysis' nodes='1411' live='431' stamp='118.904'>
<phase name='connectionGraph' nodes='1412' live='432' stamp='118.904'>
<phase_done name='connectionGraph' nodes='1412' live='432' stamp='118.904'/>
</phase>
<phase_done name='escapeAnalysis' nodes='1412' live='432' stamp='118.904'/>
</phase>
<phase name='idealLoop' nodes='1412' live='432' stamp='118.904'>
<phase_done name='idealLoop' nodes='1415' live='413' stamp='118.905'/>
</phase>
<phase name='idealLoop' nodes='1415' live='413' stamp='118.905'>
<phase_done name='idealLoop' nodes='1415' live='413' stamp='118.906'/>
</phase>
<phase name='ccp' nodes='1415' live='413' stamp='118.916'>
<phase_done name='ccp' nodes='1415' live='413' stamp='118.917'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='93' class_id='lock' kind='?' stamp='118.923'>
<jvms bci='6' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='93' class_id='lock' kind='?' stamp='118.923'>
<jvms bci='6' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='93' class_id='lock' kind='?' stamp='118.923'>
<jvms bci='7' method='857'/>
<jvms bci='7' method='855'/>
<jvms bci='34' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='93' class_id='lock' kind='?' stamp='118.923'>
<jvms bci='7' method='857'/>
<jvms bci='7' method='855'/>
<jvms bci='34' method='847'/>
</eliminate_lock_INLR_3>
<comment that='1/0 subword/long to 1/0 int/long'/>
<phase_done name='optimizer' nodes='1731' live='652' stamp='118.926'/>
</phase>
<phase name='matcher' nodes='1731' live='652' stamp='118.926'>
<phase_done name='matcher' nodes='628' live='628' stamp='118.929'/>
</phase>
<phase name='regalloc' nodes='806' live='798' stamp='118.932'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='1314' live='1124' stamp='118.998'/>
</phase>
<phase name='output' nodes='1318' live='1128' stamp='118.999'>
<phase_done name='output' nodes='1354' live='1160' stamp='119.022'/>
</phase>
<dependency type='leaf_type' ctxk='881'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='864' x='882'/>
<dependency type='abstract_with_unique_concrete_subtype' ctxk='867' x='897'/>
<dependency type='unique_concrete_method' ctxk='856' x='857'/>
<dependency type='unique_concrete_method' ctxk='856' x='861'/>
<dependency type='unique_concrete_method' ctxk='897' x='913'/>
<dependency type='unique_concrete_method' ctxk='869' x='872'/>
<dependency type='unique_concrete_method' ctxk='869' x='871'/>
<code_cache total_blobs='570' nmethods='61' adapters='427' free_code_cache='249200704'/>
<task_done success='1' nmsize='3432' count='43432' inlined_bytes='971' stamp='119.112'/>
</task>
<task compile_id='97' method='java/io/OutputStreamWriter flushBuffer ()V' bytes='8' count='48161' iicount='48161' stamp='119.171'>
<phase name='parse' nodes='3' live='3' stamp='119.171'>
<type id='737' name='void'/>
<klass id='846' name='java/io/OutputStreamWriter' flags='1'/>
<method id='847' holder='846' name='flushBuffer' return='737' flags='0' bytes='8' compile_id='50' compiler='C1' level='2' iicount='48162'/>
<parse method='847' uses='48162' stamp='119.171'>
<bc code='182' bci='4'/>
<klass id='849' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='850' holder='849' name='flushBuffer' return='737' flags='1' bytes='42' compile_id='51' compiler='C1' level='2' iicount='48170'/>
<dependency type='unique_concrete_method' ctxk='849' x='850'/>
<call method='850' count='46113' prof_factor='1' inline='1'/>
<klass id='853' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='850' bci='21' reason='unloaded' action='reinterpret' index='2' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='48162' stamp='119.172'>
<observe that='has_exception_handlers'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='194' bci='6'/>
<uncommon_trap bci='6' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='8'/>
<type id='729' name='boolean'/>
<method id='852' holder='849' name='isOpen' return='729' flags='2' bytes='5' compile_id='15' compiler='C1' level='1' iicount='31958'/>
<call method='852' count='47649' prof_factor='0.999834' inline='1'/>
<inline_success reason='accessor'/>
<parse method='852' uses='48162' stamp='119.172'>
<parse_done nodes='97' live='94' memory='38792' stamp='119.172'/>
</parse>
<bc code='153' bci='11'/>
<branch target_bci='21' taken='0' not_taken='48170' cnt='48170' prob='never'/>
<uncommon_trap bci='11' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='15'/>
<method id='854' holder='849' name='implFlushBuffer' return='737' flags='0' bytes='15' iicount='48161'/>
<dependency type='unique_concrete_method' ctxk='849' x='854'/>
<call method='854' count='47649' prof_factor='0.999834' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='854' uses='48162' stamp='119.172'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='858' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='858' count='47649' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='858' uses='48161' stamp='119.173'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='149' live='143' memory='51840' stamp='119.173'/>
</parse>
<bc code='158' bci='7'/>
<branch target_bci='14' taken='0' not_taken='48161' cnt='48161' prob='never'/>
<uncommon_trap bci='7' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='183' bci='11'/>
<method id='859' holder='849' name='writeBytes' return='737' flags='2' bytes='132' iicount='48281'/>
<call method='859' count='47649' prof_factor='1' inline='1'/>
<klass id='865' name='java/nio/channels/WritableByteChannel' unloaded='1'/>
<uncommon_trap method='859' bci='75' reason='unloaded' action='reinterpret' index='225' klass='865'/>
<klass id='871' name='java/lang/AssertionError' unloaded='1'/>
<uncommon_trap method='859' bci='35' reason='unloaded' action='reinterpret' index='47' klass='871'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='48161' stamp='119.189'>
<bc code='182' bci='4'/>
<method id='862' holder='822' name='flip' return='822' flags='17' bytes='20' iicount='48358'/>
<call method='862' count='49014' prof_factor='0.997515' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='862' uses='48892' stamp='119.189'>
<parse_done nodes='200' live='192' memory='61576' stamp='119.190'/>
</parse>
<bc code='182' bci='12'/>
<method id='863' holder='822' name='limit' return='735' flags='17' bytes='5' compile_id='11' compiler='C1' level='1' iicount='2388'/>
<call method='863' count='49014' prof_factor='0.997515' inline='1'/>
<inline_success reason='accessor'/>
<parse method='863' uses='48892' stamp='119.190'>
<parse_done nodes='222' live='213' memory='66872' stamp='119.190'/>
</parse>
<bc code='182' bci='20'/>
<call method='858' count='49014' prof_factor='0.997515' inline='1'/>
<inline_success reason='accessor'/>
<parse method='858' uses='48892' stamp='119.190'>
<parse_done nodes='244' live='234' memory='71392' stamp='119.190'/>
</parse>
<bc code='154' bci='27'/>
<branch target_bci='43' taken='49014' not_taken='0' cnt='49014' prob='always'/>
<bc code='163' bci='45'/>
<branch target_bci='54' taken='0' not_taken='49014' cnt='49014' prob='never'/>
<uncommon_trap bci='45' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='158' bci='57'/>
<branch target_bci='123' taken='0' not_taken='49014' cnt='49014' prob='never'/>
<uncommon_trap bci='57' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='180' bci='61'/>
<assert_null reason='field' klass='865'/>
<uncommon_trap bci='64' reason='null_assert' action='make_not_entrant' comment='assert_null'/>
<bc code='198' bci='64'/>
<branch target_bci='99' taken='49014' not_taken='0' cnt='49014' prob='always'/>
<bc code='182' bci='107'/>
<klass id='838' name='[B' flags='1041'/>
<klass id='857' name='java/nio/ByteBuffer' flags='1025'/>
<method id='867' holder='857' name='array' return='838' flags='17' bytes='35' compile_id='85' compiler='C2' level='4' iicount='33658'/>
<call method='867' count='49014' prof_factor='0.997515' inline='1'/>
<klass id='877' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='867' bci='22' reason='unloaded' action='reinterpret' index='26' klass='877'/>
<klass id='878' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='867' bci='7' reason='unloaded' action='reinterpret' index='33' klass='878'/>
<inline_success reason='inline (hot)'/>
<parse method='867' uses='48892' stamp='119.191'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='365' live='349' memory='103400' stamp='119.191'/>
</parse>
<bc code='182' bci='114'/>
<method id='868' holder='857' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='44' compiler='C2' level='4' iicount='16676'/>
<call method='868' count='49014' prof_factor='0.997515' inline='1'/>
<uncommon_trap method='868' bci='22' reason='unloaded' action='reinterpret' index='26' klass='877'/>
<uncommon_trap method='868' bci='7' reason='unloaded' action='reinterpret' index='33' klass='878'/>
<inline_success reason='inline (hot)'/>
<parse method='868' uses='48892' stamp='119.191'>
<uncommon_trap bci='114' reason='null_check' action='maybe_recompile'/>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='16676' not_taken='0' cnt='16676' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='16676' not_taken='0' cnt='16676' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='427' live='407' memory='118728' stamp='119.192'/>
</parse>
<bc code='182' bci='120'/>
<klass id='873' name='java/io/PrintStream' flags='1'/>
<klass id='866' name='java/io/OutputStream' flags='1025'/>
<method id='869' holder='866' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='869' count='49014' prof_factor='0.997515' virtual='1' inline='1' receiver='873' receiver_count='49014'/>
<method id='881' holder='873' name='write' return='737' arguments='838 735 735' flags='1' bytes='69' iicount='49696'/>
<call method='881' count='49014' prof_factor='0.997515' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='120' klass='873'/>
<uncommon_trap bci='120' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='120' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='881' uses='48892' stamp='119.193'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='6'/>
<method id='883' holder='873' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='883' count='49184' prof_factor='0.983822' inline='1'/>
<uncommon_trap method='883' bci='7' reason='unloaded' action='reinterpret' index='32' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='883' uses='48892' stamp='119.193'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='506' live='482' memory='138536' stamp='119.193'/>
</parse>
<bc code='182' bci='16'/>
<klass id='887' name='java/io/BufferedOutputStream' flags='1'/>
<call method='869' count='49184' prof_factor='0.983822' virtual='1' inline='1' receiver='887' receiver_count='49184'/>
<method id='889' holder='887' name='write' return='737' arguments='838 735 735' flags='33' bytes='67' iicount='49696'/>
<call method='889' count='49184' prof_factor='0.983822' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='16' klass='887'/>
<uncommon_trap bci='16' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='889' uses='48892' stamp='119.201'>
<bc code='190' bci='5'/>
<uncommon_trap bci='5' reason='null_check' action='maybe_recompile'/>
<bc code='161' bci='6'/>
<branch target_bci='24' taken='49696' not_taken='0' cnt='49696' prob='always'/>
<uncommon_trap bci='6' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='35'/>
<branch target_bci='42' taken='49696' not_taken='0' cnt='49696' prob='always'/>
<uncommon_trap bci='35' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='53'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='890' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='890' count='49184' prof_factor='0.983822' inline='1'/>
<uncommon_trap bci='53' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='728' live='698' memory='197488' stamp='119.202'/>
</parse>
<bc code='153' bci='23'/>
<branch target_bci='33' taken='0' not_taken='49696' cnt='49696' prob='never'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='30'/>
<method id='885' holder='866' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='885' count='49184' prof_factor='0.983822' virtual='1' inline='1' receiver='887' receiver_count='49184'/>
<method id='893' holder='887' name='flush' return='737' flags='33' bytes='12' compile_id='83' compiler='C2' level='4' iicount='32398'/>
<call method='893' count='49184' prof_factor='0.983822' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='30' klass='887'/>
<uncommon_trap bci='30' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='30' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='893' uses='48892' stamp='119.203'>
<bc code='183' bci='1'/>
<method id='891' holder='887' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23668'/>
<call method='891' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='891' uses='32398' stamp='119.203'>
<bc code='158' bci='4'/>
<branch target_bci='28' taken='7890' not_taken='15778' cnt='23668' prob='0.333362'/>
<bc code='182' bci='20'/>
<klass id='895' name='java/io/FileOutputStream' flags='1'/>
<call method='869' count='15437' prof_factor='1' virtual='1' inline='1' receiver='895' receiver_count='15437'/>
<method id='897' holder='895' name='write' return='737' arguments='838 735 735' flags='1' bytes='12' iicount='21599'/>
<call method='897' count='15437' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='20' klass='895'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='20' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='897' uses='15778' stamp='119.204'>
<bc code='183' bci='8'/>
<method id='898' holder='895' name='writeBytes' return='737' arguments='838 735 735 729' flags='258' bytes='0' compile_id='60' compile_kind='c2n' level='0' iicount='1920'/>
<call method='898' count='21087' prof_factor='0.730497' inline='1'/>
<inline_fail reason='native method'/>
<direct_call bci='8'/>
<parse_done nodes='884' live='848' memory='236136' stamp='119.205'/>
</parse>
<parse_done nodes='893' live='856' memory='239424' stamp='119.205'/>
</parse>
<bc code='182' bci='8'/>
<call method='885' count='23156' prof_factor='1' virtual='1' inline='1' receiver='895' receiver_count='23156'/>
<call method='885' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='8' klass='895'/>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='8' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='885' uses='32398' stamp='119.206'>
<parse_done nodes='939' live='899' memory='250752' stamp='119.206'/>
</parse>
<parse_done nodes='959' live='918' memory='254472' stamp='119.206'/>
</parse>
<bc code='191' bci='46'/>
<uncommon_trap bci='46' reason='null_check' action='maybe_recompile'/>
<klass id='882' name='java/io/InterruptedIOException' unloaded='1'/>
<uncommon_trap bci='50' reason='unloaded' action='reinterpret' klass='882' comment='!loaded exception'/>
<uncommon_trap bci='61' reason='unloaded' action='reinterpret' klass='853' comment='!loaded exception'/>
<parse_done nodes='1039' live='993' memory='299352' stamp='119.207'/>
</parse>
<bc code='182' bci='127'/>
<method id='864' holder='822' name='clear' return='822' flags='17' bytes='20' compile_id='61' compiler='C1' level='2' iicount='48364'/>
<call method='864' count='49013' prof_factor='0.997515' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='864' uses='48891' stamp='119.208'>
<uncommon_trap bci='127' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1081' live='1033' memory='308056' stamp='119.208'/>
</parse>
<parse_done nodes='1085' live='1036' memory='309528' stamp='119.208'/>
</parse>
<parse_done nodes='1092' live='1042' memory='311448' stamp='119.208'/>
</parse>
<bc code='191' bci='40'/>
<uncommon_trap bci='40' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='1142' live='1090' memory='321040' stamp='119.208'/>
</parse>
<parse_done nodes='1147' live='1094' memory='323288' stamp='119.208'/>
</parse>
<phase_done name='parse' nodes='1149' live='616' stamp='119.209'/>
</phase>
<phase name='optimizer' nodes='1149' live='616' stamp='119.209'>
<phase name='idealLoop' nodes='1181' live='539' stamp='119.211'>
<phase_done name='idealLoop' nodes='1181' live='539' stamp='119.212'/>
</phase>
<phase name='escapeAnalysis' nodes='1181' live='539' stamp='119.212'>
<phase name='connectionGraph' nodes='1182' live='540' stamp='119.212'>
<phase_done name='connectionGraph' nodes='1182' live='540' stamp='119.212'/>
</phase>
<phase_done name='escapeAnalysis' nodes='1182' live='540' stamp='119.212'/>
</phase>
<phase name='idealLoop' nodes='1182' live='540' stamp='119.212'>
<phase_done name='idealLoop' nodes='1212' live='543' stamp='119.214'/>
</phase>
<phase name='idealLoop' nodes='1212' live='543' stamp='119.214'>
<phase_done name='idealLoop' nodes='1212' live='543' stamp='119.217'/>
</phase>
<phase name='ccp' nodes='1212' live='543' stamp='119.219'>
<phase_done name='ccp' nodes='1212' live='543' stamp='119.219'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='6' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='6' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='4' method='881'/>
<jvms bci='120' method='859'/>
<jvms bci='11' method='854'/>
<jvms bci='15' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='4' method='881'/>
<jvms bci='120' method='859'/>
<jvms bci='11' method='854'/>
<jvms bci='15' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='-1' method='889'/>
<jvms bci='16' method='881'/>
<jvms bci='120' method='859'/>
<jvms bci='11' method='854'/>
<jvms bci='15' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='-1' method='889'/>
<jvms bci='16' method='881'/>
<jvms bci='120' method='859'/>
<jvms bci='11' method='854'/>
<jvms bci='15' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='-1' method='893'/>
<jvms bci='30' method='881'/>
<jvms bci='120' method='859'/>
<jvms bci='11' method='854'/>
<jvms bci='15' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='97' class_id='lock' kind='?' stamp='119.221'>
<jvms bci='-1' method='893'/>
<jvms bci='30' method='881'/>
<jvms bci='120' method='859'/>
<jvms bci='11' method='854'/>
<jvms bci='15' method='850'/>
<jvms bci='4' method='847'/>
</eliminate_lock_INLR_3>
<phase_done name='optimizer' nodes='1670' live='903' stamp='119.224'/>
</phase>
<phase name='matcher' nodes='1670' live='903' stamp='119.224'>
<phase_done name='matcher' nodes='865' live='865' stamp='119.228'/>
</phase>
<phase name='regalloc' nodes='1142' live='1132' stamp='119.233'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='1701' live='1492' stamp='119.283'/>
</phase>
<phase name='output' nodes='1713' live='1504' stamp='119.283'>
<phase_done name='output' nodes='1754' live='1535' stamp='119.320'/>
</phase>
<dependency type='unique_concrete_method' ctxk='849' x='850'/>
<dependency type='unique_concrete_method' ctxk='849' x='854'/>
<code_cache total_blobs='578' nmethods='71' adapters='427' free_code_cache='249179328'/>
<task_done success='1' nmsize='4616' count='56830' inlined_bytes='605' stamp='119.410'/>
</task>
<task compile_id='100' method='sun/nio/cs/StreamEncoder writeBytes ()V' bytes='132' count='56830' iicount='56830' stamp='119.417'>
<phase name='parse' nodes='3' live='3' stamp='119.417'>
<type id='737' name='void'/>
<klass id='846' name='sun/nio/cs/StreamEncoder' flags='1'/>
<method id='847' holder='846' name='writeBytes' return='737' flags='2' bytes='132' compile_id='53' compiler='C1' level='2' iicount='56830'/>
<klass id='855' name='java/nio/channels/WritableByteChannel' unloaded='1'/>
<uncommon_trap method='847' bci='75' reason='unloaded' action='reinterpret' index='225' klass='855'/>
<klass id='861' name='java/lang/AssertionError' unloaded='1'/>
<uncommon_trap method='847' bci='35' reason='unloaded' action='reinterpret' index='47' klass='861'/>
<parse method='847' uses='56830' stamp='119.417'>
<bc code='182' bci='4'/>
<klass id='822' name='java/nio/Buffer' flags='1025'/>
<method id='851' holder='822' name='flip' return='822' flags='17' bytes='20' iicount='51233'/>
<call method='851' count='50721' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='851' uses='56830' stamp='119.417'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='66' live='64' memory='33000' stamp='119.418'/>
</parse>
<bc code='182' bci='12'/>
<type id='735' name='int'/>
<method id='852' holder='822' name='limit' return='735' flags='17' bytes='5' compile_id='11' compiler='C1' level='1' iicount='2388'/>
<call method='852' count='50721' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='852' uses='56830' stamp='119.418'>
<parse_done nodes='88' live='85' memory='38104' stamp='119.418'/>
</parse>
<bc code='182' bci='20'/>
<method id='853' holder='822' name='position' return='735' flags='17' bytes='5' compile_id='10' compiler='C1' level='1' iicount='491'/>
<call method='853' count='50721' prof_factor='1' inline='1'/>
<inline_success reason='accessor'/>
<parse method='853' uses='56830' stamp='119.418'>
<parse_done nodes='110' live='106' memory='42240' stamp='119.418'/>
</parse>
<bc code='154' bci='27'/>
<branch target_bci='43' taken='56830' not_taken='0' cnt='56830' prob='always'/>
<bc code='163' bci='45'/>
<branch target_bci='54' taken='0' not_taken='56830' cnt='56830' prob='never'/>
<uncommon_trap bci='45' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='158' bci='57'/>
<branch target_bci='123' taken='0' not_taken='56830' cnt='56830' prob='never'/>
<uncommon_trap bci='57' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='180' bci='61'/>
<assert_null reason='field' klass='855'/>
<uncommon_trap bci='64' reason='null_assert' action='make_not_entrant' comment='assert_null'/>
<bc code='198' bci='64'/>
<branch target_bci='99' taken='56830' not_taken='0' cnt='56830' prob='always'/>
<bc code='182' bci='107'/>
<klass id='838' name='[B' flags='1041'/>
<klass id='850' name='java/nio/ByteBuffer' flags='1025'/>
<method id='857' holder='850' name='array' return='838' flags='17' bytes='35' compile_id='85' compiler='C2' level='4' iicount='33658'/>
<call method='857' count='50721' prof_factor='1' inline='1'/>
<klass id='867' name='java/nio/ReadOnlyBufferException' unloaded='1'/>
<uncommon_trap method='857' bci='22' reason='unloaded' action='reinterpret' index='26' klass='867'/>
<klass id='868' name='java/lang/UnsupportedOperationException' unloaded='1'/>
<uncommon_trap method='857' bci='7' reason='unloaded' action='reinterpret' index='33' klass='868'/>
<inline_success reason='inline (hot)'/>
<parse method='857' uses='56830' stamp='119.419'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='33658' not_taken='0' cnt='33658' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='233' live='223' memory='68840' stamp='119.419'/>
</parse>
<bc code='182' bci='114'/>
<method id='858' holder='850' name='arrayOffset' return='735' flags='17' bytes='35' compile_id='44' compiler='C2' level='4' iicount='16676'/>
<call method='858' count='50721' prof_factor='1' inline='1'/>
<uncommon_trap method='858' bci='22' reason='unloaded' action='reinterpret' index='26' klass='867'/>
<uncommon_trap method='858' bci='7' reason='unloaded' action='reinterpret' index='33' klass='868'/>
<inline_success reason='inline (hot)'/>
<parse method='858' uses='56830' stamp='119.420'>
<bc code='199' bci='4'/>
<branch target_bci='15' taken='16676' not_taken='0' cnt='16676' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='153' bci='19'/>
<branch target_bci='30' taken='16676' not_taken='0' cnt='16676' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='286' live='273' memory='87528' stamp='119.420'/>
</parse>
<bc code='182' bci='120'/>
<klass id='849' name='java/io/PrintStream' flags='1'/>
<klass id='856' name='java/io/OutputStream' flags='1025'/>
<method id='859' holder='856' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='859' count='50721' prof_factor='1' virtual='1' inline='1' receiver='849' receiver_count='50721'/>
<method id='871' holder='849' name='write' return='737' arguments='838 735 735' flags='1' bytes='69' iicount='56830'/>
<call method='871' count='50721' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='120' klass='849'/>
<uncommon_trap bci='120' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='120' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='871' uses='56830' stamp='119.421'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='6'/>
<method id='874' holder='849' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='874' count='56318' prof_factor='1' inline='1'/>
<klass id='873' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='874' bci='7' reason='unloaded' action='reinterpret' index='32' klass='873'/>
<inline_success reason='inline (hot)'/>
<parse method='874' uses='56830' stamp='119.421'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='365' live='348' memory='106160' stamp='119.421'/>
</parse>
<bc code='182' bci='16'/>
<klass id='878' name='java/io/BufferedOutputStream' flags='1'/>
<call method='859' count='56318' prof_factor='1' virtual='1' inline='1' receiver='878' receiver_count='56318'/>
<method id='880' holder='878' name='write' return='737' arguments='838 735 735' flags='33' bytes='67' iicount='56830'/>
<call method='880' count='56318' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='16' klass='878'/>
<uncommon_trap bci='16' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='880' uses='56830' stamp='119.422'>
<bc code='190' bci='5'/>
<uncommon_trap bci='5' reason='null_check' action='maybe_recompile'/>
<bc code='161' bci='6'/>
<branch target_bci='24' taken='56830' not_taken='0' cnt='56830' prob='always'/>
<uncommon_trap bci='6' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='35'/>
<branch target_bci='42' taken='56830' not_taken='0' cnt='56830' prob='always'/>
<uncommon_trap bci='35' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='53'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='881' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='881' count='56318' prof_factor='1' inline='1'/>
<intrinsic id='_arraycopy' nodes='80'/>
<parse_done nodes='576' live='554' memory='163296' stamp='119.423'/>
</parse>
<bc code='153' bci='23'/>
<branch target_bci='33' taken='0' not_taken='56830' cnt='56830' prob='never'/>
<uncommon_trap bci='23' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='30'/>
<method id='876' holder='856' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='876' count='56318' prof_factor='1' virtual='1' inline='1' receiver='878' receiver_count='56318'/>
<method id='884' holder='878' name='flush' return='737' flags='33' bytes='12' compile_id='83' compiler='C2' level='4' iicount='32398'/>
<call method='884' count='56318' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='30' klass='878'/>
<uncommon_trap bci='30' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='30' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='884' uses='56830' stamp='119.424'>
<bc code='183' bci='1'/>
<method id='882' holder='878' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23668'/>
<call method='882' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='882' uses='32398' stamp='119.424'>
<bc code='158' bci='4'/>
<branch target_bci='28' taken='7890' not_taken='15778' cnt='23668' prob='0.333362'/>
<bc code='182' bci='20'/>
<klass id='886' name='java/io/FileOutputStream' flags='1'/>
<call method='859' count='15437' prof_factor='1' virtual='1' inline='1' receiver='886' receiver_count='15437'/>
<method id='888' holder='886' name='write' return='737' arguments='838 735 735' flags='1' bytes='12' iicount='21599'/>
<call method='888' count='15437' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='20' klass='886'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='20' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='888' uses='15778' stamp='119.425'>
<bc code='183' bci='8'/>
<type id='729' name='boolean'/>
<method id='889' holder='886' name='writeBytes' return='737' arguments='838 735 735 729' flags='258' bytes='0' compile_id='60' compile_kind='c2n' level='0' iicount='1920'/>
<call method='889' count='21087' prof_factor='0.730497' inline='1'/>
<inline_fail reason='native method'/>
<direct_call bci='8'/>
<parse_done nodes='732' live='704' memory='196896' stamp='119.425'/>
</parse>
<parse_done nodes='741' live='712' memory='200200' stamp='119.425'/>
</parse>
<bc code='182' bci='8'/>
<call method='876' count='23156' prof_factor='1' virtual='1' inline='1' receiver='886' receiver_count='23156'/>
<call method='876' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='8' klass='886'/>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='8' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='876' uses='32398' stamp='119.426'>
<parse_done nodes='787' live='755' memory='212168' stamp='119.426'/>
</parse>
<parse_done nodes='807' live='774' memory='215888' stamp='119.426'/>
</parse>
<bc code='191' bci='46'/>
<uncommon_trap bci='46' reason='null_check' action='maybe_recompile'/>
<klass id='872' name='java/io/InterruptedIOException' unloaded='1'/>
<uncommon_trap bci='50' reason='unloaded' action='reinterpret' klass='872' comment='!loaded exception'/>
<uncommon_trap bci='61' reason='unloaded' action='reinterpret' klass='873' comment='!loaded exception'/>
<parse_done nodes='887' live='849' memory='233640' stamp='119.426'/>
</parse>
<bc code='182' bci='127'/>
<method id='854' holder='822' name='clear' return='822' flags='17' bytes='20' compile_id='61' compiler='C1' level='2' iicount='51233'/>
<call method='854' count='50721' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='854' uses='56830' stamp='119.426'>
<uncommon_trap bci='127' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='929' live='889' memory='242008' stamp='119.427'/>
</parse>
<parse_done nodes='933' live='892' memory='243416' stamp='119.427'/>
</parse>
<phase_done name='parse' nodes='935' live='506' stamp='119.427'/>
</phase>
<phase name='optimizer' nodes='935' live='506' stamp='119.427'>
<phase name='idealLoop' nodes='963' live='476' stamp='119.429'>
<phase_done name='idealLoop' nodes='963' live='476' stamp='119.430'/>
</phase>
<phase name='escapeAnalysis' nodes='963' live='476' stamp='119.430'>
<phase name='connectionGraph' nodes='964' live='477' stamp='119.430'>
<phase_done name='connectionGraph' nodes='964' live='477' stamp='119.431'/>
</phase>
<phase_done name='escapeAnalysis' nodes='964' live='477' stamp='119.431'/>
</phase>
<phase name='idealLoop' nodes='964' live='477' stamp='119.431'>
<phase_done name='idealLoop' nodes='994' live='480' stamp='119.432'/>
</phase>
<phase name='idealLoop' nodes='994' live='480' stamp='119.432'>
<phase_done name='idealLoop' nodes='994' live='480' stamp='119.432'/>
</phase>
<phase name='ccp' nodes='994' live='480' stamp='119.434'>
<phase_done name='ccp' nodes='994' live='480' stamp='119.434'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='100' class_id='lock' kind='?' stamp='119.436'>
<jvms bci='4' method='871'/>
<jvms bci='120' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='100' class_id='lock' kind='?' stamp='119.436'>
<jvms bci='4' method='871'/>
<jvms bci='120' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='100' class_id='lock' kind='?' stamp='119.436'>
<jvms bci='-1' method='880'/>
<jvms bci='16' method='871'/>
<jvms bci='120' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='100' class_id='lock' kind='?' stamp='119.436'>
<jvms bci='-1' method='880'/>
<jvms bci='16' method='871'/>
<jvms bci='120' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='100' class_id='lock' kind='?' stamp='119.436'>
<jvms bci='-1' method='884'/>
<jvms bci='30' method='871'/>
<jvms bci='120' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='100' class_id='lock' kind='?' stamp='119.436'>
<jvms bci='-1' method='884'/>
<jvms bci='30' method='871'/>
<jvms bci='120' method='847'/>
</eliminate_lock_INLR_3>
<phase_done name='optimizer' nodes='1348' live='752' stamp='119.438'/>
</phase>
<phase name='matcher' nodes='1348' live='752' stamp='119.438'>
<phase_done name='matcher' nodes='718' live='718' stamp='119.441'/>
</phase>
<phase name='regalloc' nodes='945' live='937' stamp='119.445'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='1304' live='1198' stamp='119.467'/>
</phase>
<phase name='output' nodes='1312' live='1206' stamp='119.468'>
<phase_done name='output' nodes='1351' live='1237' stamp='119.472'/>
</phase>
<code_cache total_blobs='582' nmethods='74' adapters='427' free_code_cache='249160768'/>
<task_done success='1' nmsize='3592' count='56830' inlined_bytes='406' stamp='119.554'/>
</task>
<task compile_id='102' method='java/lang/String &lt;init&gt; ([CZ)V' bytes='10' count='33706' iicount='33706' stamp='119.554'>
<phase name='parse' nodes='3' live='3' stamp='119.554'>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<type id='729' name='boolean'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='&lt;init&gt;' return='737' arguments='835 729' flags='0' bytes='10' compile_id='63' compiler='C1' level='2' iicount='33706'/>
<parse method='846' uses='33706' stamp='119.555'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='848' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='848' count='28644' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='848' uses='33706' stamp='119.555'>
<parse_done nodes='51' live='50' memory='28600' stamp='119.555'/>
</parse>
<parse_done nodes='69' live='67' memory='33200' stamp='119.555'/>
</parse>
<phase_done name='parse' nodes='70' live='31' stamp='119.555'/>
</phase>
<phase name='optimizer' nodes='70' live='31' stamp='119.555'>
<phase name='ccp' nodes='70' live='26' stamp='119.555'>
<phase_done name='ccp' nodes='70' live='26' stamp='119.555'/>
</phase>
<phase name='idealLoop' nodes='70' live='26' stamp='119.555'>
<phase_done name='idealLoop' nodes='70' live='26' stamp='119.555'/>
</phase>
<phase_done name='optimizer' nodes='70' live='26' stamp='119.555'/>
</phase>
<phase name='matcher' nodes='70' live='26' stamp='119.555'>
<phase_done name='matcher' nodes='25' live='25' stamp='119.556'/>
</phase>
<phase name='regalloc' nodes='27' live='27' stamp='119.556'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='27' live='27' stamp='119.556'/>
</phase>
<phase name='output' nodes='27' live='27' stamp='119.556'>
<phase_done name='output' nodes='34' live='34' stamp='119.556'/>
</phase>
<code_cache total_blobs='585' nmethods='76' adapters='427' free_code_cache='249139840'/>
<task_done success='1' nmsize='248' count='33707' inlined_bytes='1' stamp='119.643'/>
</task>
<task compile_id='101' method='java/lang/String indexOf (I)I' bytes='7' count='35415' iicount='35415' stamp='119.643'>
<phase name='parse' nodes='3' live='3' stamp='119.643'>
<type id='735' name='int'/>
<klass id='743' name='java/lang/String' flags='17'/>
<method id='846' holder='743' name='indexOf' return='735' arguments='735' flags='1' bytes='7' compile_id='62' compiler='C1' level='2' iicount='35415'/>
<parse method='846' uses='35415' stamp='119.643'>
<bc code='182' bci='3'/>
<method id='848' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' compile_id='77' compiler='C2' level='4' iicount='5832'/>
<call method='848' count='28471' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='848' uses='35415' stamp='119.644'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='156' bci='7'/>
<branch target_bci='15' taken='5684' not_taken='0' cnt='5684' prob='always'/>
<bc code='161' bci='17'/>
<branch target_bci='22' taken='5680' not_taken='4' cnt='5684' prob='0.999296'/>
<bc code='162' bci='25'/>
<branch target_bci='63' taken='0' not_taken='5680' cnt='5680' prob='never'/>
<uncommon_trap bci='25' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5678' not_taken='10813' cnt='16491' prob='0.344309'/>
<uncommon_trap bci='43' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='43' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='47'/>
<uncommon_trap bci='47' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='47' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='160' bci='49'/>
<branch target_bci='55' taken='10811' not_taken='2' cnt='10813' prob='0.999815'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5678' not_taken='10813' cnt='10811' prob='0.344309'/>
<parse_done nodes='194' live='185' memory='59728' stamp='119.645'/>
</parse>
<parse_done nodes='194' live='184' memory='59856' stamp='119.645'/>
</parse>
<phase_done name='parse' nodes='195' live='120' stamp='119.645'/>
</phase>
<phase name='optimizer' nodes='195' live='120' stamp='119.645'>
<phase name='idealLoop' nodes='196' live='106' stamp='119.645'>
<loop_tree>
<loop idx='202' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='203' live='96' stamp='119.645'/>
</phase>
<phase name='idealLoop' nodes='203' live='96' stamp='119.645'>
<loop_tree>
<loop idx='202' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='222' live='102' stamp='119.646'/>
</phase>
<phase name='idealLoop' nodes='222' live='102' stamp='119.646'>
<loop_tree>
<loop idx='202' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='222' live='100' stamp='119.646'/>
</phase>
<phase name='ccp' nodes='222' live='100' stamp='119.647'>
<phase_done name='ccp' nodes='222' live='100' stamp='119.647'/>
</phase>
<phase name='idealLoop' nodes='222' live='100' stamp='119.647'>
<loop_tree>
<loop idx='202' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='222' live='87' stamp='119.647'/>
</phase>
<phase name='idealLoop' nodes='222' live='87' stamp='119.647'>
<loop_tree>
<loop idx='202' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='222' live='87' stamp='119.647'/>
</phase>
<phase_done name='optimizer' nodes='225' live='86' stamp='119.647'/>
</phase>
<phase name='matcher' nodes='225' live='86' stamp='119.647'>
<phase_done name='matcher' nodes='75' live='75' stamp='119.648'/>
</phase>
<phase name='regalloc' nodes='102' live='101' stamp='119.648'>
<regalloc attempts='0' success='1'/>
<phase_done name='regalloc' nodes='111' live='109' stamp='119.649'/>
</phase>
<phase name='output' nodes='111' live='109' stamp='119.649'>
<phase_done name='output' nodes='128' live='119' stamp='119.650'/>
</phase>
<code_cache total_blobs='584' nmethods='77' adapters='427' free_code_cache='249154688'/>
<task_done success='1' nmsize='248' count='36440' inlined_bytes='70' stamp='119.659'/>
</task>
<task compile_id='104' method='java/lang/Integer toString (I)Ljava/lang/String;' bytes='48' count='36922' iicount='36922' stamp='119.808'>
<phase name='parse' nodes='3' live='3' stamp='119.809'>
<klass id='743' name='java/lang/String' flags='17'/>
<type id='735' name='int'/>
<klass id='830' name='java/lang/Integer' flags='17'/>
<method id='846' holder='830' name='toString' return='743' arguments='735' flags='9' bytes='48' compile_id='67' compiler='C1' level='2' iicount='36922'/>
<parse method='846' uses='36922' stamp='119.809'>
<bc code='160' bci='3'/>
<branch target_bci='9' taken='36922' not_taken='0' cnt='36922' prob='always'/>
<uncommon_trap bci='3' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='156' bci='10'/>
<branch target_bci='23' taken='36922' not_taken='0' cnt='36922' prob='always'/>
<uncommon_trap bci='10' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='24'/>
<method id='848' holder='830' name='stringSize' return='735' arguments='735' flags='8' bytes='21' compile_id='78' compiler='C2' level='4' iicount='7289'/>
<call method='848' count='33169' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='848' uses='36922' stamp='119.809'>
<bc code='46' bci='7'/>
<observe that='!need_range_check'/>
<bc code='163' bci='8'/>
<branch target_bci='15' taken='3644' not_taken='7289' cnt='10933' prob='0.333303'/>
<uncommon_trap bci='15' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='15' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='46' bci='7'/>
<uncommon_trap bci='7' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='163' bci='8'/>
<branch target_bci='15' taken='3644' not_taken='7289' cnt='3644' prob='0.333303'/>
<parse_done nodes='148' live='142' memory='50936' stamp='119.810'/>
</parse>
<bc code='184' bci='35'/>
<type id='737' name='void'/>
<klass id='835' name='[C' flags='1041'/>
<method id='849' holder='830' name='getChars' return='737' arguments='735 735 835' flags='8' bytes='131' compile_id='80' compiler='C2' level='4' iicount='8401'/>
<call method='849' count='33169' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='849' uses='36922' stamp='119.810'>
<bc code='156' bci='7'/>
<branch target_bci='17' taken='8401' not_taken='0' cnt='8401' prob='always'/>
<uncommon_trap bci='7' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='161' bci='20'/>
<branch target_bci='75' taken='8401' not_taken='0' cnt='8401' prob='always'/>
<uncommon_trap bci='20' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='52' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='85' bci='106'/>
<uncommon_trap bci='106' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='154' bci='110'/>
<branch target_bci='75' taken='4200' not_taken='8401' cnt='12601' prob='0.333307'/>
<uncommon_trap bci='75' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='75' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='105'/>
<uncommon_trap bci='105' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='85' bci='106'/>
<uncommon_trap bci='106' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='154' bci='110'/>
<branch target_bci='75' taken='4200' not_taken='8401' cnt='12601' prob='0.333307'/>
<bc code='153' bci='118'/>
<branch target_bci='130' taken='8401' not_taken='0' cnt='8401' prob='always'/>
<parse_done nodes='408' live='393' memory='110040' stamp='119.834'/>
</parse>
<bc code='183' bci='44'/>
<type id='729' name='boolean'/>
<method id='850' holder='743' name='&lt;init&gt;' return='737' arguments='835 729' flags='0' bytes='10' compile_id='102' compiler='C2' level='4' iicount='33707'/>
<call method='850' count='33169' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='850' uses='36922' stamp='119.835'>
<bc code='183' bci='1'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<method id='859' holder='742' name='&lt;init&gt;' return='737' flags='1' bytes='1' compile_id='9' compiler='C1' level='1' iicount='1568'/>
<call method='859' count='28644' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='859' uses='33707' stamp='119.835'>
<parse_done nodes='476' live='460' memory='124520' stamp='119.835'/>
</parse>
<parse_done nodes='495' live='478' memory='128968' stamp='119.835'/>
</parse>
<parse_done nodes='497' live='479' memory='129624' stamp='119.835'/>
</parse>
<phase_done name='parse' nodes='499' live='329' stamp='119.835'/>
</phase>
<phase name='optimizer' nodes='499' live='329' stamp='119.835'>
<phase name='idealLoop' nodes='503' live='296' stamp='119.836'>
<loop_tree>
<loop idx='503' inner_loop='1' >
</loop>
<loop idx='504' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='505' live='294' stamp='119.839'/>
</phase>
<phase name='escapeAnalysis' nodes='505' live='294' stamp='119.839'>
<phase name='connectionGraph' nodes='507' live='296' stamp='119.839'>
<phase_done name='connectionGraph' nodes='507' live='296' stamp='119.839'/>
</phase>
<phase_done name='escapeAnalysis' nodes='507' live='296' stamp='119.839'/>
</phase>
<phase name='idealLoop' nodes='507' live='296' stamp='119.839'>
<loop_tree>
<loop idx='503' inner_loop='1' >
</loop>
<loop idx='504' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='523' live='288' stamp='119.840'/>
</phase>
<phase name='idealLoop' nodes='523' live='288' stamp='119.840'>
<loop_tree>
<loop idx='503' inner_loop='1' >
</loop>
<loop idx='504' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='588' live='296' stamp='119.841'/>
</phase>
<phase name='idealLoop' nodes='588' live='296' stamp='119.841'>
<loop_tree>
<loop idx='593' >
</loop>
<loop idx='504' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='617' live='277' stamp='119.842'/>
</phase>
<phase name='ccp' nodes='617' live='277' stamp='119.844'>
<phase_done name='ccp' nodes='617' live='277' stamp='119.844'/>
</phase>
<phase name='idealLoop' nodes='617' live='277' stamp='119.844'>
<loop_tree>
<loop idx='661' inner_loop='1' >
</loop>
<loop idx='504' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='793' live='348' stamp='119.849'/>
</phase>
<phase name='idealLoop' nodes='793' live='348' stamp='119.849'>
<loop_tree>
<loop idx='827' inner_loop='1' >
</loop>
<loop idx='801' main_loop='801' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='1031' live='481' stamp='119.852'/>
</phase>
<phase name='idealLoop' nodes='1031' live='481' stamp='119.852'>
<loop_tree>
<loop idx='1081' inner_loop='1' >
</loop>
<loop idx='946' inner_loop='1' pre_loop='801' >
</loop>
<loop idx='801' inner_loop='1' main_loop='801' >
</loop>
<loop idx='879' inner_loop='1' post_loop='801' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='1126' live='509' stamp='119.858'/>
</phase>
<phase name='idealLoop' nodes='1126' live='509' stamp='119.858'>
<loop_tree>
<loop idx='946' inner_loop='1' pre_loop='801' >
</loop>
<loop idx='801' inner_loop='1' main_loop='801' >
</loop>
<loop idx='879' inner_loop='1' post_loop='801' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='1126' live='506' stamp='119.861'/>
</phase>
<phase_done name='optimizer' nodes='1276' live='597' stamp='119.868'/>
</phase>
<phase name='matcher' nodes='1276' live='597' stamp='119.868'>
<phase_done name='matcher' nodes='535' live='535' stamp='119.870'/>
</phase>
<phase name='regalloc' nodes='669' live='669' stamp='119.873'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='857' live='757' stamp='119.887'/>
</phase>
<phase name='output' nodes='859' live='759' stamp='119.887'>
<phase_done name='output' nodes='895' live='773' stamp='119.952'/>
</phase>
<code_cache total_blobs='588' nmethods='81' adapters='427' free_code_cache='249137536'/>
<task_done success='1' nmsize='1688' count='46053' inlined_bytes='163' stamp='119.990'/>
</task>
<task compile_id='105' method='java/io/PrintStream newLine ()V' bytes='73' count='46415' iicount='46415' stamp='119.990'>
<phase name='parse' nodes='3' live='3' stamp='120.011'>
<type id='737' name='void'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='newLine' return='737' flags='2' bytes='73' compile_id='71' compiler='C1' level='2' iicount='48004'/>
<parse method='847' uses='48004' stamp='120.011'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='5'/>
<method id='854' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='854' count='36410' prof_factor='1' inline='1'/>
<klass id='853' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='854' bci='7' reason='unloaded' action='reinterpret' index='32' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='854' uses='48004' stamp='120.012'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='60' live='58' memory='31504' stamp='120.012'/>
</parse>
<bc code='182' bci='12'/>
<klass id='849' name='java/io/BufferedWriter' flags='1'/>
<method id='855' holder='849' name='newLine' return='737' flags='1' bytes='9' compile_id='72' compiler='C1' level='2' iicount='36922'/>
<dependency type='unique_concrete_method' ctxk='849' x='855'/>
<call method='855' count='36410' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='855' uses='48004' stamp='120.012'>
<uncommon_trap bci='12' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='5'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='862' name='java/io/Writer' flags='1025'/>
<method id='863' holder='862' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='90' compiler='C2' level='4' iicount='33452'/>
<dependency type='unique_concrete_method' ctxk='849' x='863'/>
<call method='863' count='36410' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='863' uses='36922' stamp='120.038'>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='865' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='865' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='865' uses='33452' stamp='120.038'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='142' live='136' memory='51472' stamp='120.038'/>
</parse>
<bc code='182' bci='7'/>
<method id='869' holder='849' name='write' return='737' arguments='743 735 735' flags='1' bytes='117' compile_id='79' compiler='C2' level='4' iicount='16126'/>
<dependency type='unique_concrete_method' ctxk='849' x='869'/>
<call method='869' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='869' uses='33452' stamp='120.039'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='870' holder='849' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='86' compiler='C2' level='4' iicount='32333'/>
<call method='870' count='9621' prof_factor='1' inline='1'/>
<uncommon_trap method='870' bci='7' reason='unloaded' action='reinterpret' index='17' klass='853'/>
<inline_success reason='inline (hot)'/>
<parse method='870' uses='16124' stamp='120.039'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='32333' not_taken='0' cnt='32333' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='205' live='196' memory='65912' stamp='120.039'/>
</parse>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='32248' prob='0.5'/>
<uncommon_trap bci='27' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='27' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='183' bci='42'/>
<method id='871' holder='849' name='min' return='735' arguments='735 735' flags='2' bytes='9' iicount='10133'/>
<call method='871' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='871' uses='16124' stamp='120.040'>
<bc code='162' bci='2'/>
<branch target_bci='7' taken='10133' not_taken='0' cnt='10133' prob='always'/>
<uncommon_trap bci='2' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='287' live='274' memory='90704' stamp='120.040'/>
</parse>
<bc code='182' bci='63'/>
<klass id='835' name='[C' flags='1041'/>
<method id='872' holder='743' name='getChars' return='737' arguments='735 735 835 735' flags='1' bytes='62' iicount='16291'/>
<call method='872' count='9621' prof_factor='1' inline='1'/>
<klass id='877' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='872' bci='36' reason='unloaded' action='reinterpret' index='6' klass='877'/>
<uncommon_trap method='872' bci='22' reason='unloaded' action='reinterpret' index='6' klass='877'/>
<uncommon_trap method='872' bci='4' reason='unloaded' action='reinterpret' index='6' klass='877'/>
<inline_success reason='inline (hot)'/>
<parse method='872' uses='16124' stamp='120.040'>
<bc code='156' bci='1'/>
<branch target_bci='13' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='164' bci='19'/>
<branch target_bci='31' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='33'/>
<branch target_bci='47' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='58'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='876' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='876' count='15779' prof_factor='0.989749' inline='1'/>
<uncommon_trap bci='58' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='459' live='440' memory='129672' stamp='120.041'/>
</parse>
<bc code='161' bci='92'/>
<branch target_bci='99' taken='16124' not_taken='0' cnt='16124' prob='always'/>
<uncommon_trap bci='92' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='16124' prob='0.5'/>
<bc code='191' bci='115'/>
<uncommon_trap bci='115' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='545' live='523' memory='162176' stamp='120.042'/>
</parse>
<parse_done nodes='548' live='525' memory='163168' stamp='120.042'/>
</parse>
<parse_done nodes='551' live='527' memory='164264' stamp='120.042'/>
</parse>
<bc code='182' bci='19'/>
<method id='856' holder='849' name='flushBuffer' return='737' flags='0' bytes='53' compile_id='93' compiler='C2' level='4' iicount='43432'/>
<dependency type='unique_concrete_method' ctxk='849' x='856'/>
<call method='856' count='36410' prof_factor='1' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='19'/>
<uncommon_trap bci='19' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='26'/>
<klass id='850' name='java/io/OutputStreamWriter' flags='1'/>
<method id='857' holder='850' name='flushBuffer' return='737' flags='0' bytes='8' compile_id='97' compiler='C2' level='4' iicount='56830'/>
<dependency type='unique_concrete_method' ctxk='850' x='857'/>
<call method='857' count='36410' prof_factor='1' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='26'/>
<uncommon_trap bci='26' reason='null_check' action='maybe_recompile'/>
<bc code='153' bci='33'/>
<branch target_bci='43' taken='0' not_taken='48004' cnt='48004' prob='never'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='40'/>
<klass id='851' name='java/io/BufferedOutputStream' flags='1'/>
<klass id='858' name='java/io/OutputStream' flags='1025'/>
<method id='860' holder='858' name='flush' return='737' flags='1' bytes='1' compile_id='84' compiler='C1' level='1' iicount='28771'/>
<call method='860' count='36410' prof_factor='1' virtual='1' inline='1' receiver='851' receiver_count='36410'/>
<method id='882' holder='851' name='flush' return='737' flags='33' bytes='12' compile_id='83' compiler='C2' level='4' iicount='32398'/>
<call method='882' count='36410' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='40' klass='851'/>
<uncommon_trap bci='40' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='40' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='882' uses='48004' stamp='120.044'>
<bc code='183' bci='1'/>
<method id='883' holder='851' name='flushBuffer' return='737' flags='2' bytes='29' iicount='23668'/>
<call method='883' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='883' uses='32398' stamp='120.044'>
<bc code='158' bci='4'/>
<branch target_bci='28' taken='7890' not_taken='15778' cnt='23668' prob='0.333362'/>
<bc code='182' bci='20'/>
<klass id='885' name='java/io/FileOutputStream' flags='1'/>
<klass id='838' name='[B' flags='1041'/>
<method id='886' holder='858' name='write' return='737' arguments='838 735 735' flags='1' bytes='79' iicount='1'/>
<call method='886' count='15437' prof_factor='1' virtual='1' inline='1' receiver='885' receiver_count='15437'/>
<method id='888' holder='885' name='write' return='737' arguments='838 735 735' flags='1' bytes='12' iicount='21599'/>
<call method='888' count='15437' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='20' klass='885'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='20' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='888' uses='15778' stamp='120.079'>
<bc code='183' bci='8'/>
<type id='729' name='boolean'/>
<method id='889' holder='885' name='writeBytes' return='737' arguments='838 735 735 729' flags='258' bytes='0' compile_id='60' compile_kind='c2n' level='0' iicount='1920'/>
<call method='889' count='21087' prof_factor='0.730497' inline='1'/>
<inline_fail reason='native method'/>
<direct_call bci='8'/>
<parse_done nodes='776' live='744' memory='212592' stamp='120.079'/>
</parse>
<parse_done nodes='785' live='752' memory='216008' stamp='120.079'/>
</parse>
<bc code='182' bci='8'/>
<call method='860' count='23156' prof_factor='1' virtual='1' inline='1' receiver='885' receiver_count='23156'/>
<call method='860' count='23156' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<predicted_call bci='8' klass='885'/>
<uncommon_trap bci='8' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='8' reason='class_check' action='maybe_recompile' comment='monomorphic vcall checkcast'/>
<parse method='860' uses='32398' stamp='120.080'>
<parse_done nodes='831' live='795' memory='226760' stamp='120.080'/>
</parse>
<parse_done nodes='851' live='814' memory='230400' stamp='120.080'/>
</parse>
<bc code='191' bci='52'/>
<uncommon_trap bci='52' reason='null_check' action='maybe_recompile'/>
<klass id='852' name='java/io/InterruptedIOException' unloaded='1'/>
<uncommon_trap bci='56' reason='unloaded' action='reinterpret' klass='852' comment='!loaded exception'/>
<uncommon_trap bci='66' reason='unloaded' action='reinterpret' klass='853' comment='!loaded exception'/>
<parse_done nodes='927' live='885' memory='245616' stamp='120.080'/>
</parse>
<phase_done name='parse' nodes='929' live='554' stamp='120.081'/>
</phase>
<phase name='optimizer' nodes='929' live='554' stamp='120.081'>
<phase name='idealLoop' nodes='947' live='476' stamp='120.088'>
<phase_done name='idealLoop' nodes='947' live='458' stamp='120.090'/>
</phase>
<phase name='escapeAnalysis' nodes='947' live='458' stamp='120.090'>
<phase name='connectionGraph' nodes='948' live='459' stamp='120.090'>
<phase_done name='connectionGraph' nodes='948' live='459' stamp='120.091'/>
</phase>
<phase_done name='escapeAnalysis' nodes='948' live='459' stamp='120.091'/>
</phase>
<phase name='idealLoop' nodes='948' live='459' stamp='120.091'>
<phase_done name='idealLoop' nodes='978' live='465' stamp='120.092'/>
</phase>
<phase name='idealLoop' nodes='978' live='465' stamp='120.092'>
<phase_done name='idealLoop' nodes='978' live='465' stamp='120.093'/>
</phase>
<phase name='ccp' nodes='978' live='465' stamp='120.096'>
<phase_done name='ccp' nodes='978' live='465' stamp='120.097'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='105' class_id='lock' kind='?' stamp='120.101'>
<jvms bci='3' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='105' class_id='lock' kind='?' stamp='120.101'>
<jvms bci='3' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='105' class_id='lock' kind='?' stamp='120.101'>
<jvms bci='7' method='869'/>
<jvms bci='7' method='863'/>
<jvms bci='5' method='855'/>
<jvms bci='12' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='105' class_id='lock' kind='?' stamp='120.101'>
<jvms bci='7' method='869'/>
<jvms bci='7' method='863'/>
<jvms bci='5' method='855'/>
<jvms bci='12' method='847'/>
</eliminate_lock_INLR_3>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='105' class_id='lock' kind='?' stamp='120.101'>
<jvms bci='-1' method='882'/>
<jvms bci='40' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='105' class_id='lock' kind='?' stamp='120.101'>
<jvms bci='-1' method='882'/>
<jvms bci='40' method='847'/>
</eliminate_lock_INLR_3>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='optimizer' nodes='1336' live='741' stamp='120.103'/>
</phase>
<phase name='matcher' nodes='1336' live='741' stamp='120.103'>
<phase_done name='matcher' nodes='729' live='729' stamp='120.106'/>
</phase>
<phase name='regalloc' nodes='962' live='954' stamp='120.111'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='1343' live='1197' stamp='120.147'/>
</phase>
<phase name='output' nodes='1349' live='1203' stamp='120.147'>
<phase_done name='output' nodes='1388' live='1231' stamp='120.154'/>
</phase>
<dependency type='leaf_type' ctxk='846'/>
<dependency type='unique_concrete_method' ctxk='849' x='855'/>
<dependency type='unique_concrete_method' ctxk='849' x='863'/>
<dependency type='unique_concrete_method' ctxk='849' x='869'/>
<dependency type='unique_concrete_method' ctxk='849' x='856'/>
<dependency type='unique_concrete_method' ctxk='850' x='857'/>
<code_cache total_blobs='595' nmethods='88' adapters='427' free_code_cache='249119232'/>
<task_done success='1' nmsize='3592' count='65650' inlined_bytes='360' stamp='120.315'/>
</task>
<task compile_id='106' method='java/io/PrintStream write (Ljava/lang/String;)V' bytes='83' count='65651' iicount='65651' stamp='120.316'>
<phase name='parse' nodes='3' live='3' stamp='120.316'>
<type id='737' name='void'/>
<klass id='743' name='java/lang/String' flags='17'/>
<klass id='846' name='java/io/PrintStream' flags='1'/>
<method id='847' holder='846' name='write' return='737' arguments='743' flags='2' bytes='83' compile_id='70' compiler='C1' level='2' iicount='65651'/>
<parse method='847' uses='65651' stamp='120.317'>
<observe that='has_exception_handlers'/>
<bc code='183' bci='5'/>
<method id='853' holder='846' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='82' compiler='C2' level='4' iicount='35995'/>
<call method='853' count='44005' prof_factor='1' inline='1'/>
<klass id='852' name='java/io/IOException' unloaded='1'/>
<uncommon_trap method='853' bci='7' reason='unloaded' action='reinterpret' index='32' klass='852'/>
<inline_success reason='inline (hot)'/>
<parse method='853' uses='65651' stamp='120.317'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='35995' not_taken='0' cnt='35995' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='61' live='59' memory='31768' stamp='120.318'/>
</parse>
<bc code='182' bci='13'/>
<klass id='849' name='java/io/BufferedWriter' flags='1'/>
<klass id='854' name='java/io/Writer' flags='1025'/>
<method id='855' holder='854' name='write' return='737' arguments='743' flags='1' bytes='11' compile_id='90' compiler='C2' level='4' iicount='33452'/>
<dependency type='unique_concrete_method' ctxk='849' x='855'/>
<call method='855' count='44005' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='855' uses='65651' stamp='120.327'>
<uncommon_trap bci='13' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='4'/>
<type id='735' name='int'/>
<method id='863' holder='743' name='length' return='735' flags='1' bytes='6' compile_id='29' compiler='C1' level='1' iicount='1381'/>
<call method='863' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='863' uses='33452' stamp='120.328'>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='130' live='124' memory='49528' stamp='120.329'/>
</parse>
<bc code='182' bci='7'/>
<method id='867' holder='849' name='write' return='737' arguments='743 735 735' flags='1' bytes='117' compile_id='79' compiler='C2' level='4' iicount='16126'/>
<dependency type='unique_concrete_method' ctxk='849' x='867'/>
<call method='867' count='29869' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='867' uses='33452' stamp='120.329'>
<observe that='has_exception_handlers'/>
<bc code='194' bci='7'/>
<uncommon_trap bci='7' reason='null_check' action='maybe_recompile'/>
<bc code='183' bci='9'/>
<method id='868' holder='849' name='ensureOpen' return='737' flags='2' bytes='18' compile_id='86' compiler='C2' level='4' iicount='32333'/>
<call method='868' count='9621' prof_factor='1' inline='1'/>
<uncommon_trap method='868' bci='7' reason='unloaded' action='reinterpret' index='17' klass='852'/>
<inline_success reason='inline (hot)'/>
<parse method='868' uses='16124' stamp='120.330'>
<bc code='199' bci='4'/>
<branch target_bci='17' taken='32333' not_taken='0' cnt='32333' prob='always'/>
<uncommon_trap bci='4' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='193' live='184' memory='63840' stamp='120.330'/>
</parse>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='32248' prob='0.5'/>
<uncommon_trap bci='27' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='27' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='183' bci='42'/>
<method id='869' holder='849' name='min' return='735' arguments='735 735' flags='2' bytes='9' iicount='10133'/>
<call method='869' count='9621' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='869' uses='16124' stamp='120.332'>
<bc code='162' bci='2'/>
<branch target_bci='7' taken='10133' not_taken='0' cnt='10133' prob='always'/>
<uncommon_trap bci='2' reason='unstable_if' action='reinterpret' comment='taken always'/>
<parse_done nodes='275' live='262' memory='88120' stamp='120.333'/>
</parse>
<bc code='182' bci='63'/>
<klass id='835' name='[C' flags='1041'/>
<method id='870' holder='743' name='getChars' return='737' arguments='735 735 835 735' flags='1' bytes='62' iicount='16291'/>
<call method='870' count='9621' prof_factor='1' inline='1'/>
<klass id='875' name='java/lang/StringIndexOutOfBoundsException' unloaded='1'/>
<uncommon_trap method='870' bci='36' reason='unloaded' action='reinterpret' index='6' klass='875'/>
<uncommon_trap method='870' bci='22' reason='unloaded' action='reinterpret' index='6' klass='875'/>
<uncommon_trap method='870' bci='4' reason='unloaded' action='reinterpret' index='6' klass='875'/>
<inline_success reason='inline (hot)'/>
<parse method='870' uses='16124' stamp='120.336'>
<bc code='156' bci='1'/>
<branch target_bci='13' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='1' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='190' bci='18'/>
<uncommon_trap bci='18' reason='null_check' action='maybe_recompile'/>
<bc code='164' bci='19'/>
<branch target_bci='31' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='19' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='164' bci='33'/>
<branch target_bci='47' taken='16291' not_taken='0' cnt='16291' prob='always'/>
<uncommon_trap bci='33' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='184' bci='58'/>
<klass id='742' name='java/lang/Object' flags='1'/>
<klass id='748' name='java/lang/System' flags='17'/>
<method id='874' holder='748' name='arraycopy' return='737' arguments='742 735 742 735 735' flags='265' bytes='0' compile_id='3' compile_kind='c2n' level='0' iicount='256'/>
<call method='874' count='15779' prof_factor='0.989749' inline='1'/>
<uncommon_trap bci='58' reason='null_check' action='maybe_recompile'/>
<intrinsic id='_arraycopy' nodes='93'/>
<parse_done nodes='447' live='428' memory='128040' stamp='120.558'/>
</parse>
<bc code='161' bci='92'/>
<branch target_bci='99' taken='16124' not_taken='0' cnt='16124' prob='always'/>
<uncommon_trap bci='92' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='162' bci='24'/>
<branch target_bci='102' taken='16124' not_taken='16124' cnt='16124' prob='0.5'/>
<bc code='191' bci='115'/>
<uncommon_trap bci='115' reason='null_check' action='maybe_recompile'/>
<parse_done nodes='533' live='511' memory='160488' stamp='120.559'/>
</parse>
<parse_done nodes='536' live='513' memory='161456' stamp='120.559'/>
</parse>
<bc code='182' bci='20'/>
<method id='856' holder='849' name='flushBuffer' return='737' flags='0' bytes='53' compile_id='93' compiler='C2' level='4' iicount='43432'/>
<dependency type='unique_concrete_method' ctxk='849' x='856'/>
<call method='856' count='44005' prof_factor='1' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='20'/>
<uncommon_trap bci='20' reason='null_check' action='maybe_recompile'/>
<bc code='182' bci='27'/>
<klass id='850' name='java/io/OutputStreamWriter' flags='1'/>
<method id='857' holder='850' name='flushBuffer' return='737' flags='0' bytes='8' compile_id='97' compiler='C2' level='4' iicount='56830'/>
<dependency type='unique_concrete_method' ctxk='850' x='857'/>
<call method='857' count='44005' prof_factor='1' inline='1'/>
<inline_fail reason='already compiled into a big method'/>
<direct_call bci='27'/>
<uncommon_trap bci='27' reason='null_check' action='maybe_recompile'/>
<bc code='153' bci='34'/>
<branch target_bci='53' taken='0' not_taken='65651' cnt='65651' prob='never'/>
<uncommon_trap bci='34' reason='unstable_if' action='reinterpret' comment='taken never'/>
<bc code='182' bci='40'/>
<method id='858' holder='743' name='indexOf' return='735' arguments='735' flags='1' bytes='7' compile_id='101' compiler='C2' level='4' iicount='36440'/>
<call method='858' count='44005' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='858' uses='65651' stamp='120.570'>
<bc code='182' bci='3'/>
<method id='880' holder='743' name='indexOf' return='735' arguments='735 735' flags='1' bytes='70' compile_id='77' compiler='C2' level='4' iicount='5832'/>
<call method='880' count='28472' prof_factor='1' inline='1'/>
<inline_success reason='inline (hot)'/>
<parse method='880' uses='36440' stamp='120.571'>
<bc code='190' bci='4'/>
<uncommon_trap bci='4' reason='null_check' action='maybe_recompile'/>
<bc code='156' bci='7'/>
<branch target_bci='15' taken='5684' not_taken='0' cnt='5684' prob='always'/>
<bc code='161' bci='17'/>
<branch target_bci='22' taken='5680' not_taken='4' cnt='5684' prob='0.999296'/>
<bc code='162' bci='25'/>
<branch target_bci='63' taken='0' not_taken='5680' cnt='5680' prob='never'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5678' not_taken='10813' cnt='16491' prob='0.344309'/>
<uncommon_trap bci='43' reason='predicate' action='maybe_recompile'/>
<uncommon_trap bci='43' reason='loop_limit_check' action='maybe_recompile'/>
<bc code='52' bci='47'/>
<uncommon_trap bci='47' reason='null_check' action='maybe_recompile'/>
<uncommon_trap bci='47' reason='range_check' action='make_not_entrant' comment='range_check'/>
<bc code='160' bci='49'/>
<branch target_bci='55' taken='10811' not_taken='2' cnt='10813' prob='0.999815'/>
<bc code='162' bci='40'/>
<branch target_bci='61' taken='5678' not_taken='10813' cnt='10811' prob='0.344309'/>
<parse_done nodes='793' live='759' memory='214400' stamp='120.572'/>
</parse>
<parse_done nodes='793' live='758' memory='214528' stamp='120.572'/>
</parse>
<bc code='155' bci='43'/>
<branch target_bci='53' taken='65651' not_taken='0' cnt='65651' prob='always'/>
<uncommon_trap bci='43' reason='unstable_if' action='reinterpret' comment='taken always'/>
<bc code='191' bci='62'/>
<uncommon_trap bci='62' reason='null_check' action='maybe_recompile'/>
<klass id='851' name='java/io/InterruptedIOException' unloaded='1'/>
<uncommon_trap bci='66' reason='unloaded' action='reinterpret' klass='851' comment='!loaded exception'/>
<uncommon_trap bci='76' reason='unloaded' action='reinterpret' klass='852' comment='!loaded exception'/>
<parse_done nodes='877' live='836' memory='231424' stamp='120.572'/>
</parse>
<phase_done name='parse' nodes='879' live='527' stamp='120.572'/>
</phase>
<phase name='optimizer' nodes='879' live='527' stamp='120.572'>
<phase name='idealLoop' nodes='887' live='435' stamp='120.574'>
<loop_tree>
<loop idx='893' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='895' live='408' stamp='120.576'/>
</phase>
<phase name='escapeAnalysis' nodes='895' live='408' stamp='120.576'>
<phase name='connectionGraph' nodes='896' live='409' stamp='120.576'>
<phase_done name='connectionGraph' nodes='896' live='409' stamp='120.576'/>
</phase>
<phase_done name='escapeAnalysis' nodes='896' live='409' stamp='120.576'/>
</phase>
<phase name='idealLoop' nodes='896' live='409' stamp='120.576'>
<loop_tree>
<loop idx='893' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='918' live='405' stamp='120.577'/>
</phase>
<phase name='idealLoop' nodes='918' live='405' stamp='120.577'>
<loop_tree>
<loop idx='893' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='937' live='411' stamp='120.578'/>
</phase>
<phase name='idealLoop' nodes='937' live='411' stamp='120.578'>
<loop_tree>
<loop idx='893' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='937' live='409' stamp='120.579'/>
</phase>
<phase name='ccp' nodes='937' live='409' stamp='120.581'>
<phase_done name='ccp' nodes='937' live='409' stamp='120.582'/>
</phase>
<phase name='idealLoop' nodes='938' live='408' stamp='120.582'>
<loop_tree>
<loop idx='893' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='938' live='395' stamp='120.583'/>
</phase>
<phase name='idealLoop' nodes='938' live='395' stamp='120.583'>
<loop_tree>
<loop idx='893' inner_loop='1' >
</loop>
</loop_tree>
<phase_done name='idealLoop' nodes='938' live='395' stamp='120.584'/>
</phase>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='106' class_id='lock' kind='?' stamp='120.585'>
<jvms bci='3' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_1 lock='1' compile_id='106' class_id='lock' kind='?' stamp='120.585'>
<jvms bci='3' method='847'/>
</eliminate_lock_INLR_1>
<eliminate_lock_NOT_nested_lock_region lock='1' compile_id='106' class_id='lock' kind='?' stamp='120.585'>
<jvms bci='7' method='867'/>
<jvms bci='7' method='855'/>
<jvms bci='13' method='847'/>
</eliminate_lock_NOT_nested_lock_region>
<eliminate_lock_INLR_3 lock='1' compile_id='106' class_id='lock' kind='?' stamp='120.585'>
<jvms bci='7' method='867'/>
<jvms bci='7' method='855'/>
<jvms bci='13' method='847'/>
</eliminate_lock_INLR_3>
<dependency type='leaf_type' ctxk='846'/>
<phase_done name='optimizer' nodes='1182' live='587' stamp='120.586'/>
</phase>
<phase name='matcher' nodes='1182' live='587' stamp='120.586'>
<phase_done name='matcher' nodes='570' live='570' stamp='120.588'/>
</phase>
<phase name='regalloc' nodes='757' live='750' stamp='120.591'>
<regalloc attempts='1' success='1'/>
<phase_done name='regalloc' nodes='1092' live='948' stamp='120.616'/>
</phase>
<phase name='output' nodes='1096' live='952' stamp='120.617'>
<phase_done name='output' nodes='1135' live='980' stamp='120.620'/>
</phase>
<dependency type='leaf_type' ctxk='846'/>
<dependency type='unique_concrete_method' ctxk='849' x='855'/>
<dependency type='unique_concrete_method' ctxk='849' x='867'/>
<dependency type='unique_concrete_method' ctxk='849' x='856'/>
<dependency type='unique_concrete_method' ctxk='850' x='857'/>
<code_cache total_blobs='600' nmethods='93' adapters='427' free_code_cache='249094144'/>
<task_done success='1' nmsize='2584' count='74240' inlined_bytes='318' stamp='120.670'/>
</task>
</compilation_log>
<hotspot_log_done stamp='122.067'/>
</hotspot_log>
